
X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004038  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004218  08004218  00005218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c0  080042c0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080042c0  080042c0  000052c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042c8  080042c8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c8  080042c8  000052c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042cc  080042cc  000052cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080042d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000005c  0800432c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  0800432c  00006328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011690  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b1  00000000  00000000  0001771c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  000198d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c50  00000000  00000000  0001a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026465  00000000  00000000  0001b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127aa  00000000  00000000  0004193d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb863  00000000  00000000  000540e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f94a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f8  00000000  00000000  0014f990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00154188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004200 	.word	0x08004200

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004200 	.word	0x08004200

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fb8c 	bl	8000ce2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f84d 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f937 	bl	8000840 <MX_GPIO_Init>
  MX_TIM3_Init();
 80005d2:	f000 f895 	bl	8000700 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80005d6:	f000 f8e7 	bl	80007a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80005da:	213c      	movs	r1, #60	@ 0x3c
 80005dc:	481c      	ldr	r0, [pc, #112]	@ (8000650 <main+0x90>)
 80005de:	f001 ffad 	bl	800253c <HAL_TIM_Encoder_Start>
  uint8_t text[] = "HELLO FIBO";
 80005e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000654 <main+0x94>)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e8:	c303      	stmia	r3!, {r0, r1}
 80005ea:	801a      	strh	r2, [r3, #0]
 80005ec:	3302      	adds	r3, #2
 80005ee:	0c12      	lsrs	r2, r2, #16
 80005f0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,text, 101, 10);
 80005f2:	1d39      	adds	r1, r7, #4
 80005f4:	230a      	movs	r3, #10
 80005f6:	2265      	movs	r2, #101	@ 0x65
 80005f8:	4817      	ldr	r0, [pc, #92]	@ (8000658 <main+0x98>)
 80005fa:	f002 f9ed 	bl	80029d8 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <main+0x90>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800060c:	4b13      	ldr	r3, [pc, #76]	@ (800065c <main+0x9c>)
 800060e:	edc3 7a00 	vstr	s15, [r3]
	a = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000612:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000616:	4812      	ldr	r0, [pc, #72]	@ (8000660 <main+0xa0>)
 8000618:	f000 fe66 	bl	80012e8 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <main+0xa4>)
 8000622:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000624:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000628:	480d      	ldr	r0, [pc, #52]	@ (8000660 <main+0xa0>)
 800062a:	f000 fe5d 	bl	80012e8 <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d109      	bne.n	8000648 <main+0x88>
	{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	2101      	movs	r1, #1
 8000638:	4809      	ldr	r0, [pc, #36]	@ (8000660 <main+0xa0>)
 800063a:	f000 fe6d 	bl	8001318 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2102      	movs	r1, #2
 8000642:	4807      	ldr	r0, [pc, #28]	@ (8000660 <main+0xa0>)
 8000644:	f000 fe68 	bl	8001318 <HAL_GPIO_WritePin>
	}
	UARTPollingMethod();
 8000648:	f000 f98c 	bl	8000964 <UARTPollingMethod>
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 800064c:	e7d7      	b.n	80005fe <main+0x3e>
 800064e:	bf00      	nop
 8000650:	2000010c 	.word	0x2000010c
 8000654:	08004218 	.word	0x08004218
 8000658:	20000078 	.word	0x20000078
 800065c:	20000158 	.word	0x20000158
 8000660:	48000800 	.word	0x48000800
 8000664:	2000015c 	.word	0x2000015c

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	2238      	movs	r2, #56	@ 0x38
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 f942 	bl	8003900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800068a:	2000      	movs	r0, #0
 800068c:	f000 fe80 	bl	8001390 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	2340      	movs	r3, #64	@ 0x40
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006aa:	2355      	movs	r3, #85	@ 0x55
 80006ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 ff1a 	bl	80014f8 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ca:	f000 f99d 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2303      	movs	r3, #3
 80006d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2104      	movs	r1, #4
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fa18 	bl	8001b1c <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006f2:	f000 f989 	bl	8000a08 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	@ 0x30
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2224      	movs	r2, #36	@ 0x24
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f003 f8f6 	bl	8003900 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <MX_TIM3_Init+0xa0>)
 8000720:	4a20      	ldr	r2, [pc, #128]	@ (80007a4 <MX_TIM3_Init+0xa4>)
 8000722:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000724:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_TIM3_Init+0xa0>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072a:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_TIM3_Init+0xa0>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 47;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_TIM3_Init+0xa0>)
 8000732:	222f      	movs	r2, #47	@ 0x2f
 8000734:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_TIM3_Init+0xa0>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_TIM3_Init+0xa0>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000742:	2303      	movs	r3, #3
 8000744:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800075a:	2301      	movs	r3, #1
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <MX_TIM3_Init+0xa0>)
 800076e:	f001 fe3f 	bl	80023f0 <HAL_TIM_Encoder_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000778:	f000 f946 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_TIM3_Init+0xa0>)
 800078a:	f002 f83f 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000794:	f000 f938 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3730      	adds	r7, #48	@ 0x30
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000010c 	.word	0x2000010c
 80007a4:	40000400 	.word	0x40000400

080007a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ac:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 80007ae:	4a23      	ldr	r2, [pc, #140]	@ (800083c <MX_USART1_UART_Init+0x94>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b2:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007de:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e4:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f0:	4811      	ldr	r0, [pc, #68]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 80007f2:	f002 f8a1 	bl	8002938 <HAL_UART_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007fc:	f000 f904 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000800:	2100      	movs	r1, #0
 8000802:	480d      	ldr	r0, [pc, #52]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 8000804:	f002 ff92 	bl	800372c <HAL_UARTEx_SetTxFifoThreshold>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800080e:	f000 f8fb 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	4808      	ldr	r0, [pc, #32]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 8000816:	f002 ffc7 	bl	80037a8 <HAL_UARTEx_SetRxFifoThreshold>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000820:	f000 f8f2 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_USART1_UART_Init+0x90>)
 8000826:	f002 ff48 	bl	80036ba <HAL_UARTEx_DisableFifoMode>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000830:	f000 f8ea 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000078 	.word	0x20000078
 800083c:	40013800 	.word	0x40013800

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b41      	ldr	r3, [pc, #260]	@ (800095c <MX_GPIO_Init+0x11c>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	4a40      	ldr	r2, [pc, #256]	@ (800095c <MX_GPIO_Init+0x11c>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000862:	4b3e      	ldr	r3, [pc, #248]	@ (800095c <MX_GPIO_Init+0x11c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086e:	4b3b      	ldr	r3, [pc, #236]	@ (800095c <MX_GPIO_Init+0x11c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	4a3a      	ldr	r2, [pc, #232]	@ (800095c <MX_GPIO_Init+0x11c>)
 8000874:	f043 0320 	orr.w	r3, r3, #32
 8000878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087a:	4b38      	ldr	r3, [pc, #224]	@ (800095c <MX_GPIO_Init+0x11c>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	f003 0320 	and.w	r3, r3, #32
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b35      	ldr	r3, [pc, #212]	@ (800095c <MX_GPIO_Init+0x11c>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	4a34      	ldr	r2, [pc, #208]	@ (800095c <MX_GPIO_Init+0x11c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000892:	4b32      	ldr	r3, [pc, #200]	@ (800095c <MX_GPIO_Init+0x11c>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b2f      	ldr	r3, [pc, #188]	@ (800095c <MX_GPIO_Init+0x11c>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	4a2e      	ldr	r2, [pc, #184]	@ (800095c <MX_GPIO_Init+0x11c>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008aa:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <MX_GPIO_Init+0x11c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2103      	movs	r1, #3
 80008ba:	4829      	ldr	r0, [pc, #164]	@ (8000960 <MX_GPIO_Init+0x120>)
 80008bc:	f000 fd2c 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2120      	movs	r1, #32
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c8:	f000 fd26 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	481f      	ldr	r0, [pc, #124]	@ (8000960 <MX_GPIO_Init+0x120>)
 80008e4:	f000 fb7e 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008e8:	2303      	movs	r3, #3
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	4818      	ldr	r0, [pc, #96]	@ (8000960 <MX_GPIO_Init+0x120>)
 8000900:	f000 fb70 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000904:	230c      	movs	r3, #12
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000914:	230c      	movs	r3, #12
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000922:	f000 fb5f 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000926:	2320      	movs	r3, #32
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000940:	f000 fb50 	bl	8000fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2028      	movs	r0, #40	@ 0x28
 800094a:	f000 fb16 	bl	8000f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094e:	2028      	movs	r0, #40	@ 0x28
 8000950:	f000 fb2d 	bl	8000fae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	@ 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	48000800 	.word	0x48000800

08000964 <UARTPollingMethod>:

/* USER CODE BEGIN 4 */

void UARTPollingMethod()
	{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
	//read UART 10 char with in 10s
	HAL_StatusTypeDef HAL_status = HAL_UART_Receive(&huart1, RxBuffer, 100, 10000);
 800096a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800096e:	2264      	movs	r2, #100	@ 0x64
 8000970:	4920      	ldr	r1, [pc, #128]	@ (80009f4 <UARTPollingMethod+0x90>)
 8000972:	4821      	ldr	r0, [pc, #132]	@ (80009f8 <UARTPollingMethod+0x94>)
 8000974:	f002 f8be 	bl	8002af4 <HAL_UART_Receive>
 8000978:	4603      	mov	r3, r0
 800097a:	71fb      	strb	r3, [r7, #7]

	//if complete read 10 char
	if(HAL_status == HAL_OK)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d113      	bne.n	80009aa <UARTPollingMethod+0x46>
	{

		RxBuffer[100] = '\0';
 8000982:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <UARTPollingMethod+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

		sprintf((char*)TxBuffer,"Received : %s\r\n",RxBuffer);
 800098a:	4a1a      	ldr	r2, [pc, #104]	@ (80009f4 <UARTPollingMethod+0x90>)
 800098c:	491b      	ldr	r1, [pc, #108]	@ (80009fc <UARTPollingMethod+0x98>)
 800098e:	481c      	ldr	r0, [pc, #112]	@ (8000a00 <UARTPollingMethod+0x9c>)
 8000990:	f002 ff96 	bl	80038c0 <siprintf>
		HAL_UART_Transmit(&huart1, TxBuffer, strlen((char*)TxBuffer), 10);
 8000994:	481a      	ldr	r0, [pc, #104]	@ (8000a00 <UARTPollingMethod+0x9c>)
 8000996:	f7ff fc43 	bl	8000220 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	b29a      	uxth	r2, r3
 800099e:	230a      	movs	r3, #10
 80009a0:	4917      	ldr	r1, [pc, #92]	@ (8000a00 <UARTPollingMethod+0x9c>)
 80009a2:	4815      	ldr	r0, [pc, #84]	@ (80009f8 <UARTPollingMethod+0x94>)
 80009a4:	f002 f818 	bl	80029d8 <HAL_UART_Transmit>
		//return received char     0
		sprintf((char*)TxBuffer,"Received Timeout : %s\r\n",RxBuffer);
		HAL_UART_Transmit(&huart1, TxBuffer, strlen((char*)TxBuffer), 10);

	}
}
 80009a8:	e020      	b.n	80009ec <UARTPollingMethod+0x88>
	else if(HAL_status == HAL_TIMEOUT)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d11d      	bne.n	80009ec <UARTPollingMethod+0x88>
		uint32_t lastCharPos = huart1.RxXferSize - huart1.RxXferCount;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <UARTPollingMethod+0x94>)
 80009b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <UARTPollingMethod+0x94>)
 80009ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80009be:	b29b      	uxth	r3, r3
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	603b      	str	r3, [r7, #0]
		RxBuffer[lastCharPos] = '\0';
 80009c4:	4a0b      	ldr	r2, [pc, #44]	@ (80009f4 <UARTPollingMethod+0x90>)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
		sprintf((char*)TxBuffer,"Received Timeout : %s\r\n",RxBuffer);
 80009ce:	4a09      	ldr	r2, [pc, #36]	@ (80009f4 <UARTPollingMethod+0x90>)
 80009d0:	490c      	ldr	r1, [pc, #48]	@ (8000a04 <UARTPollingMethod+0xa0>)
 80009d2:	480b      	ldr	r0, [pc, #44]	@ (8000a00 <UARTPollingMethod+0x9c>)
 80009d4:	f002 ff74 	bl	80038c0 <siprintf>
		HAL_UART_Transmit(&huart1, TxBuffer, strlen((char*)TxBuffer), 10);
 80009d8:	4809      	ldr	r0, [pc, #36]	@ (8000a00 <UARTPollingMethod+0x9c>)
 80009da:	f7ff fc21 	bl	8000220 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	230a      	movs	r3, #10
 80009e4:	4906      	ldr	r1, [pc, #24]	@ (8000a00 <UARTPollingMethod+0x9c>)
 80009e6:	4804      	ldr	r0, [pc, #16]	@ (80009f8 <UARTPollingMethod+0x94>)
 80009e8:	f001 fff6 	bl	80029d8 <HAL_UART_Transmit>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000160 	.word	0x20000160
 80009f8:	20000078 	.word	0x20000078
 80009fc:	08004224 	.word	0x08004224
 8000a00:	20000174 	.word	0x20000174
 8000a04:	08004234 	.word	0x08004234

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a4a:	f000 fd45 	bl	80014d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a17      	ldr	r2, [pc, #92]	@ (8000ad8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d128      	bne.n	8000ad0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <HAL_TIM_Encoder_MspInit+0x80>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	4a16      	ldr	r2, [pc, #88]	@ (8000adc <HAL_TIM_Encoder_MspInit+0x80>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <HAL_TIM_Encoder_MspInit+0x80>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_TIM_Encoder_MspInit+0x80>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <HAL_TIM_Encoder_MspInit+0x80>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <HAL_TIM_Encoder_MspInit+0x80>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000aae:	2350      	movs	r3, #80	@ 0x50
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000acc:	f000 fa8a 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40000400 	.word	0x40000400
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b09e      	sub	sp, #120	@ 0x78
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2254      	movs	r2, #84	@ 0x54
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 fefd 	bl	8003900 <memset>
  if(huart->Instance==USART1)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b84 <HAL_UART_MspInit+0xa4>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d135      	bne.n	8000b7c <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fa19 	bl	8001f54 <HAL_RCCEx_PeriphCLKConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b28:	f7ff ff6e 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b2c:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <HAL_UART_MspInit+0xa8>)
 8000b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b30:	4a15      	ldr	r2, [pc, #84]	@ (8000b88 <HAL_UART_MspInit+0xa8>)
 8000b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b36:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <HAL_UART_MspInit+0xa8>)
 8000b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <HAL_UART_MspInit+0xa8>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b48:	4a0f      	ldr	r2, [pc, #60]	@ (8000b88 <HAL_UART_MspInit+0xa8>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b50:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <HAL_UART_MspInit+0xa8>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b5c:	2330      	movs	r3, #48	@ 0x30
 8000b5e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b74:	4619      	mov	r1, r3
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <HAL_UART_MspInit+0xac>)
 8000b78:	f000 fa34 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3778      	adds	r7, #120	@ 0x78
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40013800 	.word	0x40013800
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	48000800 	.word	0x48000800

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <NMI_Handler+0x4>

08000b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be6:	f000 f8cf 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bf2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bf6:	f000 fba7 	bl	8001348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	@ (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f002 fe6e 	bl	8003910 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20020000 	.word	0x20020000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	200001d8 	.word	0x200001d8
 8000c68:	20000328 	.word	0x20000328

08000c6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c90:	480d      	ldr	r0, [pc, #52]	@ (8000cc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c94:	f7ff ffea 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	@ (8000cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <LoopForever+0xe>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cdc <LoopForever+0x16>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f002 fe2d 	bl	800391c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cc2:	f7ff fc7d 	bl	80005c0 <main>

08000cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
  ldr   r0, =_estack
 8000cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cd4:	080042d0 	.word	0x080042d0
  ldr r2, =_sbss
 8000cd8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cdc:	20000328 	.word	0x20000328

08000ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_2_IRQHandler>

08000ce2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f939 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 f80e 	bl	8000d14 <HAL_InitTick>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	71fb      	strb	r3, [r7, #7]
 8000d02:	e001      	b.n	8000d08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d04:	f7ff fe86 	bl	8000a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d08:	79fb      	ldrb	r3, [r7, #7]

}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_InitTick+0x68>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d022      	beq.n	8000d6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d28:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_InitTick+0x6c>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <HAL_InitTick+0x68>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 f944 	bl	8000fca <HAL_SYSTICK_Config>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10f      	bne.n	8000d68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b0f      	cmp	r3, #15
 8000d4c:	d809      	bhi.n	8000d62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	f04f 30ff 	mov.w	r0, #4294967295
 8000d56:	f000 f910 	bl	8000f7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <HAL_InitTick+0x70>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e007      	b.n	8000d72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e004      	b.n	8000d72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e001      	b.n	8000d72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_IncTick+0x1c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <HAL_IncTick+0x20>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a03      	ldr	r2, [pc, #12]	@ (8000da4 <HAL_IncTick+0x1c>)
 8000d98:	6013      	str	r3, [r2, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	200001dc 	.word	0x200001dc
 8000da8:	20000008 	.word	0x20000008

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	200001dc 	.word	0x200001dc

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4907      	ldr	r1, [pc, #28]	@ (8000e60 <__NVIC_EnableIRQ+0x38>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	@ (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	@ 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff29 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff40 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff90 	bl	8000eb8 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5f 	bl	8000e64 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff33 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffa4 	bl	8000f20 <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ff2:	e15a      	b.n	80012aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 814c 	beq.w	80012a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d005      	beq.n	8001024 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001020:	2b02      	cmp	r3, #2
 8001022:	d130      	bne.n	8001086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105a:	2201      	movs	r2, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	f003 0201 	and.w	r2, r3, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b03      	cmp	r3, #3
 8001090:	d017      	beq.n	80010c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d123      	bne.n	8001116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	691a      	ldr	r2, [r3, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0203 	and.w	r2, r3, #3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 80a6 	beq.w	80012a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001158:	4b5b      	ldr	r3, [pc, #364]	@ (80012c8 <HAL_GPIO_Init+0x2e4>)
 800115a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115c:	4a5a      	ldr	r2, [pc, #360]	@ (80012c8 <HAL_GPIO_Init+0x2e4>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6613      	str	r3, [r2, #96]	@ 0x60
 8001164:	4b58      	ldr	r3, [pc, #352]	@ (80012c8 <HAL_GPIO_Init+0x2e4>)
 8001166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001170:	4a56      	ldr	r2, [pc, #344]	@ (80012cc <HAL_GPIO_Init+0x2e8>)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800119a:	d01f      	beq.n	80011dc <HAL_GPIO_Init+0x1f8>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a4c      	ldr	r2, [pc, #304]	@ (80012d0 <HAL_GPIO_Init+0x2ec>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d019      	beq.n	80011d8 <HAL_GPIO_Init+0x1f4>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a4b      	ldr	r2, [pc, #300]	@ (80012d4 <HAL_GPIO_Init+0x2f0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d013      	beq.n	80011d4 <HAL_GPIO_Init+0x1f0>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a4a      	ldr	r2, [pc, #296]	@ (80012d8 <HAL_GPIO_Init+0x2f4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d00d      	beq.n	80011d0 <HAL_GPIO_Init+0x1ec>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a49      	ldr	r2, [pc, #292]	@ (80012dc <HAL_GPIO_Init+0x2f8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d007      	beq.n	80011cc <HAL_GPIO_Init+0x1e8>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a48      	ldr	r2, [pc, #288]	@ (80012e0 <HAL_GPIO_Init+0x2fc>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d101      	bne.n	80011c8 <HAL_GPIO_Init+0x1e4>
 80011c4:	2305      	movs	r3, #5
 80011c6:	e00a      	b.n	80011de <HAL_GPIO_Init+0x1fa>
 80011c8:	2306      	movs	r3, #6
 80011ca:	e008      	b.n	80011de <HAL_GPIO_Init+0x1fa>
 80011cc:	2304      	movs	r3, #4
 80011ce:	e006      	b.n	80011de <HAL_GPIO_Init+0x1fa>
 80011d0:	2303      	movs	r3, #3
 80011d2:	e004      	b.n	80011de <HAL_GPIO_Init+0x1fa>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e002      	b.n	80011de <HAL_GPIO_Init+0x1fa>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <HAL_GPIO_Init+0x1fa>
 80011dc:	2300      	movs	r3, #0
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	f002 0203 	and.w	r2, r2, #3
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	4093      	lsls	r3, r2
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ee:	4937      	ldr	r1, [pc, #220]	@ (80012cc <HAL_GPIO_Init+0x2e8>)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011fc:	4b39      	ldr	r3, [pc, #228]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001220:	4a30      	ldr	r2, [pc, #192]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001226:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800124a:	4a26      	ldr	r2, [pc, #152]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001250:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001274:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800129e:	4a11      	ldr	r2, [pc, #68]	@ (80012e4 <HAL_GPIO_Init+0x300>)
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3301      	adds	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f47f ae9d 	bne.w	8000ff4 <HAL_GPIO_Init+0x10>
  }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40010000 	.word	0x40010000
 80012d0:	48000400 	.word	0x48000400
 80012d4:	48000800 	.word	0x48000800
 80012d8:	48000c00 	.word	0x48000c00
 80012dc:	48001000 	.word	0x48001000
 80012e0:	48001400 	.word	0x48001400
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001300:	2301      	movs	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	e001      	b.n	800130a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001334:	e002      	b.n	800133c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f806 	bl	8001378 <HAL_GPIO_EXTI_Callback>
  }
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40010400 	.word	0x40010400

08001378 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d141      	bne.n	8001422 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800139e:	4b4b      	ldr	r3, [pc, #300]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013aa:	d131      	bne.n	8001410 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013ac:	4b47      	ldr	r3, [pc, #284]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013b2:	4a46      	ldr	r2, [pc, #280]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013bc:	4b43      	ldr	r3, [pc, #268]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013c4:	4a41      	ldr	r2, [pc, #260]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013cc:	4b40      	ldr	r3, [pc, #256]	@ (80014d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2232      	movs	r2, #50	@ 0x32
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	4a3f      	ldr	r2, [pc, #252]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	0c9b      	lsrs	r3, r3, #18
 80013de:	3301      	adds	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e2:	e002      	b.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ea:	4b38      	ldr	r3, [pc, #224]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f6:	d102      	bne.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f2      	bne.n	80013e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013fe:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800140a:	d158      	bne.n	80014be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e057      	b.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001410:	4b2e      	ldr	r3, [pc, #184]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001416:	4a2d      	ldr	r2, [pc, #180]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800141c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001420:	e04d      	b.n	80014be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001428:	d141      	bne.n	80014ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001436:	d131      	bne.n	800149c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001438:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800143e:	4a23      	ldr	r2, [pc, #140]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001444:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001448:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001450:	4a1e      	ldr	r2, [pc, #120]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001458:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2232      	movs	r2, #50	@ 0x32
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	0c9b      	lsrs	r3, r3, #18
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146e:	e002      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3b01      	subs	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001482:	d102      	bne.n	800148a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f2      	bne.n	8001470 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001496:	d112      	bne.n	80014be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e011      	b.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800149c:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014ac:	e007      	b.n	80014be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014ae:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014b6:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40007000 	.word	0x40007000
 80014d0:	20000000 	.word	0x20000000
 80014d4:	431bde83 	.word	0x431bde83

080014d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e6:	6093      	str	r3, [r2, #8]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40007000 	.word	0x40007000

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e2fe      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d075      	beq.n	8001602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001516:	4b97      	ldr	r3, [pc, #604]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001520:	4b94      	ldr	r3, [pc, #592]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d102      	bne.n	8001536 <HAL_RCC_OscConfig+0x3e>
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d002      	beq.n	800153c <HAL_RCC_OscConfig+0x44>
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d10b      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	4b8d      	ldr	r3, [pc, #564]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d05b      	beq.n	8001600 <HAL_RCC_OscConfig+0x108>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d157      	bne.n	8001600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e2d9      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800155c:	d106      	bne.n	800156c <HAL_RCC_OscConfig+0x74>
 800155e:	4b85      	ldr	r3, [pc, #532]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a84      	ldr	r2, [pc, #528]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e01d      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x98>
 8001576:	4b7f      	ldr	r3, [pc, #508]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a7e      	ldr	r2, [pc, #504]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b7c      	ldr	r3, [pc, #496]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7b      	ldr	r2, [pc, #492]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 8001590:	4b78      	ldr	r3, [pc, #480]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a77      	ldr	r2, [pc, #476]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b75      	ldr	r3, [pc, #468]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a74      	ldr	r2, [pc, #464]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fbfc 	bl	8000dac <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fbf8 	bl	8000dac <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e29e      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0xc0>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fbe8 	bl	8000dac <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fbe4 	bl	8000dac <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	@ 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e28a      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f2:	4b60      	ldr	r3, [pc, #384]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0xe8>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d075      	beq.n	80016fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160e:	4b59      	ldr	r3, [pc, #356]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001618:	4b56      	ldr	r3, [pc, #344]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b0c      	cmp	r3, #12
 8001626:	d102      	bne.n	800162e <HAL_RCC_OscConfig+0x136>
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d002      	beq.n	8001634 <HAL_RCC_OscConfig+0x13c>
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d11f      	bne.n	8001674 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001634:	4b4f      	ldr	r3, [pc, #316]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x154>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e25d      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b49      	ldr	r3, [pc, #292]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	061b      	lsls	r3, r3, #24
 800165a:	4946      	ldr	r1, [pc, #280]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001660:	4b45      	ldr	r3, [pc, #276]	@ (8001778 <HAL_RCC_OscConfig+0x280>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fb55 	bl	8000d14 <HAL_InitTick>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d043      	beq.n	80016f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e249      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d023      	beq.n	80016c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167c:	4b3d      	ldr	r3, [pc, #244]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a3c      	ldr	r2, [pc, #240]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fb90 	bl	8000dac <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff fb8c 	bl	8000dac <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e232      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a2:	4b34      	ldr	r3, [pc, #208]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4b31      	ldr	r3, [pc, #196]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	061b      	lsls	r3, r3, #24
 80016bc:	492d      	ldr	r1, [pc, #180]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
 80016c2:	e01a      	b.n	80016fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 80016ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb6c 	bl	8000dac <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fb68 	bl	8000dac <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e20e      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ea:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1e0>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d041      	beq.n	800178a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01c      	beq.n	8001748 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170e:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001714:	4a17      	ldr	r2, [pc, #92]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7ff fb45 	bl	8000dac <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001726:	f7ff fb41 	bl	8000dac <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e1e7      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 800173a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0ef      	beq.n	8001726 <HAL_RCC_OscConfig+0x22e>
 8001746:	e020      	b.n	800178a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001748:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 800174a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800174e:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <HAL_RCC_OscConfig+0x27c>)
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fb28 	bl	8000dac <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800175e:	e00d      	b.n	800177c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fb24 	bl	8000dac <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d906      	bls.n	800177c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e1ca      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800177c:	4b8c      	ldr	r3, [pc, #560]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 800177e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ea      	bne.n	8001760 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 80a6 	beq.w	80018e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800179c:	4b84      	ldr	r3, [pc, #528]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_OscConfig+0x2b4>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x2b6>
 80017ac:	2300      	movs	r3, #0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00d      	beq.n	80017ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b7f      	ldr	r3, [pc, #508]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b6:	4a7e      	ldr	r2, [pc, #504]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017be:	4b7c      	ldr	r3, [pc, #496]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017ca:	2301      	movs	r3, #1
 80017cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ce:	4b79      	ldr	r3, [pc, #484]	@ (80019b4 <HAL_RCC_OscConfig+0x4bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d118      	bne.n	800180c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017da:	4b76      	ldr	r3, [pc, #472]	@ (80019b4 <HAL_RCC_OscConfig+0x4bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a75      	ldr	r2, [pc, #468]	@ (80019b4 <HAL_RCC_OscConfig+0x4bc>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fae1 	bl	8000dac <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ee:	f7ff fadd 	bl	8000dac <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e183      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001800:	4b6c      	ldr	r3, [pc, #432]	@ (80019b4 <HAL_RCC_OscConfig+0x4bc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d108      	bne.n	8001826 <HAL_RCC_OscConfig+0x32e>
 8001814:	4b66      	ldr	r3, [pc, #408]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800181a:	4a65      	ldr	r2, [pc, #404]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001824:	e024      	b.n	8001870 <HAL_RCC_OscConfig+0x378>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b05      	cmp	r3, #5
 800182c:	d110      	bne.n	8001850 <HAL_RCC_OscConfig+0x358>
 800182e:	4b60      	ldr	r3, [pc, #384]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001834:	4a5e      	ldr	r2, [pc, #376]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800183e:	4b5c      	ldr	r3, [pc, #368]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001844:	4a5a      	ldr	r2, [pc, #360]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800184e:	e00f      	b.n	8001870 <HAL_RCC_OscConfig+0x378>
 8001850:	4b57      	ldr	r3, [pc, #348]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001856:	4a56      	ldr	r2, [pc, #344]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001860:	4b53      	ldr	r3, [pc, #332]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001866:	4a52      	ldr	r2, [pc, #328]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d016      	beq.n	80018a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fa98 	bl	8000dac <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff fa94 	bl	8000dac <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e138      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001896:	4b46      	ldr	r3, [pc, #280]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ed      	beq.n	8001880 <HAL_RCC_OscConfig+0x388>
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a6:	f7ff fa81 	bl	8000dac <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff fa7d 	bl	8000dac <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e121      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c4:	4b3a      	ldr	r3, [pc, #232]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ed      	bne.n	80018ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d8:	4b35      	ldr	r3, [pc, #212]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018dc:	4a34      	ldr	r2, [pc, #208]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 80018de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d03c      	beq.n	800196a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01c      	beq.n	8001932 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018f8:	4b2d      	ldr	r3, [pc, #180]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 80018fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018fe:	4a2c      	ldr	r2, [pc, #176]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff fa50 	bl	8000dac <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001910:	f7ff fa4c 	bl	8000dac <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0f2      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001922:	4b23      	ldr	r3, [pc, #140]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001924:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0ef      	beq.n	8001910 <HAL_RCC_OscConfig+0x418>
 8001930:	e01b      	b.n	800196a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001932:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001934:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001938:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff fa33 	bl	8000dac <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194a:	f7ff fa2f 	bl	8000dac <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0d5      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800195c:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 800195e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ef      	bne.n	800194a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80c9 	beq.w	8001b06 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001974:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b0c      	cmp	r3, #12
 800197e:	f000 8083 	beq.w	8001a88 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d15e      	bne.n	8001a48 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a08      	ldr	r2, [pc, #32]	@ (80019b0 <HAL_RCC_OscConfig+0x4b8>)
 8001990:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff fa09 	bl	8000dac <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199c:	e00c      	b.n	80019b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff fa05 	bl	8000dac <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d905      	bls.n	80019b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0ab      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b8:	4b55      	ldr	r3, [pc, #340]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1ec      	bne.n	800199e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c4:	4b52      	ldr	r3, [pc, #328]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	4b52      	ldr	r3, [pc, #328]	@ (8001b14 <HAL_RCC_OscConfig+0x61c>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6a11      	ldr	r1, [r2, #32]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019d4:	3a01      	subs	r2, #1
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	4311      	orrs	r1, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80019de:	0212      	lsls	r2, r2, #8
 80019e0:	4311      	orrs	r1, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019e6:	0852      	lsrs	r2, r2, #1
 80019e8:	3a01      	subs	r2, #1
 80019ea:	0552      	lsls	r2, r2, #21
 80019ec:	4311      	orrs	r1, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019f2:	0852      	lsrs	r2, r2, #1
 80019f4:	3a01      	subs	r2, #1
 80019f6:	0652      	lsls	r2, r2, #25
 80019f8:	4311      	orrs	r1, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019fe:	06d2      	lsls	r2, r2, #27
 8001a00:	430a      	orrs	r2, r1
 8001a02:	4943      	ldr	r1, [pc, #268]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a08:	4b41      	ldr	r3, [pc, #260]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a40      	ldr	r2, [pc, #256]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a14:	4b3e      	ldr	r3, [pc, #248]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4a3d      	ldr	r2, [pc, #244]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff f9c4 	bl	8000dac <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f9c0 	bl	8000dac <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e066      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	4b35      	ldr	r3, [pc, #212]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x530>
 8001a46:	e05e      	b.n	8001b06 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a48:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a30      	ldr	r2, [pc, #192]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff f9aa 	bl	8000dac <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f9a6 	bl	8000dac <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e04c      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6e:	4b28      	ldr	r3, [pc, #160]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a7a:	4b25      	ldr	r3, [pc, #148]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	4924      	ldr	r1, [pc, #144]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	60cb      	str	r3, [r1, #12]
 8001a86:	e03e      	b.n	8001b06 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e039      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a94:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f003 0203 	and.w	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d12c      	bne.n	8001b02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d123      	bne.n	8001b02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d11b      	bne.n	8001b02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d113      	bne.n	8001b02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae4:	085b      	lsrs	r3, r3, #1
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d109      	bne.n	8001b02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	019f800c 	.word	0x019f800c
 8001b18:	feeefffc 	.word	0xfeeefffc

08001b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e11e      	b.n	8001d72 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4b91      	ldr	r3, [pc, #580]	@ (8001d7c <HAL_RCC_ClockConfig+0x260>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d910      	bls.n	8001b64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b8e      	ldr	r3, [pc, #568]	@ (8001d7c <HAL_RCC_ClockConfig+0x260>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 020f 	bic.w	r2, r3, #15
 8001b4a:	498c      	ldr	r1, [pc, #560]	@ (8001d7c <HAL_RCC_ClockConfig+0x260>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b8a      	ldr	r3, [pc, #552]	@ (8001d7c <HAL_RCC_ClockConfig+0x260>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e106      	b.n	8001d72 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d073      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d129      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b78:	4b81      	ldr	r3, [pc, #516]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0f4      	b.n	8001d72 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b88:	f000 f99e 	bl	8001ec8 <RCC_GetSysClockFreqFromPLLSource>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4a7c      	ldr	r2, [pc, #496]	@ (8001d84 <HAL_RCC_ClockConfig+0x268>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d93f      	bls.n	8001c16 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b96:	4b7a      	ldr	r3, [pc, #488]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d033      	beq.n	8001c16 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d12f      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bb6:	4b72      	ldr	r3, [pc, #456]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bbe:	4a70      	ldr	r2, [pc, #448]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bc4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bc6:	2380      	movs	r3, #128	@ 0x80
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e024      	b.n	8001c16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d109      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0c6      	b.n	8001d72 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be4:	4b66      	ldr	r3, [pc, #408]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0be      	b.n	8001d72 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bf4:	f000 f8ce 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4a61      	ldr	r2, [pc, #388]	@ (8001d84 <HAL_RCC_ClockConfig+0x268>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d909      	bls.n	8001c16 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c02:	4b5f      	ldr	r3, [pc, #380]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c0a:	4a5d      	ldr	r2, [pc, #372]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c16:	4b5a      	ldr	r3, [pc, #360]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f023 0203 	bic.w	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4957      	ldr	r1, [pc, #348]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c28:	f7ff f8c0 	bl	8000dac <HAL_GetTick>
 8001c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c30:	f7ff f8bc 	bl	8000dac <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e095      	b.n	8001d72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	4b4e      	ldr	r3, [pc, #312]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 020c 	and.w	r2, r3, #12
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d1eb      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d023      	beq.n	8001cac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c70:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a42      	ldr	r2, [pc, #264]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001c76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c7a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c88:	4b3d      	ldr	r3, [pc, #244]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c90:	4a3b      	ldr	r2, [pc, #236]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001c92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b39      	ldr	r3, [pc, #228]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4936      	ldr	r1, [pc, #216]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2b80      	cmp	r3, #128	@ 0x80
 8001cb0:	d105      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cb2:	4b33      	ldr	r3, [pc, #204]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	4a32      	ldr	r2, [pc, #200]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001cb8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cbc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <HAL_RCC_ClockConfig+0x260>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d21d      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d7c <HAL_RCC_ClockConfig+0x260>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 020f 	bic.w	r2, r3, #15
 8001cd4:	4929      	ldr	r1, [pc, #164]	@ (8001d7c <HAL_RCC_ClockConfig+0x260>)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff f866 	bl	8000dac <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce4:	f7ff f862 	bl	8000dac <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e03b      	b.n	8001d72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_RCC_ClockConfig+0x260>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d1ed      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4917      	ldr	r1, [pc, #92]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d32:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490f      	ldr	r1, [pc, #60]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d46:	f000 f825 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <HAL_RCC_ClockConfig+0x264>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490c      	ldr	r1, [pc, #48]	@ (8001d88 <HAL_RCC_ClockConfig+0x26c>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d62:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <HAL_RCC_ClockConfig+0x270>)
 8001d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <HAL_RCC_ClockConfig+0x274>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe ffd2 	bl	8000d14 <HAL_InitTick>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40022000 	.word	0x40022000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	04c4b400 	.word	0x04c4b400
 8001d88:	0800424c 	.word	0x0800424c
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000004 	.word	0x20000004

08001d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d102      	bne.n	8001dac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001da6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	e047      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001db8:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	e03e      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001dbe:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d136      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3301      	adds	r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d10c      	bne.n	8001e02 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001de8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	4a16      	ldr	r2, [pc, #88]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df2:	68d2      	ldr	r2, [r2, #12]
 8001df4:	0a12      	lsrs	r2, r2, #8
 8001df6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	617b      	str	r3, [r7, #20]
      break;
 8001e00:	e00c      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e02:	4a13      	ldr	r2, [pc, #76]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4a10      	ldr	r2, [pc, #64]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e0c:	68d2      	ldr	r2, [r2, #12]
 8001e0e:	0a12      	lsrs	r2, r2, #8
 8001e10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e14:	fb02 f303 	mul.w	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
      break;
 8001e1a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0e5b      	lsrs	r3, r3, #25
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	3301      	adds	r3, #1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	e001      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e3c:	693b      	ldr	r3, [r7, #16]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	016e3600 	.word	0x016e3600

08001e58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000000 	.word	0x20000000

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e74:	f7ff fff0 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4904      	ldr	r1, [pc, #16]	@ (8001e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	0800425c 	.word	0x0800425c

08001e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ea0:	f7ff ffda 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0adb      	lsrs	r3, r3, #11
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4904      	ldr	r1, [pc, #16]	@ (8001ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	0800425c 	.word	0x0800425c

08001ec8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ece:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d10c      	bne.n	8001f06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eec:	4a17      	ldr	r2, [pc, #92]	@ (8001f4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	4a14      	ldr	r2, [pc, #80]	@ (8001f48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ef6:	68d2      	ldr	r2, [r2, #12]
 8001ef8:	0a12      	lsrs	r2, r2, #8
 8001efa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	617b      	str	r3, [r7, #20]
    break;
 8001f04:	e00c      	b.n	8001f20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f06:	4a12      	ldr	r2, [pc, #72]	@ (8001f50 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f10:	68d2      	ldr	r2, [r2, #12]
 8001f12:	0a12      	lsrs	r2, r2, #8
 8001f14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	617b      	str	r3, [r7, #20]
    break;
 8001f1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0e5b      	lsrs	r3, r3, #25
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f3a:	687b      	ldr	r3, [r7, #4]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	016e3600 	.word	0x016e3600
 8001f50:	00f42400 	.word	0x00f42400

08001f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f60:	2300      	movs	r3, #0
 8001f62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 8098 	beq.w	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f76:	4b43      	ldr	r3, [pc, #268]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10d      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b40      	ldr	r3, [pc, #256]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	4a3f      	ldr	r2, [pc, #252]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a39      	ldr	r2, [pc, #228]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001faa:	f7fe feff 	bl	8000dac <HAL_GetTick>
 8001fae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fb0:	e009      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb2:	f7fe fefb 	bl	8000dac <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d902      	bls.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	74fb      	strb	r3, [r7, #19]
        break;
 8001fc4:	e005      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fc6:	4b30      	ldr	r3, [pc, #192]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0ef      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001fd2:	7cfb      	ldrb	r3, [r7, #19]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d159      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fe2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01e      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d019      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ff4:	4b23      	ldr	r3, [pc, #140]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ffe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002000:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002006:	4a1f      	ldr	r2, [pc, #124]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002010:	4b1c      	ldr	r3, [pc, #112]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002016:	4a1b      	ldr	r2, [pc, #108]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002020:	4a18      	ldr	r2, [pc, #96]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7fe febb 	bl	8000dac <HAL_GetTick>
 8002036:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002038:	e00b      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe feb7 	bl	8000dac <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d902      	bls.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	74fb      	strb	r3, [r7, #19]
            break;
 8002050:	e006      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002052:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ec      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10b      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002066:	4b07      	ldr	r3, [pc, #28]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002074:	4903      	ldr	r1, [pc, #12]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800207c:	e008      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800207e:	7cfb      	ldrb	r3, [r7, #19]
 8002080:	74bb      	strb	r3, [r7, #18]
 8002082:	e005      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002084:	40021000 	.word	0x40021000
 8002088:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002090:	7c7b      	ldrb	r3, [r7, #17]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d105      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002096:	4ba7      	ldr	r3, [pc, #668]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	4aa6      	ldr	r2, [pc, #664]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b4:	f023 0203 	bic.w	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	499d      	ldr	r1, [pc, #628]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020d0:	4b98      	ldr	r3, [pc, #608]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d6:	f023 020c 	bic.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4995      	ldr	r1, [pc, #596]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020f2:	4b90      	ldr	r3, [pc, #576]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	498c      	ldr	r1, [pc, #560]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002114:	4b87      	ldr	r3, [pc, #540]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	4984      	ldr	r1, [pc, #528]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002136:	4b7f      	ldr	r3, [pc, #508]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	497b      	ldr	r1, [pc, #492]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002158:	4b76      	ldr	r3, [pc, #472]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	4973      	ldr	r1, [pc, #460]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800217a:	4b6e      	ldr	r3, [pc, #440]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002180:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	496a      	ldr	r1, [pc, #424]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800219c:	4b65      	ldr	r3, [pc, #404]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4962      	ldr	r1, [pc, #392]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021be:	4b5d      	ldr	r3, [pc, #372]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	4959      	ldr	r1, [pc, #356]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021e0:	4b54      	ldr	r3, [pc, #336]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ee:	4951      	ldr	r1, [pc, #324]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002202:	4b4c      	ldr	r3, [pc, #304]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002208:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	4948      	ldr	r1, [pc, #288]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	d015      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002224:	4b43      	ldr	r3, [pc, #268]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4940      	ldr	r1, [pc, #256]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002242:	d105      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002244:	4b3b      	ldr	r3, [pc, #236]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a3a      	ldr	r2, [pc, #232]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800224e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002258:	2b00      	cmp	r3, #0
 800225a:	d015      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800225c:	4b35      	ldr	r3, [pc, #212]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002262:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226a:	4932      	ldr	r1, [pc, #200]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002276:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800227a:	d105      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800227c:	4b2d      	ldr	r3, [pc, #180]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a2c      	ldr	r2, [pc, #176]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002286:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d015      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002294:	4b27      	ldr	r3, [pc, #156]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a2:	4924      	ldr	r1, [pc, #144]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b2:	d105      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d015      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022da:	4916      	ldr	r1, [pc, #88]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ea:	d105      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a10      	ldr	r2, [pc, #64]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d019      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	4908      	ldr	r1, [pc, #32]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002322:	d109      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002324:	4b03      	ldr	r3, [pc, #12]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a02      	ldr	r2, [pc, #8]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800232e:	60d3      	str	r3, [r2, #12]
 8002330:	e002      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d015      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002344:	4b29      	ldr	r3, [pc, #164]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	4926      	ldr	r1, [pc, #152]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002362:	d105      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002364:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a20      	ldr	r2, [pc, #128]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800236a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d015      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800237c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002382:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800238a:	4918      	ldr	r1, [pc, #96]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800239a:	d105      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800239c:	4b13      	ldr	r3, [pc, #76]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d015      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023b4:	4b0d      	ldr	r3, [pc, #52]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c2:	490a      	ldr	r1, [pc, #40]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023d2:	d105      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80023e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000

080023f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e097      	b.n	8002534 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d106      	bne.n	800241e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7fe fb1f 	bl	8000a5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002434:	f023 0307 	bic.w	r3, r3, #7
 8002438:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	4619      	mov	r1, r3
 8002444:	4610      	mov	r0, r2
 8002446:	f000 f907 	bl	8002658 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002472:	f023 0303 	bic.w	r3, r3, #3
 8002476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	4313      	orrs	r3, r2
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002490:	f023 030c 	bic.w	r3, r3, #12
 8002494:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800249c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	4313      	orrs	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	011a      	lsls	r2, r3, #4
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	031b      	lsls	r3, r3, #12
 80024c0:	4313      	orrs	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80024ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80024d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4313      	orrs	r3, r2
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800254c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002554:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800255c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002564:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d110      	bne.n	800258e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d102      	bne.n	8002578 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002572:	7b7b      	ldrb	r3, [r7, #13]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d001      	beq.n	800257c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e069      	b.n	8002650 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800258c:	e031      	b.n	80025f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d110      	bne.n	80025b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002594:	7bbb      	ldrb	r3, [r7, #14]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d102      	bne.n	80025a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800259a:	7b3b      	ldrb	r3, [r7, #12]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d001      	beq.n	80025a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e055      	b.n	8002650 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025b4:	e01d      	b.n	80025f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d108      	bne.n	80025ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80025bc:	7bbb      	ldrb	r3, [r7, #14]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025c2:	7b7b      	ldrb	r3, [r7, #13]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d102      	bne.n	80025ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80025c8:	7b3b      	ldrb	r3, [r7, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e03e      	b.n	8002650 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2202      	movs	r2, #2
 80025de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2202      	movs	r2, #2
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_TIM_Encoder_Start+0xc4>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d008      	beq.n	8002610 <HAL_TIM_Encoder_Start+0xd4>
 80025fe:	e00f      	b.n	8002620 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2201      	movs	r2, #1
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f8d9 	bl	80027c0 <TIM_CCxChannelCmd>
      break;
 800260e:	e016      	b.n	800263e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2201      	movs	r2, #1
 8002616:	2104      	movs	r1, #4
 8002618:	4618      	mov	r0, r3
 800261a:	f000 f8d1 	bl	80027c0 <TIM_CCxChannelCmd>
      break;
 800261e:	e00e      	b.n	800263e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f8c9 	bl	80027c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2201      	movs	r2, #1
 8002634:	2104      	movs	r1, #4
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f8c2 	bl	80027c0 <TIM_CCxChannelCmd>
      break;
 800263c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a4c      	ldr	r2, [pc, #304]	@ (800279c <TIM_Base_SetConfig+0x144>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d017      	beq.n	80026a0 <TIM_Base_SetConfig+0x48>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002676:	d013      	beq.n	80026a0 <TIM_Base_SetConfig+0x48>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a49      	ldr	r2, [pc, #292]	@ (80027a0 <TIM_Base_SetConfig+0x148>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d00f      	beq.n	80026a0 <TIM_Base_SetConfig+0x48>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a48      	ldr	r2, [pc, #288]	@ (80027a4 <TIM_Base_SetConfig+0x14c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00b      	beq.n	80026a0 <TIM_Base_SetConfig+0x48>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a47      	ldr	r2, [pc, #284]	@ (80027a8 <TIM_Base_SetConfig+0x150>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <TIM_Base_SetConfig+0x48>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a46      	ldr	r2, [pc, #280]	@ (80027ac <TIM_Base_SetConfig+0x154>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d003      	beq.n	80026a0 <TIM_Base_SetConfig+0x48>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a45      	ldr	r2, [pc, #276]	@ (80027b0 <TIM_Base_SetConfig+0x158>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d108      	bne.n	80026b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a39      	ldr	r2, [pc, #228]	@ (800279c <TIM_Base_SetConfig+0x144>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d023      	beq.n	8002702 <TIM_Base_SetConfig+0xaa>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026c0:	d01f      	beq.n	8002702 <TIM_Base_SetConfig+0xaa>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a36      	ldr	r2, [pc, #216]	@ (80027a0 <TIM_Base_SetConfig+0x148>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01b      	beq.n	8002702 <TIM_Base_SetConfig+0xaa>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a35      	ldr	r2, [pc, #212]	@ (80027a4 <TIM_Base_SetConfig+0x14c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d017      	beq.n	8002702 <TIM_Base_SetConfig+0xaa>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a34      	ldr	r2, [pc, #208]	@ (80027a8 <TIM_Base_SetConfig+0x150>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <TIM_Base_SetConfig+0xaa>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a33      	ldr	r2, [pc, #204]	@ (80027ac <TIM_Base_SetConfig+0x154>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00f      	beq.n	8002702 <TIM_Base_SetConfig+0xaa>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a33      	ldr	r2, [pc, #204]	@ (80027b4 <TIM_Base_SetConfig+0x15c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00b      	beq.n	8002702 <TIM_Base_SetConfig+0xaa>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a32      	ldr	r2, [pc, #200]	@ (80027b8 <TIM_Base_SetConfig+0x160>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <TIM_Base_SetConfig+0xaa>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a31      	ldr	r2, [pc, #196]	@ (80027bc <TIM_Base_SetConfig+0x164>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d003      	beq.n	8002702 <TIM_Base_SetConfig+0xaa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a2c      	ldr	r2, [pc, #176]	@ (80027b0 <TIM_Base_SetConfig+0x158>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d108      	bne.n	8002714 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a18      	ldr	r2, [pc, #96]	@ (800279c <TIM_Base_SetConfig+0x144>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d013      	beq.n	8002768 <TIM_Base_SetConfig+0x110>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a1a      	ldr	r2, [pc, #104]	@ (80027ac <TIM_Base_SetConfig+0x154>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00f      	beq.n	8002768 <TIM_Base_SetConfig+0x110>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a1a      	ldr	r2, [pc, #104]	@ (80027b4 <TIM_Base_SetConfig+0x15c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00b      	beq.n	8002768 <TIM_Base_SetConfig+0x110>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a19      	ldr	r2, [pc, #100]	@ (80027b8 <TIM_Base_SetConfig+0x160>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d007      	beq.n	8002768 <TIM_Base_SetConfig+0x110>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a18      	ldr	r2, [pc, #96]	@ (80027bc <TIM_Base_SetConfig+0x164>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d003      	beq.n	8002768 <TIM_Base_SetConfig+0x110>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a13      	ldr	r2, [pc, #76]	@ (80027b0 <TIM_Base_SetConfig+0x158>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d103      	bne.n	8002770 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d105      	bne.n	800278e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f023 0201 	bic.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	611a      	str	r2, [r3, #16]
  }
}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40000800 	.word	0x40000800
 80027a8:	40000c00 	.word	0x40000c00
 80027ac:	40013400 	.word	0x40013400
 80027b0:	40015000 	.word	0x40015000
 80027b4:	40014000 	.word	0x40014000
 80027b8:	40014400 	.word	0x40014400
 80027bc:	40014800 	.word	0x40014800

080027c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2201      	movs	r2, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a1a      	ldr	r2, [r3, #32]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	401a      	ands	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a1a      	ldr	r2, [r3, #32]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	621a      	str	r2, [r3, #32]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002820:	2302      	movs	r3, #2
 8002822:	e074      	b.n	800290e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a34      	ldr	r2, [pc, #208]	@ (800291c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a33      	ldr	r2, [pc, #204]	@ (8002920 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a31      	ldr	r2, [pc, #196]	@ (8002924 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d108      	bne.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002868:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800287a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800287e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a21      	ldr	r2, [pc, #132]	@ (800291c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d022      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a4:	d01d      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002928 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d018      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1d      	ldr	r2, [pc, #116]	@ (800292c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1c      	ldr	r2, [pc, #112]	@ (8002930 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00e      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a15      	ldr	r2, [pc, #84]	@ (8002920 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a11      	ldr	r2, [pc, #68]	@ (8002924 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10c      	bne.n	80028fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40013400 	.word	0x40013400
 8002924:	40015000 	.word	0x40015000
 8002928:	40000400 	.word	0x40000400
 800292c:	40000800 	.word	0x40000800
 8002930:	40000c00 	.word	0x40000c00
 8002934:	40014000 	.word	0x40014000

08002938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e042      	b.n	80029d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7fe f8bf 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2224      	movs	r2, #36	@ 0x24
 8002966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fc7a 	bl	800327c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f97b 	bl	8002c84 <UART_SetConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e01b      	b.n	80029d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fcf9 	bl	80033c0 <UART_CheckIdleState>
 80029ce:	4603      	mov	r3, r0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	@ 0x28
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d17b      	bne.n	8002aea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <HAL_UART_Transmit+0x26>
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e074      	b.n	8002aec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2221      	movs	r2, #33	@ 0x21
 8002a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a12:	f7fe f9cb 	bl	8000dac <HAL_GetTick>
 8002a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a30:	d108      	bne.n	8002a44 <HAL_UART_Transmit+0x6c>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d104      	bne.n	8002a44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	e003      	b.n	8002a4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a4c:	e030      	b.n	8002ab0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2200      	movs	r2, #0
 8002a56:	2180      	movs	r1, #128	@ 0x80
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fd5b 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e03d      	b.n	8002aec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a84:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	3302      	adds	r3, #2
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	e007      	b.n	8002a9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1c8      	bne.n	8002a4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2140      	movs	r1, #64	@ 0x40
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fd24 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e006      	b.n	8002aec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	@ 0x28
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	f040 80b5 	bne.w	8002c7a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_UART_Receive+0x28>
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0ad      	b.n	8002c7c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2222      	movs	r2, #34	@ 0x22
 8002b2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b36:	f7fe f939 	bl	8000dac <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	88fa      	ldrh	r2, [r7, #6]
 8002b40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	88fa      	ldrh	r2, [r7, #6]
 8002b48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b54:	d10e      	bne.n	8002b74 <HAL_UART_Receive+0x80>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_UART_Receive+0x76>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002b64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002b68:	e02d      	b.n	8002bc6 <HAL_UART_Receive+0xd2>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	22ff      	movs	r2, #255	@ 0xff
 8002b6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002b72:	e028      	b.n	8002bc6 <HAL_UART_Receive+0xd2>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10d      	bne.n	8002b98 <HAL_UART_Receive+0xa4>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d104      	bne.n	8002b8e <HAL_UART_Receive+0x9a>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	22ff      	movs	r2, #255	@ 0xff
 8002b88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002b8c:	e01b      	b.n	8002bc6 <HAL_UART_Receive+0xd2>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	227f      	movs	r2, #127	@ 0x7f
 8002b92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002b96:	e016      	b.n	8002bc6 <HAL_UART_Receive+0xd2>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ba0:	d10d      	bne.n	8002bbe <HAL_UART_Receive+0xca>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <HAL_UART_Receive+0xc0>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	227f      	movs	r2, #127	@ 0x7f
 8002bae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002bb2:	e008      	b.n	8002bc6 <HAL_UART_Receive+0xd2>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	223f      	movs	r2, #63	@ 0x3f
 8002bb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002bbc:	e003      	b.n	8002bc6 <HAL_UART_Receive+0xd2>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002bcc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bd6:	d108      	bne.n	8002bea <HAL_UART_Receive+0xf6>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e003      	b.n	8002bf2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002bf2:	e036      	b.n	8002c62 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fc88 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e032      	b.n	8002c7c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10c      	bne.n	8002c36 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	8a7b      	ldrh	r3, [r7, #18]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	3302      	adds	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	e00c      	b.n	8002c50 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	8a7b      	ldrh	r3, [r7, #18]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4013      	ands	r3, r2
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1c2      	bne.n	8002bf4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3720      	adds	r7, #32
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c88:	b08c      	sub	sp, #48	@ 0x30
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4baa      	ldr	r3, [pc, #680]	@ (8002f5c <UART_SetConfig+0x2d8>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a9f      	ldr	r2, [pc, #636]	@ (8002f60 <UART_SetConfig+0x2dc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cec:	4313      	orrs	r3, r2
 8002cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002cfa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	f023 010f 	bic.w	r1, r3, #15
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a90      	ldr	r2, [pc, #576]	@ (8002f64 <UART_SetConfig+0x2e0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d125      	bne.n	8002d74 <UART_SetConfig+0xf0>
 8002d28:	4b8f      	ldr	r3, [pc, #572]	@ (8002f68 <UART_SetConfig+0x2e4>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d81a      	bhi.n	8002d6c <UART_SetConfig+0xe8>
 8002d36:	a201      	add	r2, pc, #4	@ (adr r2, 8002d3c <UART_SetConfig+0xb8>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002d4d 	.word	0x08002d4d
 8002d40:	08002d5d 	.word	0x08002d5d
 8002d44:	08002d55 	.word	0x08002d55
 8002d48:	08002d65 	.word	0x08002d65
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d52:	e116      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002d54:	2302      	movs	r3, #2
 8002d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d5a:	e112      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d62:	e10e      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002d64:	2308      	movs	r3, #8
 8002d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d6a:	e10a      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d72:	e106      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a7c      	ldr	r2, [pc, #496]	@ (8002f6c <UART_SetConfig+0x2e8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d138      	bne.n	8002df0 <UART_SetConfig+0x16c>
 8002d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f68 <UART_SetConfig+0x2e4>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b0c      	cmp	r3, #12
 8002d8a:	d82d      	bhi.n	8002de8 <UART_SetConfig+0x164>
 8002d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d94 <UART_SetConfig+0x110>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08002dc9 	.word	0x08002dc9
 8002d98:	08002de9 	.word	0x08002de9
 8002d9c:	08002de9 	.word	0x08002de9
 8002da0:	08002de9 	.word	0x08002de9
 8002da4:	08002dd9 	.word	0x08002dd9
 8002da8:	08002de9 	.word	0x08002de9
 8002dac:	08002de9 	.word	0x08002de9
 8002db0:	08002de9 	.word	0x08002de9
 8002db4:	08002dd1 	.word	0x08002dd1
 8002db8:	08002de9 	.word	0x08002de9
 8002dbc:	08002de9 	.word	0x08002de9
 8002dc0:	08002de9 	.word	0x08002de9
 8002dc4:	08002de1 	.word	0x08002de1
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dce:	e0d8      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dd6:	e0d4      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dde:	e0d0      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002de0:	2308      	movs	r3, #8
 8002de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002de6:	e0cc      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002de8:	2310      	movs	r3, #16
 8002dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dee:	e0c8      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a5e      	ldr	r2, [pc, #376]	@ (8002f70 <UART_SetConfig+0x2ec>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d125      	bne.n	8002e46 <UART_SetConfig+0x1c2>
 8002dfa:	4b5b      	ldr	r3, [pc, #364]	@ (8002f68 <UART_SetConfig+0x2e4>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e04:	2b30      	cmp	r3, #48	@ 0x30
 8002e06:	d016      	beq.n	8002e36 <UART_SetConfig+0x1b2>
 8002e08:	2b30      	cmp	r3, #48	@ 0x30
 8002e0a:	d818      	bhi.n	8002e3e <UART_SetConfig+0x1ba>
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d00a      	beq.n	8002e26 <UART_SetConfig+0x1a2>
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d814      	bhi.n	8002e3e <UART_SetConfig+0x1ba>
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <UART_SetConfig+0x19a>
 8002e18:	2b10      	cmp	r3, #16
 8002e1a:	d008      	beq.n	8002e2e <UART_SetConfig+0x1aa>
 8002e1c:	e00f      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e24:	e0ad      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002e26:	2302      	movs	r3, #2
 8002e28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e2c:	e0a9      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002e2e:	2304      	movs	r3, #4
 8002e30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e34:	e0a5      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002e36:	2308      	movs	r3, #8
 8002e38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e3c:	e0a1      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002e3e:	2310      	movs	r3, #16
 8002e40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e44:	e09d      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f74 <UART_SetConfig+0x2f0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d125      	bne.n	8002e9c <UART_SetConfig+0x218>
 8002e50:	4b45      	ldr	r3, [pc, #276]	@ (8002f68 <UART_SetConfig+0x2e4>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e5c:	d016      	beq.n	8002e8c <UART_SetConfig+0x208>
 8002e5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e60:	d818      	bhi.n	8002e94 <UART_SetConfig+0x210>
 8002e62:	2b80      	cmp	r3, #128	@ 0x80
 8002e64:	d00a      	beq.n	8002e7c <UART_SetConfig+0x1f8>
 8002e66:	2b80      	cmp	r3, #128	@ 0x80
 8002e68:	d814      	bhi.n	8002e94 <UART_SetConfig+0x210>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <UART_SetConfig+0x1f0>
 8002e6e:	2b40      	cmp	r3, #64	@ 0x40
 8002e70:	d008      	beq.n	8002e84 <UART_SetConfig+0x200>
 8002e72:	e00f      	b.n	8002e94 <UART_SetConfig+0x210>
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e7a:	e082      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e82:	e07e      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002e84:	2304      	movs	r3, #4
 8002e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e8a:	e07a      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e92:	e076      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002e94:	2310      	movs	r3, #16
 8002e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e9a:	e072      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a35      	ldr	r2, [pc, #212]	@ (8002f78 <UART_SetConfig+0x2f4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d12a      	bne.n	8002efc <UART_SetConfig+0x278>
 8002ea6:	4b30      	ldr	r3, [pc, #192]	@ (8002f68 <UART_SetConfig+0x2e4>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002eb4:	d01a      	beq.n	8002eec <UART_SetConfig+0x268>
 8002eb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002eba:	d81b      	bhi.n	8002ef4 <UART_SetConfig+0x270>
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec0:	d00c      	beq.n	8002edc <UART_SetConfig+0x258>
 8002ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec6:	d815      	bhi.n	8002ef4 <UART_SetConfig+0x270>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <UART_SetConfig+0x250>
 8002ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ed0:	d008      	beq.n	8002ee4 <UART_SetConfig+0x260>
 8002ed2:	e00f      	b.n	8002ef4 <UART_SetConfig+0x270>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eda:	e052      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002edc:	2302      	movs	r3, #2
 8002ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ee2:	e04e      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eea:	e04a      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002eec:	2308      	movs	r3, #8
 8002eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ef2:	e046      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002efa:	e042      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a17      	ldr	r2, [pc, #92]	@ (8002f60 <UART_SetConfig+0x2dc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d13a      	bne.n	8002f7c <UART_SetConfig+0x2f8>
 8002f06:	4b18      	ldr	r3, [pc, #96]	@ (8002f68 <UART_SetConfig+0x2e4>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f14:	d01a      	beq.n	8002f4c <UART_SetConfig+0x2c8>
 8002f16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f1a:	d81b      	bhi.n	8002f54 <UART_SetConfig+0x2d0>
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f20:	d00c      	beq.n	8002f3c <UART_SetConfig+0x2b8>
 8002f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f26:	d815      	bhi.n	8002f54 <UART_SetConfig+0x2d0>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <UART_SetConfig+0x2b0>
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f30:	d008      	beq.n	8002f44 <UART_SetConfig+0x2c0>
 8002f32:	e00f      	b.n	8002f54 <UART_SetConfig+0x2d0>
 8002f34:	2300      	movs	r3, #0
 8002f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f3a:	e022      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f42:	e01e      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002f44:	2304      	movs	r3, #4
 8002f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f4a:	e01a      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f52:	e016      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002f54:	2310      	movs	r3, #16
 8002f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5a:	e012      	b.n	8002f82 <UART_SetConfig+0x2fe>
 8002f5c:	cfff69f3 	.word	0xcfff69f3
 8002f60:	40008000 	.word	0x40008000
 8002f64:	40013800 	.word	0x40013800
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40004400 	.word	0x40004400
 8002f70:	40004800 	.word	0x40004800
 8002f74:	40004c00 	.word	0x40004c00
 8002f78:	40005000 	.word	0x40005000
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4aae      	ldr	r2, [pc, #696]	@ (8003240 <UART_SetConfig+0x5bc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	f040 8097 	bne.w	80030bc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d823      	bhi.n	8002fde <UART_SetConfig+0x35a>
 8002f96:	a201      	add	r2, pc, #4	@ (adr r2, 8002f9c <UART_SetConfig+0x318>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	08002fc1 	.word	0x08002fc1
 8002fa0:	08002fdf 	.word	0x08002fdf
 8002fa4:	08002fc9 	.word	0x08002fc9
 8002fa8:	08002fdf 	.word	0x08002fdf
 8002fac:	08002fcf 	.word	0x08002fcf
 8002fb0:	08002fdf 	.word	0x08002fdf
 8002fb4:	08002fdf 	.word	0x08002fdf
 8002fb8:	08002fdf 	.word	0x08002fdf
 8002fbc:	08002fd7 	.word	0x08002fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc0:	f7fe ff56 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8002fc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fc6:	e010      	b.n	8002fea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fc8:	4b9e      	ldr	r3, [pc, #632]	@ (8003244 <UART_SetConfig+0x5c0>)
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fcc:	e00d      	b.n	8002fea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fce:	f7fe fee1 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8002fd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fd4:	e009      	b.n	8002fea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fdc:	e005      	b.n	8002fea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fe8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8130 	beq.w	8003252 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	4a94      	ldr	r2, [pc, #592]	@ (8003248 <UART_SetConfig+0x5c4>)
 8002ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	fbb3 f3f2 	udiv	r3, r3, r2
 8003004:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	429a      	cmp	r2, r3
 8003014:	d305      	bcc.n	8003022 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	429a      	cmp	r2, r3
 8003020:	d903      	bls.n	800302a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003028:	e113      	b.n	8003252 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	2200      	movs	r2, #0
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	60fa      	str	r2, [r7, #12]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	4a84      	ldr	r2, [pc, #528]	@ (8003248 <UART_SetConfig+0x5c4>)
 8003038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800303c:	b29b      	uxth	r3, r3
 800303e:	2200      	movs	r2, #0
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003048:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800304c:	f7fd f940 	bl	80002d0 <__aeabi_uldivmod>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	020b      	lsls	r3, r1, #8
 8003062:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003066:	0202      	lsls	r2, r0, #8
 8003068:	6979      	ldr	r1, [r7, #20]
 800306a:	6849      	ldr	r1, [r1, #4]
 800306c:	0849      	lsrs	r1, r1, #1
 800306e:	2000      	movs	r0, #0
 8003070:	460c      	mov	r4, r1
 8003072:	4605      	mov	r5, r0
 8003074:	eb12 0804 	adds.w	r8, r2, r4
 8003078:	eb43 0905 	adc.w	r9, r3, r5
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	469a      	mov	sl, r3
 8003084:	4693      	mov	fp, r2
 8003086:	4652      	mov	r2, sl
 8003088:	465b      	mov	r3, fp
 800308a:	4640      	mov	r0, r8
 800308c:	4649      	mov	r1, r9
 800308e:	f7fd f91f 	bl	80002d0 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4613      	mov	r3, r2
 8003098:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030a0:	d308      	bcc.n	80030b4 <UART_SetConfig+0x430>
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030a8:	d204      	bcs.n	80030b4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a3a      	ldr	r2, [r7, #32]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	e0ce      	b.n	8003252 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030ba:	e0ca      	b.n	8003252 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030c4:	d166      	bne.n	8003194 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80030c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d827      	bhi.n	800311e <UART_SetConfig+0x49a>
 80030ce:	a201      	add	r2, pc, #4	@ (adr r2, 80030d4 <UART_SetConfig+0x450>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	080030f9 	.word	0x080030f9
 80030d8:	08003101 	.word	0x08003101
 80030dc:	08003109 	.word	0x08003109
 80030e0:	0800311f 	.word	0x0800311f
 80030e4:	0800310f 	.word	0x0800310f
 80030e8:	0800311f 	.word	0x0800311f
 80030ec:	0800311f 	.word	0x0800311f
 80030f0:	0800311f 	.word	0x0800311f
 80030f4:	08003117 	.word	0x08003117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f8:	f7fe feba 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 80030fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030fe:	e014      	b.n	800312a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003100:	f7fe fecc 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8003104:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003106:	e010      	b.n	800312a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003108:	4b4e      	ldr	r3, [pc, #312]	@ (8003244 <UART_SetConfig+0x5c0>)
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800310c:	e00d      	b.n	800312a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800310e:	f7fe fe41 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8003112:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003114:	e009      	b.n	800312a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800311c:	e005      	b.n	800312a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003128:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8090 	beq.w	8003252 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	4a44      	ldr	r2, [pc, #272]	@ (8003248 <UART_SetConfig+0x5c4>)
 8003138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800313c:	461a      	mov	r2, r3
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	fbb3 f3f2 	udiv	r3, r3, r2
 8003144:	005a      	lsls	r2, r3, #1
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	441a      	add	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	2b0f      	cmp	r3, #15
 800315c:	d916      	bls.n	800318c <UART_SetConfig+0x508>
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003164:	d212      	bcs.n	800318c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	b29b      	uxth	r3, r3
 800316a:	f023 030f 	bic.w	r3, r3, #15
 800316e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	b29b      	uxth	r3, r3
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	b29a      	uxth	r2, r3
 800317c:	8bfb      	ldrh	r3, [r7, #30]
 800317e:	4313      	orrs	r3, r2
 8003180:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	8bfa      	ldrh	r2, [r7, #30]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	e062      	b.n	8003252 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003192:	e05e      	b.n	8003252 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003194:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003198:	2b08      	cmp	r3, #8
 800319a:	d828      	bhi.n	80031ee <UART_SetConfig+0x56a>
 800319c:	a201      	add	r2, pc, #4	@ (adr r2, 80031a4 <UART_SetConfig+0x520>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031c9 	.word	0x080031c9
 80031a8:	080031d1 	.word	0x080031d1
 80031ac:	080031d9 	.word	0x080031d9
 80031b0:	080031ef 	.word	0x080031ef
 80031b4:	080031df 	.word	0x080031df
 80031b8:	080031ef 	.word	0x080031ef
 80031bc:	080031ef 	.word	0x080031ef
 80031c0:	080031ef 	.word	0x080031ef
 80031c4:	080031e7 	.word	0x080031e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c8:	f7fe fe52 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 80031cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031ce:	e014      	b.n	80031fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d0:	f7fe fe64 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 80031d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031d6:	e010      	b.n	80031fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003244 <UART_SetConfig+0x5c0>)
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031dc:	e00d      	b.n	80031fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031de:	f7fe fdd9 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 80031e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031e4:	e009      	b.n	80031fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031ec:	e005      	b.n	80031fa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031f8:	bf00      	nop
    }

    if (pclk != 0U)
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d028      	beq.n	8003252 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	4a10      	ldr	r2, [pc, #64]	@ (8003248 <UART_SetConfig+0x5c4>)
 8003206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800320a:	461a      	mov	r2, r3
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	441a      	add	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	2b0f      	cmp	r3, #15
 8003228:	d910      	bls.n	800324c <UART_SetConfig+0x5c8>
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003230:	d20c      	bcs.n	800324c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	b29a      	uxth	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	e009      	b.n	8003252 <UART_SetConfig+0x5ce>
 800323e:	bf00      	nop
 8003240:	40008000 	.word	0x40008000
 8003244:	00f42400 	.word	0x00f42400
 8003248:	08004264 	.word	0x08004264
      }
      else
      {
        ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2201      	movs	r2, #1
 8003256:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2201      	movs	r2, #1
 800325e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2200      	movs	r2, #0
 8003266:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2200      	movs	r2, #0
 800326c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800326e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003272:	4618      	mov	r0, r3
 8003274:	3730      	adds	r7, #48	@ 0x30
 8003276:	46bd      	mov	sp, r7
 8003278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800327c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01a      	beq.n	8003392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800337a:	d10a      	bne.n	8003392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
  }
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b098      	sub	sp, #96	@ 0x60
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033d0:	f7fd fcec 	bl	8000dac <HAL_GetTick>
 80033d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d12f      	bne.n	8003444 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ec:	2200      	movs	r2, #0
 80033ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f88e 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d022      	beq.n	8003444 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800340c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003412:	653b      	str	r3, [r7, #80]	@ 0x50
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800341c:	647b      	str	r3, [r7, #68]	@ 0x44
 800341e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003422:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800342a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e6      	bne.n	80033fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e063      	b.n	800350c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b04      	cmp	r3, #4
 8003450:	d149      	bne.n	80034e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003452:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345a:	2200      	movs	r2, #0
 800345c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f857 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d03c      	beq.n	80034e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	623b      	str	r3, [r7, #32]
   return(result);
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003480:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800348a:	633b      	str	r3, [r7, #48]	@ 0x30
 800348c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e6      	bne.n	800346c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3308      	adds	r3, #8
 80034a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3308      	adds	r3, #8
 80034bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034be:	61fa      	str	r2, [r7, #28]
 80034c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	69b9      	ldr	r1, [r7, #24]
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	617b      	str	r3, [r7, #20]
   return(result);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e5      	bne.n	800349e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e012      	b.n	800350c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3758      	adds	r7, #88	@ 0x58
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003524:	e04f      	b.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d04b      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fd fc3d 	bl	8000dac <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <UART_WaitOnFlagUntilTimeout+0x30>
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e04e      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d037      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b80      	cmp	r3, #128	@ 0x80
 800355a:	d034      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b40      	cmp	r3, #64	@ 0x40
 8003560:	d031      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b08      	cmp	r3, #8
 800356e:	d110      	bne.n	8003592 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2208      	movs	r2, #8
 8003576:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f838 	bl	80035ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2208      	movs	r2, #8
 8003582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e029      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800359c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035a0:	d111      	bne.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f81e 	bl	80035ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e00f      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4013      	ands	r3, r2
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	bf0c      	ite	eq
 80035d6:	2301      	moveq	r3, #1
 80035d8:	2300      	movne	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d0a0      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b095      	sub	sp, #84	@ 0x54
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fe:	e853 3f00 	ldrex	r3, [r3]
 8003602:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003606:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800360a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003614:	643b      	str	r3, [r7, #64]	@ 0x40
 8003616:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003618:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800361a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800361c:	e841 2300 	strex	r3, r2, [r1]
 8003620:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e6      	bne.n	80035f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3308      	adds	r3, #8
 800362e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	61fb      	str	r3, [r7, #28]
   return(result);
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3308      	adds	r3, #8
 800364a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800364c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800364e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e3      	bne.n	8003628 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d118      	bne.n	800369a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	60bb      	str	r3, [r7, #8]
   return(result);
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f023 0310 	bic.w	r3, r3, #16
 800367c:	647b      	str	r3, [r7, #68]	@ 0x44
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	6979      	ldr	r1, [r7, #20]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	613b      	str	r3, [r7, #16]
   return(result);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e6      	bne.n	8003668 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80036ae:	bf00      	nop
 80036b0:	3754      	adds	r7, #84	@ 0x54
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e027      	b.n	8003720 <HAL_UARTEx_DisableFifoMode+0x66>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2224      	movs	r2, #36	@ 0x24
 80036dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80036fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003740:	2302      	movs	r3, #2
 8003742:	e02d      	b.n	80037a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	@ 0x24
 8003750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f84f 	bl	8003824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037bc:	2302      	movs	r3, #2
 80037be:	e02d      	b.n	800381c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	@ 0x24
 80037cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f811 	bl	8003824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003830:	2b00      	cmp	r3, #0
 8003832:	d108      	bne.n	8003846 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003844:	e031      	b.n	80038aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003846:	2308      	movs	r3, #8
 8003848:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800384a:	2308      	movs	r3, #8
 800384c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	0e5b      	lsrs	r3, r3, #25
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	0f5b      	lsrs	r3, r3, #29
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800386e:	7bbb      	ldrb	r3, [r7, #14]
 8003870:	7b3a      	ldrb	r2, [r7, #12]
 8003872:	4911      	ldr	r1, [pc, #68]	@ (80038b8 <UARTEx_SetNbDataToProcess+0x94>)
 8003874:	5c8a      	ldrb	r2, [r1, r2]
 8003876:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800387a:	7b3a      	ldrb	r2, [r7, #12]
 800387c:	490f      	ldr	r1, [pc, #60]	@ (80038bc <UARTEx_SetNbDataToProcess+0x98>)
 800387e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003880:	fb93 f3f2 	sdiv	r3, r3, r2
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	7b7a      	ldrb	r2, [r7, #13]
 8003890:	4909      	ldr	r1, [pc, #36]	@ (80038b8 <UARTEx_SetNbDataToProcess+0x94>)
 8003892:	5c8a      	ldrb	r2, [r1, r2]
 8003894:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003898:	7b7a      	ldrb	r2, [r7, #13]
 800389a:	4908      	ldr	r1, [pc, #32]	@ (80038bc <UARTEx_SetNbDataToProcess+0x98>)
 800389c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800389e:	fb93 f3f2 	sdiv	r3, r3, r2
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	0800427c 	.word	0x0800427c
 80038bc:	08004284 	.word	0x08004284

080038c0 <siprintf>:
 80038c0:	b40e      	push	{r1, r2, r3}
 80038c2:	b500      	push	{lr}
 80038c4:	b09c      	sub	sp, #112	@ 0x70
 80038c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80038c8:	9002      	str	r0, [sp, #8]
 80038ca:	9006      	str	r0, [sp, #24]
 80038cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80038d0:	4809      	ldr	r0, [pc, #36]	@ (80038f8 <siprintf+0x38>)
 80038d2:	9107      	str	r1, [sp, #28]
 80038d4:	9104      	str	r1, [sp, #16]
 80038d6:	4909      	ldr	r1, [pc, #36]	@ (80038fc <siprintf+0x3c>)
 80038d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80038dc:	9105      	str	r1, [sp, #20]
 80038de:	6800      	ldr	r0, [r0, #0]
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	a902      	add	r1, sp, #8
 80038e4:	f000 f994 	bl	8003c10 <_svfiprintf_r>
 80038e8:	9b02      	ldr	r3, [sp, #8]
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	b01c      	add	sp, #112	@ 0x70
 80038f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038f4:	b003      	add	sp, #12
 80038f6:	4770      	bx	lr
 80038f8:	2000000c 	.word	0x2000000c
 80038fc:	ffff0208 	.word	0xffff0208

08003900 <memset>:
 8003900:	4402      	add	r2, r0
 8003902:	4603      	mov	r3, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <__errno>:
 8003910:	4b01      	ldr	r3, [pc, #4]	@ (8003918 <__errno+0x8>)
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	2000000c 	.word	0x2000000c

0800391c <__libc_init_array>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	4d0d      	ldr	r5, [pc, #52]	@ (8003954 <__libc_init_array+0x38>)
 8003920:	4c0d      	ldr	r4, [pc, #52]	@ (8003958 <__libc_init_array+0x3c>)
 8003922:	1b64      	subs	r4, r4, r5
 8003924:	10a4      	asrs	r4, r4, #2
 8003926:	2600      	movs	r6, #0
 8003928:	42a6      	cmp	r6, r4
 800392a:	d109      	bne.n	8003940 <__libc_init_array+0x24>
 800392c:	4d0b      	ldr	r5, [pc, #44]	@ (800395c <__libc_init_array+0x40>)
 800392e:	4c0c      	ldr	r4, [pc, #48]	@ (8003960 <__libc_init_array+0x44>)
 8003930:	f000 fc66 	bl	8004200 <_init>
 8003934:	1b64      	subs	r4, r4, r5
 8003936:	10a4      	asrs	r4, r4, #2
 8003938:	2600      	movs	r6, #0
 800393a:	42a6      	cmp	r6, r4
 800393c:	d105      	bne.n	800394a <__libc_init_array+0x2e>
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	f855 3b04 	ldr.w	r3, [r5], #4
 8003944:	4798      	blx	r3
 8003946:	3601      	adds	r6, #1
 8003948:	e7ee      	b.n	8003928 <__libc_init_array+0xc>
 800394a:	f855 3b04 	ldr.w	r3, [r5], #4
 800394e:	4798      	blx	r3
 8003950:	3601      	adds	r6, #1
 8003952:	e7f2      	b.n	800393a <__libc_init_array+0x1e>
 8003954:	080042c8 	.word	0x080042c8
 8003958:	080042c8 	.word	0x080042c8
 800395c:	080042c8 	.word	0x080042c8
 8003960:	080042cc 	.word	0x080042cc

08003964 <__retarget_lock_acquire_recursive>:
 8003964:	4770      	bx	lr

08003966 <__retarget_lock_release_recursive>:
 8003966:	4770      	bx	lr

08003968 <_free_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4605      	mov	r5, r0
 800396c:	2900      	cmp	r1, #0
 800396e:	d041      	beq.n	80039f4 <_free_r+0x8c>
 8003970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003974:	1f0c      	subs	r4, r1, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	bfb8      	it	lt
 800397a:	18e4      	addlt	r4, r4, r3
 800397c:	f000 f8e0 	bl	8003b40 <__malloc_lock>
 8003980:	4a1d      	ldr	r2, [pc, #116]	@ (80039f8 <_free_r+0x90>)
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	b933      	cbnz	r3, 8003994 <_free_r+0x2c>
 8003986:	6063      	str	r3, [r4, #4]
 8003988:	6014      	str	r4, [r2, #0]
 800398a:	4628      	mov	r0, r5
 800398c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003990:	f000 b8dc 	b.w	8003b4c <__malloc_unlock>
 8003994:	42a3      	cmp	r3, r4
 8003996:	d908      	bls.n	80039aa <_free_r+0x42>
 8003998:	6820      	ldr	r0, [r4, #0]
 800399a:	1821      	adds	r1, r4, r0
 800399c:	428b      	cmp	r3, r1
 800399e:	bf01      	itttt	eq
 80039a0:	6819      	ldreq	r1, [r3, #0]
 80039a2:	685b      	ldreq	r3, [r3, #4]
 80039a4:	1809      	addeq	r1, r1, r0
 80039a6:	6021      	streq	r1, [r4, #0]
 80039a8:	e7ed      	b.n	8003986 <_free_r+0x1e>
 80039aa:	461a      	mov	r2, r3
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b10b      	cbz	r3, 80039b4 <_free_r+0x4c>
 80039b0:	42a3      	cmp	r3, r4
 80039b2:	d9fa      	bls.n	80039aa <_free_r+0x42>
 80039b4:	6811      	ldr	r1, [r2, #0]
 80039b6:	1850      	adds	r0, r2, r1
 80039b8:	42a0      	cmp	r0, r4
 80039ba:	d10b      	bne.n	80039d4 <_free_r+0x6c>
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	4401      	add	r1, r0
 80039c0:	1850      	adds	r0, r2, r1
 80039c2:	4283      	cmp	r3, r0
 80039c4:	6011      	str	r1, [r2, #0]
 80039c6:	d1e0      	bne.n	800398a <_free_r+0x22>
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	6053      	str	r3, [r2, #4]
 80039ce:	4408      	add	r0, r1
 80039d0:	6010      	str	r0, [r2, #0]
 80039d2:	e7da      	b.n	800398a <_free_r+0x22>
 80039d4:	d902      	bls.n	80039dc <_free_r+0x74>
 80039d6:	230c      	movs	r3, #12
 80039d8:	602b      	str	r3, [r5, #0]
 80039da:	e7d6      	b.n	800398a <_free_r+0x22>
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	1821      	adds	r1, r4, r0
 80039e0:	428b      	cmp	r3, r1
 80039e2:	bf04      	itt	eq
 80039e4:	6819      	ldreq	r1, [r3, #0]
 80039e6:	685b      	ldreq	r3, [r3, #4]
 80039e8:	6063      	str	r3, [r4, #4]
 80039ea:	bf04      	itt	eq
 80039ec:	1809      	addeq	r1, r1, r0
 80039ee:	6021      	streq	r1, [r4, #0]
 80039f0:	6054      	str	r4, [r2, #4]
 80039f2:	e7ca      	b.n	800398a <_free_r+0x22>
 80039f4:	bd38      	pop	{r3, r4, r5, pc}
 80039f6:	bf00      	nop
 80039f8:	20000324 	.word	0x20000324

080039fc <sbrk_aligned>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	4e0f      	ldr	r6, [pc, #60]	@ (8003a3c <sbrk_aligned+0x40>)
 8003a00:	460c      	mov	r4, r1
 8003a02:	6831      	ldr	r1, [r6, #0]
 8003a04:	4605      	mov	r5, r0
 8003a06:	b911      	cbnz	r1, 8003a0e <sbrk_aligned+0x12>
 8003a08:	f000 fba6 	bl	8004158 <_sbrk_r>
 8003a0c:	6030      	str	r0, [r6, #0]
 8003a0e:	4621      	mov	r1, r4
 8003a10:	4628      	mov	r0, r5
 8003a12:	f000 fba1 	bl	8004158 <_sbrk_r>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	d103      	bne.n	8003a22 <sbrk_aligned+0x26>
 8003a1a:	f04f 34ff 	mov.w	r4, #4294967295
 8003a1e:	4620      	mov	r0, r4
 8003a20:	bd70      	pop	{r4, r5, r6, pc}
 8003a22:	1cc4      	adds	r4, r0, #3
 8003a24:	f024 0403 	bic.w	r4, r4, #3
 8003a28:	42a0      	cmp	r0, r4
 8003a2a:	d0f8      	beq.n	8003a1e <sbrk_aligned+0x22>
 8003a2c:	1a21      	subs	r1, r4, r0
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 fb92 	bl	8004158 <_sbrk_r>
 8003a34:	3001      	adds	r0, #1
 8003a36:	d1f2      	bne.n	8003a1e <sbrk_aligned+0x22>
 8003a38:	e7ef      	b.n	8003a1a <sbrk_aligned+0x1e>
 8003a3a:	bf00      	nop
 8003a3c:	20000320 	.word	0x20000320

08003a40 <_malloc_r>:
 8003a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a44:	1ccd      	adds	r5, r1, #3
 8003a46:	f025 0503 	bic.w	r5, r5, #3
 8003a4a:	3508      	adds	r5, #8
 8003a4c:	2d0c      	cmp	r5, #12
 8003a4e:	bf38      	it	cc
 8003a50:	250c      	movcc	r5, #12
 8003a52:	2d00      	cmp	r5, #0
 8003a54:	4606      	mov	r6, r0
 8003a56:	db01      	blt.n	8003a5c <_malloc_r+0x1c>
 8003a58:	42a9      	cmp	r1, r5
 8003a5a:	d904      	bls.n	8003a66 <_malloc_r+0x26>
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	6033      	str	r3, [r6, #0]
 8003a60:	2000      	movs	r0, #0
 8003a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b3c <_malloc_r+0xfc>
 8003a6a:	f000 f869 	bl	8003b40 <__malloc_lock>
 8003a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a72:	461c      	mov	r4, r3
 8003a74:	bb44      	cbnz	r4, 8003ac8 <_malloc_r+0x88>
 8003a76:	4629      	mov	r1, r5
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f7ff ffbf 	bl	80039fc <sbrk_aligned>
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	4604      	mov	r4, r0
 8003a82:	d158      	bne.n	8003b36 <_malloc_r+0xf6>
 8003a84:	f8d8 4000 	ldr.w	r4, [r8]
 8003a88:	4627      	mov	r7, r4
 8003a8a:	2f00      	cmp	r7, #0
 8003a8c:	d143      	bne.n	8003b16 <_malloc_r+0xd6>
 8003a8e:	2c00      	cmp	r4, #0
 8003a90:	d04b      	beq.n	8003b2a <_malloc_r+0xea>
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	4639      	mov	r1, r7
 8003a96:	4630      	mov	r0, r6
 8003a98:	eb04 0903 	add.w	r9, r4, r3
 8003a9c:	f000 fb5c 	bl	8004158 <_sbrk_r>
 8003aa0:	4581      	cmp	r9, r0
 8003aa2:	d142      	bne.n	8003b2a <_malloc_r+0xea>
 8003aa4:	6821      	ldr	r1, [r4, #0]
 8003aa6:	1a6d      	subs	r5, r5, r1
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	4630      	mov	r0, r6
 8003aac:	f7ff ffa6 	bl	80039fc <sbrk_aligned>
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d03a      	beq.n	8003b2a <_malloc_r+0xea>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	442b      	add	r3, r5
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	f8d8 3000 	ldr.w	r3, [r8]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	bb62      	cbnz	r2, 8003b1c <_malloc_r+0xdc>
 8003ac2:	f8c8 7000 	str.w	r7, [r8]
 8003ac6:	e00f      	b.n	8003ae8 <_malloc_r+0xa8>
 8003ac8:	6822      	ldr	r2, [r4, #0]
 8003aca:	1b52      	subs	r2, r2, r5
 8003acc:	d420      	bmi.n	8003b10 <_malloc_r+0xd0>
 8003ace:	2a0b      	cmp	r2, #11
 8003ad0:	d917      	bls.n	8003b02 <_malloc_r+0xc2>
 8003ad2:	1961      	adds	r1, r4, r5
 8003ad4:	42a3      	cmp	r3, r4
 8003ad6:	6025      	str	r5, [r4, #0]
 8003ad8:	bf18      	it	ne
 8003ada:	6059      	strne	r1, [r3, #4]
 8003adc:	6863      	ldr	r3, [r4, #4]
 8003ade:	bf08      	it	eq
 8003ae0:	f8c8 1000 	streq.w	r1, [r8]
 8003ae4:	5162      	str	r2, [r4, r5]
 8003ae6:	604b      	str	r3, [r1, #4]
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f000 f82f 	bl	8003b4c <__malloc_unlock>
 8003aee:	f104 000b 	add.w	r0, r4, #11
 8003af2:	1d23      	adds	r3, r4, #4
 8003af4:	f020 0007 	bic.w	r0, r0, #7
 8003af8:	1ac2      	subs	r2, r0, r3
 8003afa:	bf1c      	itt	ne
 8003afc:	1a1b      	subne	r3, r3, r0
 8003afe:	50a3      	strne	r3, [r4, r2]
 8003b00:	e7af      	b.n	8003a62 <_malloc_r+0x22>
 8003b02:	6862      	ldr	r2, [r4, #4]
 8003b04:	42a3      	cmp	r3, r4
 8003b06:	bf0c      	ite	eq
 8003b08:	f8c8 2000 	streq.w	r2, [r8]
 8003b0c:	605a      	strne	r2, [r3, #4]
 8003b0e:	e7eb      	b.n	8003ae8 <_malloc_r+0xa8>
 8003b10:	4623      	mov	r3, r4
 8003b12:	6864      	ldr	r4, [r4, #4]
 8003b14:	e7ae      	b.n	8003a74 <_malloc_r+0x34>
 8003b16:	463c      	mov	r4, r7
 8003b18:	687f      	ldr	r7, [r7, #4]
 8003b1a:	e7b6      	b.n	8003a8a <_malloc_r+0x4a>
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	42a3      	cmp	r3, r4
 8003b22:	d1fb      	bne.n	8003b1c <_malloc_r+0xdc>
 8003b24:	2300      	movs	r3, #0
 8003b26:	6053      	str	r3, [r2, #4]
 8003b28:	e7de      	b.n	8003ae8 <_malloc_r+0xa8>
 8003b2a:	230c      	movs	r3, #12
 8003b2c:	6033      	str	r3, [r6, #0]
 8003b2e:	4630      	mov	r0, r6
 8003b30:	f000 f80c 	bl	8003b4c <__malloc_unlock>
 8003b34:	e794      	b.n	8003a60 <_malloc_r+0x20>
 8003b36:	6005      	str	r5, [r0, #0]
 8003b38:	e7d6      	b.n	8003ae8 <_malloc_r+0xa8>
 8003b3a:	bf00      	nop
 8003b3c:	20000324 	.word	0x20000324

08003b40 <__malloc_lock>:
 8003b40:	4801      	ldr	r0, [pc, #4]	@ (8003b48 <__malloc_lock+0x8>)
 8003b42:	f7ff bf0f 	b.w	8003964 <__retarget_lock_acquire_recursive>
 8003b46:	bf00      	nop
 8003b48:	2000031c 	.word	0x2000031c

08003b4c <__malloc_unlock>:
 8003b4c:	4801      	ldr	r0, [pc, #4]	@ (8003b54 <__malloc_unlock+0x8>)
 8003b4e:	f7ff bf0a 	b.w	8003966 <__retarget_lock_release_recursive>
 8003b52:	bf00      	nop
 8003b54:	2000031c 	.word	0x2000031c

08003b58 <__ssputs_r>:
 8003b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	688e      	ldr	r6, [r1, #8]
 8003b5e:	461f      	mov	r7, r3
 8003b60:	42be      	cmp	r6, r7
 8003b62:	680b      	ldr	r3, [r1, #0]
 8003b64:	4682      	mov	sl, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	4690      	mov	r8, r2
 8003b6a:	d82d      	bhi.n	8003bc8 <__ssputs_r+0x70>
 8003b6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b74:	d026      	beq.n	8003bc4 <__ssputs_r+0x6c>
 8003b76:	6965      	ldr	r5, [r4, #20]
 8003b78:	6909      	ldr	r1, [r1, #16]
 8003b7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b7e:	eba3 0901 	sub.w	r9, r3, r1
 8003b82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b86:	1c7b      	adds	r3, r7, #1
 8003b88:	444b      	add	r3, r9
 8003b8a:	106d      	asrs	r5, r5, #1
 8003b8c:	429d      	cmp	r5, r3
 8003b8e:	bf38      	it	cc
 8003b90:	461d      	movcc	r5, r3
 8003b92:	0553      	lsls	r3, r2, #21
 8003b94:	d527      	bpl.n	8003be6 <__ssputs_r+0x8e>
 8003b96:	4629      	mov	r1, r5
 8003b98:	f7ff ff52 	bl	8003a40 <_malloc_r>
 8003b9c:	4606      	mov	r6, r0
 8003b9e:	b360      	cbz	r0, 8003bfa <__ssputs_r+0xa2>
 8003ba0:	6921      	ldr	r1, [r4, #16]
 8003ba2:	464a      	mov	r2, r9
 8003ba4:	f000 fae8 	bl	8004178 <memcpy>
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bb2:	81a3      	strh	r3, [r4, #12]
 8003bb4:	6126      	str	r6, [r4, #16]
 8003bb6:	6165      	str	r5, [r4, #20]
 8003bb8:	444e      	add	r6, r9
 8003bba:	eba5 0509 	sub.w	r5, r5, r9
 8003bbe:	6026      	str	r6, [r4, #0]
 8003bc0:	60a5      	str	r5, [r4, #8]
 8003bc2:	463e      	mov	r6, r7
 8003bc4:	42be      	cmp	r6, r7
 8003bc6:	d900      	bls.n	8003bca <__ssputs_r+0x72>
 8003bc8:	463e      	mov	r6, r7
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	4632      	mov	r2, r6
 8003bce:	4641      	mov	r1, r8
 8003bd0:	f000 faa8 	bl	8004124 <memmove>
 8003bd4:	68a3      	ldr	r3, [r4, #8]
 8003bd6:	1b9b      	subs	r3, r3, r6
 8003bd8:	60a3      	str	r3, [r4, #8]
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	4433      	add	r3, r6
 8003bde:	6023      	str	r3, [r4, #0]
 8003be0:	2000      	movs	r0, #0
 8003be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be6:	462a      	mov	r2, r5
 8003be8:	f000 fad4 	bl	8004194 <_realloc_r>
 8003bec:	4606      	mov	r6, r0
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d1e0      	bne.n	8003bb4 <__ssputs_r+0x5c>
 8003bf2:	6921      	ldr	r1, [r4, #16]
 8003bf4:	4650      	mov	r0, sl
 8003bf6:	f7ff feb7 	bl	8003968 <_free_r>
 8003bfa:	230c      	movs	r3, #12
 8003bfc:	f8ca 3000 	str.w	r3, [sl]
 8003c00:	89a3      	ldrh	r3, [r4, #12]
 8003c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c06:	81a3      	strh	r3, [r4, #12]
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	e7e9      	b.n	8003be2 <__ssputs_r+0x8a>
	...

08003c10 <_svfiprintf_r>:
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	4698      	mov	r8, r3
 8003c16:	898b      	ldrh	r3, [r1, #12]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	b09d      	sub	sp, #116	@ 0x74
 8003c1c:	4607      	mov	r7, r0
 8003c1e:	460d      	mov	r5, r1
 8003c20:	4614      	mov	r4, r2
 8003c22:	d510      	bpl.n	8003c46 <_svfiprintf_r+0x36>
 8003c24:	690b      	ldr	r3, [r1, #16]
 8003c26:	b973      	cbnz	r3, 8003c46 <_svfiprintf_r+0x36>
 8003c28:	2140      	movs	r1, #64	@ 0x40
 8003c2a:	f7ff ff09 	bl	8003a40 <_malloc_r>
 8003c2e:	6028      	str	r0, [r5, #0]
 8003c30:	6128      	str	r0, [r5, #16]
 8003c32:	b930      	cbnz	r0, 8003c42 <_svfiprintf_r+0x32>
 8003c34:	230c      	movs	r3, #12
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	b01d      	add	sp, #116	@ 0x74
 8003c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c42:	2340      	movs	r3, #64	@ 0x40
 8003c44:	616b      	str	r3, [r5, #20]
 8003c46:	2300      	movs	r3, #0
 8003c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c54:	2330      	movs	r3, #48	@ 0x30
 8003c56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003df4 <_svfiprintf_r+0x1e4>
 8003c5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c5e:	f04f 0901 	mov.w	r9, #1
 8003c62:	4623      	mov	r3, r4
 8003c64:	469a      	mov	sl, r3
 8003c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c6a:	b10a      	cbz	r2, 8003c70 <_svfiprintf_r+0x60>
 8003c6c:	2a25      	cmp	r2, #37	@ 0x25
 8003c6e:	d1f9      	bne.n	8003c64 <_svfiprintf_r+0x54>
 8003c70:	ebba 0b04 	subs.w	fp, sl, r4
 8003c74:	d00b      	beq.n	8003c8e <_svfiprintf_r+0x7e>
 8003c76:	465b      	mov	r3, fp
 8003c78:	4622      	mov	r2, r4
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	f7ff ff6b 	bl	8003b58 <__ssputs_r>
 8003c82:	3001      	adds	r0, #1
 8003c84:	f000 80a7 	beq.w	8003dd6 <_svfiprintf_r+0x1c6>
 8003c88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c8a:	445a      	add	r2, fp
 8003c8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 809f 	beq.w	8003dd6 <_svfiprintf_r+0x1c6>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ca2:	f10a 0a01 	add.w	sl, sl, #1
 8003ca6:	9304      	str	r3, [sp, #16]
 8003ca8:	9307      	str	r3, [sp, #28]
 8003caa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003cae:	931a      	str	r3, [sp, #104]	@ 0x68
 8003cb0:	4654      	mov	r4, sl
 8003cb2:	2205      	movs	r2, #5
 8003cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb8:	484e      	ldr	r0, [pc, #312]	@ (8003df4 <_svfiprintf_r+0x1e4>)
 8003cba:	f7fc fab9 	bl	8000230 <memchr>
 8003cbe:	9a04      	ldr	r2, [sp, #16]
 8003cc0:	b9d8      	cbnz	r0, 8003cfa <_svfiprintf_r+0xea>
 8003cc2:	06d0      	lsls	r0, r2, #27
 8003cc4:	bf44      	itt	mi
 8003cc6:	2320      	movmi	r3, #32
 8003cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ccc:	0711      	lsls	r1, r2, #28
 8003cce:	bf44      	itt	mi
 8003cd0:	232b      	movmi	r3, #43	@ 0x2b
 8003cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cdc:	d015      	beq.n	8003d0a <_svfiprintf_r+0xfa>
 8003cde:	9a07      	ldr	r2, [sp, #28]
 8003ce0:	4654      	mov	r4, sl
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f04f 0c0a 	mov.w	ip, #10
 8003ce8:	4621      	mov	r1, r4
 8003cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cee:	3b30      	subs	r3, #48	@ 0x30
 8003cf0:	2b09      	cmp	r3, #9
 8003cf2:	d94b      	bls.n	8003d8c <_svfiprintf_r+0x17c>
 8003cf4:	b1b0      	cbz	r0, 8003d24 <_svfiprintf_r+0x114>
 8003cf6:	9207      	str	r2, [sp, #28]
 8003cf8:	e014      	b.n	8003d24 <_svfiprintf_r+0x114>
 8003cfa:	eba0 0308 	sub.w	r3, r0, r8
 8003cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8003d02:	4313      	orrs	r3, r2
 8003d04:	9304      	str	r3, [sp, #16]
 8003d06:	46a2      	mov	sl, r4
 8003d08:	e7d2      	b.n	8003cb0 <_svfiprintf_r+0xa0>
 8003d0a:	9b03      	ldr	r3, [sp, #12]
 8003d0c:	1d19      	adds	r1, r3, #4
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	9103      	str	r1, [sp, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bfbb      	ittet	lt
 8003d16:	425b      	neglt	r3, r3
 8003d18:	f042 0202 	orrlt.w	r2, r2, #2
 8003d1c:	9307      	strge	r3, [sp, #28]
 8003d1e:	9307      	strlt	r3, [sp, #28]
 8003d20:	bfb8      	it	lt
 8003d22:	9204      	strlt	r2, [sp, #16]
 8003d24:	7823      	ldrb	r3, [r4, #0]
 8003d26:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d28:	d10a      	bne.n	8003d40 <_svfiprintf_r+0x130>
 8003d2a:	7863      	ldrb	r3, [r4, #1]
 8003d2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d2e:	d132      	bne.n	8003d96 <_svfiprintf_r+0x186>
 8003d30:	9b03      	ldr	r3, [sp, #12]
 8003d32:	1d1a      	adds	r2, r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	9203      	str	r2, [sp, #12]
 8003d38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d3c:	3402      	adds	r4, #2
 8003d3e:	9305      	str	r3, [sp, #20]
 8003d40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e04 <_svfiprintf_r+0x1f4>
 8003d44:	7821      	ldrb	r1, [r4, #0]
 8003d46:	2203      	movs	r2, #3
 8003d48:	4650      	mov	r0, sl
 8003d4a:	f7fc fa71 	bl	8000230 <memchr>
 8003d4e:	b138      	cbz	r0, 8003d60 <_svfiprintf_r+0x150>
 8003d50:	9b04      	ldr	r3, [sp, #16]
 8003d52:	eba0 000a 	sub.w	r0, r0, sl
 8003d56:	2240      	movs	r2, #64	@ 0x40
 8003d58:	4082      	lsls	r2, r0
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	3401      	adds	r4, #1
 8003d5e:	9304      	str	r3, [sp, #16]
 8003d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d64:	4824      	ldr	r0, [pc, #144]	@ (8003df8 <_svfiprintf_r+0x1e8>)
 8003d66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d6a:	2206      	movs	r2, #6
 8003d6c:	f7fc fa60 	bl	8000230 <memchr>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d036      	beq.n	8003de2 <_svfiprintf_r+0x1d2>
 8003d74:	4b21      	ldr	r3, [pc, #132]	@ (8003dfc <_svfiprintf_r+0x1ec>)
 8003d76:	bb1b      	cbnz	r3, 8003dc0 <_svfiprintf_r+0x1b0>
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	3307      	adds	r3, #7
 8003d7c:	f023 0307 	bic.w	r3, r3, #7
 8003d80:	3308      	adds	r3, #8
 8003d82:	9303      	str	r3, [sp, #12]
 8003d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d86:	4433      	add	r3, r6
 8003d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d8a:	e76a      	b.n	8003c62 <_svfiprintf_r+0x52>
 8003d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d90:	460c      	mov	r4, r1
 8003d92:	2001      	movs	r0, #1
 8003d94:	e7a8      	b.n	8003ce8 <_svfiprintf_r+0xd8>
 8003d96:	2300      	movs	r3, #0
 8003d98:	3401      	adds	r4, #1
 8003d9a:	9305      	str	r3, [sp, #20]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f04f 0c0a 	mov.w	ip, #10
 8003da2:	4620      	mov	r0, r4
 8003da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003da8:	3a30      	subs	r2, #48	@ 0x30
 8003daa:	2a09      	cmp	r2, #9
 8003dac:	d903      	bls.n	8003db6 <_svfiprintf_r+0x1a6>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0c6      	beq.n	8003d40 <_svfiprintf_r+0x130>
 8003db2:	9105      	str	r1, [sp, #20]
 8003db4:	e7c4      	b.n	8003d40 <_svfiprintf_r+0x130>
 8003db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dba:	4604      	mov	r4, r0
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e7f0      	b.n	8003da2 <_svfiprintf_r+0x192>
 8003dc0:	ab03      	add	r3, sp, #12
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	462a      	mov	r2, r5
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e00 <_svfiprintf_r+0x1f0>)
 8003dc8:	a904      	add	r1, sp, #16
 8003dca:	4638      	mov	r0, r7
 8003dcc:	f3af 8000 	nop.w
 8003dd0:	1c42      	adds	r2, r0, #1
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	d1d6      	bne.n	8003d84 <_svfiprintf_r+0x174>
 8003dd6:	89ab      	ldrh	r3, [r5, #12]
 8003dd8:	065b      	lsls	r3, r3, #25
 8003dda:	f53f af2d 	bmi.w	8003c38 <_svfiprintf_r+0x28>
 8003dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003de0:	e72c      	b.n	8003c3c <_svfiprintf_r+0x2c>
 8003de2:	ab03      	add	r3, sp, #12
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	462a      	mov	r2, r5
 8003de8:	4b05      	ldr	r3, [pc, #20]	@ (8003e00 <_svfiprintf_r+0x1f0>)
 8003dea:	a904      	add	r1, sp, #16
 8003dec:	4638      	mov	r0, r7
 8003dee:	f000 f879 	bl	8003ee4 <_printf_i>
 8003df2:	e7ed      	b.n	8003dd0 <_svfiprintf_r+0x1c0>
 8003df4:	0800428c 	.word	0x0800428c
 8003df8:	08004296 	.word	0x08004296
 8003dfc:	00000000 	.word	0x00000000
 8003e00:	08003b59 	.word	0x08003b59
 8003e04:	08004292 	.word	0x08004292

08003e08 <_printf_common>:
 8003e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e0c:	4616      	mov	r6, r2
 8003e0e:	4698      	mov	r8, r3
 8003e10:	688a      	ldr	r2, [r1, #8]
 8003e12:	690b      	ldr	r3, [r1, #16]
 8003e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bfb8      	it	lt
 8003e1c:	4613      	movlt	r3, r2
 8003e1e:	6033      	str	r3, [r6, #0]
 8003e20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e24:	4607      	mov	r7, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	b10a      	cbz	r2, 8003e2e <_printf_common+0x26>
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	6033      	str	r3, [r6, #0]
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	0699      	lsls	r1, r3, #26
 8003e32:	bf42      	ittt	mi
 8003e34:	6833      	ldrmi	r3, [r6, #0]
 8003e36:	3302      	addmi	r3, #2
 8003e38:	6033      	strmi	r3, [r6, #0]
 8003e3a:	6825      	ldr	r5, [r4, #0]
 8003e3c:	f015 0506 	ands.w	r5, r5, #6
 8003e40:	d106      	bne.n	8003e50 <_printf_common+0x48>
 8003e42:	f104 0a19 	add.w	sl, r4, #25
 8003e46:	68e3      	ldr	r3, [r4, #12]
 8003e48:	6832      	ldr	r2, [r6, #0]
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	42ab      	cmp	r3, r5
 8003e4e:	dc26      	bgt.n	8003e9e <_printf_common+0x96>
 8003e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e54:	6822      	ldr	r2, [r4, #0]
 8003e56:	3b00      	subs	r3, #0
 8003e58:	bf18      	it	ne
 8003e5a:	2301      	movne	r3, #1
 8003e5c:	0692      	lsls	r2, r2, #26
 8003e5e:	d42b      	bmi.n	8003eb8 <_printf_common+0xb0>
 8003e60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e64:	4641      	mov	r1, r8
 8003e66:	4638      	mov	r0, r7
 8003e68:	47c8      	blx	r9
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d01e      	beq.n	8003eac <_printf_common+0xa4>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	6922      	ldr	r2, [r4, #16]
 8003e72:	f003 0306 	and.w	r3, r3, #6
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	bf02      	ittt	eq
 8003e7a:	68e5      	ldreq	r5, [r4, #12]
 8003e7c:	6833      	ldreq	r3, [r6, #0]
 8003e7e:	1aed      	subeq	r5, r5, r3
 8003e80:	68a3      	ldr	r3, [r4, #8]
 8003e82:	bf0c      	ite	eq
 8003e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e88:	2500      	movne	r5, #0
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	bfc4      	itt	gt
 8003e8e:	1a9b      	subgt	r3, r3, r2
 8003e90:	18ed      	addgt	r5, r5, r3
 8003e92:	2600      	movs	r6, #0
 8003e94:	341a      	adds	r4, #26
 8003e96:	42b5      	cmp	r5, r6
 8003e98:	d11a      	bne.n	8003ed0 <_printf_common+0xc8>
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	e008      	b.n	8003eb0 <_printf_common+0xa8>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	4652      	mov	r2, sl
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	47c8      	blx	r9
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d103      	bne.n	8003eb4 <_printf_common+0xac>
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	e7c6      	b.n	8003e46 <_printf_common+0x3e>
 8003eb8:	18e1      	adds	r1, r4, r3
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	2030      	movs	r0, #48	@ 0x30
 8003ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ec2:	4422      	add	r2, r4
 8003ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ecc:	3302      	adds	r3, #2
 8003ece:	e7c7      	b.n	8003e60 <_printf_common+0x58>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	47c8      	blx	r9
 8003eda:	3001      	adds	r0, #1
 8003edc:	d0e6      	beq.n	8003eac <_printf_common+0xa4>
 8003ede:	3601      	adds	r6, #1
 8003ee0:	e7d9      	b.n	8003e96 <_printf_common+0x8e>
	...

08003ee4 <_printf_i>:
 8003ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	7e0f      	ldrb	r7, [r1, #24]
 8003eea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003eec:	2f78      	cmp	r7, #120	@ 0x78
 8003eee:	4691      	mov	r9, r2
 8003ef0:	4680      	mov	r8, r0
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	469a      	mov	sl, r3
 8003ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003efa:	d807      	bhi.n	8003f0c <_printf_i+0x28>
 8003efc:	2f62      	cmp	r7, #98	@ 0x62
 8003efe:	d80a      	bhi.n	8003f16 <_printf_i+0x32>
 8003f00:	2f00      	cmp	r7, #0
 8003f02:	f000 80d2 	beq.w	80040aa <_printf_i+0x1c6>
 8003f06:	2f58      	cmp	r7, #88	@ 0x58
 8003f08:	f000 80b9 	beq.w	800407e <_printf_i+0x19a>
 8003f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f14:	e03a      	b.n	8003f8c <_printf_i+0xa8>
 8003f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f1a:	2b15      	cmp	r3, #21
 8003f1c:	d8f6      	bhi.n	8003f0c <_printf_i+0x28>
 8003f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8003f24 <_printf_i+0x40>)
 8003f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f91 	.word	0x08003f91
 8003f2c:	08003f0d 	.word	0x08003f0d
 8003f30:	08003f0d 	.word	0x08003f0d
 8003f34:	08003f0d 	.word	0x08003f0d
 8003f38:	08003f0d 	.word	0x08003f0d
 8003f3c:	08003f91 	.word	0x08003f91
 8003f40:	08003f0d 	.word	0x08003f0d
 8003f44:	08003f0d 	.word	0x08003f0d
 8003f48:	08003f0d 	.word	0x08003f0d
 8003f4c:	08003f0d 	.word	0x08003f0d
 8003f50:	08004091 	.word	0x08004091
 8003f54:	08003fbb 	.word	0x08003fbb
 8003f58:	0800404b 	.word	0x0800404b
 8003f5c:	08003f0d 	.word	0x08003f0d
 8003f60:	08003f0d 	.word	0x08003f0d
 8003f64:	080040b3 	.word	0x080040b3
 8003f68:	08003f0d 	.word	0x08003f0d
 8003f6c:	08003fbb 	.word	0x08003fbb
 8003f70:	08003f0d 	.word	0x08003f0d
 8003f74:	08003f0d 	.word	0x08003f0d
 8003f78:	08004053 	.word	0x08004053
 8003f7c:	6833      	ldr	r3, [r6, #0]
 8003f7e:	1d1a      	adds	r2, r3, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6032      	str	r2, [r6, #0]
 8003f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e09d      	b.n	80040cc <_printf_i+0x1e8>
 8003f90:	6833      	ldr	r3, [r6, #0]
 8003f92:	6820      	ldr	r0, [r4, #0]
 8003f94:	1d19      	adds	r1, r3, #4
 8003f96:	6031      	str	r1, [r6, #0]
 8003f98:	0606      	lsls	r6, r0, #24
 8003f9a:	d501      	bpl.n	8003fa0 <_printf_i+0xbc>
 8003f9c:	681d      	ldr	r5, [r3, #0]
 8003f9e:	e003      	b.n	8003fa8 <_printf_i+0xc4>
 8003fa0:	0645      	lsls	r5, r0, #25
 8003fa2:	d5fb      	bpl.n	8003f9c <_printf_i+0xb8>
 8003fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fa8:	2d00      	cmp	r5, #0
 8003faa:	da03      	bge.n	8003fb4 <_printf_i+0xd0>
 8003fac:	232d      	movs	r3, #45	@ 0x2d
 8003fae:	426d      	negs	r5, r5
 8003fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fb4:	4859      	ldr	r0, [pc, #356]	@ (800411c <_printf_i+0x238>)
 8003fb6:	230a      	movs	r3, #10
 8003fb8:	e011      	b.n	8003fde <_printf_i+0xfa>
 8003fba:	6821      	ldr	r1, [r4, #0]
 8003fbc:	6833      	ldr	r3, [r6, #0]
 8003fbe:	0608      	lsls	r0, r1, #24
 8003fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fc4:	d402      	bmi.n	8003fcc <_printf_i+0xe8>
 8003fc6:	0649      	lsls	r1, r1, #25
 8003fc8:	bf48      	it	mi
 8003fca:	b2ad      	uxthmi	r5, r5
 8003fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fce:	4853      	ldr	r0, [pc, #332]	@ (800411c <_printf_i+0x238>)
 8003fd0:	6033      	str	r3, [r6, #0]
 8003fd2:	bf14      	ite	ne
 8003fd4:	230a      	movne	r3, #10
 8003fd6:	2308      	moveq	r3, #8
 8003fd8:	2100      	movs	r1, #0
 8003fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fde:	6866      	ldr	r6, [r4, #4]
 8003fe0:	60a6      	str	r6, [r4, #8]
 8003fe2:	2e00      	cmp	r6, #0
 8003fe4:	bfa2      	ittt	ge
 8003fe6:	6821      	ldrge	r1, [r4, #0]
 8003fe8:	f021 0104 	bicge.w	r1, r1, #4
 8003fec:	6021      	strge	r1, [r4, #0]
 8003fee:	b90d      	cbnz	r5, 8003ff4 <_printf_i+0x110>
 8003ff0:	2e00      	cmp	r6, #0
 8003ff2:	d04b      	beq.n	800408c <_printf_i+0x1a8>
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ffa:	fb03 5711 	mls	r7, r3, r1, r5
 8003ffe:	5dc7      	ldrb	r7, [r0, r7]
 8004000:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004004:	462f      	mov	r7, r5
 8004006:	42bb      	cmp	r3, r7
 8004008:	460d      	mov	r5, r1
 800400a:	d9f4      	bls.n	8003ff6 <_printf_i+0x112>
 800400c:	2b08      	cmp	r3, #8
 800400e:	d10b      	bne.n	8004028 <_printf_i+0x144>
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	07df      	lsls	r7, r3, #31
 8004014:	d508      	bpl.n	8004028 <_printf_i+0x144>
 8004016:	6923      	ldr	r3, [r4, #16]
 8004018:	6861      	ldr	r1, [r4, #4]
 800401a:	4299      	cmp	r1, r3
 800401c:	bfde      	ittt	le
 800401e:	2330      	movle	r3, #48	@ 0x30
 8004020:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004024:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004028:	1b92      	subs	r2, r2, r6
 800402a:	6122      	str	r2, [r4, #16]
 800402c:	f8cd a000 	str.w	sl, [sp]
 8004030:	464b      	mov	r3, r9
 8004032:	aa03      	add	r2, sp, #12
 8004034:	4621      	mov	r1, r4
 8004036:	4640      	mov	r0, r8
 8004038:	f7ff fee6 	bl	8003e08 <_printf_common>
 800403c:	3001      	adds	r0, #1
 800403e:	d14a      	bne.n	80040d6 <_printf_i+0x1f2>
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	b004      	add	sp, #16
 8004046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	f043 0320 	orr.w	r3, r3, #32
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	4833      	ldr	r0, [pc, #204]	@ (8004120 <_printf_i+0x23c>)
 8004054:	2778      	movs	r7, #120	@ 0x78
 8004056:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	6831      	ldr	r1, [r6, #0]
 800405e:	061f      	lsls	r7, r3, #24
 8004060:	f851 5b04 	ldr.w	r5, [r1], #4
 8004064:	d402      	bmi.n	800406c <_printf_i+0x188>
 8004066:	065f      	lsls	r7, r3, #25
 8004068:	bf48      	it	mi
 800406a:	b2ad      	uxthmi	r5, r5
 800406c:	6031      	str	r1, [r6, #0]
 800406e:	07d9      	lsls	r1, r3, #31
 8004070:	bf44      	itt	mi
 8004072:	f043 0320 	orrmi.w	r3, r3, #32
 8004076:	6023      	strmi	r3, [r4, #0]
 8004078:	b11d      	cbz	r5, 8004082 <_printf_i+0x19e>
 800407a:	2310      	movs	r3, #16
 800407c:	e7ac      	b.n	8003fd8 <_printf_i+0xf4>
 800407e:	4827      	ldr	r0, [pc, #156]	@ (800411c <_printf_i+0x238>)
 8004080:	e7e9      	b.n	8004056 <_printf_i+0x172>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	f023 0320 	bic.w	r3, r3, #32
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	e7f6      	b.n	800407a <_printf_i+0x196>
 800408c:	4616      	mov	r6, r2
 800408e:	e7bd      	b.n	800400c <_printf_i+0x128>
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	6825      	ldr	r5, [r4, #0]
 8004094:	6961      	ldr	r1, [r4, #20]
 8004096:	1d18      	adds	r0, r3, #4
 8004098:	6030      	str	r0, [r6, #0]
 800409a:	062e      	lsls	r6, r5, #24
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	d501      	bpl.n	80040a4 <_printf_i+0x1c0>
 80040a0:	6019      	str	r1, [r3, #0]
 80040a2:	e002      	b.n	80040aa <_printf_i+0x1c6>
 80040a4:	0668      	lsls	r0, r5, #25
 80040a6:	d5fb      	bpl.n	80040a0 <_printf_i+0x1bc>
 80040a8:	8019      	strh	r1, [r3, #0]
 80040aa:	2300      	movs	r3, #0
 80040ac:	6123      	str	r3, [r4, #16]
 80040ae:	4616      	mov	r6, r2
 80040b0:	e7bc      	b.n	800402c <_printf_i+0x148>
 80040b2:	6833      	ldr	r3, [r6, #0]
 80040b4:	1d1a      	adds	r2, r3, #4
 80040b6:	6032      	str	r2, [r6, #0]
 80040b8:	681e      	ldr	r6, [r3, #0]
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	2100      	movs	r1, #0
 80040be:	4630      	mov	r0, r6
 80040c0:	f7fc f8b6 	bl	8000230 <memchr>
 80040c4:	b108      	cbz	r0, 80040ca <_printf_i+0x1e6>
 80040c6:	1b80      	subs	r0, r0, r6
 80040c8:	6060      	str	r0, [r4, #4]
 80040ca:	6863      	ldr	r3, [r4, #4]
 80040cc:	6123      	str	r3, [r4, #16]
 80040ce:	2300      	movs	r3, #0
 80040d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040d4:	e7aa      	b.n	800402c <_printf_i+0x148>
 80040d6:	6923      	ldr	r3, [r4, #16]
 80040d8:	4632      	mov	r2, r6
 80040da:	4649      	mov	r1, r9
 80040dc:	4640      	mov	r0, r8
 80040de:	47d0      	blx	sl
 80040e0:	3001      	adds	r0, #1
 80040e2:	d0ad      	beq.n	8004040 <_printf_i+0x15c>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	079b      	lsls	r3, r3, #30
 80040e8:	d413      	bmi.n	8004112 <_printf_i+0x22e>
 80040ea:	68e0      	ldr	r0, [r4, #12]
 80040ec:	9b03      	ldr	r3, [sp, #12]
 80040ee:	4298      	cmp	r0, r3
 80040f0:	bfb8      	it	lt
 80040f2:	4618      	movlt	r0, r3
 80040f4:	e7a6      	b.n	8004044 <_printf_i+0x160>
 80040f6:	2301      	movs	r3, #1
 80040f8:	4632      	mov	r2, r6
 80040fa:	4649      	mov	r1, r9
 80040fc:	4640      	mov	r0, r8
 80040fe:	47d0      	blx	sl
 8004100:	3001      	adds	r0, #1
 8004102:	d09d      	beq.n	8004040 <_printf_i+0x15c>
 8004104:	3501      	adds	r5, #1
 8004106:	68e3      	ldr	r3, [r4, #12]
 8004108:	9903      	ldr	r1, [sp, #12]
 800410a:	1a5b      	subs	r3, r3, r1
 800410c:	42ab      	cmp	r3, r5
 800410e:	dcf2      	bgt.n	80040f6 <_printf_i+0x212>
 8004110:	e7eb      	b.n	80040ea <_printf_i+0x206>
 8004112:	2500      	movs	r5, #0
 8004114:	f104 0619 	add.w	r6, r4, #25
 8004118:	e7f5      	b.n	8004106 <_printf_i+0x222>
 800411a:	bf00      	nop
 800411c:	0800429d 	.word	0x0800429d
 8004120:	080042ae 	.word	0x080042ae

08004124 <memmove>:
 8004124:	4288      	cmp	r0, r1
 8004126:	b510      	push	{r4, lr}
 8004128:	eb01 0402 	add.w	r4, r1, r2
 800412c:	d902      	bls.n	8004134 <memmove+0x10>
 800412e:	4284      	cmp	r4, r0
 8004130:	4623      	mov	r3, r4
 8004132:	d807      	bhi.n	8004144 <memmove+0x20>
 8004134:	1e43      	subs	r3, r0, #1
 8004136:	42a1      	cmp	r1, r4
 8004138:	d008      	beq.n	800414c <memmove+0x28>
 800413a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800413e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004142:	e7f8      	b.n	8004136 <memmove+0x12>
 8004144:	4402      	add	r2, r0
 8004146:	4601      	mov	r1, r0
 8004148:	428a      	cmp	r2, r1
 800414a:	d100      	bne.n	800414e <memmove+0x2a>
 800414c:	bd10      	pop	{r4, pc}
 800414e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004156:	e7f7      	b.n	8004148 <memmove+0x24>

08004158 <_sbrk_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	4d06      	ldr	r5, [pc, #24]	@ (8004174 <_sbrk_r+0x1c>)
 800415c:	2300      	movs	r3, #0
 800415e:	4604      	mov	r4, r0
 8004160:	4608      	mov	r0, r1
 8004162:	602b      	str	r3, [r5, #0]
 8004164:	f7fc fd4c 	bl	8000c00 <_sbrk>
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	d102      	bne.n	8004172 <_sbrk_r+0x1a>
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	b103      	cbz	r3, 8004172 <_sbrk_r+0x1a>
 8004170:	6023      	str	r3, [r4, #0]
 8004172:	bd38      	pop	{r3, r4, r5, pc}
 8004174:	20000318 	.word	0x20000318

08004178 <memcpy>:
 8004178:	440a      	add	r2, r1
 800417a:	4291      	cmp	r1, r2
 800417c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004180:	d100      	bne.n	8004184 <memcpy+0xc>
 8004182:	4770      	bx	lr
 8004184:	b510      	push	{r4, lr}
 8004186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800418a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800418e:	4291      	cmp	r1, r2
 8004190:	d1f9      	bne.n	8004186 <memcpy+0xe>
 8004192:	bd10      	pop	{r4, pc}

08004194 <_realloc_r>:
 8004194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004198:	4680      	mov	r8, r0
 800419a:	4615      	mov	r5, r2
 800419c:	460c      	mov	r4, r1
 800419e:	b921      	cbnz	r1, 80041aa <_realloc_r+0x16>
 80041a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041a4:	4611      	mov	r1, r2
 80041a6:	f7ff bc4b 	b.w	8003a40 <_malloc_r>
 80041aa:	b92a      	cbnz	r2, 80041b8 <_realloc_r+0x24>
 80041ac:	f7ff fbdc 	bl	8003968 <_free_r>
 80041b0:	2400      	movs	r4, #0
 80041b2:	4620      	mov	r0, r4
 80041b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b8:	f000 f81a 	bl	80041f0 <_malloc_usable_size_r>
 80041bc:	4285      	cmp	r5, r0
 80041be:	4606      	mov	r6, r0
 80041c0:	d802      	bhi.n	80041c8 <_realloc_r+0x34>
 80041c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80041c6:	d8f4      	bhi.n	80041b2 <_realloc_r+0x1e>
 80041c8:	4629      	mov	r1, r5
 80041ca:	4640      	mov	r0, r8
 80041cc:	f7ff fc38 	bl	8003a40 <_malloc_r>
 80041d0:	4607      	mov	r7, r0
 80041d2:	2800      	cmp	r0, #0
 80041d4:	d0ec      	beq.n	80041b0 <_realloc_r+0x1c>
 80041d6:	42b5      	cmp	r5, r6
 80041d8:	462a      	mov	r2, r5
 80041da:	4621      	mov	r1, r4
 80041dc:	bf28      	it	cs
 80041de:	4632      	movcs	r2, r6
 80041e0:	f7ff ffca 	bl	8004178 <memcpy>
 80041e4:	4621      	mov	r1, r4
 80041e6:	4640      	mov	r0, r8
 80041e8:	f7ff fbbe 	bl	8003968 <_free_r>
 80041ec:	463c      	mov	r4, r7
 80041ee:	e7e0      	b.n	80041b2 <_realloc_r+0x1e>

080041f0 <_malloc_usable_size_r>:
 80041f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041f4:	1f18      	subs	r0, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bfbc      	itt	lt
 80041fa:	580b      	ldrlt	r3, [r1, r0]
 80041fc:	18c0      	addlt	r0, r0, r3
 80041fe:	4770      	bx	lr

08004200 <_init>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	bf00      	nop
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr

0800420c <_fini>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr
