
Exam2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004934  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004b14  08004b14  00005b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bbc  08004bbc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004bbc  08004bbc  00005bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bc4  08004bc4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bc4  08004bc4  00005bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bc8  08004bc8  00005bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004bcc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  2000005c  08004c28  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08004c28  0000640c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011756  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c9  00000000  00000000  000177e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  000199b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c57  00000000  00000000  0001a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026465  00000000  00000000  0001b5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012851  00000000  00000000  00041a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb885  00000000  00000000  0005427d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014fb02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004914  00000000  00000000  0014fb48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0015445c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004afc 	.word	0x08004afc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004afc 	.word	0x08004afc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	@ 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__aeabi_d2f>:
 800089c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008a4:	bf24      	itt	cs
 80008a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008ae:	d90d      	bls.n	80008cc <__aeabi_d2f+0x30>
 80008b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008d0:	d121      	bne.n	8000916 <__aeabi_d2f+0x7a>
 80008d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008d6:	bfbc      	itt	lt
 80008d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008dc:	4770      	bxlt	lr
 80008de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008e6:	f1c2 0218 	rsb	r2, r2, #24
 80008ea:	f1c2 0c20 	rsb	ip, r2, #32
 80008ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80008f2:	fa20 f002 	lsr.w	r0, r0, r2
 80008f6:	bf18      	it	ne
 80008f8:	f040 0001 	orrne.w	r0, r0, #1
 80008fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000904:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000908:	ea40 000c 	orr.w	r0, r0, ip
 800090c:	fa23 f302 	lsr.w	r3, r3, r2
 8000910:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000914:	e7cc      	b.n	80008b0 <__aeabi_d2f+0x14>
 8000916:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800091a:	d107      	bne.n	800092c <__aeabi_d2f+0x90>
 800091c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000920:	bf1e      	ittt	ne
 8000922:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000926:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800092a:	4770      	bxne	lr
 800092c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000930:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000934:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_uldivmod>:
 800093c:	b953      	cbnz	r3, 8000954 <__aeabi_uldivmod+0x18>
 800093e:	b94a      	cbnz	r2, 8000954 <__aeabi_uldivmod+0x18>
 8000940:	2900      	cmp	r1, #0
 8000942:	bf08      	it	eq
 8000944:	2800      	cmpeq	r0, #0
 8000946:	bf1c      	itt	ne
 8000948:	f04f 31ff 	movne.w	r1, #4294967295
 800094c:	f04f 30ff 	movne.w	r0, #4294967295
 8000950:	f000 b96a 	b.w	8000c28 <__aeabi_idiv0>
 8000954:	f1ad 0c08 	sub.w	ip, sp, #8
 8000958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800095c:	f000 f806 	bl	800096c <__udivmoddi4>
 8000960:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000968:	b004      	add	sp, #16
 800096a:	4770      	bx	lr

0800096c <__udivmoddi4>:
 800096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000970:	9d08      	ldr	r5, [sp, #32]
 8000972:	460c      	mov	r4, r1
 8000974:	2b00      	cmp	r3, #0
 8000976:	d14e      	bne.n	8000a16 <__udivmoddi4+0xaa>
 8000978:	4694      	mov	ip, r2
 800097a:	458c      	cmp	ip, r1
 800097c:	4686      	mov	lr, r0
 800097e:	fab2 f282 	clz	r2, r2
 8000982:	d962      	bls.n	8000a4a <__udivmoddi4+0xde>
 8000984:	b14a      	cbz	r2, 800099a <__udivmoddi4+0x2e>
 8000986:	f1c2 0320 	rsb	r3, r2, #32
 800098a:	4091      	lsls	r1, r2
 800098c:	fa20 f303 	lsr.w	r3, r0, r3
 8000990:	fa0c fc02 	lsl.w	ip, ip, r2
 8000994:	4319      	orrs	r1, r3
 8000996:	fa00 fe02 	lsl.w	lr, r0, r2
 800099a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099e:	fa1f f68c 	uxth.w	r6, ip
 80009a2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009aa:	fb07 1114 	mls	r1, r7, r4, r1
 80009ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b2:	fb04 f106 	mul.w	r1, r4, r6
 80009b6:	4299      	cmp	r1, r3
 80009b8:	d90a      	bls.n	80009d0 <__udivmoddi4+0x64>
 80009ba:	eb1c 0303 	adds.w	r3, ip, r3
 80009be:	f104 30ff 	add.w	r0, r4, #4294967295
 80009c2:	f080 8112 	bcs.w	8000bea <__udivmoddi4+0x27e>
 80009c6:	4299      	cmp	r1, r3
 80009c8:	f240 810f 	bls.w	8000bea <__udivmoddi4+0x27e>
 80009cc:	3c02      	subs	r4, #2
 80009ce:	4463      	add	r3, ip
 80009d0:	1a59      	subs	r1, r3, r1
 80009d2:	fa1f f38e 	uxth.w	r3, lr
 80009d6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009da:	fb07 1110 	mls	r1, r7, r0, r1
 80009de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e2:	fb00 f606 	mul.w	r6, r0, r6
 80009e6:	429e      	cmp	r6, r3
 80009e8:	d90a      	bls.n	8000a00 <__udivmoddi4+0x94>
 80009ea:	eb1c 0303 	adds.w	r3, ip, r3
 80009ee:	f100 31ff 	add.w	r1, r0, #4294967295
 80009f2:	f080 80fc 	bcs.w	8000bee <__udivmoddi4+0x282>
 80009f6:	429e      	cmp	r6, r3
 80009f8:	f240 80f9 	bls.w	8000bee <__udivmoddi4+0x282>
 80009fc:	4463      	add	r3, ip
 80009fe:	3802      	subs	r0, #2
 8000a00:	1b9b      	subs	r3, r3, r6
 8000a02:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a06:	2100      	movs	r1, #0
 8000a08:	b11d      	cbz	r5, 8000a12 <__udivmoddi4+0xa6>
 8000a0a:	40d3      	lsrs	r3, r2
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a16:	428b      	cmp	r3, r1
 8000a18:	d905      	bls.n	8000a26 <__udivmoddi4+0xba>
 8000a1a:	b10d      	cbz	r5, 8000a20 <__udivmoddi4+0xb4>
 8000a1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a20:	2100      	movs	r1, #0
 8000a22:	4608      	mov	r0, r1
 8000a24:	e7f5      	b.n	8000a12 <__udivmoddi4+0xa6>
 8000a26:	fab3 f183 	clz	r1, r3
 8000a2a:	2900      	cmp	r1, #0
 8000a2c:	d146      	bne.n	8000abc <__udivmoddi4+0x150>
 8000a2e:	42a3      	cmp	r3, r4
 8000a30:	d302      	bcc.n	8000a38 <__udivmoddi4+0xcc>
 8000a32:	4290      	cmp	r0, r2
 8000a34:	f0c0 80f0 	bcc.w	8000c18 <__udivmoddi4+0x2ac>
 8000a38:	1a86      	subs	r6, r0, r2
 8000a3a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a3e:	2001      	movs	r0, #1
 8000a40:	2d00      	cmp	r5, #0
 8000a42:	d0e6      	beq.n	8000a12 <__udivmoddi4+0xa6>
 8000a44:	e9c5 6300 	strd	r6, r3, [r5]
 8000a48:	e7e3      	b.n	8000a12 <__udivmoddi4+0xa6>
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	f040 8090 	bne.w	8000b70 <__udivmoddi4+0x204>
 8000a50:	eba1 040c 	sub.w	r4, r1, ip
 8000a54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a58:	fa1f f78c 	uxth.w	r7, ip
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a66:	fb08 4416 	mls	r4, r8, r6, r4
 8000a6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a6e:	fb07 f006 	mul.w	r0, r7, r6
 8000a72:	4298      	cmp	r0, r3
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x11c>
 8000a76:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x11a>
 8000a80:	4298      	cmp	r0, r3
 8000a82:	f200 80cd 	bhi.w	8000c20 <__udivmoddi4+0x2b4>
 8000a86:	4626      	mov	r6, r4
 8000a88:	1a1c      	subs	r4, r3, r0
 8000a8a:	fa1f f38e 	uxth.w	r3, lr
 8000a8e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a92:	fb08 4410 	mls	r4, r8, r0, r4
 8000a96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a9a:	fb00 f707 	mul.w	r7, r0, r7
 8000a9e:	429f      	cmp	r7, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x148>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aaa:	d202      	bcs.n	8000ab2 <__udivmoddi4+0x146>
 8000aac:	429f      	cmp	r7, r3
 8000aae:	f200 80b0 	bhi.w	8000c12 <__udivmoddi4+0x2a6>
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	1bdb      	subs	r3, r3, r7
 8000ab6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aba:	e7a5      	b.n	8000a08 <__udivmoddi4+0x9c>
 8000abc:	f1c1 0620 	rsb	r6, r1, #32
 8000ac0:	408b      	lsls	r3, r1
 8000ac2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ac6:	431f      	orrs	r7, r3
 8000ac8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000acc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad0:	ea43 030c 	orr.w	r3, r3, ip
 8000ad4:	40f4      	lsrs	r4, r6
 8000ad6:	fa00 f801 	lsl.w	r8, r0, r1
 8000ada:	0c38      	lsrs	r0, r7, #16
 8000adc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ae4:	fa1f fc87 	uxth.w	ip, r7
 8000ae8:	fb00 441e 	mls	r4, r0, lr, r4
 8000aec:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af0:	fb0e f90c 	mul.w	r9, lr, ip
 8000af4:	45a1      	cmp	r9, r4
 8000af6:	fa02 f201 	lsl.w	r2, r2, r1
 8000afa:	d90a      	bls.n	8000b12 <__udivmoddi4+0x1a6>
 8000afc:	193c      	adds	r4, r7, r4
 8000afe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b02:	f080 8084 	bcs.w	8000c0e <__udivmoddi4+0x2a2>
 8000b06:	45a1      	cmp	r9, r4
 8000b08:	f240 8081 	bls.w	8000c0e <__udivmoddi4+0x2a2>
 8000b0c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b10:	443c      	add	r4, r7
 8000b12:	eba4 0409 	sub.w	r4, r4, r9
 8000b16:	fa1f f983 	uxth.w	r9, r3
 8000b1a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b1e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b26:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b2a:	45a4      	cmp	ip, r4
 8000b2c:	d907      	bls.n	8000b3e <__udivmoddi4+0x1d2>
 8000b2e:	193c      	adds	r4, r7, r4
 8000b30:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b34:	d267      	bcs.n	8000c06 <__udivmoddi4+0x29a>
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	d965      	bls.n	8000c06 <__udivmoddi4+0x29a>
 8000b3a:	3b02      	subs	r3, #2
 8000b3c:	443c      	add	r4, r7
 8000b3e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b42:	fba0 9302 	umull	r9, r3, r0, r2
 8000b46:	eba4 040c 	sub.w	r4, r4, ip
 8000b4a:	429c      	cmp	r4, r3
 8000b4c:	46ce      	mov	lr, r9
 8000b4e:	469c      	mov	ip, r3
 8000b50:	d351      	bcc.n	8000bf6 <__udivmoddi4+0x28a>
 8000b52:	d04e      	beq.n	8000bf2 <__udivmoddi4+0x286>
 8000b54:	b155      	cbz	r5, 8000b6c <__udivmoddi4+0x200>
 8000b56:	ebb8 030e 	subs.w	r3, r8, lr
 8000b5a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b62:	40cb      	lsrs	r3, r1
 8000b64:	431e      	orrs	r6, r3
 8000b66:	40cc      	lsrs	r4, r1
 8000b68:	e9c5 6400 	strd	r6, r4, [r5]
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e750      	b.n	8000a12 <__udivmoddi4+0xa6>
 8000b70:	f1c2 0320 	rsb	r3, r2, #32
 8000b74:	fa20 f103 	lsr.w	r1, r0, r3
 8000b78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b7c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b80:	4094      	lsls	r4, r2
 8000b82:	430c      	orrs	r4, r1
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8c:	fa1f f78c 	uxth.w	r7, ip
 8000b90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b94:	fb08 3110 	mls	r1, r8, r0, r3
 8000b98:	0c23      	lsrs	r3, r4, #16
 8000b9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b9e:	fb00 f107 	mul.w	r1, r0, r7
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x24c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bae:	d22c      	bcs.n	8000c0a <__udivmoddi4+0x29e>
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	d92a      	bls.n	8000c0a <__udivmoddi4+0x29e>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc0:	fb08 3311 	mls	r3, r8, r1, r3
 8000bc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc8:	fb01 f307 	mul.w	r3, r1, r7
 8000bcc:	42a3      	cmp	r3, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x276>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bd8:	d213      	bcs.n	8000c02 <__udivmoddi4+0x296>
 8000bda:	42a3      	cmp	r3, r4
 8000bdc:	d911      	bls.n	8000c02 <__udivmoddi4+0x296>
 8000bde:	3902      	subs	r1, #2
 8000be0:	4464      	add	r4, ip
 8000be2:	1ae4      	subs	r4, r4, r3
 8000be4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000be8:	e739      	b.n	8000a5e <__udivmoddi4+0xf2>
 8000bea:	4604      	mov	r4, r0
 8000bec:	e6f0      	b.n	80009d0 <__udivmoddi4+0x64>
 8000bee:	4608      	mov	r0, r1
 8000bf0:	e706      	b.n	8000a00 <__udivmoddi4+0x94>
 8000bf2:	45c8      	cmp	r8, r9
 8000bf4:	d2ae      	bcs.n	8000b54 <__udivmoddi4+0x1e8>
 8000bf6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bfa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bfe:	3801      	subs	r0, #1
 8000c00:	e7a8      	b.n	8000b54 <__udivmoddi4+0x1e8>
 8000c02:	4631      	mov	r1, r6
 8000c04:	e7ed      	b.n	8000be2 <__udivmoddi4+0x276>
 8000c06:	4603      	mov	r3, r0
 8000c08:	e799      	b.n	8000b3e <__udivmoddi4+0x1d2>
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	e7d4      	b.n	8000bb8 <__udivmoddi4+0x24c>
 8000c0e:	46d6      	mov	lr, sl
 8000c10:	e77f      	b.n	8000b12 <__udivmoddi4+0x1a6>
 8000c12:	4463      	add	r3, ip
 8000c14:	3802      	subs	r0, #2
 8000c16:	e74d      	b.n	8000ab4 <__udivmoddi4+0x148>
 8000c18:	4606      	mov	r6, r0
 8000c1a:	4623      	mov	r3, r4
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	e70f      	b.n	8000a40 <__udivmoddi4+0xd4>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	e730      	b.n	8000a88 <__udivmoddi4+0x11c>
 8000c26:	bf00      	nop

08000c28 <__aeabi_idiv0>:
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	0000      	movs	r0, r0
	...

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c36:	f000 fc4e 	bl	80014d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3a:	f000 f86b 	bl	8000d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3e:	f000 f9a5 	bl	8000f8c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000c42:	f000 f8b3 	bl	8000dac <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000c46:	f000 f94b 	bl	8000ee0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000c4a:	f000 f8f9 	bl	8000e40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000c4e:	213c      	movs	r1, #60	@ 0x3c
 8000c50:	4829      	ldr	r0, [pc, #164]	@ (8000cf8 <main+0xc8>)
 8000c52:	f002 f887 	bl	8002d64 <HAL_TIM_Encoder_Start>
  uint8_t text[] = "HELLO WORLD";
 8000c56:	4a29      	ldr	r2, [pc, #164]	@ (8000cfc <main+0xcc>)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart1,text, 11, 10);
 8000c60:	1d39      	adds	r1, r7, #4
 8000c62:	230a      	movs	r3, #10
 8000c64:	220b      	movs	r2, #11
 8000c66:	4826      	ldr	r0, [pc, #152]	@ (8000d00 <main+0xd0>)
 8000c68:	f002 faca 	bl	8003200 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000c6c:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <main+0xc8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c72:	ee07 3a90 	vmov	s15, r3
 8000c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c7a:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <main+0xd4>)
 8000c7c:	edc3 7a00 	vstr	s15, [r3]
	  rad = (QEIReadRaw/3072)*2*3.14;
 8000c80:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <main+0xd4>)
 8000c82:	ed93 7a00 	vldr	s14, [r3]
 8000c86:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000d08 <main+0xd8>
 8000c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c92:	ee17 0a90 	vmov	r0, s15
 8000c96:	f7ff fda9 	bl	80007ec <__aeabi_f2d>
 8000c9a:	a315      	add	r3, pc, #84	@ (adr r3, 8000cf0 <main+0xc0>)
 8000c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca0:	f7ff fb16 	bl	80002d0 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4610      	mov	r0, r2
 8000caa:	4619      	mov	r1, r3
 8000cac:	f7ff fdf6 	bl	800089c <__aeabi_d2f>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a16      	ldr	r2, [pc, #88]	@ (8000d0c <main+0xdc>)
 8000cb4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4815      	ldr	r0, [pc, #84]	@ (8000d10 <main+0xe0>)
 8000cbc:	f000 ff26 	bl	8001b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	4812      	ldr	r0, [pc, #72]	@ (8000d10 <main+0xe0>)
 8000cc6:	f000 ff21 	bl	8001b0c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000cca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cce:	4810      	ldr	r0, [pc, #64]	@ (8000d10 <main+0xe0>)
 8000cd0:	f000 ff04 	bl	8001adc <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d107      	bne.n	8000cea <main+0xba>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000cda:	2101      	movs	r1, #1
 8000cdc:	480c      	ldr	r0, [pc, #48]	@ (8000d10 <main+0xe0>)
 8000cde:	f000 ff2d 	bl	8001b3c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	480a      	ldr	r0, [pc, #40]	@ (8000d10 <main+0xe0>)
 8000ce6:	f000 ff29 	bl	8001b3c <HAL_GPIO_TogglePin>
	}
	UARTPollingMethod();
 8000cea:	f000 f9d1 	bl	8001090 <UARTPollingMethod>
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000cee:	e7bd      	b.n	8000c6c <main+0x3c>
 8000cf0:	51eb851f 	.word	0x51eb851f
 8000cf4:	40091eb8 	.word	0x40091eb8
 8000cf8:	200001a0 	.word	0x200001a0
 8000cfc:	08004b14 	.word	0x08004b14
 8000d00:	2000010c 	.word	0x2000010c
 8000d04:	200001ec 	.word	0x200001ec
 8000d08:	45400000 	.word	0x45400000
 8000d0c:	200001f0 	.word	0x200001f0
 8000d10:	48000800 	.word	0x48000800

08000d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b094      	sub	sp, #80	@ 0x50
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 0318 	add.w	r3, r7, #24
 8000d1e:	2238      	movs	r2, #56	@ 0x38
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fa6a 	bl	80041fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 ff3e 	bl	8001bb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d46:	2340      	movs	r3, #64	@ 0x40
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d52:	2304      	movs	r3, #4
 8000d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d56:	2355      	movs	r3, #85	@ 0x55
 8000d58:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 ffd8 	bl	8001d20 <HAL_RCC_OscConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d76:	f000 f9dd 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2104      	movs	r1, #4
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fad6 	bl	8002344 <HAL_RCC_ClockConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d9e:	f000 f9c9 	bl	8001134 <Error_Handler>
  }
}
 8000da2:	bf00      	nop
 8000da4:	3750      	adds	r7, #80	@ 0x50
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000db0:	4b21      	ldr	r3, [pc, #132]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000db2:	4a22      	ldr	r2, [pc, #136]	@ (8000e3c <MX_LPUART1_UART_Init+0x90>)
 8000db4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000db6:	4b20      	ldr	r3, [pc, #128]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000dee:	4812      	ldr	r0, [pc, #72]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000df0:	f002 f9b6 	bl	8003160 <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dfa:	f000 f99b 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	480d      	ldr	r0, [pc, #52]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000e02:	f003 f910 	bl	8004026 <HAL_UARTEx_SetTxFifoThreshold>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000e0c:	f000 f992 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e10:	2100      	movs	r1, #0
 8000e12:	4809      	ldr	r0, [pc, #36]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000e14:	f003 f945 	bl	80040a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000e1e:	f000 f989 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000e24:	f003 f8c6 	bl	8003fb4 <HAL_UARTEx_DisableFifoMode>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000e2e:	f000 f981 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000078 	.word	0x20000078
 8000e3c:	40008000 	.word	0x40008000

08000e40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e44:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e46:	4a25      	ldr	r2, [pc, #148]	@ (8000edc <MX_USART1_UART_Init+0x9c>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e76:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4812      	ldr	r0, [pc, #72]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e90:	f003 f827 	bl	8003ee2 <HAL_RS485Ex_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000e9a:	f000 f94b 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000ea2:	f003 f8c0 	bl	8004026 <HAL_UARTEx_SetTxFifoThreshold>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8000eac:	f000 f942 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4809      	ldr	r0, [pc, #36]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000eb4:	f003 f8f5 	bl	80040a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8000ebe:	f000 f939 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ec2:	4805      	ldr	r0, [pc, #20]	@ (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000ec4:	f003 f876 	bl	8003fb4 <HAL_UARTEx_DisableFifoMode>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8000ece:	f000 f931 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000010c 	.word	0x2000010c
 8000edc:	40013800 	.word	0x40013800

08000ee0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08c      	sub	sp, #48	@ 0x30
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	2224      	movs	r2, #36	@ 0x24
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 f984 	bl	80041fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000efe:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <MX_TIM3_Init+0xa4>)
 8000f00:	4a21      	ldr	r2, [pc, #132]	@ (8000f88 <MX_TIM3_Init+0xa8>)
 8000f02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <MX_TIM3_Init+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <MX_TIM3_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15359;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <MX_TIM3_Init+0xa4>)
 8000f12:	f643 32ff 	movw	r2, #15359	@ 0x3bff
 8000f16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <MX_TIM3_Init+0xa4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <MX_TIM3_Init+0xa4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f24:	2303      	movs	r3, #3
 8000f26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <MX_TIM3_Init+0xa4>)
 8000f50:	f001 fe62 	bl	8002c18 <HAL_TIM_Encoder_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000f5a:	f000 f8eb 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <MX_TIM3_Init+0xa4>)
 8000f6c:	f002 f862 	bl	8003034 <HAL_TIMEx_MasterConfigSynchronization>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000f76:	f000 f8dd 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	3730      	adds	r7, #48	@ 0x30
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001a0 	.word	0x200001a0
 8000f88:	40000400 	.word	0x40000400

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b39      	ldr	r3, [pc, #228]	@ (8001088 <MX_GPIO_Init+0xfc>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	4a38      	ldr	r2, [pc, #224]	@ (8001088 <MX_GPIO_Init+0xfc>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fae:	4b36      	ldr	r3, [pc, #216]	@ (8001088 <MX_GPIO_Init+0xfc>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fba:	4b33      	ldr	r3, [pc, #204]	@ (8001088 <MX_GPIO_Init+0xfc>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a32      	ldr	r2, [pc, #200]	@ (8001088 <MX_GPIO_Init+0xfc>)
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b30      	ldr	r3, [pc, #192]	@ (8001088 <MX_GPIO_Init+0xfc>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f003 0320 	and.w	r3, r3, #32
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001088 <MX_GPIO_Init+0xfc>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8001088 <MX_GPIO_Init+0xfc>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b2a      	ldr	r3, [pc, #168]	@ (8001088 <MX_GPIO_Init+0xfc>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <MX_GPIO_Init+0xfc>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	4a26      	ldr	r2, [pc, #152]	@ (8001088 <MX_GPIO_Init+0xfc>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff6:	4b24      	ldr	r3, [pc, #144]	@ (8001088 <MX_GPIO_Init+0xfc>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2103      	movs	r1, #3
 8001006:	4821      	ldr	r0, [pc, #132]	@ (800108c <MX_GPIO_Init+0x100>)
 8001008:	f000 fd80 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2120      	movs	r1, #32
 8001010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001014:	f000 fd7a 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001018:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <MX_GPIO_Init+0x100>)
 8001030:	f000 fbd2 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001034:	2303      	movs	r3, #3
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	4810      	ldr	r0, [pc, #64]	@ (800108c <MX_GPIO_Init+0x100>)
 800104c:	f000 fbc4 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001050:	2320      	movs	r3, #32
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106a:	f000 fbb5 	bl	80017d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2028      	movs	r0, #40	@ 0x28
 8001074:	f000 fb7b 	bl	800176e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001078:	2028      	movs	r0, #40	@ 0x28
 800107a:	f000 fb92 	bl	80017a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	@ 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	48000800 	.word	0x48000800

08001090 <UARTPollingMethod>:

/* USER CODE BEGIN 4 */
void UARTPollingMethod()
	{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	//read UART 10 char with in 10s
	HAL_StatusTypeDef HAL_status = HAL_UART_Receive(&huart1, RxBuffer, 100, 10000);
 8001096:	f242 7310 	movw	r3, #10000	@ 0x2710
 800109a:	2264      	movs	r2, #100	@ 0x64
 800109c:	4920      	ldr	r1, [pc, #128]	@ (8001120 <UARTPollingMethod+0x90>)
 800109e:	4821      	ldr	r0, [pc, #132]	@ (8001124 <UARTPollingMethod+0x94>)
 80010a0:	f002 f93c 	bl	800331c <HAL_UART_Receive>
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]

	//if complete read 10 char
	if(HAL_status == HAL_OK)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d113      	bne.n	80010d6 <UARTPollingMethod+0x46>
	{

		RxBuffer[100] = '\0';
 80010ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <UARTPollingMethod+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

		sprintf((char*)TxBuffer,"Received : %s\r\n",RxBuffer);
 80010b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001120 <UARTPollingMethod+0x90>)
 80010b8:	491b      	ldr	r1, [pc, #108]	@ (8001128 <UARTPollingMethod+0x98>)
 80010ba:	481c      	ldr	r0, [pc, #112]	@ (800112c <UARTPollingMethod+0x9c>)
 80010bc:	f003 f87e 	bl	80041bc <siprintf>
		HAL_UART_Transmit(&huart1, TxBuffer, strlen((char*)TxBuffer), 10);
 80010c0:	481a      	ldr	r0, [pc, #104]	@ (800112c <UARTPollingMethod+0x9c>)
 80010c2:	f7ff f8ad 	bl	8000220 <strlen>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	230a      	movs	r3, #10
 80010cc:	4917      	ldr	r1, [pc, #92]	@ (800112c <UARTPollingMethod+0x9c>)
 80010ce:	4815      	ldr	r0, [pc, #84]	@ (8001124 <UARTPollingMethod+0x94>)
 80010d0:	f002 f896 	bl	8003200 <HAL_UART_Transmit>
		//return received char
		sprintf((char*)TxBuffer,"Received Timeout : %s\r\n",RxBuffer);
		HAL_UART_Transmit(&huart1, TxBuffer, strlen((char*)TxBuffer), 10);

	}
}
 80010d4:	e020      	b.n	8001118 <UARTPollingMethod+0x88>
	else if(HAL_status == HAL_TIMEOUT)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d11d      	bne.n	8001118 <UARTPollingMethod+0x88>
		uint32_t lastCharPos = huart1.RxXferSize - huart1.RxXferCount;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <UARTPollingMethod+0x94>)
 80010de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <UARTPollingMethod+0x94>)
 80010e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	603b      	str	r3, [r7, #0]
		RxBuffer[lastCharPos] = '\0';
 80010f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <UARTPollingMethod+0x90>)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
		sprintf((char*)TxBuffer,"Received Timeout : %s\r\n",RxBuffer);
 80010fa:	4a09      	ldr	r2, [pc, #36]	@ (8001120 <UARTPollingMethod+0x90>)
 80010fc:	490c      	ldr	r1, [pc, #48]	@ (8001130 <UARTPollingMethod+0xa0>)
 80010fe:	480b      	ldr	r0, [pc, #44]	@ (800112c <UARTPollingMethod+0x9c>)
 8001100:	f003 f85c 	bl	80041bc <siprintf>
		HAL_UART_Transmit(&huart1, TxBuffer, strlen((char*)TxBuffer), 10);
 8001104:	4809      	ldr	r0, [pc, #36]	@ (800112c <UARTPollingMethod+0x9c>)
 8001106:	f7ff f88b 	bl	8000220 <strlen>
 800110a:	4603      	mov	r3, r0
 800110c:	b29a      	uxth	r2, r3
 800110e:	230a      	movs	r3, #10
 8001110:	4906      	ldr	r1, [pc, #24]	@ (800112c <UARTPollingMethod+0x9c>)
 8001112:	4804      	ldr	r0, [pc, #16]	@ (8001124 <UARTPollingMethod+0x94>)
 8001114:	f002 f874 	bl	8003200 <HAL_UART_Transmit>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200001f4 	.word	0x200001f4
 8001124:	2000010c 	.word	0x2000010c
 8001128:	08004b20 	.word	0x08004b20
 800112c:	20000258 	.word	0x20000258
 8001130:	08004b30 	.word	0x08004b30

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <Error_Handler+0x8>

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <HAL_MspInit+0x44>)
 8001148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114a:	4a0e      	ldr	r2, [pc, #56]	@ (8001184 <HAL_MspInit+0x44>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6613      	str	r3, [r2, #96]	@ 0x60
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <HAL_MspInit+0x44>)
 8001154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <HAL_MspInit+0x44>)
 8001160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001162:	4a08      	ldr	r2, [pc, #32]	@ (8001184 <HAL_MspInit+0x44>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001168:	6593      	str	r3, [r2, #88]	@ 0x58
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_MspInit+0x44>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001176:	f000 fdc3 	bl	8001d00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0a2      	sub	sp, #136	@ 0x88
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	2254      	movs	r2, #84	@ 0x54
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 f827 	bl	80041fc <memset>
  if(huart->Instance==LPUART1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a4f      	ldr	r2, [pc, #316]	@ (80012f0 <HAL_UART_MspInit+0x168>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d139      	bne.n	800122c <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80011b8:	2320      	movs	r3, #32
 80011ba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011bc:	2300      	movs	r3, #0
 80011be:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fad9 	bl	800277c <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011d0:	f7ff ffb0 	bl	8001134 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80011d4:	4b47      	ldr	r3, [pc, #284]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80011d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d8:	4a46      	ldr	r2, [pc, #280]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80011e0:	4b44      	ldr	r3, [pc, #272]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80011e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b41      	ldr	r3, [pc, #260]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f0:	4a40      	ldr	r2, [pc, #256]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f8:	4b3e      	ldr	r3, [pc, #248]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001204:	230c      	movs	r3, #12
 8001206:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001216:	230c      	movs	r3, #12
 8001218:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001220:	4619      	mov	r1, r3
 8001222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001226:	f000 fad7 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800122a:	e05c      	b.n	80012e6 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a31      	ldr	r2, [pc, #196]	@ (80012f8 <HAL_UART_MspInit+0x170>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d157      	bne.n	80012e6 <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001236:	2301      	movs	r3, #1
 8001238:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fa9a 	bl	800277c <HAL_RCCEx_PeriphCLKConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_UART_MspInit+0xca>
      Error_Handler();
 800124e:	f7ff ff71 	bl	8001134 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001252:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001256:	4a27      	ldr	r2, [pc, #156]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125c:	6613      	str	r3, [r2, #96]	@ 0x60
 800125e:	4b25      	ldr	r3, [pc, #148]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a21      	ldr	r2, [pc, #132]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	4a1b      	ldr	r2, [pc, #108]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128e:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <HAL_UART_MspInit+0x16c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800129a:	2330      	movs	r3, #48	@ 0x30
 800129c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012ac:	2307      	movs	r3, #7
 80012ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012b6:	4619      	mov	r1, r3
 80012b8:	4810      	ldr	r0, [pc, #64]	@ (80012fc <HAL_UART_MspInit+0x174>)
 80012ba:	f000 fa8d 	bl	80017d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d2:	2307      	movs	r3, #7
 80012d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e2:	f000 fa79 	bl	80017d8 <HAL_GPIO_Init>
}
 80012e6:	bf00      	nop
 80012e8:	3788      	adds	r7, #136	@ 0x88
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40008000 	.word	0x40008000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40013800 	.word	0x40013800
 80012fc:	48000800 	.word	0x48000800

08001300 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a17      	ldr	r2, [pc, #92]	@ (800137c <HAL_TIM_Encoder_MspInit+0x7c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d128      	bne.n	8001374 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	4a16      	ldr	r2, [pc, #88]	@ (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6593      	str	r3, [r2, #88]	@ 0x58
 800132e:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a10      	ldr	r2, [pc, #64]	@ (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001352:	2350      	movs	r3, #80	@ 0x50
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001362:	2302      	movs	r3, #2
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f000 fa32 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	@ 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40000400 	.word	0x40000400
 8001380:	40021000 	.word	0x40021000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <NMI_Handler+0x4>

0800138c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <HardFault_Handler+0x4>

08001394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <MemManage_Handler+0x4>

0800139c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <UsageFault_Handler+0x4>

080013ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013da:	f000 f8cf 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013e6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013ea:	f000 fbc1 	bl	8001b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013fc:	4a14      	ldr	r2, [pc, #80]	@ (8001450 <_sbrk+0x5c>)
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <_sbrk+0x60>)
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <_sbrk+0x64>)
 8001412:	4a12      	ldr	r2, [pc, #72]	@ (800145c <_sbrk+0x68>)
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	429a      	cmp	r2, r3
 8001422:	d207      	bcs.n	8001434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001424:	f002 fef2 	bl	800420c <__errno>
 8001428:	4603      	mov	r3, r0
 800142a:	220c      	movs	r2, #12
 800142c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	e009      	b.n	8001448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143a:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <_sbrk+0x64>)
 8001444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20020000 	.word	0x20020000
 8001454:	00000400 	.word	0x00000400
 8001458:	200002bc 	.word	0x200002bc
 800145c:	20000410 	.word	0x20000410

08001460 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <SystemInit+0x20>)
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800146a:	4a05      	ldr	r2, [pc, #20]	@ (8001480 <SystemInit+0x20>)
 800146c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001484:	480d      	ldr	r0, [pc, #52]	@ (80014bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001486:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001488:	f7ff ffea 	bl	8001460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	@ (80014c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <LoopForever+0xe>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	@ (80014d0 <LoopForever+0x16>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f002 feb1 	bl	8004218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b6:	f7ff fbbb 	bl	8000c30 <main>

080014ba <LoopForever>:

LoopForever:
    b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
  ldr   r0, =_estack
 80014bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014c8:	08004bcc 	.word	0x08004bcc
  ldr r2, =_sbss
 80014cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014d0:	2000040c 	.word	0x2000040c

080014d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_2_IRQHandler>

080014d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 f939 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 f80e 	bl	8001508 <HAL_InitTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	e001      	b.n	80014fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f8:	f7ff fe22 	bl	8001140 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014fc:	79fb      	ldrb	r3, [r7, #7]

}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001514:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <HAL_InitTick+0x68>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d022      	beq.n	8001562 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800151c:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <HAL_InitTick+0x6c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <HAL_InitTick+0x68>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001528:	fbb1 f3f3 	udiv	r3, r1, r3
 800152c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f944 	bl	80017be <HAL_SYSTICK_Config>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10f      	bne.n	800155c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	d809      	bhi.n	8001556 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001542:	2200      	movs	r2, #0
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	f04f 30ff 	mov.w	r0, #4294967295
 800154a:	f000 f910 	bl	800176e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800154e:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <HAL_InitTick+0x70>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e007      	b.n	8001566 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e004      	b.n	8001566 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000008 	.word	0x20000008
 8001574:	20000000 	.word	0x20000000
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_IncTick+0x1c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_IncTick+0x20>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4413      	add	r3, r2
 800158a:	4a03      	ldr	r2, [pc, #12]	@ (8001598 <HAL_IncTick+0x1c>)
 800158c:	6013      	str	r3, [r2, #0]
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	200002c0 	.word	0x200002c0
 800159c:	20000008 	.word	0x20000008

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	200002c0 	.word	0x200002c0

080015b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db0b      	blt.n	8001646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	4907      	ldr	r1, [pc, #28]	@ (8001654 <__NVIC_EnableIRQ+0x38>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2001      	movs	r0, #1
 800163e:	fa00 f202 	lsl.w	r2, r0, r2
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	@ (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	@ (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	@ 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	@ 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff29 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff40 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff90 	bl	80016ac <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5f 	bl	8001658 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff33 	bl	800161c <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa4 	bl	8001714 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e6:	e15a      	b.n	8001a9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2101      	movs	r1, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	4013      	ands	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 814c 	beq.w	8001a98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d005      	beq.n	8001818 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001814:	2b02      	cmp	r3, #2
 8001816:	d130      	bne.n	800187a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800184e:	2201      	movs	r2, #1
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	f003 0201 	and.w	r2, r3, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b03      	cmp	r3, #3
 8001884:	d017      	beq.n	80018b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d123      	bne.n	800190a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	08da      	lsrs	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3208      	adds	r2, #8
 80018ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	691a      	ldr	r2, [r3, #16]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	08da      	lsrs	r2, r3, #3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3208      	adds	r2, #8
 8001904:	6939      	ldr	r1, [r7, #16]
 8001906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0203 	and.w	r2, r3, #3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80a6 	beq.w	8001a98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194c:	4b5b      	ldr	r3, [pc, #364]	@ (8001abc <HAL_GPIO_Init+0x2e4>)
 800194e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001950:	4a5a      	ldr	r2, [pc, #360]	@ (8001abc <HAL_GPIO_Init+0x2e4>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6613      	str	r3, [r2, #96]	@ 0x60
 8001958:	4b58      	ldr	r3, [pc, #352]	@ (8001abc <HAL_GPIO_Init+0x2e4>)
 800195a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001964:	4a56      	ldr	r2, [pc, #344]	@ (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800198e:	d01f      	beq.n	80019d0 <HAL_GPIO_Init+0x1f8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4c      	ldr	r2, [pc, #304]	@ (8001ac4 <HAL_GPIO_Init+0x2ec>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d019      	beq.n	80019cc <HAL_GPIO_Init+0x1f4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a4b      	ldr	r2, [pc, #300]	@ (8001ac8 <HAL_GPIO_Init+0x2f0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d013      	beq.n	80019c8 <HAL_GPIO_Init+0x1f0>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a4a      	ldr	r2, [pc, #296]	@ (8001acc <HAL_GPIO_Init+0x2f4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00d      	beq.n	80019c4 <HAL_GPIO_Init+0x1ec>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a49      	ldr	r2, [pc, #292]	@ (8001ad0 <HAL_GPIO_Init+0x2f8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d007      	beq.n	80019c0 <HAL_GPIO_Init+0x1e8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a48      	ldr	r2, [pc, #288]	@ (8001ad4 <HAL_GPIO_Init+0x2fc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_GPIO_Init+0x1e4>
 80019b8:	2305      	movs	r3, #5
 80019ba:	e00a      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019bc:	2306      	movs	r3, #6
 80019be:	e008      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019c0:	2304      	movs	r3, #4
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019c4:	2303      	movs	r3, #3
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019d0:	2300      	movs	r3, #0
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e2:	4937      	ldr	r1, [pc, #220]	@ (8001ac0 <HAL_GPIO_Init+0x2e8>)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019f0:	4b39      	ldr	r3, [pc, #228]	@ (8001ad8 <HAL_GPIO_Init+0x300>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a14:	4a30      	ldr	r2, [pc, #192]	@ (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a3e:	4a26      	ldr	r2, [pc, #152]	@ (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a44:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a68:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a92:	4a11      	ldr	r2, [pc, #68]	@ (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f47f ae9d 	bne.w	80017e8 <HAL_GPIO_Init+0x10>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	48000400 	.word	0x48000400
 8001ac8:	48000800 	.word	0x48000800
 8001acc:	48000c00 	.word	0x48000c00
 8001ad0:	48001000 	.word	0x48001000
 8001ad4:	48001400 	.word	0x48001400
 8001ad8:	40010400 	.word	0x40010400

08001adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e001      	b.n	8001afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4013      	ands	r3, r2
 8001b54:	041a      	lsls	r2, r3, #16
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43d9      	mvns	r1, r3
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	400b      	ands	r3, r1
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	619a      	str	r2, [r3, #24]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b7a:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b86:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f806 	bl	8001ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40010400 	.word	0x40010400

08001ba0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d141      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bd2:	d131      	bne.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd4:	4b47      	ldr	r3, [pc, #284]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bda:	4a46      	ldr	r2, [pc, #280]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001be0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be4:	4b43      	ldr	r3, [pc, #268]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bec:	4a41      	ldr	r2, [pc, #260]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bf4:	4b40      	ldr	r3, [pc, #256]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2232      	movs	r2, #50	@ 0x32
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	4a3f      	ldr	r2, [pc, #252]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	0c9b      	lsrs	r3, r3, #18
 8001c06:	3301      	adds	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c0a:	e002      	b.n	8001c12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c12:	4b38      	ldr	r3, [pc, #224]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1e:	d102      	bne.n	8001c26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f2      	bne.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c26:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c32:	d158      	bne.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e057      	b.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c38:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c48:	e04d      	b.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c50:	d141      	bne.n	8001cd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c52:	4b28      	ldr	r3, [pc, #160]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c5e:	d131      	bne.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c60:	4b24      	ldr	r3, [pc, #144]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c66:	4a23      	ldr	r2, [pc, #140]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c70:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c78:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2232      	movs	r2, #50	@ 0x32
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	0c9b      	lsrs	r3, r3, #18
 8001c92:	3301      	adds	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c96:	e002      	b.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001caa:	d102      	bne.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f2      	bne.n	8001c98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cbe:	d112      	bne.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e011      	b.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cd4:	e007      	b.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cde:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ce4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	431bde83 	.word	0x431bde83

08001d00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d04:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d0e:	6093      	str	r3, [r2, #8]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40007000 	.word	0x40007000

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e2fe      	b.n	8002330 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d075      	beq.n	8001e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3e:	4b97      	ldr	r3, [pc, #604]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d48:	4b94      	ldr	r3, [pc, #592]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b0c      	cmp	r3, #12
 8001d56:	d102      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3e>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d002      	beq.n	8001d64 <HAL_RCC_OscConfig+0x44>
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d10b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	4b8d      	ldr	r3, [pc, #564]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d05b      	beq.n	8001e28 <HAL_RCC_OscConfig+0x108>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d157      	bne.n	8001e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e2d9      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x74>
 8001d86:	4b85      	ldr	r3, [pc, #532]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a84      	ldr	r2, [pc, #528]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e01d      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x98>
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7e      	ldr	r2, [pc, #504]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b7c      	ldr	r3, [pc, #496]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a7b      	ldr	r2, [pc, #492]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001db8:	4b78      	ldr	r3, [pc, #480]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a77      	ldr	r2, [pc, #476]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b75      	ldr	r3, [pc, #468]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a74      	ldr	r2, [pc, #464]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fbe2 	bl	80015a0 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff fbde 	bl	80015a0 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	@ 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e29e      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0xc0>
 8001dfe:	e014      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fbce 	bl	80015a0 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff fbca 	bl	80015a0 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	@ 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e28a      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e1a:	4b60      	ldr	r3, [pc, #384]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0xe8>
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d075      	beq.n	8001f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e36:	4b59      	ldr	r3, [pc, #356]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e40:	4b56      	ldr	r3, [pc, #344]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_OscConfig+0x136>
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d002      	beq.n	8001e5c <HAL_RCC_OscConfig+0x13c>
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d11f      	bne.n	8001e9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_OscConfig+0x154>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e25d      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	4b49      	ldr	r3, [pc, #292]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	4946      	ldr	r1, [pc, #280]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e88:	4b45      	ldr	r3, [pc, #276]	@ (8001fa0 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fb3b 	bl	8001508 <HAL_InitTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d043      	beq.n	8001f20 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e249      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d023      	beq.n	8001eec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fb76 	bl	80015a0 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fb72 	bl	80015a0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e232      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eca:	4b34      	ldr	r3, [pc, #208]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b31      	ldr	r3, [pc, #196]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	492d      	ldr	r1, [pc, #180]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
 8001eea:	e01a      	b.n	8001f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eec:	4b2b      	ldr	r3, [pc, #172]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001ef2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fb52 	bl	80015a0 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f00:	f7ff fb4e 	bl	80015a0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e20e      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f12:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1e0>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d041      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d01c      	beq.n	8001f70 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f36:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f3c:	4a17      	ldr	r2, [pc, #92]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f46:	f7ff fb2b 	bl	80015a0 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7ff fb27 	bl	80015a0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e1e7      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f60:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0ef      	beq.n	8001f4e <HAL_RCC_OscConfig+0x22e>
 8001f6e:	e020      	b.n	8001fb2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f70:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f76:	4a09      	ldr	r2, [pc, #36]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7ff fb0e 	bl	80015a0 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f86:	e00d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f88:	f7ff fb0a 	bl	80015a0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d906      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1ca      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8001fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ea      	bne.n	8001f88 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80a6 	beq.w	800210c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fc4:	4b84      	ldr	r3, [pc, #528]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x2b4>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b6>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	4b7f      	ldr	r3, [pc, #508]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fde:	4a7e      	ldr	r2, [pc, #504]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff6:	4b79      	ldr	r3, [pc, #484]	@ (80021dc <HAL_RCC_OscConfig+0x4bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d118      	bne.n	8002034 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002002:	4b76      	ldr	r3, [pc, #472]	@ (80021dc <HAL_RCC_OscConfig+0x4bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a75      	ldr	r2, [pc, #468]	@ (80021dc <HAL_RCC_OscConfig+0x4bc>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800200c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200e:	f7ff fac7 	bl	80015a0 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002016:	f7ff fac3 	bl	80015a0 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e183      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002028:	4b6c      	ldr	r3, [pc, #432]	@ (80021dc <HAL_RCC_OscConfig+0x4bc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d108      	bne.n	800204e <HAL_RCC_OscConfig+0x32e>
 800203c:	4b66      	ldr	r3, [pc, #408]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002042:	4a65      	ldr	r2, [pc, #404]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800204c:	e024      	b.n	8002098 <HAL_RCC_OscConfig+0x378>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b05      	cmp	r3, #5
 8002054:	d110      	bne.n	8002078 <HAL_RCC_OscConfig+0x358>
 8002056:	4b60      	ldr	r3, [pc, #384]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205c:	4a5e      	ldr	r2, [pc, #376]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002066:	4b5c      	ldr	r3, [pc, #368]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	4a5a      	ldr	r2, [pc, #360]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002076:	e00f      	b.n	8002098 <HAL_RCC_OscConfig+0x378>
 8002078:	4b57      	ldr	r3, [pc, #348]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	4a56      	ldr	r2, [pc, #344]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002088:	4b53      	ldr	r3, [pc, #332]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208e:	4a52      	ldr	r2, [pc, #328]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d016      	beq.n	80020ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff fa7e 	bl	80015a0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7ff fa7a 	bl	80015a0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e138      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020be:	4b46      	ldr	r3, [pc, #280]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0ed      	beq.n	80020a8 <HAL_RCC_OscConfig+0x388>
 80020cc:	e015      	b.n	80020fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7ff fa67 	bl	80015a0 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7ff fa63 	bl	80015a0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e121      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ec:	4b3a      	ldr	r3, [pc, #232]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1ed      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020fa:	7ffb      	ldrb	r3, [r7, #31]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002100:	4b35      	ldr	r3, [pc, #212]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002104:	4a34      	ldr	r2, [pc, #208]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800210a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d03c      	beq.n	8002192 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01c      	beq.n	800215a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002120:	4b2d      	ldr	r3, [pc, #180]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002122:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002126:	4a2c      	ldr	r2, [pc, #176]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7ff fa36 	bl	80015a0 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002138:	f7ff fa32 	bl	80015a0 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e0f2      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800214a:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800214c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ef      	beq.n	8002138 <HAL_RCC_OscConfig+0x418>
 8002158:	e01b      	b.n	8002192 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800215a:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800215c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002160:	4a1d      	ldr	r2, [pc, #116]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7ff fa19 	bl	80015a0 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002172:	f7ff fa15 	bl	80015a0 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e0d5      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002184:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002186:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ef      	bne.n	8002172 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80c9 	beq.w	800232e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800219c:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b0c      	cmp	r3, #12
 80021a6:	f000 8083 	beq.w	80022b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d15e      	bne.n	8002270 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a08      	ldr	r2, [pc, #32]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 80021b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7ff f9ef 	bl	80015a0 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c4:	e00c      	b.n	80021e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c6:	f7ff f9eb 	bl	80015a0 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d905      	bls.n	80021e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0ab      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	4b55      	ldr	r3, [pc, #340]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ec      	bne.n	80021c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ec:	4b52      	ldr	r3, [pc, #328]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	4b52      	ldr	r3, [pc, #328]	@ (800233c <HAL_RCC_OscConfig+0x61c>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6a11      	ldr	r1, [r2, #32]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021fc:	3a01      	subs	r2, #1
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	4311      	orrs	r1, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002206:	0212      	lsls	r2, r2, #8
 8002208:	4311      	orrs	r1, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800220e:	0852      	lsrs	r2, r2, #1
 8002210:	3a01      	subs	r2, #1
 8002212:	0552      	lsls	r2, r2, #21
 8002214:	4311      	orrs	r1, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800221a:	0852      	lsrs	r2, r2, #1
 800221c:	3a01      	subs	r2, #1
 800221e:	0652      	lsls	r2, r2, #25
 8002220:	4311      	orrs	r1, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002226:	06d2      	lsls	r2, r2, #27
 8002228:	430a      	orrs	r2, r1
 800222a:	4943      	ldr	r1, [pc, #268]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 800222c:	4313      	orrs	r3, r2
 800222e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002230:	4b41      	ldr	r3, [pc, #260]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a40      	ldr	r2, [pc, #256]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800223a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800223c:	4b3e      	ldr	r3, [pc, #248]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a3d      	ldr	r2, [pc, #244]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002246:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff f9aa 	bl	80015a0 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7ff f9a6 	bl	80015a0 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e066      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002262:	4b35      	ldr	r3, [pc, #212]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x530>
 800226e:	e05e      	b.n	800232e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b31      	ldr	r3, [pc, #196]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a30      	ldr	r2, [pc, #192]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7ff f990 	bl	80015a0 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7ff f98c 	bl	80015a0 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e04c      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002296:	4b28      	ldr	r3, [pc, #160]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022a2:	4b25      	ldr	r3, [pc, #148]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	4924      	ldr	r1, [pc, #144]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80022a8:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <HAL_RCC_OscConfig+0x620>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	60cb      	str	r3, [r1, #12]
 80022ae:	e03e      	b.n	800232e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e039      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d12c      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	3b01      	subs	r3, #1
 80022dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d123      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d11b      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d113      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	085b      	lsrs	r3, r3, #1
 800230e:	3b01      	subs	r3, #1
 8002310:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d109      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	3b01      	subs	r3, #1
 8002324:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	019f800c 	.word	0x019f800c
 8002340:	feeefffc 	.word	0xfeeefffc

08002344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e11e      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b91      	ldr	r3, [pc, #580]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d910      	bls.n	800238c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b8e      	ldr	r3, [pc, #568]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 020f 	bic.w	r2, r3, #15
 8002372:	498c      	ldr	r1, [pc, #560]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b8a      	ldr	r3, [pc, #552]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e106      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d073      	beq.n	8002480 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d129      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a0:	4b81      	ldr	r3, [pc, #516]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0f4      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023b0:	f000 f99e 	bl	80026f0 <RCC_GetSysClockFreqFromPLLSource>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4a7c      	ldr	r2, [pc, #496]	@ (80025ac <HAL_RCC_ClockConfig+0x268>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d93f      	bls.n	800243e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023be:	4b7a      	ldr	r3, [pc, #488]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d033      	beq.n	800243e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d12f      	bne.n	800243e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023de:	4b72      	ldr	r3, [pc, #456]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023e6:	4a70      	ldr	r2, [pc, #448]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023ee:	2380      	movs	r3, #128	@ 0x80
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e024      	b.n	800243e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fc:	4b6a      	ldr	r3, [pc, #424]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0c6      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240c:	4b66      	ldr	r3, [pc, #408]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0be      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800241c:	f000 f8ce 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002420:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4a61      	ldr	r2, [pc, #388]	@ (80025ac <HAL_RCC_ClockConfig+0x268>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d909      	bls.n	800243e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800242a:	4b5f      	ldr	r3, [pc, #380]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002432:	4a5d      	ldr	r2, [pc, #372]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 8002434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002438:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800243a:	2380      	movs	r3, #128	@ 0x80
 800243c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b5a      	ldr	r3, [pc, #360]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4957      	ldr	r1, [pc, #348]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002450:	f7ff f8a6 	bl	80015a0 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7ff f8a2 	bl	80015a0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e095      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	4b4e      	ldr	r3, [pc, #312]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 020c 	and.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	429a      	cmp	r2, r3
 800247e:	d1eb      	bne.n	8002458 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d023      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002498:	4b43      	ldr	r3, [pc, #268]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a42      	ldr	r2, [pc, #264]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800249e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024b0:	4b3d      	ldr	r3, [pc, #244]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80024b8:	4a3b      	ldr	r2, [pc, #236]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b39      	ldr	r3, [pc, #228]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4936      	ldr	r1, [pc, #216]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b80      	cmp	r3, #128	@ 0x80
 80024d8:	d105      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024da:	4b33      	ldr	r3, [pc, #204]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4a32      	ldr	r2, [pc, #200]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e6:	4b2f      	ldr	r3, [pc, #188]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d21d      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f4:	4b2b      	ldr	r3, [pc, #172]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 020f 	bic.w	r2, r3, #15
 80024fc:	4929      	ldr	r1, [pc, #164]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002504:	f7ff f84c 	bl	80015a0 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250c:	f7ff f848 	bl	80015a0 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e03b      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d1ed      	bne.n	800250c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800253c:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4917      	ldr	r1, [pc, #92]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800255a:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	490f      	ldr	r1, [pc, #60]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800256e:	f000 f825 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002572:	4602      	mov	r2, r0
 8002574:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	490c      	ldr	r1, [pc, #48]	@ (80025b0 <HAL_RCC_ClockConfig+0x26c>)
 8002580:	5ccb      	ldrb	r3, [r1, r3]
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a0a      	ldr	r2, [pc, #40]	@ (80025b4 <HAL_RCC_ClockConfig+0x270>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800258e:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <HAL_RCC_ClockConfig+0x274>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe ffb8 	bl	8001508 <HAL_InitTick>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	04c4b400 	.word	0x04c4b400
 80025b0:	08004b48 	.word	0x08004b48
 80025b4:	20000000 	.word	0x20000000
 80025b8:	20000004 	.word	0x20000004

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d102      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e047      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025d4:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025e0:	4b26      	ldr	r3, [pc, #152]	@ (800267c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e03e      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025e6:	4b23      	ldr	r3, [pc, #140]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d136      	bne.n	8002660 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025f2:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3301      	adds	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d10c      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002610:	4a1a      	ldr	r2, [pc, #104]	@ (800267c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	4a16      	ldr	r2, [pc, #88]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 800261a:	68d2      	ldr	r2, [r2, #12]
 800261c:	0a12      	lsrs	r2, r2, #8
 800261e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	617b      	str	r3, [r7, #20]
      break;
 8002628:	e00c      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800262a:	4a13      	ldr	r2, [pc, #76]	@ (8002678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002634:	68d2      	ldr	r2, [r2, #12]
 8002636:	0a12      	lsrs	r2, r2, #8
 8002638:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
      break;
 8002642:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002644:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	0e5b      	lsrs	r3, r3, #25
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	3301      	adds	r3, #1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	e001      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002664:	693b      	ldr	r3, [r7, #16]
}
 8002666:	4618      	mov	r0, r3
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	00f42400 	.word	0x00f42400
 800267c:	016e3600 	.word	0x016e3600

08002680 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <HAL_RCC_GetHCLKFreq+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800269c:	f7ff fff0 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4904      	ldr	r1, [pc, #16]	@ (80026c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	08004b58 	.word	0x08004b58

080026c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026c8:	f7ff ffda 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0adb      	lsrs	r3, r3, #11
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4904      	ldr	r1, [pc, #16]	@ (80026ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08004b58 	.word	0x08004b58

080026f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002700:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	3301      	adds	r3, #1
 800270c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d10c      	bne.n	800272e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002714:	4a17      	ldr	r2, [pc, #92]	@ (8002774 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	4a14      	ldr	r2, [pc, #80]	@ (8002770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800271e:	68d2      	ldr	r2, [r2, #12]
 8002720:	0a12      	lsrs	r2, r2, #8
 8002722:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	617b      	str	r3, [r7, #20]
    break;
 800272c:	e00c      	b.n	8002748 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800272e:	4a12      	ldr	r2, [pc, #72]	@ (8002778 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	fbb2 f3f3 	udiv	r3, r2, r3
 8002736:	4a0e      	ldr	r2, [pc, #56]	@ (8002770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002738:	68d2      	ldr	r2, [r2, #12]
 800273a:	0a12      	lsrs	r2, r2, #8
 800273c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    break;
 8002746:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002748:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0e5b      	lsrs	r3, r3, #25
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	3301      	adds	r3, #1
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002762:	687b      	ldr	r3, [r7, #4]
}
 8002764:	4618      	mov	r0, r3
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40021000 	.word	0x40021000
 8002774:	016e3600 	.word	0x016e3600
 8002778:	00f42400 	.word	0x00f42400

0800277c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002784:	2300      	movs	r3, #0
 8002786:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002788:	2300      	movs	r3, #0
 800278a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8098 	beq.w	80028ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b43      	ldr	r3, [pc, #268]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b40      	ldr	r3, [pc, #256]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ae:	4a3f      	ldr	r2, [pc, #252]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80027b6:	4b3d      	ldr	r3, [pc, #244]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c2:	2301      	movs	r3, #1
 80027c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027c6:	4b3a      	ldr	r3, [pc, #232]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a39      	ldr	r2, [pc, #228]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027d2:	f7fe fee5 	bl	80015a0 <HAL_GetTick>
 80027d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027d8:	e009      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027da:	f7fe fee1 	bl	80015a0 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d902      	bls.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	74fb      	strb	r3, [r7, #19]
        break;
 80027ec:	e005      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ee:	4b30      	ldr	r3, [pc, #192]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ef      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d159      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002800:	4b2a      	ldr	r3, [pc, #168]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800280a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01e      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	429a      	cmp	r2, r3
 800281a:	d019      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800281c:	4b23      	ldr	r3, [pc, #140]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002826:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002828:	4b20      	ldr	r3, [pc, #128]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282e:	4a1f      	ldr	r2, [pc, #124]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002838:	4b1c      	ldr	r3, [pc, #112]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283e:	4a1b      	ldr	r2, [pc, #108]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002848:	4a18      	ldr	r2, [pc, #96]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d016      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285a:	f7fe fea1 	bl	80015a0 <HAL_GetTick>
 800285e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002860:	e00b      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe fe9d 	bl	80015a0 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d902      	bls.n	800287a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	74fb      	strb	r3, [r7, #19]
            break;
 8002878:	e006      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287a:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ec      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10b      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800288e:	4b07      	ldr	r3, [pc, #28]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002894:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800289c:	4903      	ldr	r1, [pc, #12]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028a4:	e008      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028a6:	7cfb      	ldrb	r3, [r7, #19]
 80028a8:	74bb      	strb	r3, [r7, #18]
 80028aa:	e005      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028b8:	7c7b      	ldrb	r3, [r7, #17]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d105      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028be:	4ba7      	ldr	r3, [pc, #668]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c2:	4aa6      	ldr	r2, [pc, #664]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028d6:	4ba1      	ldr	r3, [pc, #644]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028dc:	f023 0203 	bic.w	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	499d      	ldr	r1, [pc, #628]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f8:	4b98      	ldr	r3, [pc, #608]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f023 020c 	bic.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	4995      	ldr	r1, [pc, #596]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800291a:	4b90      	ldr	r3, [pc, #576]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002920:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	498c      	ldr	r1, [pc, #560]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800293c:	4b87      	ldr	r3, [pc, #540]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002942:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	4984      	ldr	r1, [pc, #528]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800295e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	497b      	ldr	r1, [pc, #492]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002980:	4b76      	ldr	r3, [pc, #472]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002986:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	4973      	ldr	r1, [pc, #460]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029a2:	4b6e      	ldr	r3, [pc, #440]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	496a      	ldr	r1, [pc, #424]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029c4:	4b65      	ldr	r3, [pc, #404]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4962      	ldr	r1, [pc, #392]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029e6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	4959      	ldr	r1, [pc, #356]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a08:	4b54      	ldr	r3, [pc, #336]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a0e:	f023 0203 	bic.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a16:	4951      	ldr	r1, [pc, #324]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a2a:	4b4c      	ldr	r3, [pc, #304]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a30:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	4948      	ldr	r1, [pc, #288]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d015      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a4c:	4b43      	ldr	r3, [pc, #268]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	4940      	ldr	r1, [pc, #256]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a3a      	ldr	r2, [pc, #232]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a84:	4b35      	ldr	r3, [pc, #212]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a92:	4932      	ldr	r1, [pc, #200]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d015      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002abc:	4b27      	ldr	r3, [pc, #156]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aca:	4924      	ldr	r1, [pc, #144]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ada:	d105      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002adc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ae6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d015      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af4:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b02:	4916      	ldr	r1, [pc, #88]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b12:	d105      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b14:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a10      	ldr	r2, [pc, #64]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b1e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d019      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	4908      	ldr	r1, [pc, #32]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b4a:	d109      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b4c:	4b03      	ldr	r3, [pc, #12]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a02      	ldr	r2, [pc, #8]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b56:	60d3      	str	r3, [r2, #12]
 8002b58:	e002      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b6c:	4b29      	ldr	r3, [pc, #164]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b72:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	4926      	ldr	r1, [pc, #152]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b8c:	4b21      	ldr	r3, [pc, #132]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a20      	ldr	r2, [pc, #128]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b96:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002baa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb2:	4918      	ldr	r1, [pc, #96]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bc4:	4b13      	ldr	r3, [pc, #76]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d015      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002be2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bea:	490a      	ldr	r1, [pc, #40]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c08:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e097      	b.n	8002d5c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7fe fb5d 	bl	8001300 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002c5c:	f023 0307 	bic.w	r3, r3, #7
 8002c60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	f000 f907 	bl	8002e80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	4313      	orrs	r3, r2
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002cb8:	f023 030c 	bic.w	r3, r3, #12
 8002cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	011a      	lsls	r2, r3, #4
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	031b      	lsls	r3, r3, #12
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002cfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d110      	bne.n	8002db6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d102      	bne.n	8002da0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d9a:	7b7b      	ldrb	r3, [r7, #13]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d001      	beq.n	8002da4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e069      	b.n	8002e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db4:	e031      	b.n	8002e1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d110      	bne.n	8002dde <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dbc:	7bbb      	ldrb	r3, [r7, #14]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d102      	bne.n	8002dc8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dc2:	7b3b      	ldrb	r3, [r7, #12]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d001      	beq.n	8002dcc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e055      	b.n	8002e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ddc:	e01d      	b.n	8002e1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d108      	bne.n	8002df6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002de4:	7bbb      	ldrb	r3, [r7, #14]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d105      	bne.n	8002df6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dea:	7b7b      	ldrb	r3, [r7, #13]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d102      	bne.n	8002df6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002df0:	7b3b      	ldrb	r3, [r7, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e03e      	b.n	8002e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2202      	movs	r2, #2
 8002e06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_TIM_Encoder_Start+0xc4>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d008      	beq.n	8002e38 <HAL_TIM_Encoder_Start+0xd4>
 8002e26:	e00f      	b.n	8002e48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f8d9 	bl	8002fe8 <TIM_CCxChannelCmd>
      break;
 8002e36:	e016      	b.n	8002e66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	2104      	movs	r1, #4
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f8d1 	bl	8002fe8 <TIM_CCxChannelCmd>
      break;
 8002e46:	e00e      	b.n	8002e66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f8c9 	bl	8002fe8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f8c2 	bl	8002fe8 <TIM_CCxChannelCmd>
      break;
 8002e64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a4c      	ldr	r2, [pc, #304]	@ (8002fc4 <TIM_Base_SetConfig+0x144>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d017      	beq.n	8002ec8 <TIM_Base_SetConfig+0x48>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e9e:	d013      	beq.n	8002ec8 <TIM_Base_SetConfig+0x48>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a49      	ldr	r2, [pc, #292]	@ (8002fc8 <TIM_Base_SetConfig+0x148>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00f      	beq.n	8002ec8 <TIM_Base_SetConfig+0x48>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a48      	ldr	r2, [pc, #288]	@ (8002fcc <TIM_Base_SetConfig+0x14c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00b      	beq.n	8002ec8 <TIM_Base_SetConfig+0x48>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a47      	ldr	r2, [pc, #284]	@ (8002fd0 <TIM_Base_SetConfig+0x150>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d007      	beq.n	8002ec8 <TIM_Base_SetConfig+0x48>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a46      	ldr	r2, [pc, #280]	@ (8002fd4 <TIM_Base_SetConfig+0x154>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <TIM_Base_SetConfig+0x48>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a45      	ldr	r2, [pc, #276]	@ (8002fd8 <TIM_Base_SetConfig+0x158>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d108      	bne.n	8002eda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a39      	ldr	r2, [pc, #228]	@ (8002fc4 <TIM_Base_SetConfig+0x144>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d023      	beq.n	8002f2a <TIM_Base_SetConfig+0xaa>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee8:	d01f      	beq.n	8002f2a <TIM_Base_SetConfig+0xaa>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a36      	ldr	r2, [pc, #216]	@ (8002fc8 <TIM_Base_SetConfig+0x148>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01b      	beq.n	8002f2a <TIM_Base_SetConfig+0xaa>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a35      	ldr	r2, [pc, #212]	@ (8002fcc <TIM_Base_SetConfig+0x14c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d017      	beq.n	8002f2a <TIM_Base_SetConfig+0xaa>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a34      	ldr	r2, [pc, #208]	@ (8002fd0 <TIM_Base_SetConfig+0x150>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <TIM_Base_SetConfig+0xaa>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a33      	ldr	r2, [pc, #204]	@ (8002fd4 <TIM_Base_SetConfig+0x154>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00f      	beq.n	8002f2a <TIM_Base_SetConfig+0xaa>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a33      	ldr	r2, [pc, #204]	@ (8002fdc <TIM_Base_SetConfig+0x15c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <TIM_Base_SetConfig+0xaa>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a32      	ldr	r2, [pc, #200]	@ (8002fe0 <TIM_Base_SetConfig+0x160>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_Base_SetConfig+0xaa>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a31      	ldr	r2, [pc, #196]	@ (8002fe4 <TIM_Base_SetConfig+0x164>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_Base_SetConfig+0xaa>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a2c      	ldr	r2, [pc, #176]	@ (8002fd8 <TIM_Base_SetConfig+0x158>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d108      	bne.n	8002f3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a18      	ldr	r2, [pc, #96]	@ (8002fc4 <TIM_Base_SetConfig+0x144>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <TIM_Base_SetConfig+0x110>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd4 <TIM_Base_SetConfig+0x154>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00f      	beq.n	8002f90 <TIM_Base_SetConfig+0x110>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a1a      	ldr	r2, [pc, #104]	@ (8002fdc <TIM_Base_SetConfig+0x15c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00b      	beq.n	8002f90 <TIM_Base_SetConfig+0x110>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a19      	ldr	r2, [pc, #100]	@ (8002fe0 <TIM_Base_SetConfig+0x160>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d007      	beq.n	8002f90 <TIM_Base_SetConfig+0x110>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a18      	ldr	r2, [pc, #96]	@ (8002fe4 <TIM_Base_SetConfig+0x164>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d003      	beq.n	8002f90 <TIM_Base_SetConfig+0x110>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a13      	ldr	r2, [pc, #76]	@ (8002fd8 <TIM_Base_SetConfig+0x158>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d103      	bne.n	8002f98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d105      	bne.n	8002fb6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f023 0201 	bic.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	611a      	str	r2, [r3, #16]
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	40000c00 	.word	0x40000c00
 8002fd4:	40013400 	.word	0x40013400
 8002fd8:	40015000 	.word	0x40015000
 8002fdc:	40014000 	.word	0x40014000
 8002fe0:	40014400 	.word	0x40014400
 8002fe4:	40014800 	.word	0x40014800

08002fe8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a1a      	ldr	r2, [r3, #32]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	43db      	mvns	r3, r3
 800300a:	401a      	ands	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a1a      	ldr	r2, [r3, #32]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	431a      	orrs	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003048:	2302      	movs	r3, #2
 800304a:	e074      	b.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a34      	ldr	r2, [pc, #208]	@ (8003144 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d009      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a33      	ldr	r2, [pc, #204]	@ (8003148 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a31      	ldr	r2, [pc, #196]	@ (800314c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003090:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80030a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a21      	ldr	r2, [pc, #132]	@ (8003144 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d022      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030cc:	d01d      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003150 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d018      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003154 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003158 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00e      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a15      	ldr	r2, [pc, #84]	@ (8003148 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a18      	ldr	r2, [pc, #96]	@ (800315c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a11      	ldr	r2, [pc, #68]	@ (800314c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10c      	bne.n	8003124 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	4313      	orrs	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40012c00 	.word	0x40012c00
 8003148:	40013400 	.word	0x40013400
 800314c:	40015000 	.word	0x40015000
 8003150:	40000400 	.word	0x40000400
 8003154:	40000800 	.word	0x40000800
 8003158:	40000c00 	.word	0x40000c00
 800315c:	40014000 	.word	0x40014000

08003160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e042      	b.n	80031f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003178:	2b00      	cmp	r3, #0
 800317a:	d106      	bne.n	800318a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7fd ffff 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2224      	movs	r2, #36	@ 0x24
 800318e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fc7a 	bl	8003aa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f97b 	bl	80034ac <UART_SetConfig>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e01b      	b.n	80031f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fcf9 	bl	8003be8 <UART_CheckIdleState>
 80031f6:	4603      	mov	r3, r0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	@ 0x28
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003216:	2b20      	cmp	r3, #32
 8003218:	d17b      	bne.n	8003312 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_UART_Transmit+0x26>
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e074      	b.n	8003314 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2221      	movs	r2, #33	@ 0x21
 8003236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800323a:	f7fe f9b1 	bl	80015a0 <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	88fa      	ldrh	r2, [r7, #6]
 800324c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003258:	d108      	bne.n	800326c <HAL_UART_Transmit+0x6c>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d104      	bne.n	800326c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	e003      	b.n	8003274 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003274:	e030      	b.n	80032d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2200      	movs	r2, #0
 800327e:	2180      	movs	r1, #128	@ 0x80
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fd5b 	bl	8003d3c <UART_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e03d      	b.n	8003314 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10b      	bne.n	80032b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	3302      	adds	r3, #2
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	e007      	b.n	80032c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	781a      	ldrb	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	3301      	adds	r3, #1
 80032c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1c8      	bne.n	8003276 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2200      	movs	r2, #0
 80032ec:	2140      	movs	r1, #64	@ 0x40
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fd24 	bl	8003d3c <UART_WaitOnFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e006      	b.n	8003314 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003312:	2302      	movs	r3, #2
  }
}
 8003314:	4618      	mov	r0, r3
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	@ 0x28
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003332:	2b20      	cmp	r3, #32
 8003334:	f040 80b5 	bne.w	80034a2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_UART_Receive+0x28>
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0ad      	b.n	80034a4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2222      	movs	r2, #34	@ 0x22
 8003354:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800335e:	f7fe f91f 	bl	80015a0 <HAL_GetTick>
 8003362:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	88fa      	ldrh	r2, [r7, #6]
 8003368:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	88fa      	ldrh	r2, [r7, #6]
 8003370:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337c:	d10e      	bne.n	800339c <HAL_UART_Receive+0x80>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <HAL_UART_Receive+0x76>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800338c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003390:	e02d      	b.n	80033ee <HAL_UART_Receive+0xd2>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	22ff      	movs	r2, #255	@ 0xff
 8003396:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800339a:	e028      	b.n	80033ee <HAL_UART_Receive+0xd2>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_UART_Receive+0xa4>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d104      	bne.n	80033b6 <HAL_UART_Receive+0x9a>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	22ff      	movs	r2, #255	@ 0xff
 80033b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80033b4:	e01b      	b.n	80033ee <HAL_UART_Receive+0xd2>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	227f      	movs	r2, #127	@ 0x7f
 80033ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80033be:	e016      	b.n	80033ee <HAL_UART_Receive+0xd2>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033c8:	d10d      	bne.n	80033e6 <HAL_UART_Receive+0xca>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <HAL_UART_Receive+0xc0>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	227f      	movs	r2, #127	@ 0x7f
 80033d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80033da:	e008      	b.n	80033ee <HAL_UART_Receive+0xd2>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	223f      	movs	r2, #63	@ 0x3f
 80033e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80033e4:	e003      	b.n	80033ee <HAL_UART_Receive+0xd2>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80033f4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033fe:	d108      	bne.n	8003412 <HAL_UART_Receive+0xf6>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d104      	bne.n	8003412 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	e003      	b.n	800341a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800341a:	e036      	b.n	800348a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2200      	movs	r2, #0
 8003424:	2120      	movs	r1, #32
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fc88 	bl	8003d3c <UART_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e032      	b.n	80034a4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10c      	bne.n	800345e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	b29a      	uxth	r2, r3
 800344c:	8a7b      	ldrh	r3, [r7, #18]
 800344e:	4013      	ands	r3, r2
 8003450:	b29a      	uxth	r2, r3
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	3302      	adds	r3, #2
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	e00c      	b.n	8003478 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	b2da      	uxtb	r2, r3
 8003466:	8a7b      	ldrh	r3, [r7, #18]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	4013      	ands	r3, r2
 800346c:	b2da      	uxtb	r2, r3
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3301      	adds	r3, #1
 8003476:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1c2      	bne.n	800341c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e000      	b.n	80034a4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
  }
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b0:	b08c      	sub	sp, #48	@ 0x30
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4baa      	ldr	r3, [pc, #680]	@ (8003784 <UART_SetConfig+0x2d8>)
 80034dc:	4013      	ands	r3, r2
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a9f      	ldr	r2, [pc, #636]	@ (8003788 <UART_SetConfig+0x2dc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d004      	beq.n	8003518 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003514:	4313      	orrs	r3, r2
 8003516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003522:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800352c:	430b      	orrs	r3, r1
 800352e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003536:	f023 010f 	bic.w	r1, r3, #15
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a90      	ldr	r2, [pc, #576]	@ (800378c <UART_SetConfig+0x2e0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d125      	bne.n	800359c <UART_SetConfig+0xf0>
 8003550:	4b8f      	ldr	r3, [pc, #572]	@ (8003790 <UART_SetConfig+0x2e4>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b03      	cmp	r3, #3
 800355c:	d81a      	bhi.n	8003594 <UART_SetConfig+0xe8>
 800355e:	a201      	add	r2, pc, #4	@ (adr r2, 8003564 <UART_SetConfig+0xb8>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	08003575 	.word	0x08003575
 8003568:	08003585 	.word	0x08003585
 800356c:	0800357d 	.word	0x0800357d
 8003570:	0800358d 	.word	0x0800358d
 8003574:	2301      	movs	r3, #1
 8003576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800357a:	e116      	b.n	80037aa <UART_SetConfig+0x2fe>
 800357c:	2302      	movs	r3, #2
 800357e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003582:	e112      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003584:	2304      	movs	r3, #4
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800358a:	e10e      	b.n	80037aa <UART_SetConfig+0x2fe>
 800358c:	2308      	movs	r3, #8
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003592:	e10a      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003594:	2310      	movs	r3, #16
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800359a:	e106      	b.n	80037aa <UART_SetConfig+0x2fe>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a7c      	ldr	r2, [pc, #496]	@ (8003794 <UART_SetConfig+0x2e8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d138      	bne.n	8003618 <UART_SetConfig+0x16c>
 80035a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003790 <UART_SetConfig+0x2e4>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d82d      	bhi.n	8003610 <UART_SetConfig+0x164>
 80035b4:	a201      	add	r2, pc, #4	@ (adr r2, 80035bc <UART_SetConfig+0x110>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035f1 	.word	0x080035f1
 80035c0:	08003611 	.word	0x08003611
 80035c4:	08003611 	.word	0x08003611
 80035c8:	08003611 	.word	0x08003611
 80035cc:	08003601 	.word	0x08003601
 80035d0:	08003611 	.word	0x08003611
 80035d4:	08003611 	.word	0x08003611
 80035d8:	08003611 	.word	0x08003611
 80035dc:	080035f9 	.word	0x080035f9
 80035e0:	08003611 	.word	0x08003611
 80035e4:	08003611 	.word	0x08003611
 80035e8:	08003611 	.word	0x08003611
 80035ec:	08003609 	.word	0x08003609
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f6:	e0d8      	b.n	80037aa <UART_SetConfig+0x2fe>
 80035f8:	2302      	movs	r3, #2
 80035fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035fe:	e0d4      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003600:	2304      	movs	r3, #4
 8003602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003606:	e0d0      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003608:	2308      	movs	r3, #8
 800360a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800360e:	e0cc      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003610:	2310      	movs	r3, #16
 8003612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003616:	e0c8      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a5e      	ldr	r2, [pc, #376]	@ (8003798 <UART_SetConfig+0x2ec>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d125      	bne.n	800366e <UART_SetConfig+0x1c2>
 8003622:	4b5b      	ldr	r3, [pc, #364]	@ (8003790 <UART_SetConfig+0x2e4>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003628:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800362c:	2b30      	cmp	r3, #48	@ 0x30
 800362e:	d016      	beq.n	800365e <UART_SetConfig+0x1b2>
 8003630:	2b30      	cmp	r3, #48	@ 0x30
 8003632:	d818      	bhi.n	8003666 <UART_SetConfig+0x1ba>
 8003634:	2b20      	cmp	r3, #32
 8003636:	d00a      	beq.n	800364e <UART_SetConfig+0x1a2>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d814      	bhi.n	8003666 <UART_SetConfig+0x1ba>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <UART_SetConfig+0x19a>
 8003640:	2b10      	cmp	r3, #16
 8003642:	d008      	beq.n	8003656 <UART_SetConfig+0x1aa>
 8003644:	e00f      	b.n	8003666 <UART_SetConfig+0x1ba>
 8003646:	2300      	movs	r3, #0
 8003648:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800364c:	e0ad      	b.n	80037aa <UART_SetConfig+0x2fe>
 800364e:	2302      	movs	r3, #2
 8003650:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003654:	e0a9      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003656:	2304      	movs	r3, #4
 8003658:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800365c:	e0a5      	b.n	80037aa <UART_SetConfig+0x2fe>
 800365e:	2308      	movs	r3, #8
 8003660:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003664:	e0a1      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003666:	2310      	movs	r3, #16
 8003668:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800366c:	e09d      	b.n	80037aa <UART_SetConfig+0x2fe>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a4a      	ldr	r2, [pc, #296]	@ (800379c <UART_SetConfig+0x2f0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d125      	bne.n	80036c4 <UART_SetConfig+0x218>
 8003678:	4b45      	ldr	r3, [pc, #276]	@ (8003790 <UART_SetConfig+0x2e4>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003682:	2bc0      	cmp	r3, #192	@ 0xc0
 8003684:	d016      	beq.n	80036b4 <UART_SetConfig+0x208>
 8003686:	2bc0      	cmp	r3, #192	@ 0xc0
 8003688:	d818      	bhi.n	80036bc <UART_SetConfig+0x210>
 800368a:	2b80      	cmp	r3, #128	@ 0x80
 800368c:	d00a      	beq.n	80036a4 <UART_SetConfig+0x1f8>
 800368e:	2b80      	cmp	r3, #128	@ 0x80
 8003690:	d814      	bhi.n	80036bc <UART_SetConfig+0x210>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <UART_SetConfig+0x1f0>
 8003696:	2b40      	cmp	r3, #64	@ 0x40
 8003698:	d008      	beq.n	80036ac <UART_SetConfig+0x200>
 800369a:	e00f      	b.n	80036bc <UART_SetConfig+0x210>
 800369c:	2300      	movs	r3, #0
 800369e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a2:	e082      	b.n	80037aa <UART_SetConfig+0x2fe>
 80036a4:	2302      	movs	r3, #2
 80036a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036aa:	e07e      	b.n	80037aa <UART_SetConfig+0x2fe>
 80036ac:	2304      	movs	r3, #4
 80036ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b2:	e07a      	b.n	80037aa <UART_SetConfig+0x2fe>
 80036b4:	2308      	movs	r3, #8
 80036b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ba:	e076      	b.n	80037aa <UART_SetConfig+0x2fe>
 80036bc:	2310      	movs	r3, #16
 80036be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036c2:	e072      	b.n	80037aa <UART_SetConfig+0x2fe>
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a35      	ldr	r2, [pc, #212]	@ (80037a0 <UART_SetConfig+0x2f4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d12a      	bne.n	8003724 <UART_SetConfig+0x278>
 80036ce:	4b30      	ldr	r3, [pc, #192]	@ (8003790 <UART_SetConfig+0x2e4>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036dc:	d01a      	beq.n	8003714 <UART_SetConfig+0x268>
 80036de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e2:	d81b      	bhi.n	800371c <UART_SetConfig+0x270>
 80036e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036e8:	d00c      	beq.n	8003704 <UART_SetConfig+0x258>
 80036ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ee:	d815      	bhi.n	800371c <UART_SetConfig+0x270>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <UART_SetConfig+0x250>
 80036f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036f8:	d008      	beq.n	800370c <UART_SetConfig+0x260>
 80036fa:	e00f      	b.n	800371c <UART_SetConfig+0x270>
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003702:	e052      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003704:	2302      	movs	r3, #2
 8003706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370a:	e04e      	b.n	80037aa <UART_SetConfig+0x2fe>
 800370c:	2304      	movs	r3, #4
 800370e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003712:	e04a      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003714:	2308      	movs	r3, #8
 8003716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800371a:	e046      	b.n	80037aa <UART_SetConfig+0x2fe>
 800371c:	2310      	movs	r3, #16
 800371e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003722:	e042      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <UART_SetConfig+0x2dc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d13a      	bne.n	80037a4 <UART_SetConfig+0x2f8>
 800372e:	4b18      	ldr	r3, [pc, #96]	@ (8003790 <UART_SetConfig+0x2e4>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003734:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003738:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800373c:	d01a      	beq.n	8003774 <UART_SetConfig+0x2c8>
 800373e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003742:	d81b      	bhi.n	800377c <UART_SetConfig+0x2d0>
 8003744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003748:	d00c      	beq.n	8003764 <UART_SetConfig+0x2b8>
 800374a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800374e:	d815      	bhi.n	800377c <UART_SetConfig+0x2d0>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <UART_SetConfig+0x2b0>
 8003754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003758:	d008      	beq.n	800376c <UART_SetConfig+0x2c0>
 800375a:	e00f      	b.n	800377c <UART_SetConfig+0x2d0>
 800375c:	2300      	movs	r3, #0
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003762:	e022      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003764:	2302      	movs	r3, #2
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376a:	e01e      	b.n	80037aa <UART_SetConfig+0x2fe>
 800376c:	2304      	movs	r3, #4
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003772:	e01a      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003774:	2308      	movs	r3, #8
 8003776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800377a:	e016      	b.n	80037aa <UART_SetConfig+0x2fe>
 800377c:	2310      	movs	r3, #16
 800377e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003782:	e012      	b.n	80037aa <UART_SetConfig+0x2fe>
 8003784:	cfff69f3 	.word	0xcfff69f3
 8003788:	40008000 	.word	0x40008000
 800378c:	40013800 	.word	0x40013800
 8003790:	40021000 	.word	0x40021000
 8003794:	40004400 	.word	0x40004400
 8003798:	40004800 	.word	0x40004800
 800379c:	40004c00 	.word	0x40004c00
 80037a0:	40005000 	.word	0x40005000
 80037a4:	2310      	movs	r3, #16
 80037a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4aae      	ldr	r2, [pc, #696]	@ (8003a68 <UART_SetConfig+0x5bc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	f040 8097 	bne.w	80038e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d823      	bhi.n	8003806 <UART_SetConfig+0x35a>
 80037be:	a201      	add	r2, pc, #4	@ (adr r2, 80037c4 <UART_SetConfig+0x318>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037e9 	.word	0x080037e9
 80037c8:	08003807 	.word	0x08003807
 80037cc:	080037f1 	.word	0x080037f1
 80037d0:	08003807 	.word	0x08003807
 80037d4:	080037f7 	.word	0x080037f7
 80037d8:	08003807 	.word	0x08003807
 80037dc:	08003807 	.word	0x08003807
 80037e0:	08003807 	.word	0x08003807
 80037e4:	080037ff 	.word	0x080037ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e8:	f7fe ff56 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 80037ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037ee:	e010      	b.n	8003812 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f0:	4b9e      	ldr	r3, [pc, #632]	@ (8003a6c <UART_SetConfig+0x5c0>)
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037f4:	e00d      	b.n	8003812 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f6:	f7fe fee1 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 80037fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037fc:	e009      	b.n	8003812 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003802:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003804:	e005      	b.n	8003812 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003810:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 8130 	beq.w	8003a7a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	4a94      	ldr	r2, [pc, #592]	@ (8003a70 <UART_SetConfig+0x5c4>)
 8003820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003824:	461a      	mov	r2, r3
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	fbb3 f3f2 	udiv	r3, r3, r2
 800382c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4413      	add	r3, r2
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	429a      	cmp	r2, r3
 800383c:	d305      	bcc.n	800384a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	429a      	cmp	r2, r3
 8003848:	d903      	bls.n	8003852 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003850:	e113      	b.n	8003a7a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	2200      	movs	r2, #0
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	60fa      	str	r2, [r7, #12]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	4a84      	ldr	r2, [pc, #528]	@ (8003a70 <UART_SetConfig+0x5c4>)
 8003860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003864:	b29b      	uxth	r3, r3
 8003866:	2200      	movs	r2, #0
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003870:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003874:	f7fd f862 	bl	800093c <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	020b      	lsls	r3, r1, #8
 800388a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800388e:	0202      	lsls	r2, r0, #8
 8003890:	6979      	ldr	r1, [r7, #20]
 8003892:	6849      	ldr	r1, [r1, #4]
 8003894:	0849      	lsrs	r1, r1, #1
 8003896:	2000      	movs	r0, #0
 8003898:	460c      	mov	r4, r1
 800389a:	4605      	mov	r5, r0
 800389c:	eb12 0804 	adds.w	r8, r2, r4
 80038a0:	eb43 0905 	adc.w	r9, r3, r5
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	469a      	mov	sl, r3
 80038ac:	4693      	mov	fp, r2
 80038ae:	4652      	mov	r2, sl
 80038b0:	465b      	mov	r3, fp
 80038b2:	4640      	mov	r0, r8
 80038b4:	4649      	mov	r1, r9
 80038b6:	f7fd f841 	bl	800093c <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4613      	mov	r3, r2
 80038c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038c8:	d308      	bcc.n	80038dc <UART_SetConfig+0x430>
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038d0:	d204      	bcs.n	80038dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a3a      	ldr	r2, [r7, #32]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	e0ce      	b.n	8003a7a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038e2:	e0ca      	b.n	8003a7a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ec:	d166      	bne.n	80039bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80038ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d827      	bhi.n	8003946 <UART_SetConfig+0x49a>
 80038f6:	a201      	add	r2, pc, #4	@ (adr r2, 80038fc <UART_SetConfig+0x450>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003921 	.word	0x08003921
 8003900:	08003929 	.word	0x08003929
 8003904:	08003931 	.word	0x08003931
 8003908:	08003947 	.word	0x08003947
 800390c:	08003937 	.word	0x08003937
 8003910:	08003947 	.word	0x08003947
 8003914:	08003947 	.word	0x08003947
 8003918:	08003947 	.word	0x08003947
 800391c:	0800393f 	.word	0x0800393f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003920:	f7fe feba 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8003924:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003926:	e014      	b.n	8003952 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003928:	f7fe fecc 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 800392c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800392e:	e010      	b.n	8003952 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003930:	4b4e      	ldr	r3, [pc, #312]	@ (8003a6c <UART_SetConfig+0x5c0>)
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003934:	e00d      	b.n	8003952 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003936:	f7fe fe41 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800393a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800393c:	e009      	b.n	8003952 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003944:	e005      	b.n	8003952 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003950:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8090 	beq.w	8003a7a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	4a44      	ldr	r2, [pc, #272]	@ (8003a70 <UART_SetConfig+0x5c4>)
 8003960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003964:	461a      	mov	r2, r3
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	fbb3 f3f2 	udiv	r3, r3, r2
 800396c:	005a      	lsls	r2, r3, #1
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	441a      	add	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	d916      	bls.n	80039b4 <UART_SetConfig+0x508>
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800398c:	d212      	bcs.n	80039b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	b29b      	uxth	r3, r3
 8003992:	f023 030f 	bic.w	r3, r3, #15
 8003996:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	085b      	lsrs	r3, r3, #1
 800399c:	b29b      	uxth	r3, r3
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	8bfb      	ldrh	r3, [r7, #30]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	8bfa      	ldrh	r2, [r7, #30]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	e062      	b.n	8003a7a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80039ba:	e05e      	b.n	8003a7a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d828      	bhi.n	8003a16 <UART_SetConfig+0x56a>
 80039c4:	a201      	add	r2, pc, #4	@ (adr r2, 80039cc <UART_SetConfig+0x520>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	080039f9 	.word	0x080039f9
 80039d4:	08003a01 	.word	0x08003a01
 80039d8:	08003a17 	.word	0x08003a17
 80039dc:	08003a07 	.word	0x08003a07
 80039e0:	08003a17 	.word	0x08003a17
 80039e4:	08003a17 	.word	0x08003a17
 80039e8:	08003a17 	.word	0x08003a17
 80039ec:	08003a0f 	.word	0x08003a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f0:	f7fe fe52 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 80039f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039f6:	e014      	b.n	8003a22 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f8:	f7fe fe64 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 80039fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039fe:	e010      	b.n	8003a22 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a00:	4b1a      	ldr	r3, [pc, #104]	@ (8003a6c <UART_SetConfig+0x5c0>)
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a04:	e00d      	b.n	8003a22 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a06:	f7fe fdd9 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8003a0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a0c:	e009      	b.n	8003a22 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a14:	e005      	b.n	8003a22 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a20:	bf00      	nop
    }

    if (pclk != 0U)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d028      	beq.n	8003a7a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	4a10      	ldr	r2, [pc, #64]	@ (8003a70 <UART_SetConfig+0x5c4>)
 8003a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a32:	461a      	mov	r2, r3
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	441a      	add	r2, r3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	2b0f      	cmp	r3, #15
 8003a50:	d910      	bls.n	8003a74 <UART_SetConfig+0x5c8>
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a58:	d20c      	bcs.n	8003a74 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	e009      	b.n	8003a7a <UART_SetConfig+0x5ce>
 8003a66:	bf00      	nop
 8003a68:	40008000 	.word	0x40008000
 8003a6c:	00f42400 	.word	0x00f42400
 8003a70:	08004b60 	.word	0x08004b60
      }
      else
      {
        ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2200      	movs	r2, #0
 8003a94:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a96:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3730      	adds	r7, #48	@ 0x30
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01a      	beq.n	8003bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ba2:	d10a      	bne.n	8003bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b098      	sub	sp, #96	@ 0x60
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bf8:	f7fd fcd2 	bl	80015a0 <HAL_GetTick>
 8003bfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d12f      	bne.n	8003c6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c14:	2200      	movs	r2, #0
 8003c16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f88e 	bl	8003d3c <UART_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d022      	beq.n	8003c6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e6      	bne.n	8003c26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e063      	b.n	8003d34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d149      	bne.n	8003d0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c82:	2200      	movs	r2, #0
 8003c84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f857 	bl	8003d3c <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d03c      	beq.n	8003d0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e6      	bne.n	8003c94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3308      	adds	r3, #8
 8003ccc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ce6:	61fa      	str	r2, [r7, #28]
 8003ce8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	69b9      	ldr	r1, [r7, #24]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	617b      	str	r3, [r7, #20]
   return(result);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e5      	bne.n	8003cc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e012      	b.n	8003d34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3758      	adds	r7, #88	@ 0x58
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d4c:	e04f      	b.n	8003dee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d04b      	beq.n	8003dee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d56:	f7fd fc23 	bl	80015a0 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e04e      	b.n	8003e0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d037      	beq.n	8003dee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b80      	cmp	r3, #128	@ 0x80
 8003d82:	d034      	beq.n	8003dee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b40      	cmp	r3, #64	@ 0x40
 8003d88:	d031      	beq.n	8003dee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d110      	bne.n	8003dba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f838 	bl	8003e16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2208      	movs	r2, #8
 8003daa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e029      	b.n	8003e0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dc8:	d111      	bne.n	8003dee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f81e 	bl	8003e16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e00f      	b.n	8003e0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4013      	ands	r3, r2
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	bf0c      	ite	eq
 8003dfe:	2301      	moveq	r3, #1
 8003e00:	2300      	movne	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d0a0      	beq.n	8003d4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b095      	sub	sp, #84	@ 0x54
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e6      	bne.n	8003e1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3308      	adds	r3, #8
 8003e72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e3      	bne.n	8003e50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d118      	bne.n	8003ec2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f023 0310 	bic.w	r3, r3, #16
 8003ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6979      	ldr	r1, [r7, #20]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	613b      	str	r3, [r7, #16]
   return(result);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e6      	bne.n	8003e90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003ed6:	bf00      	nop
 8003ed8:	3754      	adds	r7, #84	@ 0x54
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e058      	b.n	8003fac <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7fd f93b 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2224      	movs	r2, #36	@ 0x24
 8003f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff fdb6 	bl	8003aa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff fab7 	bl	80034ac <UART_SetConfig>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e031      	b.n	8003fac <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f56:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	055b      	lsls	r3, r3, #21
 8003f70:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8003f86:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	6979      	ldr	r1, [r7, #20]
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f7ff fe1f 	bl	8003be8 <UART_CheckIdleState>
 8003faa:	4603      	mov	r3, r0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_UARTEx_DisableFifoMode+0x16>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e027      	b.n	800401a <HAL_UARTEx_DisableFifoMode+0x66>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2224      	movs	r2, #36	@ 0x24
 8003fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003ff8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800403a:	2302      	movs	r3, #2
 800403c:	e02d      	b.n	800409a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2224      	movs	r2, #36	@ 0x24
 800404a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0201 	bic.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f850 	bl	8004120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e02d      	b.n	8004116 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2224      	movs	r2, #36	@ 0x24
 80040c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f812 	bl	8004120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800412c:	2b00      	cmp	r3, #0
 800412e:	d108      	bne.n	8004142 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004140:	e031      	b.n	80041a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004142:	2308      	movs	r3, #8
 8004144:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004146:	2308      	movs	r3, #8
 8004148:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	0e5b      	lsrs	r3, r3, #25
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	0f5b      	lsrs	r3, r3, #29
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800416a:	7bbb      	ldrb	r3, [r7, #14]
 800416c:	7b3a      	ldrb	r2, [r7, #12]
 800416e:	4911      	ldr	r1, [pc, #68]	@ (80041b4 <UARTEx_SetNbDataToProcess+0x94>)
 8004170:	5c8a      	ldrb	r2, [r1, r2]
 8004172:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004176:	7b3a      	ldrb	r2, [r7, #12]
 8004178:	490f      	ldr	r1, [pc, #60]	@ (80041b8 <UARTEx_SetNbDataToProcess+0x98>)
 800417a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800417c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004180:	b29a      	uxth	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	7b7a      	ldrb	r2, [r7, #13]
 800418c:	4909      	ldr	r1, [pc, #36]	@ (80041b4 <UARTEx_SetNbDataToProcess+0x94>)
 800418e:	5c8a      	ldrb	r2, [r1, r2]
 8004190:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004194:	7b7a      	ldrb	r2, [r7, #13]
 8004196:	4908      	ldr	r1, [pc, #32]	@ (80041b8 <UARTEx_SetNbDataToProcess+0x98>)
 8004198:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800419a:	fb93 f3f2 	sdiv	r3, r3, r2
 800419e:	b29a      	uxth	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	08004b78 	.word	0x08004b78
 80041b8:	08004b80 	.word	0x08004b80

080041bc <siprintf>:
 80041bc:	b40e      	push	{r1, r2, r3}
 80041be:	b500      	push	{lr}
 80041c0:	b09c      	sub	sp, #112	@ 0x70
 80041c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80041c4:	9002      	str	r0, [sp, #8]
 80041c6:	9006      	str	r0, [sp, #24]
 80041c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041cc:	4809      	ldr	r0, [pc, #36]	@ (80041f4 <siprintf+0x38>)
 80041ce:	9107      	str	r1, [sp, #28]
 80041d0:	9104      	str	r1, [sp, #16]
 80041d2:	4909      	ldr	r1, [pc, #36]	@ (80041f8 <siprintf+0x3c>)
 80041d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041d8:	9105      	str	r1, [sp, #20]
 80041da:	6800      	ldr	r0, [r0, #0]
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	a902      	add	r1, sp, #8
 80041e0:	f000 f994 	bl	800450c <_svfiprintf_r>
 80041e4:	9b02      	ldr	r3, [sp, #8]
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	b01c      	add	sp, #112	@ 0x70
 80041ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80041f0:	b003      	add	sp, #12
 80041f2:	4770      	bx	lr
 80041f4:	2000000c 	.word	0x2000000c
 80041f8:	ffff0208 	.word	0xffff0208

080041fc <memset>:
 80041fc:	4402      	add	r2, r0
 80041fe:	4603      	mov	r3, r0
 8004200:	4293      	cmp	r3, r2
 8004202:	d100      	bne.n	8004206 <memset+0xa>
 8004204:	4770      	bx	lr
 8004206:	f803 1b01 	strb.w	r1, [r3], #1
 800420a:	e7f9      	b.n	8004200 <memset+0x4>

0800420c <__errno>:
 800420c:	4b01      	ldr	r3, [pc, #4]	@ (8004214 <__errno+0x8>)
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	2000000c 	.word	0x2000000c

08004218 <__libc_init_array>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4d0d      	ldr	r5, [pc, #52]	@ (8004250 <__libc_init_array+0x38>)
 800421c:	4c0d      	ldr	r4, [pc, #52]	@ (8004254 <__libc_init_array+0x3c>)
 800421e:	1b64      	subs	r4, r4, r5
 8004220:	10a4      	asrs	r4, r4, #2
 8004222:	2600      	movs	r6, #0
 8004224:	42a6      	cmp	r6, r4
 8004226:	d109      	bne.n	800423c <__libc_init_array+0x24>
 8004228:	4d0b      	ldr	r5, [pc, #44]	@ (8004258 <__libc_init_array+0x40>)
 800422a:	4c0c      	ldr	r4, [pc, #48]	@ (800425c <__libc_init_array+0x44>)
 800422c:	f000 fc66 	bl	8004afc <_init>
 8004230:	1b64      	subs	r4, r4, r5
 8004232:	10a4      	asrs	r4, r4, #2
 8004234:	2600      	movs	r6, #0
 8004236:	42a6      	cmp	r6, r4
 8004238:	d105      	bne.n	8004246 <__libc_init_array+0x2e>
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004240:	4798      	blx	r3
 8004242:	3601      	adds	r6, #1
 8004244:	e7ee      	b.n	8004224 <__libc_init_array+0xc>
 8004246:	f855 3b04 	ldr.w	r3, [r5], #4
 800424a:	4798      	blx	r3
 800424c:	3601      	adds	r6, #1
 800424e:	e7f2      	b.n	8004236 <__libc_init_array+0x1e>
 8004250:	08004bc4 	.word	0x08004bc4
 8004254:	08004bc4 	.word	0x08004bc4
 8004258:	08004bc4 	.word	0x08004bc4
 800425c:	08004bc8 	.word	0x08004bc8

08004260 <__retarget_lock_acquire_recursive>:
 8004260:	4770      	bx	lr

08004262 <__retarget_lock_release_recursive>:
 8004262:	4770      	bx	lr

08004264 <_free_r>:
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	4605      	mov	r5, r0
 8004268:	2900      	cmp	r1, #0
 800426a:	d041      	beq.n	80042f0 <_free_r+0x8c>
 800426c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004270:	1f0c      	subs	r4, r1, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	bfb8      	it	lt
 8004276:	18e4      	addlt	r4, r4, r3
 8004278:	f000 f8e0 	bl	800443c <__malloc_lock>
 800427c:	4a1d      	ldr	r2, [pc, #116]	@ (80042f4 <_free_r+0x90>)
 800427e:	6813      	ldr	r3, [r2, #0]
 8004280:	b933      	cbnz	r3, 8004290 <_free_r+0x2c>
 8004282:	6063      	str	r3, [r4, #4]
 8004284:	6014      	str	r4, [r2, #0]
 8004286:	4628      	mov	r0, r5
 8004288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800428c:	f000 b8dc 	b.w	8004448 <__malloc_unlock>
 8004290:	42a3      	cmp	r3, r4
 8004292:	d908      	bls.n	80042a6 <_free_r+0x42>
 8004294:	6820      	ldr	r0, [r4, #0]
 8004296:	1821      	adds	r1, r4, r0
 8004298:	428b      	cmp	r3, r1
 800429a:	bf01      	itttt	eq
 800429c:	6819      	ldreq	r1, [r3, #0]
 800429e:	685b      	ldreq	r3, [r3, #4]
 80042a0:	1809      	addeq	r1, r1, r0
 80042a2:	6021      	streq	r1, [r4, #0]
 80042a4:	e7ed      	b.n	8004282 <_free_r+0x1e>
 80042a6:	461a      	mov	r2, r3
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	b10b      	cbz	r3, 80042b0 <_free_r+0x4c>
 80042ac:	42a3      	cmp	r3, r4
 80042ae:	d9fa      	bls.n	80042a6 <_free_r+0x42>
 80042b0:	6811      	ldr	r1, [r2, #0]
 80042b2:	1850      	adds	r0, r2, r1
 80042b4:	42a0      	cmp	r0, r4
 80042b6:	d10b      	bne.n	80042d0 <_free_r+0x6c>
 80042b8:	6820      	ldr	r0, [r4, #0]
 80042ba:	4401      	add	r1, r0
 80042bc:	1850      	adds	r0, r2, r1
 80042be:	4283      	cmp	r3, r0
 80042c0:	6011      	str	r1, [r2, #0]
 80042c2:	d1e0      	bne.n	8004286 <_free_r+0x22>
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	6053      	str	r3, [r2, #4]
 80042ca:	4408      	add	r0, r1
 80042cc:	6010      	str	r0, [r2, #0]
 80042ce:	e7da      	b.n	8004286 <_free_r+0x22>
 80042d0:	d902      	bls.n	80042d8 <_free_r+0x74>
 80042d2:	230c      	movs	r3, #12
 80042d4:	602b      	str	r3, [r5, #0]
 80042d6:	e7d6      	b.n	8004286 <_free_r+0x22>
 80042d8:	6820      	ldr	r0, [r4, #0]
 80042da:	1821      	adds	r1, r4, r0
 80042dc:	428b      	cmp	r3, r1
 80042de:	bf04      	itt	eq
 80042e0:	6819      	ldreq	r1, [r3, #0]
 80042e2:	685b      	ldreq	r3, [r3, #4]
 80042e4:	6063      	str	r3, [r4, #4]
 80042e6:	bf04      	itt	eq
 80042e8:	1809      	addeq	r1, r1, r0
 80042ea:	6021      	streq	r1, [r4, #0]
 80042ec:	6054      	str	r4, [r2, #4]
 80042ee:	e7ca      	b.n	8004286 <_free_r+0x22>
 80042f0:	bd38      	pop	{r3, r4, r5, pc}
 80042f2:	bf00      	nop
 80042f4:	20000408 	.word	0x20000408

080042f8 <sbrk_aligned>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004338 <sbrk_aligned+0x40>)
 80042fc:	460c      	mov	r4, r1
 80042fe:	6831      	ldr	r1, [r6, #0]
 8004300:	4605      	mov	r5, r0
 8004302:	b911      	cbnz	r1, 800430a <sbrk_aligned+0x12>
 8004304:	f000 fba6 	bl	8004a54 <_sbrk_r>
 8004308:	6030      	str	r0, [r6, #0]
 800430a:	4621      	mov	r1, r4
 800430c:	4628      	mov	r0, r5
 800430e:	f000 fba1 	bl	8004a54 <_sbrk_r>
 8004312:	1c43      	adds	r3, r0, #1
 8004314:	d103      	bne.n	800431e <sbrk_aligned+0x26>
 8004316:	f04f 34ff 	mov.w	r4, #4294967295
 800431a:	4620      	mov	r0, r4
 800431c:	bd70      	pop	{r4, r5, r6, pc}
 800431e:	1cc4      	adds	r4, r0, #3
 8004320:	f024 0403 	bic.w	r4, r4, #3
 8004324:	42a0      	cmp	r0, r4
 8004326:	d0f8      	beq.n	800431a <sbrk_aligned+0x22>
 8004328:	1a21      	subs	r1, r4, r0
 800432a:	4628      	mov	r0, r5
 800432c:	f000 fb92 	bl	8004a54 <_sbrk_r>
 8004330:	3001      	adds	r0, #1
 8004332:	d1f2      	bne.n	800431a <sbrk_aligned+0x22>
 8004334:	e7ef      	b.n	8004316 <sbrk_aligned+0x1e>
 8004336:	bf00      	nop
 8004338:	20000404 	.word	0x20000404

0800433c <_malloc_r>:
 800433c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004340:	1ccd      	adds	r5, r1, #3
 8004342:	f025 0503 	bic.w	r5, r5, #3
 8004346:	3508      	adds	r5, #8
 8004348:	2d0c      	cmp	r5, #12
 800434a:	bf38      	it	cc
 800434c:	250c      	movcc	r5, #12
 800434e:	2d00      	cmp	r5, #0
 8004350:	4606      	mov	r6, r0
 8004352:	db01      	blt.n	8004358 <_malloc_r+0x1c>
 8004354:	42a9      	cmp	r1, r5
 8004356:	d904      	bls.n	8004362 <_malloc_r+0x26>
 8004358:	230c      	movs	r3, #12
 800435a:	6033      	str	r3, [r6, #0]
 800435c:	2000      	movs	r0, #0
 800435e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004362:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004438 <_malloc_r+0xfc>
 8004366:	f000 f869 	bl	800443c <__malloc_lock>
 800436a:	f8d8 3000 	ldr.w	r3, [r8]
 800436e:	461c      	mov	r4, r3
 8004370:	bb44      	cbnz	r4, 80043c4 <_malloc_r+0x88>
 8004372:	4629      	mov	r1, r5
 8004374:	4630      	mov	r0, r6
 8004376:	f7ff ffbf 	bl	80042f8 <sbrk_aligned>
 800437a:	1c43      	adds	r3, r0, #1
 800437c:	4604      	mov	r4, r0
 800437e:	d158      	bne.n	8004432 <_malloc_r+0xf6>
 8004380:	f8d8 4000 	ldr.w	r4, [r8]
 8004384:	4627      	mov	r7, r4
 8004386:	2f00      	cmp	r7, #0
 8004388:	d143      	bne.n	8004412 <_malloc_r+0xd6>
 800438a:	2c00      	cmp	r4, #0
 800438c:	d04b      	beq.n	8004426 <_malloc_r+0xea>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	4639      	mov	r1, r7
 8004392:	4630      	mov	r0, r6
 8004394:	eb04 0903 	add.w	r9, r4, r3
 8004398:	f000 fb5c 	bl	8004a54 <_sbrk_r>
 800439c:	4581      	cmp	r9, r0
 800439e:	d142      	bne.n	8004426 <_malloc_r+0xea>
 80043a0:	6821      	ldr	r1, [r4, #0]
 80043a2:	1a6d      	subs	r5, r5, r1
 80043a4:	4629      	mov	r1, r5
 80043a6:	4630      	mov	r0, r6
 80043a8:	f7ff ffa6 	bl	80042f8 <sbrk_aligned>
 80043ac:	3001      	adds	r0, #1
 80043ae:	d03a      	beq.n	8004426 <_malloc_r+0xea>
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	442b      	add	r3, r5
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	f8d8 3000 	ldr.w	r3, [r8]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	bb62      	cbnz	r2, 8004418 <_malloc_r+0xdc>
 80043be:	f8c8 7000 	str.w	r7, [r8]
 80043c2:	e00f      	b.n	80043e4 <_malloc_r+0xa8>
 80043c4:	6822      	ldr	r2, [r4, #0]
 80043c6:	1b52      	subs	r2, r2, r5
 80043c8:	d420      	bmi.n	800440c <_malloc_r+0xd0>
 80043ca:	2a0b      	cmp	r2, #11
 80043cc:	d917      	bls.n	80043fe <_malloc_r+0xc2>
 80043ce:	1961      	adds	r1, r4, r5
 80043d0:	42a3      	cmp	r3, r4
 80043d2:	6025      	str	r5, [r4, #0]
 80043d4:	bf18      	it	ne
 80043d6:	6059      	strne	r1, [r3, #4]
 80043d8:	6863      	ldr	r3, [r4, #4]
 80043da:	bf08      	it	eq
 80043dc:	f8c8 1000 	streq.w	r1, [r8]
 80043e0:	5162      	str	r2, [r4, r5]
 80043e2:	604b      	str	r3, [r1, #4]
 80043e4:	4630      	mov	r0, r6
 80043e6:	f000 f82f 	bl	8004448 <__malloc_unlock>
 80043ea:	f104 000b 	add.w	r0, r4, #11
 80043ee:	1d23      	adds	r3, r4, #4
 80043f0:	f020 0007 	bic.w	r0, r0, #7
 80043f4:	1ac2      	subs	r2, r0, r3
 80043f6:	bf1c      	itt	ne
 80043f8:	1a1b      	subne	r3, r3, r0
 80043fa:	50a3      	strne	r3, [r4, r2]
 80043fc:	e7af      	b.n	800435e <_malloc_r+0x22>
 80043fe:	6862      	ldr	r2, [r4, #4]
 8004400:	42a3      	cmp	r3, r4
 8004402:	bf0c      	ite	eq
 8004404:	f8c8 2000 	streq.w	r2, [r8]
 8004408:	605a      	strne	r2, [r3, #4]
 800440a:	e7eb      	b.n	80043e4 <_malloc_r+0xa8>
 800440c:	4623      	mov	r3, r4
 800440e:	6864      	ldr	r4, [r4, #4]
 8004410:	e7ae      	b.n	8004370 <_malloc_r+0x34>
 8004412:	463c      	mov	r4, r7
 8004414:	687f      	ldr	r7, [r7, #4]
 8004416:	e7b6      	b.n	8004386 <_malloc_r+0x4a>
 8004418:	461a      	mov	r2, r3
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	42a3      	cmp	r3, r4
 800441e:	d1fb      	bne.n	8004418 <_malloc_r+0xdc>
 8004420:	2300      	movs	r3, #0
 8004422:	6053      	str	r3, [r2, #4]
 8004424:	e7de      	b.n	80043e4 <_malloc_r+0xa8>
 8004426:	230c      	movs	r3, #12
 8004428:	6033      	str	r3, [r6, #0]
 800442a:	4630      	mov	r0, r6
 800442c:	f000 f80c 	bl	8004448 <__malloc_unlock>
 8004430:	e794      	b.n	800435c <_malloc_r+0x20>
 8004432:	6005      	str	r5, [r0, #0]
 8004434:	e7d6      	b.n	80043e4 <_malloc_r+0xa8>
 8004436:	bf00      	nop
 8004438:	20000408 	.word	0x20000408

0800443c <__malloc_lock>:
 800443c:	4801      	ldr	r0, [pc, #4]	@ (8004444 <__malloc_lock+0x8>)
 800443e:	f7ff bf0f 	b.w	8004260 <__retarget_lock_acquire_recursive>
 8004442:	bf00      	nop
 8004444:	20000400 	.word	0x20000400

08004448 <__malloc_unlock>:
 8004448:	4801      	ldr	r0, [pc, #4]	@ (8004450 <__malloc_unlock+0x8>)
 800444a:	f7ff bf0a 	b.w	8004262 <__retarget_lock_release_recursive>
 800444e:	bf00      	nop
 8004450:	20000400 	.word	0x20000400

08004454 <__ssputs_r>:
 8004454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004458:	688e      	ldr	r6, [r1, #8]
 800445a:	461f      	mov	r7, r3
 800445c:	42be      	cmp	r6, r7
 800445e:	680b      	ldr	r3, [r1, #0]
 8004460:	4682      	mov	sl, r0
 8004462:	460c      	mov	r4, r1
 8004464:	4690      	mov	r8, r2
 8004466:	d82d      	bhi.n	80044c4 <__ssputs_r+0x70>
 8004468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800446c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004470:	d026      	beq.n	80044c0 <__ssputs_r+0x6c>
 8004472:	6965      	ldr	r5, [r4, #20]
 8004474:	6909      	ldr	r1, [r1, #16]
 8004476:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800447a:	eba3 0901 	sub.w	r9, r3, r1
 800447e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004482:	1c7b      	adds	r3, r7, #1
 8004484:	444b      	add	r3, r9
 8004486:	106d      	asrs	r5, r5, #1
 8004488:	429d      	cmp	r5, r3
 800448a:	bf38      	it	cc
 800448c:	461d      	movcc	r5, r3
 800448e:	0553      	lsls	r3, r2, #21
 8004490:	d527      	bpl.n	80044e2 <__ssputs_r+0x8e>
 8004492:	4629      	mov	r1, r5
 8004494:	f7ff ff52 	bl	800433c <_malloc_r>
 8004498:	4606      	mov	r6, r0
 800449a:	b360      	cbz	r0, 80044f6 <__ssputs_r+0xa2>
 800449c:	6921      	ldr	r1, [r4, #16]
 800449e:	464a      	mov	r2, r9
 80044a0:	f000 fae8 	bl	8004a74 <memcpy>
 80044a4:	89a3      	ldrh	r3, [r4, #12]
 80044a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80044aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ae:	81a3      	strh	r3, [r4, #12]
 80044b0:	6126      	str	r6, [r4, #16]
 80044b2:	6165      	str	r5, [r4, #20]
 80044b4:	444e      	add	r6, r9
 80044b6:	eba5 0509 	sub.w	r5, r5, r9
 80044ba:	6026      	str	r6, [r4, #0]
 80044bc:	60a5      	str	r5, [r4, #8]
 80044be:	463e      	mov	r6, r7
 80044c0:	42be      	cmp	r6, r7
 80044c2:	d900      	bls.n	80044c6 <__ssputs_r+0x72>
 80044c4:	463e      	mov	r6, r7
 80044c6:	6820      	ldr	r0, [r4, #0]
 80044c8:	4632      	mov	r2, r6
 80044ca:	4641      	mov	r1, r8
 80044cc:	f000 faa8 	bl	8004a20 <memmove>
 80044d0:	68a3      	ldr	r3, [r4, #8]
 80044d2:	1b9b      	subs	r3, r3, r6
 80044d4:	60a3      	str	r3, [r4, #8]
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	4433      	add	r3, r6
 80044da:	6023      	str	r3, [r4, #0]
 80044dc:	2000      	movs	r0, #0
 80044de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e2:	462a      	mov	r2, r5
 80044e4:	f000 fad4 	bl	8004a90 <_realloc_r>
 80044e8:	4606      	mov	r6, r0
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d1e0      	bne.n	80044b0 <__ssputs_r+0x5c>
 80044ee:	6921      	ldr	r1, [r4, #16]
 80044f0:	4650      	mov	r0, sl
 80044f2:	f7ff feb7 	bl	8004264 <_free_r>
 80044f6:	230c      	movs	r3, #12
 80044f8:	f8ca 3000 	str.w	r3, [sl]
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004502:	81a3      	strh	r3, [r4, #12]
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	e7e9      	b.n	80044de <__ssputs_r+0x8a>
	...

0800450c <_svfiprintf_r>:
 800450c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004510:	4698      	mov	r8, r3
 8004512:	898b      	ldrh	r3, [r1, #12]
 8004514:	061b      	lsls	r3, r3, #24
 8004516:	b09d      	sub	sp, #116	@ 0x74
 8004518:	4607      	mov	r7, r0
 800451a:	460d      	mov	r5, r1
 800451c:	4614      	mov	r4, r2
 800451e:	d510      	bpl.n	8004542 <_svfiprintf_r+0x36>
 8004520:	690b      	ldr	r3, [r1, #16]
 8004522:	b973      	cbnz	r3, 8004542 <_svfiprintf_r+0x36>
 8004524:	2140      	movs	r1, #64	@ 0x40
 8004526:	f7ff ff09 	bl	800433c <_malloc_r>
 800452a:	6028      	str	r0, [r5, #0]
 800452c:	6128      	str	r0, [r5, #16]
 800452e:	b930      	cbnz	r0, 800453e <_svfiprintf_r+0x32>
 8004530:	230c      	movs	r3, #12
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	b01d      	add	sp, #116	@ 0x74
 800453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453e:	2340      	movs	r3, #64	@ 0x40
 8004540:	616b      	str	r3, [r5, #20]
 8004542:	2300      	movs	r3, #0
 8004544:	9309      	str	r3, [sp, #36]	@ 0x24
 8004546:	2320      	movs	r3, #32
 8004548:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800454c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004550:	2330      	movs	r3, #48	@ 0x30
 8004552:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80046f0 <_svfiprintf_r+0x1e4>
 8004556:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800455a:	f04f 0901 	mov.w	r9, #1
 800455e:	4623      	mov	r3, r4
 8004560:	469a      	mov	sl, r3
 8004562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004566:	b10a      	cbz	r2, 800456c <_svfiprintf_r+0x60>
 8004568:	2a25      	cmp	r2, #37	@ 0x25
 800456a:	d1f9      	bne.n	8004560 <_svfiprintf_r+0x54>
 800456c:	ebba 0b04 	subs.w	fp, sl, r4
 8004570:	d00b      	beq.n	800458a <_svfiprintf_r+0x7e>
 8004572:	465b      	mov	r3, fp
 8004574:	4622      	mov	r2, r4
 8004576:	4629      	mov	r1, r5
 8004578:	4638      	mov	r0, r7
 800457a:	f7ff ff6b 	bl	8004454 <__ssputs_r>
 800457e:	3001      	adds	r0, #1
 8004580:	f000 80a7 	beq.w	80046d2 <_svfiprintf_r+0x1c6>
 8004584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004586:	445a      	add	r2, fp
 8004588:	9209      	str	r2, [sp, #36]	@ 0x24
 800458a:	f89a 3000 	ldrb.w	r3, [sl]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 809f 	beq.w	80046d2 <_svfiprintf_r+0x1c6>
 8004594:	2300      	movs	r3, #0
 8004596:	f04f 32ff 	mov.w	r2, #4294967295
 800459a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800459e:	f10a 0a01 	add.w	sl, sl, #1
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	9307      	str	r3, [sp, #28]
 80045a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80045ac:	4654      	mov	r4, sl
 80045ae:	2205      	movs	r2, #5
 80045b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045b4:	484e      	ldr	r0, [pc, #312]	@ (80046f0 <_svfiprintf_r+0x1e4>)
 80045b6:	f7fb fe3b 	bl	8000230 <memchr>
 80045ba:	9a04      	ldr	r2, [sp, #16]
 80045bc:	b9d8      	cbnz	r0, 80045f6 <_svfiprintf_r+0xea>
 80045be:	06d0      	lsls	r0, r2, #27
 80045c0:	bf44      	itt	mi
 80045c2:	2320      	movmi	r3, #32
 80045c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045c8:	0711      	lsls	r1, r2, #28
 80045ca:	bf44      	itt	mi
 80045cc:	232b      	movmi	r3, #43	@ 0x2b
 80045ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045d2:	f89a 3000 	ldrb.w	r3, [sl]
 80045d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80045d8:	d015      	beq.n	8004606 <_svfiprintf_r+0xfa>
 80045da:	9a07      	ldr	r2, [sp, #28]
 80045dc:	4654      	mov	r4, sl
 80045de:	2000      	movs	r0, #0
 80045e0:	f04f 0c0a 	mov.w	ip, #10
 80045e4:	4621      	mov	r1, r4
 80045e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045ea:	3b30      	subs	r3, #48	@ 0x30
 80045ec:	2b09      	cmp	r3, #9
 80045ee:	d94b      	bls.n	8004688 <_svfiprintf_r+0x17c>
 80045f0:	b1b0      	cbz	r0, 8004620 <_svfiprintf_r+0x114>
 80045f2:	9207      	str	r2, [sp, #28]
 80045f4:	e014      	b.n	8004620 <_svfiprintf_r+0x114>
 80045f6:	eba0 0308 	sub.w	r3, r0, r8
 80045fa:	fa09 f303 	lsl.w	r3, r9, r3
 80045fe:	4313      	orrs	r3, r2
 8004600:	9304      	str	r3, [sp, #16]
 8004602:	46a2      	mov	sl, r4
 8004604:	e7d2      	b.n	80045ac <_svfiprintf_r+0xa0>
 8004606:	9b03      	ldr	r3, [sp, #12]
 8004608:	1d19      	adds	r1, r3, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	9103      	str	r1, [sp, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	bfbb      	ittet	lt
 8004612:	425b      	neglt	r3, r3
 8004614:	f042 0202 	orrlt.w	r2, r2, #2
 8004618:	9307      	strge	r3, [sp, #28]
 800461a:	9307      	strlt	r3, [sp, #28]
 800461c:	bfb8      	it	lt
 800461e:	9204      	strlt	r2, [sp, #16]
 8004620:	7823      	ldrb	r3, [r4, #0]
 8004622:	2b2e      	cmp	r3, #46	@ 0x2e
 8004624:	d10a      	bne.n	800463c <_svfiprintf_r+0x130>
 8004626:	7863      	ldrb	r3, [r4, #1]
 8004628:	2b2a      	cmp	r3, #42	@ 0x2a
 800462a:	d132      	bne.n	8004692 <_svfiprintf_r+0x186>
 800462c:	9b03      	ldr	r3, [sp, #12]
 800462e:	1d1a      	adds	r2, r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	9203      	str	r2, [sp, #12]
 8004634:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004638:	3402      	adds	r4, #2
 800463a:	9305      	str	r3, [sp, #20]
 800463c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004700 <_svfiprintf_r+0x1f4>
 8004640:	7821      	ldrb	r1, [r4, #0]
 8004642:	2203      	movs	r2, #3
 8004644:	4650      	mov	r0, sl
 8004646:	f7fb fdf3 	bl	8000230 <memchr>
 800464a:	b138      	cbz	r0, 800465c <_svfiprintf_r+0x150>
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	eba0 000a 	sub.w	r0, r0, sl
 8004652:	2240      	movs	r2, #64	@ 0x40
 8004654:	4082      	lsls	r2, r0
 8004656:	4313      	orrs	r3, r2
 8004658:	3401      	adds	r4, #1
 800465a:	9304      	str	r3, [sp, #16]
 800465c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004660:	4824      	ldr	r0, [pc, #144]	@ (80046f4 <_svfiprintf_r+0x1e8>)
 8004662:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004666:	2206      	movs	r2, #6
 8004668:	f7fb fde2 	bl	8000230 <memchr>
 800466c:	2800      	cmp	r0, #0
 800466e:	d036      	beq.n	80046de <_svfiprintf_r+0x1d2>
 8004670:	4b21      	ldr	r3, [pc, #132]	@ (80046f8 <_svfiprintf_r+0x1ec>)
 8004672:	bb1b      	cbnz	r3, 80046bc <_svfiprintf_r+0x1b0>
 8004674:	9b03      	ldr	r3, [sp, #12]
 8004676:	3307      	adds	r3, #7
 8004678:	f023 0307 	bic.w	r3, r3, #7
 800467c:	3308      	adds	r3, #8
 800467e:	9303      	str	r3, [sp, #12]
 8004680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004682:	4433      	add	r3, r6
 8004684:	9309      	str	r3, [sp, #36]	@ 0x24
 8004686:	e76a      	b.n	800455e <_svfiprintf_r+0x52>
 8004688:	fb0c 3202 	mla	r2, ip, r2, r3
 800468c:	460c      	mov	r4, r1
 800468e:	2001      	movs	r0, #1
 8004690:	e7a8      	b.n	80045e4 <_svfiprintf_r+0xd8>
 8004692:	2300      	movs	r3, #0
 8004694:	3401      	adds	r4, #1
 8004696:	9305      	str	r3, [sp, #20]
 8004698:	4619      	mov	r1, r3
 800469a:	f04f 0c0a 	mov.w	ip, #10
 800469e:	4620      	mov	r0, r4
 80046a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046a4:	3a30      	subs	r2, #48	@ 0x30
 80046a6:	2a09      	cmp	r2, #9
 80046a8:	d903      	bls.n	80046b2 <_svfiprintf_r+0x1a6>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0c6      	beq.n	800463c <_svfiprintf_r+0x130>
 80046ae:	9105      	str	r1, [sp, #20]
 80046b0:	e7c4      	b.n	800463c <_svfiprintf_r+0x130>
 80046b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80046b6:	4604      	mov	r4, r0
 80046b8:	2301      	movs	r3, #1
 80046ba:	e7f0      	b.n	800469e <_svfiprintf_r+0x192>
 80046bc:	ab03      	add	r3, sp, #12
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	462a      	mov	r2, r5
 80046c2:	4b0e      	ldr	r3, [pc, #56]	@ (80046fc <_svfiprintf_r+0x1f0>)
 80046c4:	a904      	add	r1, sp, #16
 80046c6:	4638      	mov	r0, r7
 80046c8:	f3af 8000 	nop.w
 80046cc:	1c42      	adds	r2, r0, #1
 80046ce:	4606      	mov	r6, r0
 80046d0:	d1d6      	bne.n	8004680 <_svfiprintf_r+0x174>
 80046d2:	89ab      	ldrh	r3, [r5, #12]
 80046d4:	065b      	lsls	r3, r3, #25
 80046d6:	f53f af2d 	bmi.w	8004534 <_svfiprintf_r+0x28>
 80046da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046dc:	e72c      	b.n	8004538 <_svfiprintf_r+0x2c>
 80046de:	ab03      	add	r3, sp, #12
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	462a      	mov	r2, r5
 80046e4:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <_svfiprintf_r+0x1f0>)
 80046e6:	a904      	add	r1, sp, #16
 80046e8:	4638      	mov	r0, r7
 80046ea:	f000 f879 	bl	80047e0 <_printf_i>
 80046ee:	e7ed      	b.n	80046cc <_svfiprintf_r+0x1c0>
 80046f0:	08004b88 	.word	0x08004b88
 80046f4:	08004b92 	.word	0x08004b92
 80046f8:	00000000 	.word	0x00000000
 80046fc:	08004455 	.word	0x08004455
 8004700:	08004b8e 	.word	0x08004b8e

08004704 <_printf_common>:
 8004704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	4616      	mov	r6, r2
 800470a:	4698      	mov	r8, r3
 800470c:	688a      	ldr	r2, [r1, #8]
 800470e:	690b      	ldr	r3, [r1, #16]
 8004710:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004714:	4293      	cmp	r3, r2
 8004716:	bfb8      	it	lt
 8004718:	4613      	movlt	r3, r2
 800471a:	6033      	str	r3, [r6, #0]
 800471c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004720:	4607      	mov	r7, r0
 8004722:	460c      	mov	r4, r1
 8004724:	b10a      	cbz	r2, 800472a <_printf_common+0x26>
 8004726:	3301      	adds	r3, #1
 8004728:	6033      	str	r3, [r6, #0]
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	0699      	lsls	r1, r3, #26
 800472e:	bf42      	ittt	mi
 8004730:	6833      	ldrmi	r3, [r6, #0]
 8004732:	3302      	addmi	r3, #2
 8004734:	6033      	strmi	r3, [r6, #0]
 8004736:	6825      	ldr	r5, [r4, #0]
 8004738:	f015 0506 	ands.w	r5, r5, #6
 800473c:	d106      	bne.n	800474c <_printf_common+0x48>
 800473e:	f104 0a19 	add.w	sl, r4, #25
 8004742:	68e3      	ldr	r3, [r4, #12]
 8004744:	6832      	ldr	r2, [r6, #0]
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	42ab      	cmp	r3, r5
 800474a:	dc26      	bgt.n	800479a <_printf_common+0x96>
 800474c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004750:	6822      	ldr	r2, [r4, #0]
 8004752:	3b00      	subs	r3, #0
 8004754:	bf18      	it	ne
 8004756:	2301      	movne	r3, #1
 8004758:	0692      	lsls	r2, r2, #26
 800475a:	d42b      	bmi.n	80047b4 <_printf_common+0xb0>
 800475c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004760:	4641      	mov	r1, r8
 8004762:	4638      	mov	r0, r7
 8004764:	47c8      	blx	r9
 8004766:	3001      	adds	r0, #1
 8004768:	d01e      	beq.n	80047a8 <_printf_common+0xa4>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	6922      	ldr	r2, [r4, #16]
 800476e:	f003 0306 	and.w	r3, r3, #6
 8004772:	2b04      	cmp	r3, #4
 8004774:	bf02      	ittt	eq
 8004776:	68e5      	ldreq	r5, [r4, #12]
 8004778:	6833      	ldreq	r3, [r6, #0]
 800477a:	1aed      	subeq	r5, r5, r3
 800477c:	68a3      	ldr	r3, [r4, #8]
 800477e:	bf0c      	ite	eq
 8004780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004784:	2500      	movne	r5, #0
 8004786:	4293      	cmp	r3, r2
 8004788:	bfc4      	itt	gt
 800478a:	1a9b      	subgt	r3, r3, r2
 800478c:	18ed      	addgt	r5, r5, r3
 800478e:	2600      	movs	r6, #0
 8004790:	341a      	adds	r4, #26
 8004792:	42b5      	cmp	r5, r6
 8004794:	d11a      	bne.n	80047cc <_printf_common+0xc8>
 8004796:	2000      	movs	r0, #0
 8004798:	e008      	b.n	80047ac <_printf_common+0xa8>
 800479a:	2301      	movs	r3, #1
 800479c:	4652      	mov	r2, sl
 800479e:	4641      	mov	r1, r8
 80047a0:	4638      	mov	r0, r7
 80047a2:	47c8      	blx	r9
 80047a4:	3001      	adds	r0, #1
 80047a6:	d103      	bne.n	80047b0 <_printf_common+0xac>
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b0:	3501      	adds	r5, #1
 80047b2:	e7c6      	b.n	8004742 <_printf_common+0x3e>
 80047b4:	18e1      	adds	r1, r4, r3
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	2030      	movs	r0, #48	@ 0x30
 80047ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047be:	4422      	add	r2, r4
 80047c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047c8:	3302      	adds	r3, #2
 80047ca:	e7c7      	b.n	800475c <_printf_common+0x58>
 80047cc:	2301      	movs	r3, #1
 80047ce:	4622      	mov	r2, r4
 80047d0:	4641      	mov	r1, r8
 80047d2:	4638      	mov	r0, r7
 80047d4:	47c8      	blx	r9
 80047d6:	3001      	adds	r0, #1
 80047d8:	d0e6      	beq.n	80047a8 <_printf_common+0xa4>
 80047da:	3601      	adds	r6, #1
 80047dc:	e7d9      	b.n	8004792 <_printf_common+0x8e>
	...

080047e0 <_printf_i>:
 80047e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	7e0f      	ldrb	r7, [r1, #24]
 80047e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047e8:	2f78      	cmp	r7, #120	@ 0x78
 80047ea:	4691      	mov	r9, r2
 80047ec:	4680      	mov	r8, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	469a      	mov	sl, r3
 80047f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047f6:	d807      	bhi.n	8004808 <_printf_i+0x28>
 80047f8:	2f62      	cmp	r7, #98	@ 0x62
 80047fa:	d80a      	bhi.n	8004812 <_printf_i+0x32>
 80047fc:	2f00      	cmp	r7, #0
 80047fe:	f000 80d2 	beq.w	80049a6 <_printf_i+0x1c6>
 8004802:	2f58      	cmp	r7, #88	@ 0x58
 8004804:	f000 80b9 	beq.w	800497a <_printf_i+0x19a>
 8004808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800480c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004810:	e03a      	b.n	8004888 <_printf_i+0xa8>
 8004812:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004816:	2b15      	cmp	r3, #21
 8004818:	d8f6      	bhi.n	8004808 <_printf_i+0x28>
 800481a:	a101      	add	r1, pc, #4	@ (adr r1, 8004820 <_printf_i+0x40>)
 800481c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004820:	08004879 	.word	0x08004879
 8004824:	0800488d 	.word	0x0800488d
 8004828:	08004809 	.word	0x08004809
 800482c:	08004809 	.word	0x08004809
 8004830:	08004809 	.word	0x08004809
 8004834:	08004809 	.word	0x08004809
 8004838:	0800488d 	.word	0x0800488d
 800483c:	08004809 	.word	0x08004809
 8004840:	08004809 	.word	0x08004809
 8004844:	08004809 	.word	0x08004809
 8004848:	08004809 	.word	0x08004809
 800484c:	0800498d 	.word	0x0800498d
 8004850:	080048b7 	.word	0x080048b7
 8004854:	08004947 	.word	0x08004947
 8004858:	08004809 	.word	0x08004809
 800485c:	08004809 	.word	0x08004809
 8004860:	080049af 	.word	0x080049af
 8004864:	08004809 	.word	0x08004809
 8004868:	080048b7 	.word	0x080048b7
 800486c:	08004809 	.word	0x08004809
 8004870:	08004809 	.word	0x08004809
 8004874:	0800494f 	.word	0x0800494f
 8004878:	6833      	ldr	r3, [r6, #0]
 800487a:	1d1a      	adds	r2, r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6032      	str	r2, [r6, #0]
 8004880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004884:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004888:	2301      	movs	r3, #1
 800488a:	e09d      	b.n	80049c8 <_printf_i+0x1e8>
 800488c:	6833      	ldr	r3, [r6, #0]
 800488e:	6820      	ldr	r0, [r4, #0]
 8004890:	1d19      	adds	r1, r3, #4
 8004892:	6031      	str	r1, [r6, #0]
 8004894:	0606      	lsls	r6, r0, #24
 8004896:	d501      	bpl.n	800489c <_printf_i+0xbc>
 8004898:	681d      	ldr	r5, [r3, #0]
 800489a:	e003      	b.n	80048a4 <_printf_i+0xc4>
 800489c:	0645      	lsls	r5, r0, #25
 800489e:	d5fb      	bpl.n	8004898 <_printf_i+0xb8>
 80048a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048a4:	2d00      	cmp	r5, #0
 80048a6:	da03      	bge.n	80048b0 <_printf_i+0xd0>
 80048a8:	232d      	movs	r3, #45	@ 0x2d
 80048aa:	426d      	negs	r5, r5
 80048ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048b0:	4859      	ldr	r0, [pc, #356]	@ (8004a18 <_printf_i+0x238>)
 80048b2:	230a      	movs	r3, #10
 80048b4:	e011      	b.n	80048da <_printf_i+0xfa>
 80048b6:	6821      	ldr	r1, [r4, #0]
 80048b8:	6833      	ldr	r3, [r6, #0]
 80048ba:	0608      	lsls	r0, r1, #24
 80048bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80048c0:	d402      	bmi.n	80048c8 <_printf_i+0xe8>
 80048c2:	0649      	lsls	r1, r1, #25
 80048c4:	bf48      	it	mi
 80048c6:	b2ad      	uxthmi	r5, r5
 80048c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80048ca:	4853      	ldr	r0, [pc, #332]	@ (8004a18 <_printf_i+0x238>)
 80048cc:	6033      	str	r3, [r6, #0]
 80048ce:	bf14      	ite	ne
 80048d0:	230a      	movne	r3, #10
 80048d2:	2308      	moveq	r3, #8
 80048d4:	2100      	movs	r1, #0
 80048d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048da:	6866      	ldr	r6, [r4, #4]
 80048dc:	60a6      	str	r6, [r4, #8]
 80048de:	2e00      	cmp	r6, #0
 80048e0:	bfa2      	ittt	ge
 80048e2:	6821      	ldrge	r1, [r4, #0]
 80048e4:	f021 0104 	bicge.w	r1, r1, #4
 80048e8:	6021      	strge	r1, [r4, #0]
 80048ea:	b90d      	cbnz	r5, 80048f0 <_printf_i+0x110>
 80048ec:	2e00      	cmp	r6, #0
 80048ee:	d04b      	beq.n	8004988 <_printf_i+0x1a8>
 80048f0:	4616      	mov	r6, r2
 80048f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80048f6:	fb03 5711 	mls	r7, r3, r1, r5
 80048fa:	5dc7      	ldrb	r7, [r0, r7]
 80048fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004900:	462f      	mov	r7, r5
 8004902:	42bb      	cmp	r3, r7
 8004904:	460d      	mov	r5, r1
 8004906:	d9f4      	bls.n	80048f2 <_printf_i+0x112>
 8004908:	2b08      	cmp	r3, #8
 800490a:	d10b      	bne.n	8004924 <_printf_i+0x144>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	07df      	lsls	r7, r3, #31
 8004910:	d508      	bpl.n	8004924 <_printf_i+0x144>
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	6861      	ldr	r1, [r4, #4]
 8004916:	4299      	cmp	r1, r3
 8004918:	bfde      	ittt	le
 800491a:	2330      	movle	r3, #48	@ 0x30
 800491c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004920:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004924:	1b92      	subs	r2, r2, r6
 8004926:	6122      	str	r2, [r4, #16]
 8004928:	f8cd a000 	str.w	sl, [sp]
 800492c:	464b      	mov	r3, r9
 800492e:	aa03      	add	r2, sp, #12
 8004930:	4621      	mov	r1, r4
 8004932:	4640      	mov	r0, r8
 8004934:	f7ff fee6 	bl	8004704 <_printf_common>
 8004938:	3001      	adds	r0, #1
 800493a:	d14a      	bne.n	80049d2 <_printf_i+0x1f2>
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	b004      	add	sp, #16
 8004942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	f043 0320 	orr.w	r3, r3, #32
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	4833      	ldr	r0, [pc, #204]	@ (8004a1c <_printf_i+0x23c>)
 8004950:	2778      	movs	r7, #120	@ 0x78
 8004952:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	6831      	ldr	r1, [r6, #0]
 800495a:	061f      	lsls	r7, r3, #24
 800495c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004960:	d402      	bmi.n	8004968 <_printf_i+0x188>
 8004962:	065f      	lsls	r7, r3, #25
 8004964:	bf48      	it	mi
 8004966:	b2ad      	uxthmi	r5, r5
 8004968:	6031      	str	r1, [r6, #0]
 800496a:	07d9      	lsls	r1, r3, #31
 800496c:	bf44      	itt	mi
 800496e:	f043 0320 	orrmi.w	r3, r3, #32
 8004972:	6023      	strmi	r3, [r4, #0]
 8004974:	b11d      	cbz	r5, 800497e <_printf_i+0x19e>
 8004976:	2310      	movs	r3, #16
 8004978:	e7ac      	b.n	80048d4 <_printf_i+0xf4>
 800497a:	4827      	ldr	r0, [pc, #156]	@ (8004a18 <_printf_i+0x238>)
 800497c:	e7e9      	b.n	8004952 <_printf_i+0x172>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	f023 0320 	bic.w	r3, r3, #32
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	e7f6      	b.n	8004976 <_printf_i+0x196>
 8004988:	4616      	mov	r6, r2
 800498a:	e7bd      	b.n	8004908 <_printf_i+0x128>
 800498c:	6833      	ldr	r3, [r6, #0]
 800498e:	6825      	ldr	r5, [r4, #0]
 8004990:	6961      	ldr	r1, [r4, #20]
 8004992:	1d18      	adds	r0, r3, #4
 8004994:	6030      	str	r0, [r6, #0]
 8004996:	062e      	lsls	r6, r5, #24
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	d501      	bpl.n	80049a0 <_printf_i+0x1c0>
 800499c:	6019      	str	r1, [r3, #0]
 800499e:	e002      	b.n	80049a6 <_printf_i+0x1c6>
 80049a0:	0668      	lsls	r0, r5, #25
 80049a2:	d5fb      	bpl.n	800499c <_printf_i+0x1bc>
 80049a4:	8019      	strh	r1, [r3, #0]
 80049a6:	2300      	movs	r3, #0
 80049a8:	6123      	str	r3, [r4, #16]
 80049aa:	4616      	mov	r6, r2
 80049ac:	e7bc      	b.n	8004928 <_printf_i+0x148>
 80049ae:	6833      	ldr	r3, [r6, #0]
 80049b0:	1d1a      	adds	r2, r3, #4
 80049b2:	6032      	str	r2, [r6, #0]
 80049b4:	681e      	ldr	r6, [r3, #0]
 80049b6:	6862      	ldr	r2, [r4, #4]
 80049b8:	2100      	movs	r1, #0
 80049ba:	4630      	mov	r0, r6
 80049bc:	f7fb fc38 	bl	8000230 <memchr>
 80049c0:	b108      	cbz	r0, 80049c6 <_printf_i+0x1e6>
 80049c2:	1b80      	subs	r0, r0, r6
 80049c4:	6060      	str	r0, [r4, #4]
 80049c6:	6863      	ldr	r3, [r4, #4]
 80049c8:	6123      	str	r3, [r4, #16]
 80049ca:	2300      	movs	r3, #0
 80049cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049d0:	e7aa      	b.n	8004928 <_printf_i+0x148>
 80049d2:	6923      	ldr	r3, [r4, #16]
 80049d4:	4632      	mov	r2, r6
 80049d6:	4649      	mov	r1, r9
 80049d8:	4640      	mov	r0, r8
 80049da:	47d0      	blx	sl
 80049dc:	3001      	adds	r0, #1
 80049de:	d0ad      	beq.n	800493c <_printf_i+0x15c>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	079b      	lsls	r3, r3, #30
 80049e4:	d413      	bmi.n	8004a0e <_printf_i+0x22e>
 80049e6:	68e0      	ldr	r0, [r4, #12]
 80049e8:	9b03      	ldr	r3, [sp, #12]
 80049ea:	4298      	cmp	r0, r3
 80049ec:	bfb8      	it	lt
 80049ee:	4618      	movlt	r0, r3
 80049f0:	e7a6      	b.n	8004940 <_printf_i+0x160>
 80049f2:	2301      	movs	r3, #1
 80049f4:	4632      	mov	r2, r6
 80049f6:	4649      	mov	r1, r9
 80049f8:	4640      	mov	r0, r8
 80049fa:	47d0      	blx	sl
 80049fc:	3001      	adds	r0, #1
 80049fe:	d09d      	beq.n	800493c <_printf_i+0x15c>
 8004a00:	3501      	adds	r5, #1
 8004a02:	68e3      	ldr	r3, [r4, #12]
 8004a04:	9903      	ldr	r1, [sp, #12]
 8004a06:	1a5b      	subs	r3, r3, r1
 8004a08:	42ab      	cmp	r3, r5
 8004a0a:	dcf2      	bgt.n	80049f2 <_printf_i+0x212>
 8004a0c:	e7eb      	b.n	80049e6 <_printf_i+0x206>
 8004a0e:	2500      	movs	r5, #0
 8004a10:	f104 0619 	add.w	r6, r4, #25
 8004a14:	e7f5      	b.n	8004a02 <_printf_i+0x222>
 8004a16:	bf00      	nop
 8004a18:	08004b99 	.word	0x08004b99
 8004a1c:	08004baa 	.word	0x08004baa

08004a20 <memmove>:
 8004a20:	4288      	cmp	r0, r1
 8004a22:	b510      	push	{r4, lr}
 8004a24:	eb01 0402 	add.w	r4, r1, r2
 8004a28:	d902      	bls.n	8004a30 <memmove+0x10>
 8004a2a:	4284      	cmp	r4, r0
 8004a2c:	4623      	mov	r3, r4
 8004a2e:	d807      	bhi.n	8004a40 <memmove+0x20>
 8004a30:	1e43      	subs	r3, r0, #1
 8004a32:	42a1      	cmp	r1, r4
 8004a34:	d008      	beq.n	8004a48 <memmove+0x28>
 8004a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a3e:	e7f8      	b.n	8004a32 <memmove+0x12>
 8004a40:	4402      	add	r2, r0
 8004a42:	4601      	mov	r1, r0
 8004a44:	428a      	cmp	r2, r1
 8004a46:	d100      	bne.n	8004a4a <memmove+0x2a>
 8004a48:	bd10      	pop	{r4, pc}
 8004a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a52:	e7f7      	b.n	8004a44 <memmove+0x24>

08004a54 <_sbrk_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4d06      	ldr	r5, [pc, #24]	@ (8004a70 <_sbrk_r+0x1c>)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	602b      	str	r3, [r5, #0]
 8004a60:	f7fc fcc8 	bl	80013f4 <_sbrk>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d102      	bne.n	8004a6e <_sbrk_r+0x1a>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	b103      	cbz	r3, 8004a6e <_sbrk_r+0x1a>
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	200003fc 	.word	0x200003fc

08004a74 <memcpy>:
 8004a74:	440a      	add	r2, r1
 8004a76:	4291      	cmp	r1, r2
 8004a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a7c:	d100      	bne.n	8004a80 <memcpy+0xc>
 8004a7e:	4770      	bx	lr
 8004a80:	b510      	push	{r4, lr}
 8004a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a8a:	4291      	cmp	r1, r2
 8004a8c:	d1f9      	bne.n	8004a82 <memcpy+0xe>
 8004a8e:	bd10      	pop	{r4, pc}

08004a90 <_realloc_r>:
 8004a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a94:	4680      	mov	r8, r0
 8004a96:	4615      	mov	r5, r2
 8004a98:	460c      	mov	r4, r1
 8004a9a:	b921      	cbnz	r1, 8004aa6 <_realloc_r+0x16>
 8004a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	f7ff bc4b 	b.w	800433c <_malloc_r>
 8004aa6:	b92a      	cbnz	r2, 8004ab4 <_realloc_r+0x24>
 8004aa8:	f7ff fbdc 	bl	8004264 <_free_r>
 8004aac:	2400      	movs	r4, #0
 8004aae:	4620      	mov	r0, r4
 8004ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ab4:	f000 f81a 	bl	8004aec <_malloc_usable_size_r>
 8004ab8:	4285      	cmp	r5, r0
 8004aba:	4606      	mov	r6, r0
 8004abc:	d802      	bhi.n	8004ac4 <_realloc_r+0x34>
 8004abe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ac2:	d8f4      	bhi.n	8004aae <_realloc_r+0x1e>
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	f7ff fc38 	bl	800433c <_malloc_r>
 8004acc:	4607      	mov	r7, r0
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d0ec      	beq.n	8004aac <_realloc_r+0x1c>
 8004ad2:	42b5      	cmp	r5, r6
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	bf28      	it	cs
 8004ada:	4632      	movcs	r2, r6
 8004adc:	f7ff ffca 	bl	8004a74 <memcpy>
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	f7ff fbbe 	bl	8004264 <_free_r>
 8004ae8:	463c      	mov	r4, r7
 8004aea:	e7e0      	b.n	8004aae <_realloc_r+0x1e>

08004aec <_malloc_usable_size_r>:
 8004aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004af0:	1f18      	subs	r0, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bfbc      	itt	lt
 8004af6:	580b      	ldrlt	r3, [r1, r0]
 8004af8:	18c0      	addlt	r0, r0, r3
 8004afa:	4770      	bx	lr

08004afc <_init>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr

08004b08 <_fini>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	bf00      	nop
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr
