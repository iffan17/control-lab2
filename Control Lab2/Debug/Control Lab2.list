
Control Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b38  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d50  08005d50  0000704c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d50  08005d50  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d58  08005d58  0000704c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d58  08005d58  00006d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d5c  08005d5c  00006d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08005d60  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000004c  08005dac  0000704c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08005dac  0000722c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e16  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233e  00000000  00000000  00018e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  0001b1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b11  00000000  00000000  0001c038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002666e  00000000  00000000  0001cb49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110db  00000000  00000000  000431b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff151  00000000  00000000  00054292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001533e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ddc  00000000  00000000  00153428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00157204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000004c 	.word	0x2000004c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005cf8 	.word	0x08005cf8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000050 	.word	0x20000050
 8000214:	08005cf8 	.word	0x08005cf8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	0000      	movs	r0, r0
	...

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4e:	f000 fd46 	bl	80017de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d52:	f000 f949 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d56:	f000 fadb 	bl	8001310 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d5a:	f000 fa43 	bl	80011e4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d5e:	f000 f98f 	bl	8001080 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000d62:	f000 fa05 	bl	8001170 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8000d66:	f000 fa87 	bl	8001278 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d6a:	217f      	movs	r1, #127	@ 0x7f
 8000d6c:	488c      	ldr	r0, [pc, #560]	@ (8000fa0 <main+0x258>)
 8000d6e:	f002 fa4d 	bl	800320c <HAL_ADCEx_Calibration_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000d72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	488a      	ldr	r0, [pc, #552]	@ (8000fa4 <main+0x25c>)
 8000d7c:	f002 fd4e 	bl	800381c <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d80:	2100      	movs	r1, #0
 8000d82:	4888      	ldr	r0, [pc, #544]	@ (8000fa4 <main+0x25c>)
 8000d84:	f002 fcde 	bl	8003744 <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t timeStamp =0;
	  if(HAL_GetTick()>timeStamp)
 8000d88:	f000 fd8e 	bl	80018a8 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	4b86      	ldr	r3, [pc, #536]	@ (8000fa8 <main+0x260>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d9f8      	bls.n	8000d88 <main+0x40>
	  {
		  timeStamp = HAL_GetTick()+500;
 8000d96:	f000 fd87 	bl	80018a8 <HAL_GetTick>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000da0:	4a81      	ldr	r2, [pc, #516]	@ (8000fa8 <main+0x260>)
 8000da2:	6013      	str	r3, [r2, #0]
		  ADC_Read_blocking();
 8000da4:	f000 fb22 	bl	80013ec <ADC_Read_blocking>
		  V_in = ADC1_Channel[0].data*12/4096;
 8000da8:	4b80      	ldr	r3, [pc, #512]	@ (8000fac <main+0x264>)
 8000daa:	8c1b      	ldrh	r3, [r3, #32]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	da01      	bge.n	8000dbe <main+0x76>
 8000dba:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000dbe:	131b      	asrs	r3, r3, #12
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc8:	4b79      	ldr	r3, [pc, #484]	@ (8000fb0 <main+0x268>)
 8000dca:	edc3 7a00 	vstr	s15, [r3]


		  num = (V_in*K_t*T*T) -(y_n_2*J*L) + (y_n_1*(2*J*L+J*T*R+B*L*T));
 8000dce:	4b78      	ldr	r3, [pc, #480]	@ (8000fb0 <main+0x268>)
 8000dd0:	ed93 7a00 	vldr	s14, [r3]
 8000dd4:	4b77      	ldr	r3, [pc, #476]	@ (8000fb4 <main+0x26c>)
 8000dd6:	edd3 7a00 	vldr	s15, [r3]
 8000dda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dde:	4b76      	ldr	r3, [pc, #472]	@ (8000fb8 <main+0x270>)
 8000de0:	edd3 7a00 	vldr	s15, [r3]
 8000de4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000de8:	4b73      	ldr	r3, [pc, #460]	@ (8000fb8 <main+0x270>)
 8000dea:	edd3 7a00 	vldr	s15, [r3]
 8000dee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000df2:	4b72      	ldr	r3, [pc, #456]	@ (8000fbc <main+0x274>)
 8000df4:	edd3 6a00 	vldr	s13, [r3]
 8000df8:	4b71      	ldr	r3, [pc, #452]	@ (8000fc0 <main+0x278>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e02:	4b70      	ldr	r3, [pc, #448]	@ (8000fc4 <main+0x27c>)
 8000e04:	edd3 7a00 	vldr	s15, [r3]
 8000e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e10:	4b6b      	ldr	r3, [pc, #428]	@ (8000fc0 <main+0x278>)
 8000e12:	edd3 7a00 	vldr	s15, [r3]
 8000e16:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8000fc4 <main+0x27c>)
 8000e1c:	edd3 7a00 	vldr	s15, [r3]
 8000e20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e24:	4b66      	ldr	r3, [pc, #408]	@ (8000fc0 <main+0x278>)
 8000e26:	ed93 6a00 	vldr	s12, [r3]
 8000e2a:	4b63      	ldr	r3, [pc, #396]	@ (8000fb8 <main+0x270>)
 8000e2c:	edd3 7a00 	vldr	s15, [r3]
 8000e30:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000e34:	4b64      	ldr	r3, [pc, #400]	@ (8000fc8 <main+0x280>)
 8000e36:	edd3 7a00 	vldr	s15, [r3]
 8000e3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e3e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e42:	4b62      	ldr	r3, [pc, #392]	@ (8000fcc <main+0x284>)
 8000e44:	ed93 6a00 	vldr	s12, [r3]
 8000e48:	4b5e      	ldr	r3, [pc, #376]	@ (8000fc4 <main+0x27c>)
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000e52:	4b59      	ldr	r3, [pc, #356]	@ (8000fb8 <main+0x270>)
 8000e54:	edd3 7a00 	vldr	s15, [r3]
 8000e58:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e5c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e60:	4b5b      	ldr	r3, [pc, #364]	@ (8000fd0 <main+0x288>)
 8000e62:	edd3 7a00 	vldr	s15, [r3]
 8000e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6e:	edc7 7a01 	vstr	s15, [r7, #4]
		  den = J*L+J*T*R+B*L*T+R*B*T*T+K_t*K_e*T*T;
 8000e72:	4b53      	ldr	r3, [pc, #332]	@ (8000fc0 <main+0x278>)
 8000e74:	ed93 7a00 	vldr	s14, [r3]
 8000e78:	4b52      	ldr	r3, [pc, #328]	@ (8000fc4 <main+0x27c>)
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e82:	4b4f      	ldr	r3, [pc, #316]	@ (8000fc0 <main+0x278>)
 8000e84:	edd3 6a00 	vldr	s13, [r3]
 8000e88:	4b4b      	ldr	r3, [pc, #300]	@ (8000fb8 <main+0x270>)
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e92:	4b4d      	ldr	r3, [pc, #308]	@ (8000fc8 <main+0x280>)
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ea0:	4b4a      	ldr	r3, [pc, #296]	@ (8000fcc <main+0x284>)
 8000ea2:	edd3 6a00 	vldr	s13, [r3]
 8000ea6:	4b47      	ldr	r3, [pc, #284]	@ (8000fc4 <main+0x27c>)
 8000ea8:	edd3 7a00 	vldr	s15, [r3]
 8000eac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000eb0:	4b41      	ldr	r3, [pc, #260]	@ (8000fb8 <main+0x270>)
 8000eb2:	edd3 7a00 	vldr	s15, [r3]
 8000eb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ebe:	4b42      	ldr	r3, [pc, #264]	@ (8000fc8 <main+0x280>)
 8000ec0:	edd3 6a00 	vldr	s13, [r3]
 8000ec4:	4b41      	ldr	r3, [pc, #260]	@ (8000fcc <main+0x284>)
 8000ec6:	edd3 7a00 	vldr	s15, [r3]
 8000eca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000ece:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb8 <main+0x270>)
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000ed8:	4b37      	ldr	r3, [pc, #220]	@ (8000fb8 <main+0x270>)
 8000eda:	edd3 7a00 	vldr	s15, [r3]
 8000ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ee2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ee6:	4b33      	ldr	r3, [pc, #204]	@ (8000fb4 <main+0x26c>)
 8000ee8:	edd3 6a00 	vldr	s13, [r3]
 8000eec:	4b39      	ldr	r3, [pc, #228]	@ (8000fd4 <main+0x28c>)
 8000eee:	edd3 7a00 	vldr	s15, [r3]
 8000ef2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000ef6:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <main+0x270>)
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f00:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb8 <main+0x270>)
 8000f02:	edd3 7a00 	vldr	s15, [r3]
 8000f06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f0e:	edc7 7a00 	vstr	s15, [r7]

		  y = num / den;
 8000f12:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f16:	ed97 7a00 	vldr	s14, [r7]
 8000f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd8 <main+0x290>)
 8000f20:	edc3 7a00 	vstr	s15, [r3]

		  y_n_2 = y_n_1;
 8000f24:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd0 <main+0x288>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a24      	ldr	r2, [pc, #144]	@ (8000fbc <main+0x274>)
 8000f2a:	6013      	str	r3, [r2, #0]
		  y_n_1 = y;
 8000f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd8 <main+0x290>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a27      	ldr	r2, [pc, #156]	@ (8000fd0 <main+0x288>)
 8000f32:	6013      	str	r3, [r2, #0]

		  y_out = (1.65+(y/100)) * 2048 / 3.3;
 8000f34:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <main+0x290>)
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8000fdc <main+0x294>
 8000f3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f42:	ee16 0a90 	vmov	r0, s13
 8000f46:	f7ff facb 	bl	80004e0 <__aeabi_f2d>
 8000f4a:	a311      	add	r3, pc, #68	@ (adr r3, 8000f90 <main+0x248>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	f7ff f968 	bl	8000224 <__adddf3>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <main+0x298>)
 8000f62:	f7ff fb15 	bl	8000590 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	a30a      	add	r3, pc, #40	@ (adr r3, 8000f98 <main+0x250>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff fc36 	bl	80007e4 <__aeabi_ddiv>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fd18 	bl	80009b4 <__aeabi_d2f>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a17      	ldr	r2, [pc, #92]	@ (8000fe4 <main+0x29c>)
 8000f88:	6013      	str	r3, [r2, #0]
		  DAC_Update();
 8000f8a:	f000 fa4d 	bl	8001428 <DAC_Update>
  {
 8000f8e:	e6fb      	b.n	8000d88 <main+0x40>
 8000f90:	66666666 	.word	0x66666666
 8000f94:	3ffa6666 	.word	0x3ffa6666
 8000f98:	66666666 	.word	0x66666666
 8000f9c:	400a6666 	.word	0x400a6666
 8000fa0:	20000068 	.word	0x20000068
 8000fa4:	200000d4 	.word	0x200000d4
 8000fa8:	20000224 	.word	0x20000224
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000220 	.word	0x20000220
 8000fb4:	20000024 	.word	0x20000024
 8000fb8:	20000028 	.word	0x20000028
 8000fbc:	20000218 	.word	0x20000218
 8000fc0:	2000002c 	.word	0x2000002c
 8000fc4:	20000030 	.word	0x20000030
 8000fc8:	20000034 	.word	0x20000034
 8000fcc:	20000038 	.word	0x20000038
 8000fd0:	20000214 	.word	0x20000214
 8000fd4:	2000003c 	.word	0x2000003c
 8000fd8:	20000210 	.word	0x20000210
 8000fdc:	42c80000 	.word	0x42c80000
 8000fe0:	40a00000 	.word	0x40a00000
 8000fe4:	2000021c 	.word	0x2000021c

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	@ 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	2238      	movs	r2, #56	@ 0x38
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 fe52 	bl	8005ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800100a:	2000      	movs	r0, #0
 800100c:	f002 ffaa 	bl	8003f64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101a:	2340      	movs	r3, #64	@ 0x40
 800101c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001022:	2302      	movs	r3, #2
 8001024:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001026:	2304      	movs	r3, #4
 8001028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800102a:	2355      	movs	r3, #85	@ 0x55
 800102c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001032:	2302      	movs	r3, #2
 8001034:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001036:	2302      	movs	r3, #2
 8001038:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	4618      	mov	r0, r3
 8001040:	f003 f844 	bl	80040cc <HAL_RCC_OscConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800104a:	f000 fa01 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001052:	2303      	movs	r3, #3
 8001054:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2104      	movs	r1, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fb42 	bl	80046f0 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001072:	f000 f9ed 	bl	8001450 <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3750      	adds	r7, #80	@ 0x50
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	@ 0x30
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2220      	movs	r2, #32
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f004 fe01 	bl	8005ca0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800109e:	4b32      	ldr	r3, [pc, #200]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010a6:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010c0:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c6:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010c8:	2204      	movs	r2, #4
 80010ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010cc:	4b26      	ldr	r3, [pc, #152]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010d8:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010da:	2201      	movs	r2, #1
 80010dc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010de:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e6:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001100:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <MX_ADC1_Init+0xe8>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001108:	4817      	ldr	r0, [pc, #92]	@ (8001168 <MX_ADC1_Init+0xe8>)
 800110a:	f000 fe53 	bl	8001db4 <HAL_ADC_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001114:	f000 f99c 	bl	8001450 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800111c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001120:	4619      	mov	r1, r3
 8001122:	4811      	ldr	r0, [pc, #68]	@ (8001168 <MX_ADC1_Init+0xe8>)
 8001124:	f002 f8d4 	bl	80032d0 <HAL_ADCEx_MultiModeConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800112e:	f000 f98f 	bl	8001450 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <MX_ADC1_Init+0xec>)
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001136:	2306      	movs	r3, #6
 8001138:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113e:	237f      	movs	r3, #127	@ 0x7f
 8001140:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001142:	2304      	movs	r3, #4
 8001144:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <MX_ADC1_Init+0xe8>)
 8001150:	f001 fa18 	bl	8002584 <HAL_ADC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800115a:	f000 f979 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3730      	adds	r7, #48	@ 0x30
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000068 	.word	0x20000068
 800116c:	04300002 	.word	0x04300002

08001170 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	@ 0x30
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2230      	movs	r2, #48	@ 0x30
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fd8f 	bl	8005ca0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001182:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <MX_DAC1_Init+0x6c>)
 8001184:	4a16      	ldr	r2, [pc, #88]	@ (80011e0 <MX_DAC1_Init+0x70>)
 8001186:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001188:	4814      	ldr	r0, [pc, #80]	@ (80011dc <MX_DAC1_Init+0x6c>)
 800118a:	f002 fab8 	bl	80036fe <HAL_DAC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001194:	f000 f95c 	bl	8001450 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001198:	2302      	movs	r3, #2
 800119a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	@ (80011dc <MX_DAC1_Init+0x6c>)
 80011c4:	f002 fb58 	bl	8003878 <HAL_DAC_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80011ce:	f000 f93f 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3730      	adds	r7, #48	@ 0x30
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000d4 	.word	0x200000d4
 80011e0:	50000800 	.word	0x50000800

080011e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011e8:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 80011ea:	4a22      	ldr	r2, [pc, #136]	@ (8001274 <MX_LPUART1_UART_Init+0x90>)
 80011ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011ee:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001202:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001214:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 8001222:	2200      	movs	r2, #0
 8001224:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001226:	4812      	ldr	r0, [pc, #72]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 8001228:	f003 fecc 	bl	8004fc4 <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001232:	f000 f90d 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001236:	2100      	movs	r1, #0
 8001238:	480d      	ldr	r0, [pc, #52]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 800123a:	f004 fc67 	bl	8005b0c <HAL_UARTEx_SetTxFifoThreshold>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001244:	f000 f904 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001248:	2100      	movs	r1, #0
 800124a:	4809      	ldr	r0, [pc, #36]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 800124c:	f004 fc9c 	bl	8005b88 <HAL_UARTEx_SetRxFifoThreshold>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001256:	f000 f8fb 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	@ (8001270 <MX_LPUART1_UART_Init+0x8c>)
 800125c:	f004 fc1d 	bl	8005a9a <HAL_UARTEx_DisableFifoMode>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001266:	f000 f8f3 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000e8 	.word	0x200000e8
 8001274:	40008000 	.word	0x40008000

08001278 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800127c:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 800127e:	4a23      	ldr	r2, [pc, #140]	@ (800130c <MX_USART1_UART_Init+0x94>)
 8001280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001282:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ae:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c0:	4811      	ldr	r0, [pc, #68]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012c2:	f003 fe7f 	bl	8004fc4 <HAL_UART_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012cc:	f000 f8c0 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d0:	2100      	movs	r1, #0
 80012d2:	480d      	ldr	r0, [pc, #52]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012d4:	f004 fc1a 	bl	8005b0c <HAL_UARTEx_SetTxFifoThreshold>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012de:	f000 f8b7 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4808      	ldr	r0, [pc, #32]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012e6:	f004 fc4f 	bl	8005b88 <HAL_UARTEx_SetRxFifoThreshold>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012f0:	f000 f8ae 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <MX_USART1_UART_Init+0x90>)
 80012f6:	f004 fbd0 	bl	8005a9a <HAL_UARTEx_DisableFifoMode>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001300:	f000 f8a6 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000017c 	.word	0x2000017c
 800130c:	40013800 	.word	0x40013800

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b2f      	ldr	r3, [pc, #188]	@ (80013e4 <MX_GPIO_Init+0xd4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a2e      	ldr	r2, [pc, #184]	@ (80013e4 <MX_GPIO_Init+0xd4>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <MX_GPIO_Init+0xd4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800133e:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <MX_GPIO_Init+0xd4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a28      	ldr	r2, [pc, #160]	@ (80013e4 <MX_GPIO_Init+0xd4>)
 8001344:	f043 0320 	orr.w	r3, r3, #32
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <MX_GPIO_Init+0xd4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0320 	and.w	r3, r3, #32
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <MX_GPIO_Init+0xd4>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	4a22      	ldr	r2, [pc, #136]	@ (80013e4 <MX_GPIO_Init+0xd4>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <MX_GPIO_Init+0xd4>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <MX_GPIO_Init+0xd4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a1c      	ldr	r2, [pc, #112]	@ (80013e4 <MX_GPIO_Init+0xd4>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <MX_GPIO_Init+0xd4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2120      	movs	r1, #32
 800138a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138e:	f002 fdad 	bl	8003eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001392:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001398:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	480f      	ldr	r0, [pc, #60]	@ (80013e8 <MX_GPIO_Init+0xd8>)
 80013aa:	f002 fc1d 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ae:	2320      	movs	r3, #32
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c8:	f002 fc0e 	bl	8003be8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2028      	movs	r0, #40	@ 0x28
 80013d2:	f002 f960 	bl	8003696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d6:	2028      	movs	r0, #40	@ 0x28
 80013d8:	f002 f977 	bl	80036ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	@ 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40021000 	.word	0x40021000
 80013e8:	48000800 	.word	0x48000800

080013ec <ADC_Read_blocking>:

/* USER CODE BEGIN 4 */
void ADC_Read_blocking()
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

	HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel[0].Config);
 80013f0:	490b      	ldr	r1, [pc, #44]	@ (8001420 <ADC_Read_blocking+0x34>)
 80013f2:	480c      	ldr	r0, [pc, #48]	@ (8001424 <ADC_Read_blocking+0x38>)
 80013f4:	f001 f8c6 	bl	8002584 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80013f8:	480a      	ldr	r0, [pc, #40]	@ (8001424 <ADC_Read_blocking+0x38>)
 80013fa:	f000 fe97 	bl	800212c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80013fe:	2164      	movs	r1, #100	@ 0x64
 8001400:	4808      	ldr	r0, [pc, #32]	@ (8001424 <ADC_Read_blocking+0x38>)
 8001402:	f000 ffab 	bl	800235c <HAL_ADC_PollForConversion>
	ADC1_Channel[0].data = HAL_ADC_GetValue(&hadc1);
 8001406:	4807      	ldr	r0, [pc, #28]	@ (8001424 <ADC_Read_blocking+0x38>)
 8001408:	f001 f8ae 	bl	8002568 <HAL_ADC_GetValue>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b03      	ldr	r3, [pc, #12]	@ (8001420 <ADC_Read_blocking+0x34>)
 8001412:	841a      	strh	r2, [r3, #32]
	HAL_ADC_Stop(&hadc1);
 8001414:	4803      	ldr	r0, [pc, #12]	@ (8001424 <ADC_Read_blocking+0x38>)
 8001416:	f000 ff6d 	bl	80022f4 <HAL_ADC_Stop>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000000 	.word	0x20000000
 8001424:	20000068 	.word	0x20000068

08001428 <DAC_Update>:

void DAC_Update()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, y_out);
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <DAC_Update+0x20>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001436:	ee17 3a90 	vmov	r3, s15
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	4803      	ldr	r0, [pc, #12]	@ (800144c <DAC_Update+0x24>)
 8001440:	f002 f9ec 	bl	800381c <HAL_DAC_SetValue>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000021c 	.word	0x2000021c
 800144c:	200000d4 	.word	0x200000d4

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <Error_Handler+0x8>

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <HAL_MspInit+0x44>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001466:	4a0e      	ldr	r2, [pc, #56]	@ (80014a0 <HAL_MspInit+0x44>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6613      	str	r3, [r2, #96]	@ 0x60
 800146e:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <HAL_MspInit+0x44>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_MspInit+0x44>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147e:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <HAL_MspInit+0x44>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001484:	6593      	str	r3, [r2, #88]	@ 0x58
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_MspInit+0x44>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001492:	f002 fe0b 	bl	80040ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000

080014a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b09e      	sub	sp, #120	@ 0x78
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	2254      	movs	r2, #84	@ 0x54
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f004 fbeb 	bl	8005ca0 <memset>
  if(hadc->Instance==ADC1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014d2:	d134      	bne.n	800153e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014da:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014de:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 fb1f 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80014f0:	f7ff ffae 	bl	8001450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_ADC_MspInit+0xa4>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f8:	4a13      	ldr	r2, [pc, #76]	@ (8001548 <HAL_ADC_MspInit+0xa4>)
 80014fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <HAL_ADC_MspInit+0xa4>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001504:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <HAL_ADC_MspInit+0xa4>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	4a0d      	ldr	r2, [pc, #52]	@ (8001548 <HAL_ADC_MspInit+0xa4>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <HAL_ADC_MspInit+0xa4>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001524:	2301      	movs	r3, #1
 8001526:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001528:	2303      	movs	r3, #3
 800152a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001534:	4619      	mov	r1, r3
 8001536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153a:	f002 fb55 	bl	8003be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3778      	adds	r7, #120	@ 0x78
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a15      	ldr	r2, [pc, #84]	@ (80015c0 <HAL_DAC_MspInit+0x74>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d124      	bne.n	80015b8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_DAC_MspInit+0x78>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	4a14      	ldr	r2, [pc, #80]	@ (80015c4 <HAL_DAC_MspInit+0x78>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157a:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <HAL_DAC_MspInit+0x78>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <HAL_DAC_MspInit+0x78>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	4a0e      	ldr	r2, [pc, #56]	@ (80015c4 <HAL_DAC_MspInit+0x78>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001592:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <HAL_DAC_MspInit+0x78>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800159e:	2310      	movs	r3, #16
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a2:	2303      	movs	r3, #3
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b4:	f002 fb18 	bl	8003be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	@ 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	50000800 	.word	0x50000800
 80015c4:	40021000 	.word	0x40021000

080015c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0a0      	sub	sp, #128	@ 0x80
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e0:	f107 0318 	add.w	r3, r7, #24
 80015e4:	2254      	movs	r2, #84	@ 0x54
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 fb59 	bl	8005ca0 <memset>
  if(huart->Instance==LPUART1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a3d      	ldr	r2, [pc, #244]	@ (80016e8 <HAL_UART_MspInit+0x120>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d137      	bne.n	8001668 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80015f8:	2320      	movs	r3, #32
 80015fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001600:	f107 0318 	add.w	r3, r7, #24
 8001604:	4618      	mov	r0, r3
 8001606:	f003 fa8f 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001610:	f7ff ff1e 	bl	8001450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001614:	4b35      	ldr	r3, [pc, #212]	@ (80016ec <HAL_UART_MspInit+0x124>)
 8001616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001618:	4a34      	ldr	r2, [pc, #208]	@ (80016ec <HAL_UART_MspInit+0x124>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001620:	4b32      	ldr	r3, [pc, #200]	@ (80016ec <HAL_UART_MspInit+0x124>)
 8001622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162c:	4b2f      	ldr	r3, [pc, #188]	@ (80016ec <HAL_UART_MspInit+0x124>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001630:	4a2e      	ldr	r2, [pc, #184]	@ (80016ec <HAL_UART_MspInit+0x124>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001638:	4b2c      	ldr	r3, [pc, #176]	@ (80016ec <HAL_UART_MspInit+0x124>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001644:	230c      	movs	r3, #12
 8001646:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001654:	230c      	movs	r3, #12
 8001656:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001662:	f002 fac1 	bl	8003be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001666:	e03a      	b.n	80016de <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a20      	ldr	r2, [pc, #128]	@ (80016f0 <HAL_UART_MspInit+0x128>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d135      	bne.n	80016de <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167a:	f107 0318 	add.w	r3, r7, #24
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fa52 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800168a:	f7ff fee1 	bl	8001450 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <HAL_UART_MspInit+0x124>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001692:	4a16      	ldr	r2, [pc, #88]	@ (80016ec <HAL_UART_MspInit+0x124>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001698:	6613      	str	r3, [r2, #96]	@ 0x60
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <HAL_UART_MspInit+0x124>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <HAL_UART_MspInit+0x124>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	4a10      	ldr	r2, [pc, #64]	@ (80016ec <HAL_UART_MspInit+0x124>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <HAL_UART_MspInit+0x124>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016be:	2330      	movs	r3, #48	@ 0x30
 80016c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ce:	2307      	movs	r3, #7
 80016d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016d6:	4619      	mov	r1, r3
 80016d8:	4806      	ldr	r0, [pc, #24]	@ (80016f4 <HAL_UART_MspInit+0x12c>)
 80016da:	f002 fa85 	bl	8003be8 <HAL_GPIO_Init>
}
 80016de:	bf00      	nop
 80016e0:	3780      	adds	r7, #128	@ 0x80
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40008000 	.word	0x40008000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40013800 	.word	0x40013800
 80016f4:	48000800 	.word	0x48000800

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <NMI_Handler+0x4>

08001700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <MemManage_Handler+0x4>

08001710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <UsageFault_Handler+0x4>

08001720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174e:	f000 f899 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}

08001756 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800175a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800175e:	f002 fbdd 	bl	8003f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <SystemInit+0x20>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001772:	4a05      	ldr	r2, [pc, #20]	@ (8001788 <SystemInit+0x20>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800178c:	480d      	ldr	r0, [pc, #52]	@ (80017c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800178e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001790:	f7ff ffea 	bl	8001768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001794:	480c      	ldr	r0, [pc, #48]	@ (80017c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001796:	490d      	ldr	r1, [pc, #52]	@ (80017cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001798:	4a0d      	ldr	r2, [pc, #52]	@ (80017d0 <LoopForever+0xe>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0a      	ldr	r2, [pc, #40]	@ (80017d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ac:	4c0a      	ldr	r4, [pc, #40]	@ (80017d8 <LoopForever+0x16>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ba:	f004 fa79 	bl	8005cb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017be:	f7ff fac3 	bl	8000d48 <main>

080017c2 <LoopForever>:

LoopForever:
    b LoopForever
 80017c2:	e7fe      	b.n	80017c2 <LoopForever>
  ldr   r0, =_estack
 80017c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80017d0:	08005d60 	.word	0x08005d60
  ldr r2, =_sbss
 80017d4:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 80017d8:	2000022c 	.word	0x2000022c

080017dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC1_2_IRQHandler>

080017de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f001 ff49 	bl	8003680 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 f80e 	bl	8001810 <HAL_InitTick>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	e001      	b.n	8001804 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001800:	f7ff fe2c 	bl	800145c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001804:	79fb      	ldrb	r3, [r7, #7]

}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <HAL_InitTick+0x68>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d022      	beq.n	800186a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001824:	4b15      	ldr	r3, [pc, #84]	@ (800187c <HAL_InitTick+0x6c>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <HAL_InitTick+0x68>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001830:	fbb1 f3f3 	udiv	r3, r1, r3
 8001834:	fbb2 f3f3 	udiv	r3, r2, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f001 ff54 	bl	80036e6 <HAL_SYSTICK_Config>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10f      	bne.n	8001864 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	d809      	bhi.n	800185e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184a:	2200      	movs	r2, #0
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	f04f 30ff 	mov.w	r0, #4294967295
 8001852:	f001 ff20 	bl	8003696 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001856:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <HAL_InitTick+0x70>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	e007      	b.n	800186e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	73fb      	strb	r3, [r7, #15]
 8001862:	e004      	b.n	800186e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e001      	b.n	800186e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000048 	.word	0x20000048
 800187c:	20000040 	.word	0x20000040
 8001880:	20000044 	.word	0x20000044

08001884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_IncTick+0x1c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <HAL_IncTick+0x20>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4413      	add	r3, r2
 8001892:	4a03      	ldr	r2, [pc, #12]	@ (80018a0 <HAL_IncTick+0x1c>)
 8001894:	6013      	str	r3, [r2, #0]
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	20000228 	.word	0x20000228
 80018a4:	20000048 	.word	0x20000048

080018a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <HAL_GetTick+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000228 	.word	0x20000228

080018c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	609a      	str	r2, [r3, #8]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	609a      	str	r2, [r3, #8]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3360      	adds	r3, #96	@ 0x60
 800193a:	461a      	mov	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <LL_ADC_SetOffset+0x44>)
 800194a:	4013      	ands	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	4313      	orrs	r3, r2
 8001958:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	03fff000 	.word	0x03fff000

08001970 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3360      	adds	r3, #96	@ 0x60
 800197e:	461a      	mov	r2, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3360      	adds	r3, #96	@ 0x60
 80019ac:	461a      	mov	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019c6:	bf00      	nop
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b087      	sub	sp, #28
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3360      	adds	r3, #96	@ 0x60
 80019e2:	461a      	mov	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80019fc:	bf00      	nop
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3360      	adds	r3, #96	@ 0x60
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	615a      	str	r2, [r3, #20]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b087      	sub	sp, #28
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3330      	adds	r3, #48	@ 0x30
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	4413      	add	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	211f      	movs	r1, #31
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	401a      	ands	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	f003 011f 	and.w	r1, r3, #31
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ad6:	bf00      	nop
 8001ad8:	371c      	adds	r7, #28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b087      	sub	sp, #28
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3314      	adds	r3, #20
 8001af2:	461a      	mov	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	0e5b      	lsrs	r3, r3, #25
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	4413      	add	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	0d1b      	lsrs	r3, r3, #20
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2107      	movs	r1, #7
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	401a      	ands	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	0d1b      	lsrs	r3, r3, #20
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	431a      	orrs	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b2c:	bf00      	nop
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0318 	and.w	r3, r3, #24
 8001b5a:	4908      	ldr	r1, [pc, #32]	@ (8001b7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b5c:	40d9      	lsrs	r1, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	400b      	ands	r3, r1
 8001b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b66:	431a      	orrs	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	0007ffff 	.word	0x0007ffff

08001b80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6093      	str	r3, [r2, #8]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bf0:	d101      	bne.n	8001bf6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c18:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c40:	d101      	bne.n	8001c46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c90:	f043 0202 	orr.w	r2, r3, #2
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <LL_ADC_IsEnabled+0x18>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <LL_ADC_IsEnabled+0x1a>
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d101      	bne.n	8001ce2 <LL_ADC_IsDisableOngoing+0x18>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <LL_ADC_IsDisableOngoing+0x1a>
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d04:	f043 0204 	orr.w	r2, r3, #4
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d2c:	f043 0210 	orr.w	r2, r3, #16
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d101      	bne.n	8001d58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d76:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d7a:	f043 0220 	orr.w	r2, r3, #32
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d101      	bne.n	8001da6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b089      	sub	sp, #36	@ 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e1a9      	b.n	8002122 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fb61 	bl	80014a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fef1 	bl	8001bdc <LL_ADC_IsDeepPowerDownEnabled>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fed7 	bl	8001bb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff0c 	bl	8001c2c <LL_ADC_IsInternalRegulatorEnabled>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d115      	bne.n	8001e46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fef0 	bl	8001c04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e24:	4b9c      	ldr	r3, [pc, #624]	@ (8002098 <HAL_ADC_Init+0x2e4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	099b      	lsrs	r3, r3, #6
 8001e2a:	4a9c      	ldr	r2, [pc, #624]	@ (800209c <HAL_ADC_Init+0x2e8>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	3301      	adds	r3, #1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e38:	e002      	b.n	8001e40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f9      	bne.n	8001e3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff feee 	bl	8001c2c <LL_ADC_IsInternalRegulatorEnabled>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5a:	f043 0210 	orr.w	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e66:	f043 0201 	orr.w	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff62 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 8001e7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 8142 	bne.w	8002110 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 813e 	bne.w	8002110 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e9c:	f043 0202 	orr.w	r2, r3, #2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fefb 	bl	8001ca4 <LL_ADC_IsEnabled>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d141      	bne.n	8001f38 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ebc:	d004      	beq.n	8001ec8 <HAL_ADC_Init+0x114>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a77      	ldr	r2, [pc, #476]	@ (80020a0 <HAL_ADC_Init+0x2ec>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d10f      	bne.n	8001ee8 <HAL_ADC_Init+0x134>
 8001ec8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ecc:	f7ff feea 	bl	8001ca4 <LL_ADC_IsEnabled>
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	4873      	ldr	r0, [pc, #460]	@ (80020a0 <HAL_ADC_Init+0x2ec>)
 8001ed4:	f7ff fee6 	bl	8001ca4 <LL_ADC_IsEnabled>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4323      	orrs	r3, r4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e012      	b.n	8001f0e <HAL_ADC_Init+0x15a>
 8001ee8:	486e      	ldr	r0, [pc, #440]	@ (80020a4 <HAL_ADC_Init+0x2f0>)
 8001eea:	f7ff fedb 	bl	8001ca4 <LL_ADC_IsEnabled>
 8001eee:	4604      	mov	r4, r0
 8001ef0:	486d      	ldr	r0, [pc, #436]	@ (80020a8 <HAL_ADC_Init+0x2f4>)
 8001ef2:	f7ff fed7 	bl	8001ca4 <LL_ADC_IsEnabled>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	431c      	orrs	r4, r3
 8001efa:	486c      	ldr	r0, [pc, #432]	@ (80020ac <HAL_ADC_Init+0x2f8>)
 8001efc:	f7ff fed2 	bl	8001ca4 <LL_ADC_IsEnabled>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4323      	orrs	r3, r4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d012      	beq.n	8001f38 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f1a:	d004      	beq.n	8001f26 <HAL_ADC_Init+0x172>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a5f      	ldr	r2, [pc, #380]	@ (80020a0 <HAL_ADC_Init+0x2ec>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_Init+0x176>
 8001f26:	4a62      	ldr	r2, [pc, #392]	@ (80020b0 <HAL_ADC_Init+0x2fc>)
 8001f28:	e000      	b.n	8001f2c <HAL_ADC_Init+0x178>
 8001f2a:	4a62      	ldr	r2, [pc, #392]	@ (80020b4 <HAL_ADC_Init+0x300>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f7ff fcc4 	bl	80018c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7f5b      	ldrb	r3, [r3, #29]
 8001f3c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f42:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f48:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f4e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f56:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d106      	bne.n	8001f74 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	045b      	lsls	r3, r3, #17
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d009      	beq.n	8001f90 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f80:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f88:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	4b48      	ldr	r3, [pc, #288]	@ (80020b8 <HAL_ADC_Init+0x304>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fee5 	bl	8001d8e <LL_ADC_INJ_IsConversionOngoing>
 8001fc4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d17f      	bne.n	80020cc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d17c      	bne.n	80020cc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fd6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fde:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fee:	f023 0302 	bic.w	r3, r3, #2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	69b9      	ldr	r1, [r7, #24]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d017      	beq.n	8002034 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002012:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800201c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002020:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6911      	ldr	r1, [r2, #16]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	430b      	orrs	r3, r1
 800202e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002032:	e013      	b.n	800205c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002042:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002054:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002058:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002062:	2b01      	cmp	r3, #1
 8002064:	d12a      	bne.n	80020bc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002082:	4311      	orrs	r1, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002088:	430a      	orrs	r2, r1
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0201 	orr.w	r2, r2, #1
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	e019      	b.n	80020cc <HAL_ADC_Init+0x318>
 8002098:	20000040 	.word	0x20000040
 800209c:	053e2d63 	.word	0x053e2d63
 80020a0:	50000100 	.word	0x50000100
 80020a4:	50000400 	.word	0x50000400
 80020a8:	50000500 	.word	0x50000500
 80020ac:	50000600 	.word	0x50000600
 80020b0:	50000300 	.word	0x50000300
 80020b4:	50000700 	.word	0x50000700
 80020b8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10c      	bne.n	80020ee <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f023 010f 	bic.w	r1, r3, #15
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	1e5a      	subs	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80020ec:	e007      	b.n	80020fe <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 020f 	bic.w	r2, r2, #15
 80020fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002102:	f023 0303 	bic.w	r3, r3, #3
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800210e:	e007      	b.n	8002120 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002114:	f043 0210 	orr.w	r2, r3, #16
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002120:	7ffb      	ldrb	r3, [r7, #31]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	@ 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop

0800212c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800213c:	d004      	beq.n	8002148 <HAL_ADC_Start+0x1c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a67      	ldr	r2, [pc, #412]	@ (80022e0 <HAL_ADC_Start+0x1b4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_ADC_Start+0x20>
 8002148:	4b66      	ldr	r3, [pc, #408]	@ (80022e4 <HAL_ADC_Start+0x1b8>)
 800214a:	e000      	b.n	800214e <HAL_ADC_Start+0x22>
 800214c:	4b66      	ldr	r3, [pc, #408]	@ (80022e8 <HAL_ADC_Start+0x1bc>)
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fd16 	bl	8001b80 <LL_ADC_GetMultimode>
 8002154:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fdf0 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 80b4 	bne.w	80022d0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_ADC_Start+0x4a>
 8002172:	2302      	movs	r3, #2
 8002174:	e0af      	b.n	80022d6 <HAL_ADC_Start+0x1aa>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fefc 	bl	8002f7c <ADC_Enable>
 8002184:	4603      	mov	r3, r0
 8002186:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 809b 	bne.w	80022c6 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a4d      	ldr	r2, [pc, #308]	@ (80022e0 <HAL_ADC_Start+0x1b4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d009      	beq.n	80021c2 <HAL_ADC_Start+0x96>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a4e      	ldr	r2, [pc, #312]	@ (80022ec <HAL_ADC_Start+0x1c0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d002      	beq.n	80021be <HAL_ADC_Start+0x92>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	e003      	b.n	80021c6 <HAL_ADC_Start+0x9a>
 80021be:	4b4c      	ldr	r3, [pc, #304]	@ (80022f0 <HAL_ADC_Start+0x1c4>)
 80021c0:	e001      	b.n	80021c6 <HAL_ADC_Start+0x9a>
 80021c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d002      	beq.n	80021d4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d105      	bne.n	80021e0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ec:	d106      	bne.n	80021fc <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f2:	f023 0206 	bic.w	r2, r3, #6
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80021fa:	e002      	b.n	8002202 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	221c      	movs	r2, #28
 8002208:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a32      	ldr	r2, [pc, #200]	@ (80022e0 <HAL_ADC_Start+0x1b4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_ADC_Start+0x104>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a32      	ldr	r2, [pc, #200]	@ (80022ec <HAL_ADC_Start+0x1c0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d002      	beq.n	800222c <HAL_ADC_Start+0x100>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	e003      	b.n	8002234 <HAL_ADC_Start+0x108>
 800222c:	4b30      	ldr	r3, [pc, #192]	@ (80022f0 <HAL_ADC_Start+0x1c4>)
 800222e:	e001      	b.n	8002234 <HAL_ADC_Start+0x108>
 8002230:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	4293      	cmp	r3, r2
 800223a:	d008      	beq.n	800224e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b05      	cmp	r3, #5
 8002246:	d002      	beq.n	800224e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b09      	cmp	r3, #9
 800224c:	d114      	bne.n	8002278 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002260:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002264:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fd3d 	bl	8001cf0 <LL_ADC_REG_StartConversion>
 8002276:	e02d      	b.n	80022d4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a15      	ldr	r2, [pc, #84]	@ (80022e0 <HAL_ADC_Start+0x1b4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_ADC_Start+0x176>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a16      	ldr	r2, [pc, #88]	@ (80022ec <HAL_ADC_Start+0x1c0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d002      	beq.n	800229e <HAL_ADC_Start+0x172>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	e003      	b.n	80022a6 <HAL_ADC_Start+0x17a>
 800229e:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <HAL_ADC_Start+0x1c4>)
 80022a0:	e001      	b.n	80022a6 <HAL_ADC_Start+0x17a>
 80022a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022a6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00f      	beq.n	80022d4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022c4:	e006      	b.n	80022d4 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80022ce:	e001      	b.n	80022d4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
 80022d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	50000100 	.word	0x50000100
 80022e4:	50000300 	.word	0x50000300
 80022e8:	50000700 	.word	0x50000700
 80022ec:	50000500 	.word	0x50000500
 80022f0:	50000400 	.word	0x50000400

080022f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_ADC_Stop+0x16>
 8002306:	2302      	movs	r3, #2
 8002308:	e023      	b.n	8002352 <HAL_ADC_Stop+0x5e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002312:	2103      	movs	r1, #3
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fd75 	bl	8002e04 <ADC_ConversionStop>
 800231a:	4603      	mov	r3, r0
 800231c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d111      	bne.n	8002348 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 febf 	bl	80030a8 <ADC_Disable>
 800232a:	4603      	mov	r3, r0
 800232c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d109      	bne.n	8002348 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002338:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	f043 0201 	orr.w	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800236e:	d004      	beq.n	800237a <HAL_ADC_PollForConversion+0x1e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a77      	ldr	r2, [pc, #476]	@ (8002554 <HAL_ADC_PollForConversion+0x1f8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_ADC_PollForConversion+0x22>
 800237a:	4b77      	ldr	r3, [pc, #476]	@ (8002558 <HAL_ADC_PollForConversion+0x1fc>)
 800237c:	e000      	b.n	8002380 <HAL_ADC_PollForConversion+0x24>
 800237e:	4b77      	ldr	r3, [pc, #476]	@ (800255c <HAL_ADC_PollForConversion+0x200>)
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fbfd 	bl	8001b80 <LL_ADC_GetMultimode>
 8002386:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d102      	bne.n	8002396 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002390:	2308      	movs	r3, #8
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	e037      	b.n	8002406 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d002      	beq.n	80023a8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	d111      	bne.n	80023cc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ba:	f043 0220 	orr.w	r2, r3, #32
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0c1      	b.n	800254a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023c6:	2304      	movs	r3, #4
 80023c8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023ca:	e01c      	b.n	8002406 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023d4:	d004      	beq.n	80023e0 <HAL_ADC_PollForConversion+0x84>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a5e      	ldr	r2, [pc, #376]	@ (8002554 <HAL_ADC_PollForConversion+0x1f8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_PollForConversion+0x88>
 80023e0:	4b5d      	ldr	r3, [pc, #372]	@ (8002558 <HAL_ADC_PollForConversion+0x1fc>)
 80023e2:	e000      	b.n	80023e6 <HAL_ADC_PollForConversion+0x8a>
 80023e4:	4b5d      	ldr	r3, [pc, #372]	@ (800255c <HAL_ADC_PollForConversion+0x200>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fbd8 	bl	8001b9c <LL_ADC_GetMultiDMATransfer>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f6:	f043 0220 	orr.w	r2, r3, #32
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0a3      	b.n	800254a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002402:	2304      	movs	r3, #4
 8002404:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002406:	f7ff fa4f 	bl	80018a8 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800240c:	e021      	b.n	8002452 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d01d      	beq.n	8002452 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002416:	f7ff fa47 	bl	80018a8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d302      	bcc.n	800242c <HAL_ADC_PollForConversion+0xd0>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d112      	bne.n	8002452 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10b      	bne.n	8002452 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243e:	f043 0204 	orr.w	r2, r3, #4
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e07b      	b.n	800254a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0d6      	beq.n	800240e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002464:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff faf7 	bl	8001a64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01c      	beq.n	80024b6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7f5b      	ldrb	r3, [r3, #29]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d118      	bne.n	80024b6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b08      	cmp	r3, #8
 8002490:	d111      	bne.n	80024b6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002496:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ae:	f043 0201 	orr.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a26      	ldr	r2, [pc, #152]	@ (8002554 <HAL_ADC_PollForConversion+0x1f8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d009      	beq.n	80024d4 <HAL_ADC_PollForConversion+0x178>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a26      	ldr	r2, [pc, #152]	@ (8002560 <HAL_ADC_PollForConversion+0x204>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d002      	beq.n	80024d0 <HAL_ADC_PollForConversion+0x174>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	e003      	b.n	80024d8 <HAL_ADC_PollForConversion+0x17c>
 80024d0:	4b24      	ldr	r3, [pc, #144]	@ (8002564 <HAL_ADC_PollForConversion+0x208>)
 80024d2:	e001      	b.n	80024d8 <HAL_ADC_PollForConversion+0x17c>
 80024d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	4293      	cmp	r3, r2
 80024de:	d008      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	d002      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	d104      	bne.n	80024fc <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	e014      	b.n	8002526 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a14      	ldr	r2, [pc, #80]	@ (8002554 <HAL_ADC_PollForConversion+0x1f8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d009      	beq.n	800251a <HAL_ADC_PollForConversion+0x1be>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a15      	ldr	r2, [pc, #84]	@ (8002560 <HAL_ADC_PollForConversion+0x204>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d002      	beq.n	8002516 <HAL_ADC_PollForConversion+0x1ba>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	e003      	b.n	800251e <HAL_ADC_PollForConversion+0x1c2>
 8002516:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <HAL_ADC_PollForConversion+0x208>)
 8002518:	e001      	b.n	800251e <HAL_ADC_PollForConversion+0x1c2>
 800251a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800251e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d104      	bne.n	8002536 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2208      	movs	r2, #8
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e008      	b.n	8002548 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d103      	bne.n	8002548 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	220c      	movs	r2, #12
 8002546:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	50000100 	.word	0x50000100
 8002558:	50000300 	.word	0x50000300
 800255c:	50000700 	.word	0x50000700
 8002560:	50000500 	.word	0x50000500
 8002564:	50000400 	.word	0x50000400

08002568 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b0b6      	sub	sp, #216	@ 0xd8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d102      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x24>
 80025a2:	2302      	movs	r3, #2
 80025a4:	f000 bc13 	b.w	8002dce <HAL_ADC_ConfigChannel+0x84a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fbc3 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f040 83f3 	bne.w	8002da8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f7ff fa5b 	bl	8001a8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fbb1 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 80025de:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fbd1 	bl	8001d8e <LL_ADC_INJ_IsConversionOngoing>
 80025ec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f040 81d9 	bne.w	80029ac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 81d4 	bne.w	80029ac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800260c:	d10f      	bne.n	800262e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	4619      	mov	r1, r3
 800261a:	f7ff fa62 	bl	8001ae2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fa09 	bl	8001a3e <LL_ADC_SetSamplingTimeCommonConfig>
 800262c:	e00e      	b.n	800264c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	461a      	mov	r2, r3
 800263c:	f7ff fa51 	bl	8001ae2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff f9f9 	bl	8001a3e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	08db      	lsrs	r3, r3, #3
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d022      	beq.n	80026b4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6919      	ldr	r1, [r3, #16]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800267e:	f7ff f953 	bl	8001928 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6919      	ldr	r1, [r3, #16]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	461a      	mov	r2, r3
 8002690:	f7ff f99f 	bl	80019d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d102      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x126>
 80026a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026a8:	e000      	b.n	80026ac <HAL_ADC_ConfigChannel+0x128>
 80026aa:	2300      	movs	r3, #0
 80026ac:	461a      	mov	r2, r3
 80026ae:	f7ff f9ab 	bl	8001a08 <LL_ADC_SetOffsetSaturation>
 80026b2:	e17b      	b.n	80029ac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f958 	bl	8001970 <LL_ADC_GetOffsetChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x15c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f94d 	bl	8001970 <LL_ADC_GetOffsetChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	f003 021f 	and.w	r2, r3, #31
 80026de:	e01e      	b.n	800271e <HAL_ADC_ConfigChannel+0x19a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f942 	bl	8001970 <LL_ADC_GetOffsetChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002702:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002706:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e004      	b.n	800271c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002712:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x1b2>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	e018      	b.n	8002768 <HAL_ADC_ConfigChannel+0x1e4>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800274a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800274e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e004      	b.n	8002768 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800275e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002768:	429a      	cmp	r2, r3
 800276a:	d106      	bne.n	800277a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff f911 	bl	800199c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2101      	movs	r1, #1
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f8f5 	bl	8001970 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x222>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff f8ea 	bl	8001970 <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	e01e      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x260>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff f8df 	bl	8001970 <LL_ADC_GetOffsetChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80027c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80027cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e004      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80027d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x278>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	e018      	b.n	800282e <HAL_ADC_ConfigChannel+0x2aa>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002810:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002814:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002818:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002820:	2320      	movs	r3, #32
 8002822:	e004      	b.n	800282e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800282e:	429a      	cmp	r2, r3
 8002830:	d106      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2200      	movs	r2, #0
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f8ae 	bl	800199c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2102      	movs	r1, #2
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff f892 	bl	8001970 <LL_ADC_GetOffsetChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <HAL_ADC_ConfigChannel+0x2e8>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2102      	movs	r1, #2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff f887 	bl	8001970 <LL_ADC_GetOffsetChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	f003 021f 	and.w	r2, r3, #31
 800286a:	e01e      	b.n	80028aa <HAL_ADC_ConfigChannel+0x326>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2102      	movs	r1, #2
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f87c 	bl	8001970 <LL_ADC_GetOffsetChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800288a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800288e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002892:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800289a:	2320      	movs	r3, #32
 800289c:	e004      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800289e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x33e>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0e9b      	lsrs	r3, r3, #26
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	e016      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x36c>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80028d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80028da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80028e2:	2320      	movs	r3, #32
 80028e4:	e004      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80028e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d106      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2200      	movs	r2, #0
 80028fa:	2102      	movs	r1, #2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff f84d 	bl	800199c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2103      	movs	r1, #3
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff f831 	bl	8001970 <LL_ADC_GetOffsetChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <HAL_ADC_ConfigChannel+0x3aa>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2103      	movs	r1, #3
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f826 	bl	8001970 <LL_ADC_GetOffsetChannel>
 8002924:	4603      	mov	r3, r0
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	e017      	b.n	800295e <HAL_ADC_ConfigChannel+0x3da>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2103      	movs	r1, #3
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff f81b 	bl	8001970 <LL_ADC_GetOffsetChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002946:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002948:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800294a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e003      	b.n	800295c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002954:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x3f2>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	e011      	b.n	800299a <HAL_ADC_ConfigChannel+0x416>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002986:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800298e:	2320      	movs	r3, #32
 8002990:	e003      	b.n	800299a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800299a:	429a      	cmp	r2, r3
 800299c:	d106      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2200      	movs	r2, #0
 80029a4:	2103      	movs	r1, #3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fff8 	bl	800199c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff f977 	bl	8001ca4 <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 813d 	bne.w	8002c38 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f7ff f8b4 	bl	8001b38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4aa2      	ldr	r2, [pc, #648]	@ (8002c60 <HAL_ADC_ConfigChannel+0x6dc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	f040 812e 	bne.w	8002c38 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10b      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x480>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	3301      	adds	r3, #1
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	bf94      	ite	ls
 80029fc:	2301      	movls	r3, #1
 80029fe:	2300      	movhi	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e019      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x4b4>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a14:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	e003      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	3301      	adds	r3, #1
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	2b09      	cmp	r3, #9
 8002a30:	bf94      	ite	ls
 8002a32:	2301      	movls	r3, #1
 8002a34:	2300      	movhi	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d079      	beq.n	8002b30 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d107      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x4d4>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0e9b      	lsrs	r3, r3, #26
 8002a4e:	3301      	adds	r3, #1
 8002a50:	069b      	lsls	r3, r3, #26
 8002a52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a56:	e015      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x500>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a68:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e003      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	069b      	lsls	r3, r3, #26
 8002a80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x520>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0e9b      	lsrs	r3, r3, #26
 8002a96:	3301      	adds	r3, #1
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	e017      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x550>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002abc:	2320      	movs	r3, #32
 8002abe:	e003      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad4:	ea42 0103 	orr.w	r1, r2, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x576>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0e9b      	lsrs	r3, r3, #26
 8002aea:	3301      	adds	r3, #1
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	051b      	lsls	r3, r3, #20
 8002af8:	e018      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x5a8>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b12:	2320      	movs	r3, #32
 8002b14:	e003      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f003 021f 	and.w	r2, r3, #31
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	e07e      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x5c8>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	3301      	adds	r3, #1
 8002b44:	069b      	lsls	r3, r3, #26
 8002b46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b4a:	e015      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x5f4>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b64:	2320      	movs	r3, #32
 8002b66:	e003      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	3301      	adds	r3, #1
 8002b72:	069b      	lsls	r3, r3, #26
 8002b74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x614>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0e9b      	lsrs	r3, r3, #26
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	e017      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x644>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	61fb      	str	r3, [r7, #28]
  return result;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	e003      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc8:	ea42 0103 	orr.w	r1, r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10d      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x670>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	3301      	adds	r3, #1
 8002be0:	f003 021f 	and.w	r2, r3, #31
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	3b1e      	subs	r3, #30
 8002bec:	051b      	lsls	r3, r3, #20
 8002bee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bf2:	e01b      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x6a8>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	613b      	str	r3, [r7, #16]
  return result;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	e003      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f003 021f 	and.w	r2, r3, #31
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	3b1e      	subs	r3, #30
 8002c26:	051b      	lsls	r3, r3, #20
 8002c28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7fe ff55 	bl	8001ae2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <HAL_ADC_ConfigChannel+0x6e0>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80be 	beq.w	8002dc2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c4e:	d004      	beq.n	8002c5a <HAL_ADC_ConfigChannel+0x6d6>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a04      	ldr	r2, [pc, #16]	@ (8002c68 <HAL_ADC_ConfigChannel+0x6e4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10a      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x6ec>
 8002c5a:	4b04      	ldr	r3, [pc, #16]	@ (8002c6c <HAL_ADC_ConfigChannel+0x6e8>)
 8002c5c:	e009      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x6ee>
 8002c5e:	bf00      	nop
 8002c60:	407f0000 	.word	0x407f0000
 8002c64:	80080000 	.word	0x80080000
 8002c68:	50000100 	.word	0x50000100
 8002c6c:	50000300 	.word	0x50000300
 8002c70:	4b59      	ldr	r3, [pc, #356]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x854>)
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fe4a 	bl	800190c <LL_ADC_GetCommonPathInternalCh>
 8002c78:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a56      	ldr	r2, [pc, #344]	@ (8002ddc <HAL_ADC_ConfigChannel+0x858>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d004      	beq.n	8002c90 <HAL_ADC_ConfigChannel+0x70c>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a55      	ldr	r2, [pc, #340]	@ (8002de0 <HAL_ADC_ConfigChannel+0x85c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d13a      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d134      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca4:	d005      	beq.n	8002cb2 <HAL_ADC_ConfigChannel+0x72e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a4e      	ldr	r2, [pc, #312]	@ (8002de4 <HAL_ADC_ConfigChannel+0x860>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	f040 8085 	bne.w	8002dbc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cba:	d004      	beq.n	8002cc6 <HAL_ADC_ConfigChannel+0x742>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	@ (8002de8 <HAL_ADC_ConfigChannel+0x864>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x746>
 8002cc6:	4a49      	ldr	r2, [pc, #292]	@ (8002dec <HAL_ADC_ConfigChannel+0x868>)
 8002cc8:	e000      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x748>
 8002cca:	4a43      	ldr	r2, [pc, #268]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x854>)
 8002ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f7fe fe05 	bl	80018e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cdc:	4b44      	ldr	r3, [pc, #272]	@ (8002df0 <HAL_ADC_ConfigChannel+0x86c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	4a44      	ldr	r2, [pc, #272]	@ (8002df4 <HAL_ADC_ConfigChannel+0x870>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cf6:	e002      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f9      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d04:	e05a      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a3b      	ldr	r2, [pc, #236]	@ (8002df8 <HAL_ADC_ConfigChannel+0x874>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d125      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d11f      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a31      	ldr	r2, [pc, #196]	@ (8002de8 <HAL_ADC_ConfigChannel+0x864>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d104      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x7ac>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a34      	ldr	r2, [pc, #208]	@ (8002dfc <HAL_ADC_ConfigChannel+0x878>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d047      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d38:	d004      	beq.n	8002d44 <HAL_ADC_ConfigChannel+0x7c0>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8002de8 <HAL_ADC_ConfigChannel+0x864>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x7c4>
 8002d44:	4a29      	ldr	r2, [pc, #164]	@ (8002dec <HAL_ADC_ConfigChannel+0x868>)
 8002d46:	e000      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x7c6>
 8002d48:	4a23      	ldr	r2, [pc, #140]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x854>)
 8002d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f7fe fdc6 	bl	80018e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d5a:	e031      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a27      	ldr	r2, [pc, #156]	@ (8002e00 <HAL_ADC_ConfigChannel+0x87c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d12d      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d127      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1c      	ldr	r2, [pc, #112]	@ (8002de8 <HAL_ADC_ConfigChannel+0x864>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d022      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d84:	d004      	beq.n	8002d90 <HAL_ADC_ConfigChannel+0x80c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a17      	ldr	r2, [pc, #92]	@ (8002de8 <HAL_ADC_ConfigChannel+0x864>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x810>
 8002d90:	4a16      	ldr	r2, [pc, #88]	@ (8002dec <HAL_ADC_ConfigChannel+0x868>)
 8002d92:	e000      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x812>
 8002d94:	4a10      	ldr	r2, [pc, #64]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x854>)
 8002d96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f7fe fda0 	bl	80018e6 <LL_ADC_SetCommonPathInternalCh>
 8002da6:	e00c      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dac:	f043 0220 	orr.w	r2, r3, #32
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002dba:	e002      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dbc:	bf00      	nop
 8002dbe:	e000      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dc0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	37d8      	adds	r7, #216	@ 0xd8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	50000700 	.word	0x50000700
 8002ddc:	c3210000 	.word	0xc3210000
 8002de0:	90c00010 	.word	0x90c00010
 8002de4:	50000600 	.word	0x50000600
 8002de8:	50000100 	.word	0x50000100
 8002dec:	50000300 	.word	0x50000300
 8002df0:	20000040 	.word	0x20000040
 8002df4:	053e2d63 	.word	0x053e2d63
 8002df8:	c7520000 	.word	0xc7520000
 8002dfc:	50000500 	.word	0x50000500
 8002e00:	cb840000 	.word	0xcb840000

08002e04 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe ff90 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 8002e20:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe ffb1 	bl	8001d8e <LL_ADC_INJ_IsConversionOngoing>
 8002e2c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8098 	beq.w	8002f6c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d02a      	beq.n	8002ea0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	7f5b      	ldrb	r3, [r3, #29]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d126      	bne.n	8002ea0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7f1b      	ldrb	r3, [r3, #28]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d122      	bne.n	8002ea0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e5e:	e014      	b.n	8002e8a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	4a45      	ldr	r2, [pc, #276]	@ (8002f78 <ADC_ConversionStop+0x174>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d90d      	bls.n	8002e84 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	f043 0210 	orr.w	r2, r3, #16
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e074      	b.n	8002f6e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	3301      	adds	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e94:	2b40      	cmp	r3, #64	@ 0x40
 8002e96:	d1e3      	bne.n	8002e60 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2240      	movs	r2, #64	@ 0x40
 8002e9e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d014      	beq.n	8002ed0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe ff48 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00c      	beq.n	8002ed0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe ff05 	bl	8001cca <LL_ADC_IsDisableOngoing>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d104      	bne.n	8002ed0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe ff24 	bl	8001d18 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d014      	beq.n	8002f00 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe ff57 	bl	8001d8e <LL_ADC_INJ_IsConversionOngoing>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00c      	beq.n	8002f00 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe feed 	bl	8001cca <LL_ADC_IsDisableOngoing>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d104      	bne.n	8002f00 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe ff33 	bl	8001d66 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d005      	beq.n	8002f12 <ADC_ConversionStop+0x10e>
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d105      	bne.n	8002f18 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002f0c:	230c      	movs	r3, #12
 8002f0e:	617b      	str	r3, [r7, #20]
        break;
 8002f10:	e005      	b.n	8002f1e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002f12:	2308      	movs	r3, #8
 8002f14:	617b      	str	r3, [r7, #20]
        break;
 8002f16:	e002      	b.n	8002f1e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002f18:	2304      	movs	r3, #4
 8002f1a:	617b      	str	r3, [r7, #20]
        break;
 8002f1c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002f1e:	f7fe fcc3 	bl	80018a8 <HAL_GetTick>
 8002f22:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f24:	e01b      	b.n	8002f5e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002f26:	f7fe fcbf 	bl	80018a8 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d914      	bls.n	8002f5e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00d      	beq.n	8002f5e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f46:	f043 0210 	orr.w	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e007      	b.n	8002f6e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1dc      	bne.n	8002f26 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	a33fffff 	.word	0xa33fffff

08002f7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe fe89 	bl	8001ca4 <LL_ADC_IsEnabled>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d176      	bne.n	8003086 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8003090 <ADC_Enable+0x114>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002faa:	f043 0210 	orr.w	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e062      	b.n	8003088 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fe44 	bl	8001c54 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fd4:	d004      	beq.n	8002fe0 <ADC_Enable+0x64>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2e      	ldr	r2, [pc, #184]	@ (8003094 <ADC_Enable+0x118>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <ADC_Enable+0x68>
 8002fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8003098 <ADC_Enable+0x11c>)
 8002fe2:	e000      	b.n	8002fe6 <ADC_Enable+0x6a>
 8002fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800309c <ADC_Enable+0x120>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe fc90 	bl	800190c <LL_ADC_GetCommonPathInternalCh>
 8002fec:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002fee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d013      	beq.n	800301e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80030a0 <ADC_Enable+0x124>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	099b      	lsrs	r3, r3, #6
 8002ffc:	4a29      	ldr	r2, [pc, #164]	@ (80030a4 <ADC_Enable+0x128>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003010:	e002      	b.n	8003018 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	3b01      	subs	r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f9      	bne.n	8003012 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800301e:	f7fe fc43 	bl	80018a8 <HAL_GetTick>
 8003022:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003024:	e028      	b.n	8003078 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fe3a 	bl	8001ca4 <LL_ADC_IsEnabled>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe fe0a 	bl	8001c54 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003040:	f7fe fc32 	bl	80018a8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d914      	bls.n	8003078 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d00d      	beq.n	8003078 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003060:	f043 0210 	orr.w	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e007      	b.n	8003088 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d1cf      	bne.n	8003026 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	8000003f 	.word	0x8000003f
 8003094:	50000100 	.word	0x50000100
 8003098:	50000300 	.word	0x50000300
 800309c:	50000700 	.word	0x50000700
 80030a0:	20000040 	.word	0x20000040
 80030a4:	053e2d63 	.word	0x053e2d63

080030a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe fe08 	bl	8001cca <LL_ADC_IsDisableOngoing>
 80030ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe fdef 	bl	8001ca4 <LL_ADC_IsEnabled>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d047      	beq.n	800315c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d144      	bne.n	800315c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 030d 	and.w	r3, r3, #13
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d10c      	bne.n	80030fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe fdc9 	bl	8001c7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2203      	movs	r2, #3
 80030f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030f2:	f7fe fbd9 	bl	80018a8 <HAL_GetTick>
 80030f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030f8:	e029      	b.n	800314e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fe:	f043 0210 	orr.w	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e023      	b.n	800315e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003116:	f7fe fbc7 	bl	80018a8 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d914      	bls.n	800314e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003136:	f043 0210 	orr.w	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e007      	b.n	800315e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1dc      	bne.n	8003116 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <LL_ADC_IsEnabled>:
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <LL_ADC_IsEnabled+0x18>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <LL_ADC_IsEnabled+0x1a>
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_ADC_StartCalibration>:
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800319e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	609a      	str	r2, [r3, #8]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <LL_ADC_IsCalibrationOnGoing>:
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031d2:	d101      	bne.n	80031d8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d101      	bne.n	80031fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_ADCEx_Calibration_Start+0x1c>
 8003224:	2302      	movs	r3, #2
 8003226:	e04d      	b.n	80032c4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ff39 	bl	80030a8 <ADC_Disable>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d136      	bne.n	80032ae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003244:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003248:	f023 0302 	bic.w	r3, r3, #2
 800324c:	f043 0202 	orr.w	r2, r3, #2
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6839      	ldr	r1, [r7, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ff96 	bl	800318c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003260:	e014      	b.n	800328c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3301      	adds	r3, #1
 8003266:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4a18      	ldr	r2, [pc, #96]	@ (80032cc <HAL_ADCEx_Calibration_Start+0xc0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d90d      	bls.n	800328c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003274:	f023 0312 	bic.w	r3, r3, #18
 8003278:	f043 0210 	orr.w	r2, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e01b      	b.n	80032c4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff94 	bl	80031be <LL_ADC_IsCalibrationOnGoing>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e2      	bne.n	8003262 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a0:	f023 0303 	bic.w	r3, r3, #3
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032ac:	e005      	b.n	80032ba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b2:	f043 0210 	orr.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	0004de01 	.word	0x0004de01

080032d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b0a1      	sub	sp, #132	@ 0x84
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e0e7      	b.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80032f6:	2300      	movs	r3, #0
 80032f8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80032fa:	2300      	movs	r3, #0
 80032fc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003306:	d102      	bne.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003308:	4b6f      	ldr	r3, [pc, #444]	@ (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	e009      	b.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a6e      	ldr	r2, [pc, #440]	@ (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d102      	bne.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003318:	4b6d      	ldr	r3, [pc, #436]	@ (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	e001      	b.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332c:	f043 0220 	orr.w	r2, r3, #32
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0be      	b.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff ff4f 	bl	80031e6 <LL_ADC_REG_IsConversionOngoing>
 8003348:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff ff49 	bl	80031e6 <LL_ADC_REG_IsConversionOngoing>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 80a0 	bne.w	800349c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800335c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 809c 	bne.w	800349c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800336c:	d004      	beq.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a55      	ldr	r2, [pc, #340]	@ (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003378:	4b56      	ldr	r3, [pc, #344]	@ (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800337a:	e000      	b.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800337c:	4b56      	ldr	r3, [pc, #344]	@ (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800337e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d04b      	beq.n	8003420 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003388:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800339a:	035b      	lsls	r3, r3, #13
 800339c:	430b      	orrs	r3, r1
 800339e:	431a      	orrs	r2, r3
 80033a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033ac:	d004      	beq.n	80033b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a45      	ldr	r2, [pc, #276]	@ (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d10f      	bne.n	80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80033b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033bc:	f7ff fed3 	bl	8003166 <LL_ADC_IsEnabled>
 80033c0:	4604      	mov	r4, r0
 80033c2:	4841      	ldr	r0, [pc, #260]	@ (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033c4:	f7ff fecf 	bl	8003166 <LL_ADC_IsEnabled>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4323      	orrs	r3, r4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e012      	b.n	80033fe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80033d8:	483c      	ldr	r0, [pc, #240]	@ (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033da:	f7ff fec4 	bl	8003166 <LL_ADC_IsEnabled>
 80033de:	4604      	mov	r4, r0
 80033e0:	483b      	ldr	r0, [pc, #236]	@ (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033e2:	f7ff fec0 	bl	8003166 <LL_ADC_IsEnabled>
 80033e6:	4603      	mov	r3, r0
 80033e8:	431c      	orrs	r4, r3
 80033ea:	483c      	ldr	r0, [pc, #240]	@ (80034dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033ec:	f7ff febb 	bl	8003166 <LL_ADC_IsEnabled>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4323      	orrs	r3, r4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d056      	beq.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003402:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800340a:	f023 030f 	bic.w	r3, r3, #15
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	6811      	ldr	r1, [r2, #0]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	6892      	ldr	r2, [r2, #8]
 8003416:	430a      	orrs	r2, r1
 8003418:	431a      	orrs	r2, r3
 800341a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800341c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800341e:	e047      	b.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003420:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003428:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800342a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003434:	d004      	beq.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a23      	ldr	r2, [pc, #140]	@ (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10f      	bne.n	8003460 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003440:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003444:	f7ff fe8f 	bl	8003166 <LL_ADC_IsEnabled>
 8003448:	4604      	mov	r4, r0
 800344a:	481f      	ldr	r0, [pc, #124]	@ (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800344c:	f7ff fe8b 	bl	8003166 <LL_ADC_IsEnabled>
 8003450:	4603      	mov	r3, r0
 8003452:	4323      	orrs	r3, r4
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e012      	b.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003460:	481a      	ldr	r0, [pc, #104]	@ (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003462:	f7ff fe80 	bl	8003166 <LL_ADC_IsEnabled>
 8003466:	4604      	mov	r4, r0
 8003468:	4819      	ldr	r0, [pc, #100]	@ (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800346a:	f7ff fe7c 	bl	8003166 <LL_ADC_IsEnabled>
 800346e:	4603      	mov	r3, r0
 8003470:	431c      	orrs	r4, r3
 8003472:	481a      	ldr	r0, [pc, #104]	@ (80034dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003474:	f7ff fe77 	bl	8003166 <LL_ADC_IsEnabled>
 8003478:	4603      	mov	r3, r0
 800347a:	4323      	orrs	r3, r4
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d012      	beq.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800348a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003492:	f023 030f 	bic.w	r3, r3, #15
 8003496:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003498:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800349a:	e009      	b.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80034ae:	e000      	b.n	80034b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3784      	adds	r7, #132	@ 0x84
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd90      	pop	{r4, r7, pc}
 80034c6:	bf00      	nop
 80034c8:	50000100 	.word	0x50000100
 80034cc:	50000400 	.word	0x50000400
 80034d0:	50000500 	.word	0x50000500
 80034d4:	50000300 	.word	0x50000300
 80034d8:	50000700 	.word	0x50000700
 80034dc:	50000600 	.word	0x50000600

080034e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003524 <__NVIC_SetPriorityGrouping+0x44>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034fc:	4013      	ands	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003508:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800350c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003512:	4a04      	ldr	r2, [pc, #16]	@ (8003524 <__NVIC_SetPriorityGrouping+0x44>)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	60d3      	str	r3, [r2, #12]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800352c:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <__NVIC_GetPriorityGrouping+0x18>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	0a1b      	lsrs	r3, r3, #8
 8003532:	f003 0307 	and.w	r3, r3, #7
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	2b00      	cmp	r3, #0
 8003554:	db0b      	blt.n	800356e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	f003 021f 	and.w	r2, r3, #31
 800355c:	4907      	ldr	r1, [pc, #28]	@ (800357c <__NVIC_EnableIRQ+0x38>)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2001      	movs	r0, #1
 8003566:	fa00 f202 	lsl.w	r2, r0, r2
 800356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000e100 	.word	0xe000e100

08003580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	6039      	str	r1, [r7, #0]
 800358a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	2b00      	cmp	r3, #0
 8003592:	db0a      	blt.n	80035aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	b2da      	uxtb	r2, r3
 8003598:	490c      	ldr	r1, [pc, #48]	@ (80035cc <__NVIC_SetPriority+0x4c>)
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	0112      	lsls	r2, r2, #4
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	440b      	add	r3, r1
 80035a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a8:	e00a      	b.n	80035c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	4908      	ldr	r1, [pc, #32]	@ (80035d0 <__NVIC_SetPriority+0x50>)
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	3b04      	subs	r3, #4
 80035b8:	0112      	lsls	r2, r2, #4
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	440b      	add	r3, r1
 80035be:	761a      	strb	r2, [r3, #24]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	e000e100 	.word	0xe000e100
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	@ 0x24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f1c3 0307 	rsb	r3, r3, #7
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	bf28      	it	cs
 80035f2:	2304      	movcs	r3, #4
 80035f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3304      	adds	r3, #4
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d902      	bls.n	8003604 <NVIC_EncodePriority+0x30>
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3b03      	subs	r3, #3
 8003602:	e000      	b.n	8003606 <NVIC_EncodePriority+0x32>
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003608:	f04f 32ff 	mov.w	r2, #4294967295
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	401a      	ands	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800361c:	f04f 31ff 	mov.w	r1, #4294967295
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	43d9      	mvns	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	4313      	orrs	r3, r2
         );
}
 800362e:	4618      	mov	r0, r3
 8003630:	3724      	adds	r7, #36	@ 0x24
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3b01      	subs	r3, #1
 8003648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800364c:	d301      	bcc.n	8003652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800364e:	2301      	movs	r3, #1
 8003650:	e00f      	b.n	8003672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003652:	4a0a      	ldr	r2, [pc, #40]	@ (800367c <SysTick_Config+0x40>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800365a:	210f      	movs	r1, #15
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	f7ff ff8e 	bl	8003580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003664:	4b05      	ldr	r3, [pc, #20]	@ (800367c <SysTick_Config+0x40>)
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366a:	4b04      	ldr	r3, [pc, #16]	@ (800367c <SysTick_Config+0x40>)
 800366c:	2207      	movs	r2, #7
 800366e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	e000e010 	.word	0xe000e010

08003680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff29 	bl	80034e0 <__NVIC_SetPriorityGrouping>
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b086      	sub	sp, #24
 800369a:	af00      	add	r7, sp, #0
 800369c:	4603      	mov	r3, r0
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036a4:	f7ff ff40 	bl	8003528 <__NVIC_GetPriorityGrouping>
 80036a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	6978      	ldr	r0, [r7, #20]
 80036b0:	f7ff ff90 	bl	80035d4 <NVIC_EncodePriority>
 80036b4:	4602      	mov	r2, r0
 80036b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff ff5f 	bl	8003580 <__NVIC_SetPriority>
}
 80036c2:	bf00      	nop
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff ff33 	bl	8003544 <__NVIC_EnableIRQ>
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ffa4 	bl	800363c <SysTick_Config>
 80036f4:	4603      	mov	r3, r0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e014      	b.n	800373a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	791b      	ldrb	r3, [r3, #4]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d105      	bne.n	8003726 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fd ff13 	bl	800154c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e056      	b.n	8003806 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	795b      	ldrb	r3, [r3, #5]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_DAC_Start+0x20>
 8003760:	2302      	movs	r3, #2
 8003762:	e050      	b.n	8003806 <HAL_DAC_Start+0xc2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2201      	movs	r2, #1
 800377e:	409a      	lsls	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003788:	4b22      	ldr	r3, [pc, #136]	@ (8003814 <HAL_DAC_Start+0xd0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	4a22      	ldr	r2, [pc, #136]	@ (8003818 <HAL_DAC_Start+0xd4>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	3301      	adds	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800379a:	e002      	b.n	80037a2 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3b01      	subs	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f9      	bne.n	800379c <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10f      	bne.n	80037ce <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d11d      	bne.n	80037f8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	e014      	b.n	80037f8 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2102      	movs	r1, #2
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d107      	bne.n	80037f8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0202 	orr.w	r2, r2, #2
 80037f6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000040 	.word	0x20000040
 8003818:	053e2d63 	.word	0x053e2d63

0800381c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e018      	b.n	800386a <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d105      	bne.n	8003856 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4413      	add	r3, r2
 8003850:	3308      	adds	r3, #8
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e004      	b.n	8003860 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	3314      	adds	r3, #20
 800385e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	461a      	mov	r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	@ 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_DAC_ConfigChannel+0x1c>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e19e      	b.n	8003bd6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	795b      	ldrb	r3, [r3, #5]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_DAC_ConfigChannel+0x2c>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e198      	b.n	8003bd6 <HAL_DAC_ConfigChannel+0x35e>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2202      	movs	r2, #2
 80038ae:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d17a      	bne.n	80039ae <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80038b8:	f7fd fff6 	bl	80018a8 <HAL_GetTick>
 80038bc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d13d      	bne.n	8003940 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038c4:	e018      	b.n	80038f8 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80038c6:	f7fd ffef 	bl	80018a8 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d911      	bls.n	80038f8 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f043 0208 	orr.w	r2, r3, #8
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2203      	movs	r2, #3
 80038f2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e16e      	b.n	8003bd6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1df      	bne.n	80038c6 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003910:	e020      	b.n	8003954 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003912:	f7fd ffc9 	bl	80018a8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d90f      	bls.n	8003940 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003926:	2b00      	cmp	r3, #0
 8003928:	da0a      	bge.n	8003940 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f043 0208 	orr.w	r2, r3, #8
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2203      	movs	r2, #3
 800393a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e14a      	b.n	8003bd6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003946:	2b00      	cmp	r3, #0
 8003948:	dbe3      	blt.n	8003912 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003952:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003964:	fa01 f303 	lsl.w	r3, r1, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	ea02 0103 	and.w	r1, r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	409a      	lsls	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	21ff      	movs	r1, #255	@ 0xff
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	ea02 0103 	and.w	r1, r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	409a      	lsls	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d11d      	bne.n	80039f2 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	221f      	movs	r2, #31
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ce:	4013      	ands	r3, r2
 80039d0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e6:	4313      	orrs	r3, r2
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2207      	movs	r2, #7
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d102      	bne.n	8003a1c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	e00f      	b.n	8003a3c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d102      	bne.n	8003a2a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003a24:	2301      	movs	r3, #1
 8003a26:	623b      	str	r3, [r7, #32]
 8003a28:	e008      	b.n	8003a3c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003a32:	2301      	movs	r3, #1
 8003a34:	623b      	str	r3, [r7, #32]
 8003a36:	e001      	b.n	8003a3c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	6a3a      	ldr	r2, [r7, #32]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5e:	4013      	ands	r3, r2
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	791b      	ldrb	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d102      	bne.n	8003a70 <HAL_DAC_ConfigChannel+0x1f8>
 8003a6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a6e:	e000      	b.n	8003a72 <HAL_DAC_ConfigChannel+0x1fa>
 8003a70:	2300      	movs	r3, #0
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	795b      	ldrb	r3, [r3, #5]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d102      	bne.n	8003a9c <HAL_DAC_ConfigChannel+0x224>
 8003a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a9a:	e000      	b.n	8003a9e <HAL_DAC_ConfigChannel+0x226>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d114      	bne.n	8003ade <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003ab4:	f000 ffba 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8003ab8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	4a48      	ldr	r2, [pc, #288]	@ (8003be0 <HAL_DAC_ConfigChannel+0x368>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d904      	bls.n	8003acc <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aca:	e00f      	b.n	8003aec <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4a45      	ldr	r2, [pc, #276]	@ (8003be4 <HAL_DAC_ConfigChannel+0x36c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d90a      	bls.n	8003aea <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8003adc:	e006      	b.n	8003aec <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae8:	e000      	b.n	8003aec <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003aea:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003afa:	4313      	orrs	r3, r2
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6819      	ldr	r1, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	400a      	ands	r2, r1
 8003b22:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3e:	4013      	ands	r3, r2
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b56:	4313      	orrs	r3, r2
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b60:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	22c0      	movs	r2, #192	@ 0xc0
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43da      	mvns	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	089b      	lsrs	r3, r3, #2
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	089b      	lsrs	r3, r3, #2
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003bac:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	ea02 0103 	and.w	r1, r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3728      	adds	r7, #40	@ 0x28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	09896800 	.word	0x09896800
 8003be4:	04c4b400 	.word	0x04c4b400

08003be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bf6:	e15a      	b.n	8003eae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 814c 	beq.w	8003ea8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d005      	beq.n	8003c28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d130      	bne.n	8003c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2203      	movs	r2, #3
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c5e:	2201      	movs	r2, #1
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	f003 0201 	and.w	r2, r3, #1
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d017      	beq.n	8003cc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4013      	ands	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d123      	bne.n	8003d1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	08da      	lsrs	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3208      	adds	r2, #8
 8003cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	220f      	movs	r2, #15
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	08da      	lsrs	r2, r3, #3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3208      	adds	r2, #8
 8003d14:	6939      	ldr	r1, [r7, #16]
 8003d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	2203      	movs	r2, #3
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 0203 	and.w	r2, r3, #3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80a6 	beq.w	8003ea8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8003ecc <HAL_GPIO_Init+0x2e4>)
 8003d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d60:	4a5a      	ldr	r2, [pc, #360]	@ (8003ecc <HAL_GPIO_Init+0x2e4>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d68:	4b58      	ldr	r3, [pc, #352]	@ (8003ecc <HAL_GPIO_Init+0x2e4>)
 8003d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d74:	4a56      	ldr	r2, [pc, #344]	@ (8003ed0 <HAL_GPIO_Init+0x2e8>)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d9e:	d01f      	beq.n	8003de0 <HAL_GPIO_Init+0x1f8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a4c      	ldr	r2, [pc, #304]	@ (8003ed4 <HAL_GPIO_Init+0x2ec>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d019      	beq.n	8003ddc <HAL_GPIO_Init+0x1f4>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a4b      	ldr	r2, [pc, #300]	@ (8003ed8 <HAL_GPIO_Init+0x2f0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d013      	beq.n	8003dd8 <HAL_GPIO_Init+0x1f0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a4a      	ldr	r2, [pc, #296]	@ (8003edc <HAL_GPIO_Init+0x2f4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00d      	beq.n	8003dd4 <HAL_GPIO_Init+0x1ec>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a49      	ldr	r2, [pc, #292]	@ (8003ee0 <HAL_GPIO_Init+0x2f8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <HAL_GPIO_Init+0x1e8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a48      	ldr	r2, [pc, #288]	@ (8003ee4 <HAL_GPIO_Init+0x2fc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <HAL_GPIO_Init+0x1e4>
 8003dc8:	2305      	movs	r3, #5
 8003dca:	e00a      	b.n	8003de2 <HAL_GPIO_Init+0x1fa>
 8003dcc:	2306      	movs	r3, #6
 8003dce:	e008      	b.n	8003de2 <HAL_GPIO_Init+0x1fa>
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	e006      	b.n	8003de2 <HAL_GPIO_Init+0x1fa>
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e004      	b.n	8003de2 <HAL_GPIO_Init+0x1fa>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e002      	b.n	8003de2 <HAL_GPIO_Init+0x1fa>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <HAL_GPIO_Init+0x1fa>
 8003de0:	2300      	movs	r3, #0
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	f002 0203 	and.w	r2, r2, #3
 8003de8:	0092      	lsls	r2, r2, #2
 8003dea:	4093      	lsls	r3, r2
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003df2:	4937      	ldr	r1, [pc, #220]	@ (8003ed0 <HAL_GPIO_Init+0x2e8>)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	089b      	lsrs	r3, r3, #2
 8003df8:	3302      	adds	r3, #2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e00:	4b39      	ldr	r3, [pc, #228]	@ (8003ee8 <HAL_GPIO_Init+0x300>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e24:	4a30      	ldr	r2, [pc, #192]	@ (8003ee8 <HAL_GPIO_Init+0x300>)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee8 <HAL_GPIO_Init+0x300>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e4e:	4a26      	ldr	r2, [pc, #152]	@ (8003ee8 <HAL_GPIO_Init+0x300>)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e54:	4b24      	ldr	r3, [pc, #144]	@ (8003ee8 <HAL_GPIO_Init+0x300>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee8 <HAL_GPIO_Init+0x300>)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee8 <HAL_GPIO_Init+0x300>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ea2:	4a11      	ldr	r2, [pc, #68]	@ (8003ee8 <HAL_GPIO_Init+0x300>)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f47f ae9d 	bne.w	8003bf8 <HAL_GPIO_Init+0x10>
  }
}
 8003ebe:	bf00      	nop
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	48000400 	.word	0x48000400
 8003ed8:	48000800 	.word	0x48000800
 8003edc:	48000c00 	.word	0x48000c00
 8003ee0:	48001000 	.word	0x48001000
 8003ee4:	48001400 	.word	0x48001400
 8003ee8:	40010400 	.word	0x40010400

08003eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	807b      	strh	r3, [r7, #2]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003efc:	787b      	ldrb	r3, [r7, #1]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f02:	887a      	ldrh	r2, [r7, #2]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f08:	e002      	b.n	8003f10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f26:	4b08      	ldr	r3, [pc, #32]	@ (8003f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d006      	beq.n	8003f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f32:	4a05      	ldr	r2, [pc, #20]	@ (8003f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f806 	bl	8003f4c <HAL_GPIO_EXTI_Callback>
  }
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40010400 	.word	0x40010400

08003f4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d141      	bne.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f72:	4b4b      	ldr	r3, [pc, #300]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7e:	d131      	bne.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f80:	4b47      	ldr	r3, [pc, #284]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f86:	4a46      	ldr	r2, [pc, #280]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f90:	4b43      	ldr	r3, [pc, #268]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f98:	4a41      	ldr	r2, [pc, #260]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fa0:	4b40      	ldr	r3, [pc, #256]	@ (80040a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2232      	movs	r2, #50	@ 0x32
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	4a3f      	ldr	r2, [pc, #252]	@ (80040a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	0c9b      	lsrs	r3, r3, #18
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fb6:	e002      	b.n	8003fbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fbe:	4b38      	ldr	r3, [pc, #224]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fca:	d102      	bne.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f2      	bne.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fd2:	4b33      	ldr	r3, [pc, #204]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fde:	d158      	bne.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e057      	b.n	8004094 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fea:	4a2d      	ldr	r2, [pc, #180]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ff4:	e04d      	b.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ffc:	d141      	bne.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ffe:	4b28      	ldr	r3, [pc, #160]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800400a:	d131      	bne.n	8004070 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800400c:	4b24      	ldr	r3, [pc, #144]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004012:	4a23      	ldr	r2, [pc, #140]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004018:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800401c:	4b20      	ldr	r3, [pc, #128]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004024:	4a1e      	ldr	r2, [pc, #120]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004026:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800402a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800402c:	4b1d      	ldr	r3, [pc, #116]	@ (80040a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2232      	movs	r2, #50	@ 0x32
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	4a1c      	ldr	r2, [pc, #112]	@ (80040a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004038:	fba2 2303 	umull	r2, r3, r2, r3
 800403c:	0c9b      	lsrs	r3, r3, #18
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004042:	e002      	b.n	800404a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3b01      	subs	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800404a:	4b15      	ldr	r3, [pc, #84]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004056:	d102      	bne.n	800405e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f2      	bne.n	8004044 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800405e:	4b10      	ldr	r3, [pc, #64]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406a:	d112      	bne.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e011      	b.n	8004094 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004070:	4b0b      	ldr	r3, [pc, #44]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004076:	4a0a      	ldr	r2, [pc, #40]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800407c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004080:	e007      	b.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004082:	4b07      	ldr	r3, [pc, #28]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800408a:	4a05      	ldr	r2, [pc, #20]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004090:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40007000 	.word	0x40007000
 80040a4:	20000040 	.word	0x20000040
 80040a8:	431bde83 	.word	0x431bde83

080040ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040b0:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a04      	ldr	r2, [pc, #16]	@ (80040c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040ba:	6093      	str	r3, [r2, #8]
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40007000 	.word	0x40007000

080040cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e2fe      	b.n	80046dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d075      	beq.n	80041d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ea:	4b97      	ldr	r3, [pc, #604]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f4:	4b94      	ldr	r3, [pc, #592]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b0c      	cmp	r3, #12
 8004102:	d102      	bne.n	800410a <HAL_RCC_OscConfig+0x3e>
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d002      	beq.n	8004110 <HAL_RCC_OscConfig+0x44>
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d10b      	bne.n	8004128 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004110:	4b8d      	ldr	r3, [pc, #564]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d05b      	beq.n	80041d4 <HAL_RCC_OscConfig+0x108>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d157      	bne.n	80041d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e2d9      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004130:	d106      	bne.n	8004140 <HAL_RCC_OscConfig+0x74>
 8004132:	4b85      	ldr	r3, [pc, #532]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a84      	ldr	r2, [pc, #528]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e01d      	b.n	800417c <HAL_RCC_OscConfig+0xb0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004148:	d10c      	bne.n	8004164 <HAL_RCC_OscConfig+0x98>
 800414a:	4b7f      	ldr	r3, [pc, #508]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a7e      	ldr	r2, [pc, #504]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b7c      	ldr	r3, [pc, #496]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a7b      	ldr	r2, [pc, #492]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e00b      	b.n	800417c <HAL_RCC_OscConfig+0xb0>
 8004164:	4b78      	ldr	r3, [pc, #480]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a77      	ldr	r2, [pc, #476]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 800416a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4b75      	ldr	r3, [pc, #468]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a74      	ldr	r2, [pc, #464]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800417a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d013      	beq.n	80041ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fd fb90 	bl	80018a8 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800418c:	f7fd fb8c 	bl	80018a8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	@ 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e29e      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800419e:	4b6a      	ldr	r3, [pc, #424]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0xc0>
 80041aa:	e014      	b.n	80041d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fd fb7c 	bl	80018a8 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fd fb78 	bl	80018a8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	@ 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e28a      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041c6:	4b60      	ldr	r3, [pc, #384]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0xe8>
 80041d2:	e000      	b.n	80041d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d075      	beq.n	80042ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e2:	4b59      	ldr	r3, [pc, #356]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ec:	4b56      	ldr	r3, [pc, #344]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b0c      	cmp	r3, #12
 80041fa:	d102      	bne.n	8004202 <HAL_RCC_OscConfig+0x136>
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d002      	beq.n	8004208 <HAL_RCC_OscConfig+0x13c>
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d11f      	bne.n	8004248 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004208:	4b4f      	ldr	r3, [pc, #316]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_RCC_OscConfig+0x154>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e25d      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004220:	4b49      	ldr	r3, [pc, #292]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	061b      	lsls	r3, r3, #24
 800422e:	4946      	ldr	r1, [pc, #280]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004234:	4b45      	ldr	r3, [pc, #276]	@ (800434c <HAL_RCC_OscConfig+0x280>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7fd fae9 	bl	8001810 <HAL_InitTick>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d043      	beq.n	80042cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e249      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d023      	beq.n	8004298 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004250:	4b3d      	ldr	r3, [pc, #244]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a3c      	ldr	r2, [pc, #240]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800425a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fd fb24 	bl	80018a8 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004264:	f7fd fb20 	bl	80018a8 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e232      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004276:	4b34      	ldr	r3, [pc, #208]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0f0      	beq.n	8004264 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004282:	4b31      	ldr	r3, [pc, #196]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	061b      	lsls	r3, r3, #24
 8004290:	492d      	ldr	r1, [pc, #180]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004292:	4313      	orrs	r3, r2
 8004294:	604b      	str	r3, [r1, #4]
 8004296:	e01a      	b.n	80042ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004298:	4b2b      	ldr	r3, [pc, #172]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a2a      	ldr	r2, [pc, #168]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 800429e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7fd fb00 	bl	80018a8 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ac:	f7fd fafc 	bl	80018a8 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e20e      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042be:	4b22      	ldr	r3, [pc, #136]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0x1e0>
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d041      	beq.n	800435e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01c      	beq.n	800431c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e2:	4b19      	ldr	r3, [pc, #100]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 80042e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042e8:	4a17      	ldr	r2, [pc, #92]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fd fad9 	bl	80018a8 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fa:	f7fd fad5 	bl	80018a8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e1e7      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800430c:	4b0e      	ldr	r3, [pc, #56]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 800430e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0ef      	beq.n	80042fa <HAL_RCC_OscConfig+0x22e>
 800431a:	e020      	b.n	800435e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800431c:	4b0a      	ldr	r3, [pc, #40]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 800431e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004322:	4a09      	ldr	r2, [pc, #36]	@ (8004348 <HAL_RCC_OscConfig+0x27c>)
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fd fabc 	bl	80018a8 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004332:	e00d      	b.n	8004350 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004334:	f7fd fab8 	bl	80018a8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d906      	bls.n	8004350 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e1ca      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004350:	4b8c      	ldr	r3, [pc, #560]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 8004352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1ea      	bne.n	8004334 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80a6 	beq.w	80044b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436c:	2300      	movs	r3, #0
 800436e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004370:	4b84      	ldr	r3, [pc, #528]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_RCC_OscConfig+0x2b4>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <HAL_RCC_OscConfig+0x2b6>
 8004380:	2300      	movs	r3, #0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004386:	4b7f      	ldr	r3, [pc, #508]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438a:	4a7e      	ldr	r2, [pc, #504]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 800438c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004390:	6593      	str	r3, [r2, #88]	@ 0x58
 8004392:	4b7c      	ldr	r3, [pc, #496]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800439e:	2301      	movs	r3, #1
 80043a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a2:	4b79      	ldr	r3, [pc, #484]	@ (8004588 <HAL_RCC_OscConfig+0x4bc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d118      	bne.n	80043e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ae:	4b76      	ldr	r3, [pc, #472]	@ (8004588 <HAL_RCC_OscConfig+0x4bc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a75      	ldr	r2, [pc, #468]	@ (8004588 <HAL_RCC_OscConfig+0x4bc>)
 80043b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ba:	f7fd fa75 	bl	80018a8 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c2:	f7fd fa71 	bl	80018a8 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e183      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004588 <HAL_RCC_OscConfig+0x4bc>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d108      	bne.n	80043fa <HAL_RCC_OscConfig+0x32e>
 80043e8:	4b66      	ldr	r3, [pc, #408]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ee:	4a65      	ldr	r2, [pc, #404]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043f8:	e024      	b.n	8004444 <HAL_RCC_OscConfig+0x378>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b05      	cmp	r3, #5
 8004400:	d110      	bne.n	8004424 <HAL_RCC_OscConfig+0x358>
 8004402:	4b60      	ldr	r3, [pc, #384]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004408:	4a5e      	ldr	r2, [pc, #376]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 800440a:	f043 0304 	orr.w	r3, r3, #4
 800440e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004412:	4b5c      	ldr	r3, [pc, #368]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004418:	4a5a      	ldr	r2, [pc, #360]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004422:	e00f      	b.n	8004444 <HAL_RCC_OscConfig+0x378>
 8004424:	4b57      	ldr	r3, [pc, #348]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442a:	4a56      	ldr	r2, [pc, #344]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 800442c:	f023 0301 	bic.w	r3, r3, #1
 8004430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004434:	4b53      	ldr	r3, [pc, #332]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443a:	4a52      	ldr	r2, [pc, #328]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 800443c:	f023 0304 	bic.w	r3, r3, #4
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d016      	beq.n	800447a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fd fa2c 	bl	80018a8 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fd fa28 	bl	80018a8 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e138      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446a:	4b46      	ldr	r3, [pc, #280]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 800446c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0ed      	beq.n	8004454 <HAL_RCC_OscConfig+0x388>
 8004478:	e015      	b.n	80044a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fd fa15 	bl	80018a8 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004480:	e00a      	b.n	8004498 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fd fa11 	bl	80018a8 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e121      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004498:	4b3a      	ldr	r3, [pc, #232]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1ed      	bne.n	8004482 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044a6:	7ffb      	ldrb	r3, [r7, #31]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d105      	bne.n	80044b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ac:	4b35      	ldr	r3, [pc, #212]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 80044ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b0:	4a34      	ldr	r2, [pc, #208]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d03c      	beq.n	800453e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01c      	beq.n	8004506 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 80044ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fd f9e4 	bl	80018a8 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044e4:	f7fd f9e0 	bl	80018a8 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0f2      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044f6:	4b23      	ldr	r3, [pc, #140]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 80044f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ef      	beq.n	80044e4 <HAL_RCC_OscConfig+0x418>
 8004504:	e01b      	b.n	800453e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004506:	4b1f      	ldr	r3, [pc, #124]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 8004508:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800450c:	4a1d      	ldr	r2, [pc, #116]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004516:	f7fd f9c7 	bl	80018a8 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800451e:	f7fd f9c3 	bl	80018a8 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e0d5      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004530:	4b14      	ldr	r3, [pc, #80]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 8004532:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1ef      	bne.n	800451e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80c9 	beq.w	80046da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004548:	4b0e      	ldr	r3, [pc, #56]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 030c 	and.w	r3, r3, #12
 8004550:	2b0c      	cmp	r3, #12
 8004552:	f000 8083 	beq.w	800465c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d15e      	bne.n	800461c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455e:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a08      	ldr	r2, [pc, #32]	@ (8004584 <HAL_RCC_OscConfig+0x4b8>)
 8004564:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fd f99d 	bl	80018a8 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004570:	e00c      	b.n	800458c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004572:	f7fd f999 	bl	80018a8 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d905      	bls.n	800458c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e0ab      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
 8004584:	40021000 	.word	0x40021000
 8004588:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800458c:	4b55      	ldr	r3, [pc, #340]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ec      	bne.n	8004572 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004598:	4b52      	ldr	r3, [pc, #328]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	4b52      	ldr	r3, [pc, #328]	@ (80046e8 <HAL_RCC_OscConfig+0x61c>)
 800459e:	4013      	ands	r3, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6a11      	ldr	r1, [r2, #32]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045a8:	3a01      	subs	r2, #1
 80045aa:	0112      	lsls	r2, r2, #4
 80045ac:	4311      	orrs	r1, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80045b2:	0212      	lsls	r2, r2, #8
 80045b4:	4311      	orrs	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045ba:	0852      	lsrs	r2, r2, #1
 80045bc:	3a01      	subs	r2, #1
 80045be:	0552      	lsls	r2, r2, #21
 80045c0:	4311      	orrs	r1, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045c6:	0852      	lsrs	r2, r2, #1
 80045c8:	3a01      	subs	r2, #1
 80045ca:	0652      	lsls	r2, r2, #25
 80045cc:	4311      	orrs	r1, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80045d2:	06d2      	lsls	r2, r2, #27
 80045d4:	430a      	orrs	r2, r1
 80045d6:	4943      	ldr	r1, [pc, #268]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045dc:	4b41      	ldr	r3, [pc, #260]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a40      	ldr	r2, [pc, #256]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 80045e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045e8:	4b3e      	ldr	r3, [pc, #248]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4a3d      	ldr	r2, [pc, #244]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 80045ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd f958 	bl	80018a8 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fc:	f7fd f954 	bl	80018a8 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e066      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800460e:	4b35      	ldr	r3, [pc, #212]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x530>
 800461a:	e05e      	b.n	80046da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461c:	4b31      	ldr	r3, [pc, #196]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a30      	ldr	r2, [pc, #192]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 8004622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd f93e 	bl	80018a8 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004630:	f7fd f93a 	bl	80018a8 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e04c      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004642:	4b28      	ldr	r3, [pc, #160]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800464e:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	4924      	ldr	r1, [pc, #144]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 8004654:	4b25      	ldr	r3, [pc, #148]	@ (80046ec <HAL_RCC_OscConfig+0x620>)
 8004656:	4013      	ands	r3, r2
 8004658:	60cb      	str	r3, [r1, #12]
 800465a:	e03e      	b.n	80046da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e039      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004668:	4b1e      	ldr	r3, [pc, #120]	@ (80046e4 <HAL_RCC_OscConfig+0x618>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f003 0203 	and.w	r2, r3, #3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	429a      	cmp	r2, r3
 800467a:	d12c      	bne.n	80046d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	3b01      	subs	r3, #1
 8004688:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d123      	bne.n	80046d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d11b      	bne.n	80046d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d113      	bne.n	80046d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	3b01      	subs	r3, #1
 80046bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d109      	bne.n	80046d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	3b01      	subs	r3, #1
 80046d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d001      	beq.n	80046da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3720      	adds	r7, #32
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000
 80046e8:	019f800c 	.word	0x019f800c
 80046ec:	feeefffc 	.word	0xfeeefffc

080046f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e11e      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004708:	4b91      	ldr	r3, [pc, #580]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d910      	bls.n	8004738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b8e      	ldr	r3, [pc, #568]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 020f 	bic.w	r2, r3, #15
 800471e:	498c      	ldr	r1, [pc, #560]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b8a      	ldr	r3, [pc, #552]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e106      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d073      	beq.n	800482c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d129      	bne.n	80047a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474c:	4b81      	ldr	r3, [pc, #516]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0f4      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800475c:	f000 f99e 	bl	8004a9c <RCC_GetSysClockFreqFromPLLSource>
 8004760:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4a7c      	ldr	r2, [pc, #496]	@ (8004958 <HAL_RCC_ClockConfig+0x268>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d93f      	bls.n	80047ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800476a:	4b7a      	ldr	r3, [pc, #488]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800477e:	2b00      	cmp	r3, #0
 8004780:	d033      	beq.n	80047ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004786:	2b00      	cmp	r3, #0
 8004788:	d12f      	bne.n	80047ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800478a:	4b72      	ldr	r3, [pc, #456]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004792:	4a70      	ldr	r2, [pc, #448]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004798:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800479a:	2380      	movs	r3, #128	@ 0x80
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e024      	b.n	80047ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0c6      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b8:	4b66      	ldr	r3, [pc, #408]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0be      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80047c8:	f000 f8ce 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4a61      	ldr	r2, [pc, #388]	@ (8004958 <HAL_RCC_ClockConfig+0x268>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d909      	bls.n	80047ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047de:	4a5d      	ldr	r2, [pc, #372]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 80047e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047e6:	2380      	movs	r3, #128	@ 0x80
 80047e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ea:	4b5a      	ldr	r3, [pc, #360]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f023 0203 	bic.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4957      	ldr	r1, [pc, #348]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fc:	f7fd f854 	bl	80018a8 <HAL_GetTick>
 8004800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004802:	e00a      	b.n	800481a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004804:	f7fd f850 	bl	80018a8 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e095      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481a:	4b4e      	ldr	r3, [pc, #312]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 020c 	and.w	r2, r3, #12
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	429a      	cmp	r2, r3
 800482a:	d1eb      	bne.n	8004804 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d023      	beq.n	8004880 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004844:	4b43      	ldr	r3, [pc, #268]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4a42      	ldr	r2, [pc, #264]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 800484a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800484e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800485c:	4b3d      	ldr	r3, [pc, #244]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004864:	4a3b      	ldr	r2, [pc, #236]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004866:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800486a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800486c:	4b39      	ldr	r3, [pc, #228]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	4936      	ldr	r1, [pc, #216]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
 800487e:	e008      	b.n	8004892 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b80      	cmp	r3, #128	@ 0x80
 8004884:	d105      	bne.n	8004892 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004886:	4b33      	ldr	r3, [pc, #204]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	4a32      	ldr	r2, [pc, #200]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 800488c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004890:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004892:	4b2f      	ldr	r3, [pc, #188]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d21d      	bcs.n	80048dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 020f 	bic.w	r2, r3, #15
 80048a8:	4929      	ldr	r1, [pc, #164]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048b0:	f7fc fffa 	bl	80018a8 <HAL_GetTick>
 80048b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b8:	f7fc fff6 	bl	80018a8 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e03b      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d1ed      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4917      	ldr	r1, [pc, #92]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004906:	4b13      	ldr	r3, [pc, #76]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	490f      	ldr	r1, [pc, #60]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800491a:	f000 f825 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 800491e:	4602      	mov	r2, r0
 8004920:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	490c      	ldr	r1, [pc, #48]	@ (800495c <HAL_RCC_ClockConfig+0x26c>)
 800492c:	5ccb      	ldrb	r3, [r1, r3]
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a0a      	ldr	r2, [pc, #40]	@ (8004960 <HAL_RCC_ClockConfig+0x270>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800493a:	4b0a      	ldr	r3, [pc, #40]	@ (8004964 <HAL_RCC_ClockConfig+0x274>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fc ff66 	bl	8001810 <HAL_InitTick>
 8004944:	4603      	mov	r3, r0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40022000 	.word	0x40022000
 8004954:	40021000 	.word	0x40021000
 8004958:	04c4b400 	.word	0x04c4b400
 800495c:	08005d10 	.word	0x08005d10
 8004960:	20000040 	.word	0x20000040
 8004964:	20000044 	.word	0x20000044

08004968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800496e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
 8004976:	2b04      	cmp	r3, #4
 8004978:	d102      	bne.n	8004980 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800497a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	e047      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004980:	4b27      	ldr	r3, [pc, #156]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	2b08      	cmp	r3, #8
 800498a:	d102      	bne.n	8004992 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800498c:	4b26      	ldr	r3, [pc, #152]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	e03e      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004992:	4b23      	ldr	r3, [pc, #140]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d136      	bne.n	8004a0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800499e:	4b20      	ldr	r3, [pc, #128]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	3301      	adds	r3, #1
 80049b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	4a16      	ldr	r2, [pc, #88]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c6:	68d2      	ldr	r2, [r2, #12]
 80049c8:	0a12      	lsrs	r2, r2, #8
 80049ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	617b      	str	r3, [r7, #20]
      break;
 80049d4:	e00c      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049d6:	4a13      	ldr	r2, [pc, #76]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	4a10      	ldr	r2, [pc, #64]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e0:	68d2      	ldr	r2, [r2, #12]
 80049e2:	0a12      	lsrs	r2, r2, #8
 80049e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	617b      	str	r3, [r7, #20]
      break;
 80049ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	0e5b      	lsrs	r3, r3, #25
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	3301      	adds	r3, #1
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e001      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a10:	693b      	ldr	r3, [r7, #16]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
 8004a24:	00f42400 	.word	0x00f42400
 8004a28:	016e3600 	.word	0x016e3600

08004a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a30:	4b03      	ldr	r3, [pc, #12]	@ (8004a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a32:	681b      	ldr	r3, [r3, #0]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000040 	.word	0x20000040

08004a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a48:	f7ff fff0 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4904      	ldr	r1, [pc, #16]	@ (8004a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	08005d20 	.word	0x08005d20

08004a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a74:	f7ff ffda 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	0adb      	lsrs	r3, r3, #11
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	4904      	ldr	r1, [pc, #16]	@ (8004a98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a86:	5ccb      	ldrb	r3, [r1, r3]
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40021000 	.word	0x40021000
 8004a98:	08005d20 	.word	0x08005d20

08004a9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aac:	4b1b      	ldr	r3, [pc, #108]	@ (8004b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d10c      	bne.n	8004ada <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ac0:	4a17      	ldr	r2, [pc, #92]	@ (8004b20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	4a14      	ldr	r2, [pc, #80]	@ (8004b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aca:	68d2      	ldr	r2, [r2, #12]
 8004acc:	0a12      	lsrs	r2, r2, #8
 8004ace:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	617b      	str	r3, [r7, #20]
    break;
 8004ad8:	e00c      	b.n	8004af4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ada:	4a12      	ldr	r2, [pc, #72]	@ (8004b24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8004b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ae4:	68d2      	ldr	r2, [r2, #12]
 8004ae6:	0a12      	lsrs	r2, r2, #8
 8004ae8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004aec:	fb02 f303 	mul.w	r3, r2, r3
 8004af0:	617b      	str	r3, [r7, #20]
    break;
 8004af2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004af4:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	0e5b      	lsrs	r3, r3, #25
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	3301      	adds	r3, #1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b0e:	687b      	ldr	r3, [r7, #4]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	016e3600 	.word	0x016e3600
 8004b24:	00f42400 	.word	0x00f42400

08004b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b30:	2300      	movs	r3, #0
 8004b32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b34:	2300      	movs	r3, #0
 8004b36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8098 	beq.w	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b46:	2300      	movs	r3, #0
 8004b48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b4a:	4b43      	ldr	r3, [pc, #268]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10d      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b56:	4b40      	ldr	r3, [pc, #256]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b62:	4b3d      	ldr	r3, [pc, #244]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b72:	4b3a      	ldr	r3, [pc, #232]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a39      	ldr	r2, [pc, #228]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b7e:	f7fc fe93 	bl	80018a8 <HAL_GetTick>
 8004b82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b84:	e009      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b86:	f7fc fe8f 	bl	80018a8 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d902      	bls.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	74fb      	strb	r3, [r7, #19]
        break;
 8004b98:	e005      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b9a:	4b30      	ldr	r3, [pc, #192]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0ef      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ba6:	7cfb      	ldrb	r3, [r7, #19]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d159      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bac:	4b2a      	ldr	r3, [pc, #168]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01e      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d019      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bc8:	4b23      	ldr	r3, [pc, #140]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bd4:	4b20      	ldr	r3, [pc, #128]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bda:	4a1f      	ldr	r2, [pc, #124]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004be4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bea:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bf4:	4a18      	ldr	r2, [pc, #96]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fc fe4f 	bl	80018a8 <HAL_GetTick>
 8004c0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0c:	e00b      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f7fc fe4b 	bl	80018a8 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d902      	bls.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	74fb      	strb	r3, [r7, #19]
            break;
 8004c24:	e006      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c26:	4b0c      	ldr	r3, [pc, #48]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ec      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c3a:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c48:	4903      	ldr	r1, [pc, #12]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c50:	e008      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c52:	7cfb      	ldrb	r3, [r7, #19]
 8004c54:	74bb      	strb	r3, [r7, #18]
 8004c56:	e005      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	7cfb      	ldrb	r3, [r7, #19]
 8004c62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c64:	7c7b      	ldrb	r3, [r7, #17]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d105      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6a:	4ba7      	ldr	r3, [pc, #668]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6e:	4aa6      	ldr	r2, [pc, #664]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c82:	4ba1      	ldr	r3, [pc, #644]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c88:	f023 0203 	bic.w	r2, r3, #3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	499d      	ldr	r1, [pc, #628]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ca4:	4b98      	ldr	r3, [pc, #608]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004caa:	f023 020c 	bic.w	r2, r3, #12
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	4995      	ldr	r1, [pc, #596]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cc6:	4b90      	ldr	r3, [pc, #576]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ccc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	498c      	ldr	r1, [pc, #560]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ce8:	4b87      	ldr	r3, [pc, #540]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	4984      	ldr	r1, [pc, #528]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0310 	and.w	r3, r3, #16
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	497b      	ldr	r1, [pc, #492]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d2c:	4b76      	ldr	r3, [pc, #472]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	4973      	ldr	r1, [pc, #460]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d4e:	4b6e      	ldr	r3, [pc, #440]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	496a      	ldr	r1, [pc, #424]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d70:	4b65      	ldr	r3, [pc, #404]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	4962      	ldr	r1, [pc, #392]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d92:	4b5d      	ldr	r3, [pc, #372]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	4959      	ldr	r1, [pc, #356]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004db4:	4b54      	ldr	r3, [pc, #336]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dba:	f023 0203 	bic.w	r2, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc2:	4951      	ldr	r1, [pc, #324]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ddc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	4948      	ldr	r1, [pc, #288]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d015      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004df8:	4b43      	ldr	r3, [pc, #268]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e06:	4940      	ldr	r1, [pc, #256]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e16:	d105      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e18:	4b3b      	ldr	r3, [pc, #236]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d015      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e30:	4b35      	ldr	r3, [pc, #212]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3e:	4932      	ldr	r1, [pc, #200]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e4e:	d105      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e50:	4b2d      	ldr	r3, [pc, #180]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4a2c      	ldr	r2, [pc, #176]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e5a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d015      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e68:	4b27      	ldr	r3, [pc, #156]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e76:	4924      	ldr	r1, [pc, #144]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e86:	d105      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e88:	4b1f      	ldr	r3, [pc, #124]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d015      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ea0:	4b19      	ldr	r3, [pc, #100]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eae:	4916      	ldr	r1, [pc, #88]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ebe:	d105      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec0:	4b11      	ldr	r3, [pc, #68]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4a10      	ldr	r2, [pc, #64]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d019      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ede:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	4908      	ldr	r1, [pc, #32]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ef6:	d109      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ef8:	4b03      	ldr	r3, [pc, #12]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	4a02      	ldr	r2, [pc, #8]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f02:	60d3      	str	r3, [r2, #12]
 8004f04:	e002      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f06:	bf00      	nop
 8004f08:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d015      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f18:	4b29      	ldr	r3, [pc, #164]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	4926      	ldr	r1, [pc, #152]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f36:	d105      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f38:	4b21      	ldr	r3, [pc, #132]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4a20      	ldr	r2, [pc, #128]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f42:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d015      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f50:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f56:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f5e:	4918      	ldr	r1, [pc, #96]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6e:	d105      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f70:	4b13      	ldr	r3, [pc, #76]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4a12      	ldr	r2, [pc, #72]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f7a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d015      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f88:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f96:	490a      	ldr	r1, [pc, #40]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fa6:	d105      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa8:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4a04      	ldr	r2, [pc, #16]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000

08004fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e042      	b.n	800505c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d106      	bne.n	8004fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7fc faed 	bl	80015c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2224      	movs	r2, #36	@ 0x24
 8004ff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0201 	bic.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fb24 	bl	800565c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f825 	bl	8005064 <UART_SetConfig>
 800501a:	4603      	mov	r3, r0
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e01b      	b.n	800505c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fba3 	bl	80057a0 <UART_CheckIdleState>
 800505a:	4603      	mov	r3, r0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005068:	b08c      	sub	sp, #48	@ 0x30
 800506a:	af00      	add	r7, sp, #0
 800506c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	431a      	orrs	r2, r3
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	431a      	orrs	r2, r3
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	4313      	orrs	r3, r2
 800508a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4baa      	ldr	r3, [pc, #680]	@ (800533c <UART_SetConfig+0x2d8>)
 8005094:	4013      	ands	r3, r2
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800509c:	430b      	orrs	r3, r1
 800509e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a9f      	ldr	r2, [pc, #636]	@ (8005340 <UART_SetConfig+0x2dc>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050cc:	4313      	orrs	r3, r2
 80050ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80050da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ee:	f023 010f 	bic.w	r1, r3, #15
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a90      	ldr	r2, [pc, #576]	@ (8005344 <UART_SetConfig+0x2e0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d125      	bne.n	8005154 <UART_SetConfig+0xf0>
 8005108:	4b8f      	ldr	r3, [pc, #572]	@ (8005348 <UART_SetConfig+0x2e4>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b03      	cmp	r3, #3
 8005114:	d81a      	bhi.n	800514c <UART_SetConfig+0xe8>
 8005116:	a201      	add	r2, pc, #4	@ (adr r2, 800511c <UART_SetConfig+0xb8>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	0800512d 	.word	0x0800512d
 8005120:	0800513d 	.word	0x0800513d
 8005124:	08005135 	.word	0x08005135
 8005128:	08005145 	.word	0x08005145
 800512c:	2301      	movs	r3, #1
 800512e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005132:	e116      	b.n	8005362 <UART_SetConfig+0x2fe>
 8005134:	2302      	movs	r3, #2
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800513a:	e112      	b.n	8005362 <UART_SetConfig+0x2fe>
 800513c:	2304      	movs	r3, #4
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005142:	e10e      	b.n	8005362 <UART_SetConfig+0x2fe>
 8005144:	2308      	movs	r3, #8
 8005146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800514a:	e10a      	b.n	8005362 <UART_SetConfig+0x2fe>
 800514c:	2310      	movs	r3, #16
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005152:	e106      	b.n	8005362 <UART_SetConfig+0x2fe>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a7c      	ldr	r2, [pc, #496]	@ (800534c <UART_SetConfig+0x2e8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d138      	bne.n	80051d0 <UART_SetConfig+0x16c>
 800515e:	4b7a      	ldr	r3, [pc, #488]	@ (8005348 <UART_SetConfig+0x2e4>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	2b0c      	cmp	r3, #12
 800516a:	d82d      	bhi.n	80051c8 <UART_SetConfig+0x164>
 800516c:	a201      	add	r2, pc, #4	@ (adr r2, 8005174 <UART_SetConfig+0x110>)
 800516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	080051a9 	.word	0x080051a9
 8005178:	080051c9 	.word	0x080051c9
 800517c:	080051c9 	.word	0x080051c9
 8005180:	080051c9 	.word	0x080051c9
 8005184:	080051b9 	.word	0x080051b9
 8005188:	080051c9 	.word	0x080051c9
 800518c:	080051c9 	.word	0x080051c9
 8005190:	080051c9 	.word	0x080051c9
 8005194:	080051b1 	.word	0x080051b1
 8005198:	080051c9 	.word	0x080051c9
 800519c:	080051c9 	.word	0x080051c9
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051c1 	.word	0x080051c1
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ae:	e0d8      	b.n	8005362 <UART_SetConfig+0x2fe>
 80051b0:	2302      	movs	r3, #2
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051b6:	e0d4      	b.n	8005362 <UART_SetConfig+0x2fe>
 80051b8:	2304      	movs	r3, #4
 80051ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051be:	e0d0      	b.n	8005362 <UART_SetConfig+0x2fe>
 80051c0:	2308      	movs	r3, #8
 80051c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051c6:	e0cc      	b.n	8005362 <UART_SetConfig+0x2fe>
 80051c8:	2310      	movs	r3, #16
 80051ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ce:	e0c8      	b.n	8005362 <UART_SetConfig+0x2fe>
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a5e      	ldr	r2, [pc, #376]	@ (8005350 <UART_SetConfig+0x2ec>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d125      	bne.n	8005226 <UART_SetConfig+0x1c2>
 80051da:	4b5b      	ldr	r3, [pc, #364]	@ (8005348 <UART_SetConfig+0x2e4>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80051e4:	2b30      	cmp	r3, #48	@ 0x30
 80051e6:	d016      	beq.n	8005216 <UART_SetConfig+0x1b2>
 80051e8:	2b30      	cmp	r3, #48	@ 0x30
 80051ea:	d818      	bhi.n	800521e <UART_SetConfig+0x1ba>
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d00a      	beq.n	8005206 <UART_SetConfig+0x1a2>
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d814      	bhi.n	800521e <UART_SetConfig+0x1ba>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <UART_SetConfig+0x19a>
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d008      	beq.n	800520e <UART_SetConfig+0x1aa>
 80051fc:	e00f      	b.n	800521e <UART_SetConfig+0x1ba>
 80051fe:	2300      	movs	r3, #0
 8005200:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005204:	e0ad      	b.n	8005362 <UART_SetConfig+0x2fe>
 8005206:	2302      	movs	r3, #2
 8005208:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800520c:	e0a9      	b.n	8005362 <UART_SetConfig+0x2fe>
 800520e:	2304      	movs	r3, #4
 8005210:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005214:	e0a5      	b.n	8005362 <UART_SetConfig+0x2fe>
 8005216:	2308      	movs	r3, #8
 8005218:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800521c:	e0a1      	b.n	8005362 <UART_SetConfig+0x2fe>
 800521e:	2310      	movs	r3, #16
 8005220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005224:	e09d      	b.n	8005362 <UART_SetConfig+0x2fe>
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a4a      	ldr	r2, [pc, #296]	@ (8005354 <UART_SetConfig+0x2f0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d125      	bne.n	800527c <UART_SetConfig+0x218>
 8005230:	4b45      	ldr	r3, [pc, #276]	@ (8005348 <UART_SetConfig+0x2e4>)
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005236:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800523a:	2bc0      	cmp	r3, #192	@ 0xc0
 800523c:	d016      	beq.n	800526c <UART_SetConfig+0x208>
 800523e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005240:	d818      	bhi.n	8005274 <UART_SetConfig+0x210>
 8005242:	2b80      	cmp	r3, #128	@ 0x80
 8005244:	d00a      	beq.n	800525c <UART_SetConfig+0x1f8>
 8005246:	2b80      	cmp	r3, #128	@ 0x80
 8005248:	d814      	bhi.n	8005274 <UART_SetConfig+0x210>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <UART_SetConfig+0x1f0>
 800524e:	2b40      	cmp	r3, #64	@ 0x40
 8005250:	d008      	beq.n	8005264 <UART_SetConfig+0x200>
 8005252:	e00f      	b.n	8005274 <UART_SetConfig+0x210>
 8005254:	2300      	movs	r3, #0
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800525a:	e082      	b.n	8005362 <UART_SetConfig+0x2fe>
 800525c:	2302      	movs	r3, #2
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005262:	e07e      	b.n	8005362 <UART_SetConfig+0x2fe>
 8005264:	2304      	movs	r3, #4
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526a:	e07a      	b.n	8005362 <UART_SetConfig+0x2fe>
 800526c:	2308      	movs	r3, #8
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005272:	e076      	b.n	8005362 <UART_SetConfig+0x2fe>
 8005274:	2310      	movs	r3, #16
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527a:	e072      	b.n	8005362 <UART_SetConfig+0x2fe>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a35      	ldr	r2, [pc, #212]	@ (8005358 <UART_SetConfig+0x2f4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d12a      	bne.n	80052dc <UART_SetConfig+0x278>
 8005286:	4b30      	ldr	r3, [pc, #192]	@ (8005348 <UART_SetConfig+0x2e4>)
 8005288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005294:	d01a      	beq.n	80052cc <UART_SetConfig+0x268>
 8005296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800529a:	d81b      	bhi.n	80052d4 <UART_SetConfig+0x270>
 800529c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052a0:	d00c      	beq.n	80052bc <UART_SetConfig+0x258>
 80052a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052a6:	d815      	bhi.n	80052d4 <UART_SetConfig+0x270>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <UART_SetConfig+0x250>
 80052ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052b0:	d008      	beq.n	80052c4 <UART_SetConfig+0x260>
 80052b2:	e00f      	b.n	80052d4 <UART_SetConfig+0x270>
 80052b4:	2300      	movs	r3, #0
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ba:	e052      	b.n	8005362 <UART_SetConfig+0x2fe>
 80052bc:	2302      	movs	r3, #2
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c2:	e04e      	b.n	8005362 <UART_SetConfig+0x2fe>
 80052c4:	2304      	movs	r3, #4
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ca:	e04a      	b.n	8005362 <UART_SetConfig+0x2fe>
 80052cc:	2308      	movs	r3, #8
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d2:	e046      	b.n	8005362 <UART_SetConfig+0x2fe>
 80052d4:	2310      	movs	r3, #16
 80052d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052da:	e042      	b.n	8005362 <UART_SetConfig+0x2fe>
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a17      	ldr	r2, [pc, #92]	@ (8005340 <UART_SetConfig+0x2dc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d13a      	bne.n	800535c <UART_SetConfig+0x2f8>
 80052e6:	4b18      	ldr	r3, [pc, #96]	@ (8005348 <UART_SetConfig+0x2e4>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80052f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052f4:	d01a      	beq.n	800532c <UART_SetConfig+0x2c8>
 80052f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052fa:	d81b      	bhi.n	8005334 <UART_SetConfig+0x2d0>
 80052fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005300:	d00c      	beq.n	800531c <UART_SetConfig+0x2b8>
 8005302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005306:	d815      	bhi.n	8005334 <UART_SetConfig+0x2d0>
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <UART_SetConfig+0x2b0>
 800530c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005310:	d008      	beq.n	8005324 <UART_SetConfig+0x2c0>
 8005312:	e00f      	b.n	8005334 <UART_SetConfig+0x2d0>
 8005314:	2300      	movs	r3, #0
 8005316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800531a:	e022      	b.n	8005362 <UART_SetConfig+0x2fe>
 800531c:	2302      	movs	r3, #2
 800531e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005322:	e01e      	b.n	8005362 <UART_SetConfig+0x2fe>
 8005324:	2304      	movs	r3, #4
 8005326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800532a:	e01a      	b.n	8005362 <UART_SetConfig+0x2fe>
 800532c:	2308      	movs	r3, #8
 800532e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005332:	e016      	b.n	8005362 <UART_SetConfig+0x2fe>
 8005334:	2310      	movs	r3, #16
 8005336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800533a:	e012      	b.n	8005362 <UART_SetConfig+0x2fe>
 800533c:	cfff69f3 	.word	0xcfff69f3
 8005340:	40008000 	.word	0x40008000
 8005344:	40013800 	.word	0x40013800
 8005348:	40021000 	.word	0x40021000
 800534c:	40004400 	.word	0x40004400
 8005350:	40004800 	.word	0x40004800
 8005354:	40004c00 	.word	0x40004c00
 8005358:	40005000 	.word	0x40005000
 800535c:	2310      	movs	r3, #16
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4aae      	ldr	r2, [pc, #696]	@ (8005620 <UART_SetConfig+0x5bc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	f040 8097 	bne.w	800549c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800536e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005372:	2b08      	cmp	r3, #8
 8005374:	d823      	bhi.n	80053be <UART_SetConfig+0x35a>
 8005376:	a201      	add	r2, pc, #4	@ (adr r2, 800537c <UART_SetConfig+0x318>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	080053a1 	.word	0x080053a1
 8005380:	080053bf 	.word	0x080053bf
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053bf 	.word	0x080053bf
 800538c:	080053af 	.word	0x080053af
 8005390:	080053bf 	.word	0x080053bf
 8005394:	080053bf 	.word	0x080053bf
 8005398:	080053bf 	.word	0x080053bf
 800539c:	080053b7 	.word	0x080053b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a0:	f7ff fb50 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 80053a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053a6:	e010      	b.n	80053ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a8:	4b9e      	ldr	r3, [pc, #632]	@ (8005624 <UART_SetConfig+0x5c0>)
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053ac:	e00d      	b.n	80053ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ae:	f7ff fadb 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 80053b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053b4:	e009      	b.n	80053ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053bc:	e005      	b.n	80053ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8130 	beq.w	8005632 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	4a94      	ldr	r2, [pc, #592]	@ (8005628 <UART_SetConfig+0x5c4>)
 80053d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053dc:	461a      	mov	r2, r3
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	4413      	add	r3, r2
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d305      	bcc.n	8005402 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d903      	bls.n	800540a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005408:	e113      	b.n	8005632 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	2200      	movs	r2, #0
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	60fa      	str	r2, [r7, #12]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005416:	4a84      	ldr	r2, [pc, #528]	@ (8005628 <UART_SetConfig+0x5c4>)
 8005418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800541c:	b29b      	uxth	r3, r3
 800541e:	2200      	movs	r2, #0
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005428:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800542c:	f7fb fb12 	bl	8000a54 <__aeabi_uldivmod>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4610      	mov	r0, r2
 8005436:	4619      	mov	r1, r3
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	020b      	lsls	r3, r1, #8
 8005442:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005446:	0202      	lsls	r2, r0, #8
 8005448:	6979      	ldr	r1, [r7, #20]
 800544a:	6849      	ldr	r1, [r1, #4]
 800544c:	0849      	lsrs	r1, r1, #1
 800544e:	2000      	movs	r0, #0
 8005450:	460c      	mov	r4, r1
 8005452:	4605      	mov	r5, r0
 8005454:	eb12 0804 	adds.w	r8, r2, r4
 8005458:	eb43 0905 	adc.w	r9, r3, r5
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	469a      	mov	sl, r3
 8005464:	4693      	mov	fp, r2
 8005466:	4652      	mov	r2, sl
 8005468:	465b      	mov	r3, fp
 800546a:	4640      	mov	r0, r8
 800546c:	4649      	mov	r1, r9
 800546e:	f7fb faf1 	bl	8000a54 <__aeabi_uldivmod>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4613      	mov	r3, r2
 8005478:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005480:	d308      	bcc.n	8005494 <UART_SetConfig+0x430>
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005488:	d204      	bcs.n	8005494 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a3a      	ldr	r2, [r7, #32]
 8005490:	60da      	str	r2, [r3, #12]
 8005492:	e0ce      	b.n	8005632 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800549a:	e0ca      	b.n	8005632 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054a4:	d166      	bne.n	8005574 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80054a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d827      	bhi.n	80054fe <UART_SetConfig+0x49a>
 80054ae:	a201      	add	r2, pc, #4	@ (adr r2, 80054b4 <UART_SetConfig+0x450>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054d9 	.word	0x080054d9
 80054b8:	080054e1 	.word	0x080054e1
 80054bc:	080054e9 	.word	0x080054e9
 80054c0:	080054ff 	.word	0x080054ff
 80054c4:	080054ef 	.word	0x080054ef
 80054c8:	080054ff 	.word	0x080054ff
 80054cc:	080054ff 	.word	0x080054ff
 80054d0:	080054ff 	.word	0x080054ff
 80054d4:	080054f7 	.word	0x080054f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d8:	f7ff fab4 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 80054dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054de:	e014      	b.n	800550a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054e0:	f7ff fac6 	bl	8004a70 <HAL_RCC_GetPCLK2Freq>
 80054e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054e6:	e010      	b.n	800550a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e8:	4b4e      	ldr	r3, [pc, #312]	@ (8005624 <UART_SetConfig+0x5c0>)
 80054ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054ec:	e00d      	b.n	800550a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ee:	f7ff fa3b 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 80054f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054f4:	e009      	b.n	800550a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054fc:	e005      	b.n	800550a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005508:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8090 	beq.w	8005632 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	4a44      	ldr	r2, [pc, #272]	@ (8005628 <UART_SetConfig+0x5c4>)
 8005518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800551c:	461a      	mov	r2, r3
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	fbb3 f3f2 	udiv	r3, r3, r2
 8005524:	005a      	lsls	r2, r3, #1
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	441a      	add	r2, r3
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	fbb2 f3f3 	udiv	r3, r2, r3
 8005536:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	2b0f      	cmp	r3, #15
 800553c:	d916      	bls.n	800556c <UART_SetConfig+0x508>
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005544:	d212      	bcs.n	800556c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f023 030f 	bic.w	r3, r3, #15
 800554e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	b29b      	uxth	r3, r3
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	b29a      	uxth	r2, r3
 800555c:	8bfb      	ldrh	r3, [r7, #30]
 800555e:	4313      	orrs	r3, r2
 8005560:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	8bfa      	ldrh	r2, [r7, #30]
 8005568:	60da      	str	r2, [r3, #12]
 800556a:	e062      	b.n	8005632 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005572:	e05e      	b.n	8005632 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005574:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005578:	2b08      	cmp	r3, #8
 800557a:	d828      	bhi.n	80055ce <UART_SetConfig+0x56a>
 800557c:	a201      	add	r2, pc, #4	@ (adr r2, 8005584 <UART_SetConfig+0x520>)
 800557e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005582:	bf00      	nop
 8005584:	080055a9 	.word	0x080055a9
 8005588:	080055b1 	.word	0x080055b1
 800558c:	080055b9 	.word	0x080055b9
 8005590:	080055cf 	.word	0x080055cf
 8005594:	080055bf 	.word	0x080055bf
 8005598:	080055cf 	.word	0x080055cf
 800559c:	080055cf 	.word	0x080055cf
 80055a0:	080055cf 	.word	0x080055cf
 80055a4:	080055c7 	.word	0x080055c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a8:	f7ff fa4c 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 80055ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055ae:	e014      	b.n	80055da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b0:	f7ff fa5e 	bl	8004a70 <HAL_RCC_GetPCLK2Freq>
 80055b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055b6:	e010      	b.n	80055da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005624 <UART_SetConfig+0x5c0>)
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055bc:	e00d      	b.n	80055da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055be:	f7ff f9d3 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 80055c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055c4:	e009      	b.n	80055da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055cc:	e005      	b.n	80055da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055d8:	bf00      	nop
    }

    if (pclk != 0U)
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d028      	beq.n	8005632 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e4:	4a10      	ldr	r2, [pc, #64]	@ (8005628 <UART_SetConfig+0x5c4>)
 80055e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ea:	461a      	mov	r2, r3
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	441a      	add	r2, r3
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005602:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	2b0f      	cmp	r3, #15
 8005608:	d910      	bls.n	800562c <UART_SetConfig+0x5c8>
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005610:	d20c      	bcs.n	800562c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	b29a      	uxth	r2, r3
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60da      	str	r2, [r3, #12]
 800561c:	e009      	b.n	8005632 <UART_SetConfig+0x5ce>
 800561e:	bf00      	nop
 8005620:	40008000 	.word	0x40008000
 8005624:	00f42400 	.word	0x00f42400
 8005628:	08005d28 	.word	0x08005d28
      }
      else
      {
        ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2201      	movs	r2, #1
 8005636:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2201      	movs	r2, #1
 800563e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2200      	movs	r2, #0
 8005646:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2200      	movs	r2, #0
 800564c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800564e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005652:	4618      	mov	r0, r3
 8005654:	3730      	adds	r7, #48	@ 0x30
 8005656:	46bd      	mov	sp, r7
 8005658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800565c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01a      	beq.n	8005772 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800575a:	d10a      	bne.n	8005772 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
  }
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b098      	sub	sp, #96	@ 0x60
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057b0:	f7fc f87a 	bl	80018a8 <HAL_GetTick>
 80057b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d12f      	bne.n	8005824 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057cc:	2200      	movs	r2, #0
 80057ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f88e 	bl	80058f4 <UART_WaitOnFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d022      	beq.n	8005824 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80057fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005802:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800580a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e6      	bne.n	80057de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e063      	b.n	80058ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b04      	cmp	r3, #4
 8005830:	d149      	bne.n	80058c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005832:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800583a:	2200      	movs	r2, #0
 800583c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f857 	bl	80058f4 <UART_WaitOnFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d03c      	beq.n	80058c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	623b      	str	r3, [r7, #32]
   return(result);
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005860:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800586a:	633b      	str	r3, [r7, #48]	@ 0x30
 800586c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e6      	bne.n	800584c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	60fb      	str	r3, [r7, #12]
   return(result);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800589e:	61fa      	str	r2, [r7, #28]
 80058a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	69b9      	ldr	r1, [r7, #24]
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	617b      	str	r3, [r7, #20]
   return(result);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e5      	bne.n	800587e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e012      	b.n	80058ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3758      	adds	r7, #88	@ 0x58
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	4613      	mov	r3, r2
 8005902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005904:	e04f      	b.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d04b      	beq.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590e:	f7fb ffcb 	bl	80018a8 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <UART_WaitOnFlagUntilTimeout+0x30>
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e04e      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	d037      	beq.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b80      	cmp	r3, #128	@ 0x80
 800593a:	d034      	beq.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b40      	cmp	r3, #64	@ 0x40
 8005940:	d031      	beq.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b08      	cmp	r3, #8
 800594e:	d110      	bne.n	8005972 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2208      	movs	r2, #8
 8005956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f838 	bl	80059ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2208      	movs	r2, #8
 8005962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e029      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800597c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005980:	d111      	bne.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800598a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f81e 	bl	80059ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e00f      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69da      	ldr	r2, [r3, #28]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4013      	ands	r3, r2
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	bf0c      	ite	eq
 80059b6:	2301      	moveq	r3, #1
 80059b8:	2300      	movne	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d0a0      	beq.n	8005906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b095      	sub	sp, #84	@ 0x54
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80059f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e6      	bne.n	80059d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e3      	bne.n	8005a08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d118      	bne.n	8005a7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f023 0310 	bic.w	r3, r3, #16
 8005a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6979      	ldr	r1, [r7, #20]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	613b      	str	r3, [r7, #16]
   return(result);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e6      	bne.n	8005a48 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a8e:	bf00      	nop
 8005a90:	3754      	adds	r7, #84	@ 0x54
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e027      	b.n	8005b00 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2224      	movs	r2, #36	@ 0x24
 8005abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ade:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e02d      	b.n	8005b80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2224      	movs	r2, #36	@ 0x24
 8005b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f84f 	bl	8005c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e02d      	b.n	8005bfc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2224      	movs	r2, #36	@ 0x24
 8005bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f811 	bl	8005c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d108      	bne.n	8005c26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c24:	e031      	b.n	8005c8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c26:	2308      	movs	r3, #8
 8005c28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c2a:	2308      	movs	r3, #8
 8005c2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	0e5b      	lsrs	r3, r3, #25
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	0f5b      	lsrs	r3, r3, #29
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	7b3a      	ldrb	r2, [r7, #12]
 8005c52:	4911      	ldr	r1, [pc, #68]	@ (8005c98 <UARTEx_SetNbDataToProcess+0x94>)
 8005c54:	5c8a      	ldrb	r2, [r1, r2]
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c5a:	7b3a      	ldrb	r2, [r7, #12]
 8005c5c:	490f      	ldr	r1, [pc, #60]	@ (8005c9c <UARTEx_SetNbDataToProcess+0x98>)
 8005c5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c60:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	7b7a      	ldrb	r2, [r7, #13]
 8005c70:	4909      	ldr	r1, [pc, #36]	@ (8005c98 <UARTEx_SetNbDataToProcess+0x94>)
 8005c72:	5c8a      	ldrb	r2, [r1, r2]
 8005c74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c78:	7b7a      	ldrb	r2, [r7, #13]
 8005c7a:	4908      	ldr	r1, [pc, #32]	@ (8005c9c <UARTEx_SetNbDataToProcess+0x98>)
 8005c7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	08005d40 	.word	0x08005d40
 8005c9c:	08005d48 	.word	0x08005d48

08005ca0 <memset>:
 8005ca0:	4402      	add	r2, r0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d100      	bne.n	8005caa <memset+0xa>
 8005ca8:	4770      	bx	lr
 8005caa:	f803 1b01 	strb.w	r1, [r3], #1
 8005cae:	e7f9      	b.n	8005ca4 <memset+0x4>

08005cb0 <__libc_init_array>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ce8 <__libc_init_array+0x38>)
 8005cb4:	4c0d      	ldr	r4, [pc, #52]	@ (8005cec <__libc_init_array+0x3c>)
 8005cb6:	1b64      	subs	r4, r4, r5
 8005cb8:	10a4      	asrs	r4, r4, #2
 8005cba:	2600      	movs	r6, #0
 8005cbc:	42a6      	cmp	r6, r4
 8005cbe:	d109      	bne.n	8005cd4 <__libc_init_array+0x24>
 8005cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8005cf0 <__libc_init_array+0x40>)
 8005cc2:	4c0c      	ldr	r4, [pc, #48]	@ (8005cf4 <__libc_init_array+0x44>)
 8005cc4:	f000 f818 	bl	8005cf8 <_init>
 8005cc8:	1b64      	subs	r4, r4, r5
 8005cca:	10a4      	asrs	r4, r4, #2
 8005ccc:	2600      	movs	r6, #0
 8005cce:	42a6      	cmp	r6, r4
 8005cd0:	d105      	bne.n	8005cde <__libc_init_array+0x2e>
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
 8005cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd8:	4798      	blx	r3
 8005cda:	3601      	adds	r6, #1
 8005cdc:	e7ee      	b.n	8005cbc <__libc_init_array+0xc>
 8005cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce2:	4798      	blx	r3
 8005ce4:	3601      	adds	r6, #1
 8005ce6:	e7f2      	b.n	8005cce <__libc_init_array+0x1e>
 8005ce8:	08005d58 	.word	0x08005d58
 8005cec:	08005d58 	.word	0x08005d58
 8005cf0:	08005d58 	.word	0x08005d58
 8005cf4:	08005d5c 	.word	0x08005d5c

08005cf8 <_init>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	bf00      	nop
 8005cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfe:	bc08      	pop	{r3}
 8005d00:	469e      	mov	lr, r3
 8005d02:	4770      	bx	lr

08005d04 <_fini>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	bf00      	nop
 8005d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	469e      	mov	lr, r3
 8005d0e:	4770      	bx	lr
