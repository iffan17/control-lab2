
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005438  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c0  080056c0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080056c0  080056c0  000156c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c8  080056c8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056cc  080056cc  000156cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080056d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000005c  0800572c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  0800572c  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d5d2  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e8e  00000000  00000000  0002d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002f530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d0  00000000  00000000  0002ff60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e3c  00000000  00000000  00030730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d15e  00000000  00000000  0005556c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9780  00000000  00000000  000626ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002dc0  00000000  00000000  0014be4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014ec0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005600 	.word	0x08005600

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005600 	.word	0x08005600

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fafe 	bl	8000bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f81d 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f8b1 	bl	8000740 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005de:	f000 f865 	bl	80006ac <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
 uint8_t text[] = "HELLO FIBO";
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <main+0x40>)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e8:	c303      	stmia	r3!, {r0, r1}
 80005ea:	801a      	strh	r2, [r3, #0]
 80005ec:	3302      	adds	r3, #2
 80005ee:	0c12      	lsrs	r2, r2, #16
 80005f0:	701a      	strb	r2, [r3, #0]
 HAL_UART_Transmit(&hlpuart1,text, 11, 10); // มี 10 �?ต่ส่ง 11 ตัวเพราะลงท้ายด้วย backslash zero
 80005f2:	1d39      	adds	r1, r7, #4
 80005f4:	230a      	movs	r3, #10
 80005f6:	220b      	movs	r2, #11
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <main+0x44>)
 80005fa:	f001 ff83 	bl	8002504 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UARTPollingMethod();
 80005fe:	f000 f90d 	bl	800081c <UARTPollingMethod>
	  DummyTask();
 8000602:	f000 f95d 	bl	80008c0 <DummyTask>
	  UARTInterruptConfig();
 8000606:	f000 f973 	bl	80008f0 <UARTInterruptConfig>
	  UARTPollingMethod();
 800060a:	e7f8      	b.n	80005fe <main+0x32>
 800060c:	08005618 	.word	0x08005618
 8000610:	20000078 	.word	0x20000078

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2238      	movs	r2, #56	; 0x38
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f004 fb68 	bl	8004cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000636:	2000      	movs	r0, #0
 8000638:	f000 fee4 	bl	8001404 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2340      	movs	r3, #64	; 0x40
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000652:	2304      	movs	r3, #4
 8000654:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000656:	2355      	movs	r3, #85	; 0x55
 8000658:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	4618      	mov	r0, r3
 800066c:	f000 ff7e 	bl	800156c <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000676:	f000 f975 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2303      	movs	r3, #3
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2104      	movs	r1, #4
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fa7c 	bl	8001b90 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800069e:	f000 f961 	bl	8000964 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006b2:	4a22      	ldr	r2, [pc, #136]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	f001 feb8 	bl	8002464 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f933 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006fe:	2100      	movs	r1, #0
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 8000702:	f004 fa0e 	bl	8004b22 <HAL_UARTEx_SetTxFifoThreshold>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800070c:	f000 f92a 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 8000714:	f004 fa43 	bl	8004b9e <HAL_UARTEx_SetRxFifoThreshold>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800071e:	f000 f921 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 8000724:	f004 f9c4 	bl	8004ab0 <HAL_UARTEx_DisableFifoMode>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800072e:	f000 f919 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000078 	.word	0x20000078
 800073c:	40008000 	.word	0x40008000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_GPIO_Init+0xd4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <MX_GPIO_Init+0xd4>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <MX_GPIO_Init+0xd4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <MX_GPIO_Init+0xd4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a28      	ldr	r2, [pc, #160]	; (8000814 <MX_GPIO_Init+0xd4>)
 8000774:	f043 0320 	orr.w	r3, r3, #32
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_GPIO_Init+0xd4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0320 	and.w	r3, r3, #32
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <MX_GPIO_Init+0xd4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a22      	ldr	r2, [pc, #136]	; (8000814 <MX_GPIO_Init+0xd4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0xd4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_GPIO_Init+0xd4>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_GPIO_Init+0xd4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f000 fdcb 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <MX_GPIO_Init+0xd8>)
 80007da:	f000 fc3b 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007de:	2320      	movs	r3, #32
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f000 fc2c 	bl	8001054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2028      	movs	r0, #40	; 0x28
 8000802:	f000 fb32 	bl	8000e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000806:	2028      	movs	r0, #40	; 0x28
 8000808:	f000 fb49 	bl	8000e9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	; 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000
 8000818:	48000800 	.word	0x48000800

0800081c <UARTPollingMethod>:

/* USER CODE BEGIN 4 */
void UARTPollingMethod()
	{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
	//read UART 10 char with in 10s
	HAL_StatusTypeDef HAL_status = HAL_UART_Receive(&hlpuart1, RxBuffer, 10, 10000);
 8000822:	f242 7310 	movw	r3, #10000	; 0x2710
 8000826:	220a      	movs	r2, #10
 8000828:	4920      	ldr	r1, [pc, #128]	; (80008ac <UARTPollingMethod+0x90>)
 800082a:	4821      	ldr	r0, [pc, #132]	; (80008b0 <UARTPollingMethod+0x94>)
 800082c:	f001 fef8 	bl	8002620 <HAL_UART_Receive>
 8000830:	4603      	mov	r3, r0
 8000832:	71fb      	strb	r3, [r7, #7]

	//if complete read 10 char
	if(HAL_status == HAL_OK)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d112      	bne.n	8000860 <UARTPollingMethod+0x44>
	{

		RxBuffer[10] = '\0';
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <UARTPollingMethod+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	729a      	strb	r2, [r3, #10]

		sprintf((char*)TxBuffer,"Received : %s\r\n",RxBuffer);
 8000840:	4a1a      	ldr	r2, [pc, #104]	; (80008ac <UARTPollingMethod+0x90>)
 8000842:	491c      	ldr	r1, [pc, #112]	; (80008b4 <UARTPollingMethod+0x98>)
 8000844:	481c      	ldr	r0, [pc, #112]	; (80008b8 <UARTPollingMethod+0x9c>)
 8000846:	f004 fa37 	bl	8004cb8 <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 10);
 800084a:	481b      	ldr	r0, [pc, #108]	; (80008b8 <UARTPollingMethod+0x9c>)
 800084c:	f7ff fce8 	bl	8000220 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	230a      	movs	r3, #10
 8000856:	4918      	ldr	r1, [pc, #96]	; (80008b8 <UARTPollingMethod+0x9c>)
 8000858:	4815      	ldr	r0, [pc, #84]	; (80008b0 <UARTPollingMethod+0x94>)
 800085a:	f001 fe53 	bl	8002504 <HAL_UART_Transmit>
		//return received char
		sprintf((char*)TxBuffer,"Received Timeout : %s\r\n",RxBuffer);
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 10);

	}
}
 800085e:	e020      	b.n	80008a2 <UARTPollingMethod+0x86>
	else if(HAL_status == HAL_TIMEOUT)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b03      	cmp	r3, #3
 8000864:	d11d      	bne.n	80008a2 <UARTPollingMethod+0x86>
		uint32_t lastCharPos = hlpuart1.RxXferSize - hlpuart1.RxXferCount;
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <UARTPollingMethod+0x94>)
 8000868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800086c:	461a      	mov	r2, r3
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <UARTPollingMethod+0x94>)
 8000870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000874:	b29b      	uxth	r3, r3
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	603b      	str	r3, [r7, #0]
		RxBuffer[lastCharPos] = '\0';
 800087a:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <UARTPollingMethod+0x90>)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	4413      	add	r3, r2
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
		sprintf((char*)TxBuffer,"Received Timeout : %s\r\n",RxBuffer);
 8000884:	4a09      	ldr	r2, [pc, #36]	; (80008ac <UARTPollingMethod+0x90>)
 8000886:	490d      	ldr	r1, [pc, #52]	; (80008bc <UARTPollingMethod+0xa0>)
 8000888:	480b      	ldr	r0, [pc, #44]	; (80008b8 <UARTPollingMethod+0x9c>)
 800088a:	f004 fa15 	bl	8004cb8 <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 10);
 800088e:	480a      	ldr	r0, [pc, #40]	; (80008b8 <UARTPollingMethod+0x9c>)
 8000890:	f7ff fcc6 	bl	8000220 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	230a      	movs	r3, #10
 800089a:	4907      	ldr	r1, [pc, #28]	; (80008b8 <UARTPollingMethod+0x9c>)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <UARTPollingMethod+0x94>)
 800089e:	f001 fe31 	bl	8002504 <HAL_UART_Transmit>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000010c 	.word	0x2000010c
 80008b0:	20000078 	.word	0x20000078
 80008b4:	08005624 	.word	0x08005624
 80008b8:	20000120 	.word	0x20000120
 80008bc:	08005634 	.word	0x08005634

080008c0 <DummyTask>:
//Blink LED 5 Hz
void DummyTask()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	static uint32_t timestamp=0;
	if(HAL_GetTick()>= timestamp)
 80008c4:	f000 f9ea 	bl	8000c9c <HAL_GetTick>
 80008c8:	4602      	mov	r2, r0
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <DummyTask+0x2c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d30a      	bcc.n	80008e8 <DummyTask+0x28>
	{
		timestamp = HAL_GetTick()+100;
 80008d2:	f000 f9e3 	bl	8000c9c <HAL_GetTick>
 80008d6:	4603      	mov	r3, r0
 80008d8:	3364      	adds	r3, #100	; 0x64
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <DummyTask+0x2c>)
 80008dc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008de:	2120      	movs	r1, #32
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 fd50 	bl	8001388 <HAL_GPIO_TogglePin>
	}
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000148 	.word	0x20000148

080008f0 <UARTInterruptConfig>:
void UARTInterruptConfig()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
 80008f4:	220a      	movs	r2, #10
 80008f6:	4903      	ldr	r1, [pc, #12]	; (8000904 <UARTInterruptConfig+0x14>)
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <UARTInterruptConfig+0x18>)
 80008fa:	f001 ffed 	bl	80028d8 <HAL_UART_Receive_IT>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000010c 	.word	0x2000010c
 8000908:	20000078 	.word	0x20000078

0800090c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	if(hlpuart == &hlpuart1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <HAL_UART_RxCpltCallback+0x48>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d116      	bne.n	800094a <HAL_UART_RxCpltCallback+0x3e>
	{
		RxBuffer[10] = '\0';
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_UART_RxCpltCallback+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	729a      	strb	r2, [r3, #10]

		sprintf((char*)TxBuffer,"Received : %s\r\n",RxBuffer);
 8000922:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <HAL_UART_RxCpltCallback+0x4c>)
 8000924:	490d      	ldr	r1, [pc, #52]	; (800095c <HAL_UART_RxCpltCallback+0x50>)
 8000926:	480e      	ldr	r0, [pc, #56]	; (8000960 <HAL_UART_RxCpltCallback+0x54>)
 8000928:	f004 f9c6 	bl	8004cb8 <siprintf>
		HAL_UART_Transmit_IT(&hlpuart1, TxBuffer, strlen((char*)TxBuffer));
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <HAL_UART_RxCpltCallback+0x54>)
 800092e:	f7ff fc77 	bl	8000220 <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	b29b      	uxth	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	4909      	ldr	r1, [pc, #36]	; (8000960 <HAL_UART_RxCpltCallback+0x54>)
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <HAL_UART_RxCpltCallback+0x48>)
 800093c:	f001 ff38 	bl	80027b0 <HAL_UART_Transmit_IT>

		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
 8000940:	220a      	movs	r2, #10
 8000942:	4905      	ldr	r1, [pc, #20]	; (8000958 <HAL_UART_RxCpltCallback+0x4c>)
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <HAL_UART_RxCpltCallback+0x48>)
 8000946:	f001 ffc7 	bl	80028d8 <HAL_UART_Receive_IT>
	}
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000078 	.word	0x20000078
 8000958:	2000010c 	.word	0x2000010c
 800095c:	08005624 	.word	0x08005624
 8000960:	20000120 	.word	0x20000120

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_MspInit+0x44>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6613      	str	r3, [r2, #96]	; 0x60
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_MspInit+0x44>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x44>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6593      	str	r3, [r2, #88]	; 0x58
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x44>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009a6:	f000 fdd1 	bl	800154c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b09e      	sub	sp, #120	; 0x78
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2254      	movs	r2, #84	; 0x54
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f004 f98d 	bl	8004cf8 <memset>
  if(huart->Instance==LPUART1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <HAL_UART_MspInit+0xb8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d13e      	bne.n	8000a66 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009e8:	2320      	movs	r3, #32
 80009ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fae7 	bl	8001fc8 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a00:	f7ff ffb0 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_UART_MspInit+0xbc>)
 8000a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a08:	4a1a      	ldr	r2, [pc, #104]	; (8000a74 <HAL_UART_MspInit+0xbc>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0xbc>)
 8000a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_UART_MspInit+0xbc>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <HAL_UART_MspInit+0xbc>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_UART_MspInit+0xbc>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a34:	230c      	movs	r3, #12
 8000a36:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a44:	230c      	movs	r3, #12
 8000a46:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f000 faff 	bl	8001054 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	205b      	movs	r0, #91	; 0x5b
 8000a5c:	f000 fa05 	bl	8000e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000a60:	205b      	movs	r0, #91	; 0x5b
 8000a62:	f000 fa1c 	bl	8000e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3778      	adds	r7, #120	; 0x78
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40008000 	.word	0x40008000
 8000a74:	40021000 	.word	0x40021000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f8d8 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ad0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ad4:	f000 fc72 	bl	80013bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <LPUART1_IRQHandler+0x10>)
 8000ae2:	f001 ff45 	bl	8002970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000078 	.word	0x20000078

08000af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af8:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <_sbrk+0x5c>)
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <_sbrk+0x60>)
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <_sbrk+0x64>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <_sbrk+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d207      	bcs.n	8000b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b20:	f004 f8f2 	bl	8004d08 <__errno>
 8000b24:	4603      	mov	r3, r0
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	e009      	b.n	8000b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <_sbrk+0x64>)
 8000b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20020000 	.word	0x20020000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	2000014c 	.word	0x2000014c
 8000b58:	200002a0 	.word	0x200002a0

08000b5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b84:	f7ff ffea 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	; (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bae:	f004 f8b1 	bl	8004d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb2:	f7ff fd0b 	bl	80005cc <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   r0, =_estack
 8000bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bc4:	080056d0 	.word	0x080056d0
  ldr r2, =_sbss
 8000bc8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bcc:	2000029c 	.word	0x2000029c

08000bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_2_IRQHandler>

08000bd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f939 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 f80e 	bl	8000c04 <HAL_InitTick>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	e001      	b.n	8000bf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf4:	f7ff febc 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]

}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_InitTick+0x68>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d022      	beq.n	8000c5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_InitTick+0x6c>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <HAL_InitTick+0x68>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f944 	bl	8000eba <HAL_SYSTICK_Config>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d10f      	bne.n	8000c58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b0f      	cmp	r3, #15
 8000c3c:	d809      	bhi.n	8000c52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	f04f 30ff 	mov.w	r0, #4294967295
 8000c46:	f000 f910 	bl	8000e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_InitTick+0x70>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	e007      	b.n	8000c62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	e004      	b.n	8000c62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e001      	b.n	8000c62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x1c>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <HAL_IncTick+0x20>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <HAL_IncTick+0x1c>)
 8000c88:	6013      	str	r3, [r2, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	20000150 	.word	0x20000150
 8000c98:	20000008 	.word	0x20000008

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000150 	.word	0x20000150

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff29 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e78:	f7ff ff40 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff ff90 	bl	8000da8 <NVIC_EncodePriority>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff5f 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff33 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffa4 	bl	8000e10 <SysTick_Config>
 8000ec8:	4603      	mov	r3, r0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d005      	beq.n	8000ef6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2204      	movs	r2, #4
 8000eee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e037      	b.n	8000f66 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 020e 	bic.w	r2, r2, #14
 8000f04:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f14:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0201 	bic.w	r2, r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f003 021f 	and.w	r2, r3, #31
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	2101      	movs	r1, #1
 8000f34:	fa01 f202 	lsl.w	r2, r1, r2
 8000f38:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f42:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00c      	beq.n	8000f66 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f5a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f64:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d00d      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	e047      	b.n	8001048 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 020e 	bic.w	r2, r2, #14
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0201 	bic.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001004:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00c      	beq.n	8001028 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800101c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001026:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	4798      	blx	r3
    }
  }
  return status;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001062:	e15a      	b.n	800131a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	2101      	movs	r1, #1
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 814c 	beq.w	8001314 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d005      	beq.n	8001094 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001090:	2b02      	cmp	r3, #2
 8001092:	d130      	bne.n	80010f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ca:	2201      	movs	r2, #1
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	f003 0201 	and.w	r2, r3, #1
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d017      	beq.n	8001132 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d123      	bne.n	8001186 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	6939      	ldr	r1, [r7, #16]
 8001182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0203 	and.w	r2, r3, #3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80a6 	beq.w	8001314 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c8:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <HAL_GPIO_Init+0x2e4>)
 80011ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011cc:	4a5a      	ldr	r2, [pc, #360]	; (8001338 <HAL_GPIO_Init+0x2e4>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6613      	str	r3, [r2, #96]	; 0x60
 80011d4:	4b58      	ldr	r3, [pc, #352]	; (8001338 <HAL_GPIO_Init+0x2e4>)
 80011d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e0:	4a56      	ldr	r2, [pc, #344]	; (800133c <HAL_GPIO_Init+0x2e8>)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800120a:	d01f      	beq.n	800124c <HAL_GPIO_Init+0x1f8>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a4c      	ldr	r2, [pc, #304]	; (8001340 <HAL_GPIO_Init+0x2ec>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d019      	beq.n	8001248 <HAL_GPIO_Init+0x1f4>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a4b      	ldr	r2, [pc, #300]	; (8001344 <HAL_GPIO_Init+0x2f0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d013      	beq.n	8001244 <HAL_GPIO_Init+0x1f0>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a4a      	ldr	r2, [pc, #296]	; (8001348 <HAL_GPIO_Init+0x2f4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d00d      	beq.n	8001240 <HAL_GPIO_Init+0x1ec>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a49      	ldr	r2, [pc, #292]	; (800134c <HAL_GPIO_Init+0x2f8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d007      	beq.n	800123c <HAL_GPIO_Init+0x1e8>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a48      	ldr	r2, [pc, #288]	; (8001350 <HAL_GPIO_Init+0x2fc>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d101      	bne.n	8001238 <HAL_GPIO_Init+0x1e4>
 8001234:	2305      	movs	r3, #5
 8001236:	e00a      	b.n	800124e <HAL_GPIO_Init+0x1fa>
 8001238:	2306      	movs	r3, #6
 800123a:	e008      	b.n	800124e <HAL_GPIO_Init+0x1fa>
 800123c:	2304      	movs	r3, #4
 800123e:	e006      	b.n	800124e <HAL_GPIO_Init+0x1fa>
 8001240:	2303      	movs	r3, #3
 8001242:	e004      	b.n	800124e <HAL_GPIO_Init+0x1fa>
 8001244:	2302      	movs	r3, #2
 8001246:	e002      	b.n	800124e <HAL_GPIO_Init+0x1fa>
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <HAL_GPIO_Init+0x1fa>
 800124c:	2300      	movs	r3, #0
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	f002 0203 	and.w	r2, r2, #3
 8001254:	0092      	lsls	r2, r2, #2
 8001256:	4093      	lsls	r3, r2
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125e:	4937      	ldr	r1, [pc, #220]	; (800133c <HAL_GPIO_Init+0x2e8>)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800126c:	4b39      	ldr	r3, [pc, #228]	; (8001354 <HAL_GPIO_Init+0x300>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001290:	4a30      	ldr	r2, [pc, #192]	; (8001354 <HAL_GPIO_Init+0x300>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001296:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <HAL_GPIO_Init+0x300>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ba:	4a26      	ldr	r2, [pc, #152]	; (8001354 <HAL_GPIO_Init+0x300>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_GPIO_Init+0x300>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <HAL_GPIO_Init+0x300>)
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_GPIO_Init+0x300>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800130e:	4a11      	ldr	r2, [pc, #68]	; (8001354 <HAL_GPIO_Init+0x300>)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3301      	adds	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	fa22 f303 	lsr.w	r3, r2, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	f47f ae9d 	bne.w	8001064 <HAL_GPIO_Init+0x10>
  }
}
 800132a:	bf00      	nop
 800132c:	bf00      	nop
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000
 8001340:	48000400 	.word	0x48000400
 8001344:	48000800 	.word	0x48000800
 8001348:	48000c00 	.word	0x48000c00
 800134c:	48001000 	.word	0x48001000
 8001350:	48001400 	.word	0x48001400
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001374:	e002      	b.n	800137c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43d9      	mvns	r1, r3
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	400b      	ands	r3, r1
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f806 	bl	80013ec <HAL_GPIO_EXTI_Callback>
  }
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d141      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001412:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800141a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800141e:	d131      	bne.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001420:	4b47      	ldr	r3, [pc, #284]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001426:	4a46      	ldr	r2, [pc, #280]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800142c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001438:	4a41      	ldr	r2, [pc, #260]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001440:	4b40      	ldr	r3, [pc, #256]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2232      	movs	r2, #50	; 0x32
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4a3f      	ldr	r2, [pc, #252]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	0c9b      	lsrs	r3, r3, #18
 8001452:	3301      	adds	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001456:	e002      	b.n	800145e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3b01      	subs	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146a:	d102      	bne.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f2      	bne.n	8001458 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147e:	d158      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e057      	b.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800148a:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001490:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001494:	e04d      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800149c:	d141      	bne.n	8001522 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800149e:	4b28      	ldr	r3, [pc, #160]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014aa:	d131      	bne.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014b2:	4a23      	ldr	r2, [pc, #140]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014c4:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2232      	movs	r2, #50	; 0x32
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	0c9b      	lsrs	r3, r3, #18
 80014de:	3301      	adds	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e2:	e002      	b.n	80014ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f6:	d102      	bne.n	80014fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f2      	bne.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800150a:	d112      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e011      	b.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001520:	e007      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001530:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40007000 	.word	0x40007000
 8001544:	20000000 	.word	0x20000000
 8001548:	431bde83 	.word	0x431bde83

0800154c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155a:	6093      	str	r3, [r2, #8]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40007000 	.word	0x40007000

0800156c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e2fe      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d075      	beq.n	8001676 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158a:	4b97      	ldr	r3, [pc, #604]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001594:	4b94      	ldr	r3, [pc, #592]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b0c      	cmp	r3, #12
 80015a2:	d102      	bne.n	80015aa <HAL_RCC_OscConfig+0x3e>
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d002      	beq.n	80015b0 <HAL_RCC_OscConfig+0x44>
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d10b      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	4b8d      	ldr	r3, [pc, #564]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d05b      	beq.n	8001674 <HAL_RCC_OscConfig+0x108>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d157      	bne.n	8001674 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e2d9      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d0:	d106      	bne.n	80015e0 <HAL_RCC_OscConfig+0x74>
 80015d2:	4b85      	ldr	r3, [pc, #532]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a84      	ldr	r2, [pc, #528]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e01d      	b.n	800161c <HAL_RCC_OscConfig+0xb0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x98>
 80015ea:	4b7f      	ldr	r3, [pc, #508]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a7e      	ldr	r2, [pc, #504]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4b7c      	ldr	r3, [pc, #496]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a7b      	ldr	r2, [pc, #492]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0xb0>
 8001604:	4b78      	ldr	r3, [pc, #480]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a77      	ldr	r2, [pc, #476]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 800160a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b75      	ldr	r3, [pc, #468]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a74      	ldr	r2, [pc, #464]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fb3a 	bl	8000c9c <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fb36 	bl	8000c9c <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e29e      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163e:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0xc0>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fb26 	bl	8000c9c <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fb22 	bl	8000c9c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e28a      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001666:	4b60      	ldr	r3, [pc, #384]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0xe8>
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d075      	beq.n	800176e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001682:	4b59      	ldr	r3, [pc, #356]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800168c:	4b56      	ldr	r3, [pc, #344]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b0c      	cmp	r3, #12
 800169a:	d102      	bne.n	80016a2 <HAL_RCC_OscConfig+0x136>
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d002      	beq.n	80016a8 <HAL_RCC_OscConfig+0x13c>
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d11f      	bne.n	80016e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a8:	4b4f      	ldr	r3, [pc, #316]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_OscConfig+0x154>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e25d      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	4946      	ldr	r1, [pc, #280]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016d4:	4b45      	ldr	r3, [pc, #276]	; (80017ec <HAL_RCC_OscConfig+0x280>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fa93 	bl	8000c04 <HAL_InitTick>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d043      	beq.n	800176c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e249      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d023      	beq.n	8001738 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f0:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a3c      	ldr	r2, [pc, #240]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80016f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff face 	bl	8000c9c <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001704:	f7ff faca 	bl	8000c9c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e232      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001716:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001722:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	061b      	lsls	r3, r3, #24
 8001730:	492d      	ldr	r1, [pc, #180]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
 8001736:	e01a      	b.n	800176e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001738:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a2a      	ldr	r2, [pc, #168]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 800173e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff faaa 	bl	8000c9c <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174c:	f7ff faa6 	bl	8000c9c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e20e      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x1e0>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800176c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d041      	beq.n	80017fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01c      	beq.n	80017bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001788:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fa83 	bl	8000c9c <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fa7f 	bl	8000c9c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1e7      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80017ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0ef      	beq.n	800179a <HAL_RCC_OscConfig+0x22e>
 80017ba:	e020      	b.n	80017fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80017be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fa66 	bl	8000c9c <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d2:	e00d      	b.n	80017f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fa62 	bl	8000c9c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d906      	bls.n	80017f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e1ca      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f0:	4b8c      	ldr	r3, [pc, #560]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80017f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ea      	bne.n	80017d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80a6 	beq.w	8001958 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001810:	4b84      	ldr	r3, [pc, #528]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_OscConfig+0x2b4>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x2b6>
 8001820:	2300      	movs	r3, #0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00d      	beq.n	8001842 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	4a7e      	ldr	r2, [pc, #504]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
 8001832:	4b7c      	ldr	r3, [pc, #496]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001842:	4b79      	ldr	r3, [pc, #484]	; (8001a28 <HAL_RCC_OscConfig+0x4bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d118      	bne.n	8001880 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800184e:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HAL_RCC_OscConfig+0x4bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a75      	ldr	r2, [pc, #468]	; (8001a28 <HAL_RCC_OscConfig+0x4bc>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff fa1f 	bl	8000c9c <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001862:	f7ff fa1b 	bl	8000c9c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e183      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001874:	4b6c      	ldr	r3, [pc, #432]	; (8001a28 <HAL_RCC_OscConfig+0x4bc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d108      	bne.n	800189a <HAL_RCC_OscConfig+0x32e>
 8001888:	4b66      	ldr	r3, [pc, #408]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	4a65      	ldr	r2, [pc, #404]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001898:	e024      	b.n	80018e4 <HAL_RCC_OscConfig+0x378>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d110      	bne.n	80018c4 <HAL_RCC_OscConfig+0x358>
 80018a2:	4b60      	ldr	r3, [pc, #384]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a8:	4a5e      	ldr	r2, [pc, #376]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b2:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	4a5a      	ldr	r2, [pc, #360]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c2:	e00f      	b.n	80018e4 <HAL_RCC_OscConfig+0x378>
 80018c4:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	4a56      	ldr	r2, [pc, #344]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018da:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d016      	beq.n	800191a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff f9d6 	bl	8000c9c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff f9d2 	bl	8000c9c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e138      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190a:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ed      	beq.n	80018f4 <HAL_RCC_OscConfig+0x388>
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff f9bf 	bl	8000c9c <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff f9bb 	bl	8000c9c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e121      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ed      	bne.n	8001922 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	4a34      	ldr	r2, [pc, #208]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001956:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	2b00      	cmp	r3, #0
 8001962:	d03c      	beq.n	80019de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 800196e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001972:	4a2c      	ldr	r2, [pc, #176]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff f98e 	bl	8000c9c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001984:	f7ff f98a 	bl	8000c9c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e0f2      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001998:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ef      	beq.n	8001984 <HAL_RCC_OscConfig+0x418>
 80019a4:	e01b      	b.n	80019de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80019a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ac:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff f971 	bl	8000c9c <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019be:	f7ff f96d 	bl	8000c9c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e0d5      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ef      	bne.n	80019be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80c9 	beq.w	8001b7a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b0c      	cmp	r3, #12
 80019f2:	f000 8083 	beq.w	8001afc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d15e      	bne.n	8001abc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001a04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f947 	bl	8000c9c <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a10:	e00c      	b.n	8001a2c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f943 	bl	8000c9c <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d905      	bls.n	8001a2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0ab      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2c:	4b55      	ldr	r3, [pc, #340]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1ec      	bne.n	8001a12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a38:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <HAL_RCC_OscConfig+0x61c>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6a11      	ldr	r1, [r2, #32]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a48:	3a01      	subs	r2, #1
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a52:	0212      	lsls	r2, r2, #8
 8001a54:	4311      	orrs	r1, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a5a:	0852      	lsrs	r2, r2, #1
 8001a5c:	3a01      	subs	r2, #1
 8001a5e:	0552      	lsls	r2, r2, #21
 8001a60:	4311      	orrs	r1, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a66:	0852      	lsrs	r2, r2, #1
 8001a68:	3a01      	subs	r2, #1
 8001a6a:	0652      	lsls	r2, r2, #25
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a72:	06d2      	lsls	r2, r2, #27
 8001a74:	430a      	orrs	r2, r1
 8001a76:	4943      	ldr	r1, [pc, #268]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a40      	ldr	r2, [pc, #256]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a88:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a3d      	ldr	r2, [pc, #244]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f902 	bl	8000c9c <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f8fe 	bl	8000c9c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e066      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x530>
 8001aba:	e05e      	b.n	8001b7a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f8e8 	bl	8000c9c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff f8e4 	bl	8000c9c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e04c      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001aee:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	4924      	ldr	r1, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	60cb      	str	r3, [r1, #12]
 8001afa:	e03e      	b.n	8001b7a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e039      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b08:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d12c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	3b01      	subs	r3, #1
 8001b28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d123      	bne.n	8001b76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d11b      	bne.n	8001b76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d113      	bne.n	8001b76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3720      	adds	r7, #32
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	019f800c 	.word	0x019f800c
 8001b8c:	feeefffc 	.word	0xfeeefffc

08001b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e11e      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b91      	ldr	r3, [pc, #580]	; (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d910      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b8e      	ldr	r3, [pc, #568]	; (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 020f 	bic.w	r2, r3, #15
 8001bbe:	498c      	ldr	r1, [pc, #560]	; (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b8a      	ldr	r3, [pc, #552]	; (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e106      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d073      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d129      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bec:	4b81      	ldr	r3, [pc, #516]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0f4      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bfc:	f000 f99e 	bl	8001f3c <RCC_GetSysClockFreqFromPLLSource>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4a7c      	ldr	r2, [pc, #496]	; (8001df8 <HAL_RCC_ClockConfig+0x268>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d93f      	bls.n	8001c8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c0a:	4b7a      	ldr	r3, [pc, #488]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d033      	beq.n	8001c8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d12f      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c2a:	4b72      	ldr	r3, [pc, #456]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c32:	4a70      	ldr	r2, [pc, #448]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e024      	b.n	8001c8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c48:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0c6      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c58:	4b66      	ldr	r3, [pc, #408]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0be      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c68:	f000 f8ce 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4a61      	ldr	r2, [pc, #388]	; (8001df8 <HAL_RCC_ClockConfig+0x268>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d909      	bls.n	8001c8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c76:	4b5f      	ldr	r3, [pc, #380]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c7e:	4a5d      	ldr	r2, [pc, #372]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c8a:	4b5a      	ldr	r3, [pc, #360]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 0203 	bic.w	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4957      	ldr	r1, [pc, #348]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c9c:	f7fe fffe 	bl	8000c9c <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7fe fffa 	bl	8000c9c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e095      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	4b4e      	ldr	r3, [pc, #312]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 020c 	and.w	r2, r3, #12
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1eb      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d023      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce4:	4b43      	ldr	r3, [pc, #268]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a42      	ldr	r2, [pc, #264]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001cea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d007      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001cfc:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d04:	4a3b      	ldr	r2, [pc, #236]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0c:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4936      	ldr	r1, [pc, #216]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b80      	cmp	r3, #128	; 0x80
 8001d24:	d105      	bne.n	8001d32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d26:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4a32      	ldr	r2, [pc, #200]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d32:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d21d      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 020f 	bic.w	r2, r3, #15
 8001d48:	4929      	ldr	r1, [pc, #164]	; (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d50:	f7fe ffa4 	bl	8000c9c <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d58:	f7fe ffa0 	bl	8000c9c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e03b      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d1ed      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4917      	ldr	r1, [pc, #92]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	490f      	ldr	r1, [pc, #60]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dba:	f000 f825 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	490c      	ldr	r1, [pc, #48]	; (8001dfc <HAL_RCC_ClockConfig+0x26c>)
 8001dcc:	5ccb      	ldrb	r3, [r1, r3]
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_RCC_ClockConfig+0x270>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_RCC_ClockConfig+0x274>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe ff10 	bl	8000c04 <HAL_InitTick>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40022000 	.word	0x40022000
 8001df4:	40021000 	.word	0x40021000
 8001df8:	04c4b400 	.word	0x04c4b400
 8001dfc:	0800564c 	.word	0x0800564c
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d102      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	e047      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d102      	bne.n	8001e32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e2c:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	e03e      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d136      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3301      	adds	r3, #1
 8001e54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d10c      	bne.n	8001e76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e5c:	4a1a      	ldr	r2, [pc, #104]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e66:	68d2      	ldr	r2, [r2, #12]
 8001e68:	0a12      	lsrs	r2, r2, #8
 8001e6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
      break;
 8001e74:	e00c      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e76:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	4a10      	ldr	r2, [pc, #64]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e80:	68d2      	ldr	r2, [r2, #12]
 8001e82:	0a12      	lsrs	r2, r2, #8
 8001e84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
      break;
 8001e8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0e5b      	lsrs	r3, r3, #25
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	e001      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001eb0:	693b      	ldr	r3, [r7, #16]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	00f42400 	.word	0x00f42400
 8001ec8:	016e3600 	.word	0x016e3600

08001ecc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000

08001ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ee8:	f7ff fff0 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	4904      	ldr	r1, [pc, #16]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	0800565c 	.word	0x0800565c

08001f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f14:	f7ff ffda 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	0adb      	lsrs	r3, r3, #11
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4904      	ldr	r1, [pc, #16]	; (8001f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	0800565c 	.word	0x0800565c

08001f3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3301      	adds	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d10c      	bne.n	8001f7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f60:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f6a:	68d2      	ldr	r2, [r2, #12]
 8001f6c:	0a12      	lsrs	r2, r2, #8
 8001f6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
    break;
 8001f78:	e00c      	b.n	8001f94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f84:	68d2      	ldr	r2, [r2, #12]
 8001f86:	0a12      	lsrs	r2, r2, #8
 8001f88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
    break;
 8001f92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0e5b      	lsrs	r3, r3, #25
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fae:	687b      	ldr	r3, [r7, #4]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	016e3600 	.word	0x016e3600
 8001fc4:	00f42400 	.word	0x00f42400

08001fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8098 	beq.w	8002116 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fea:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10d      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	4a3f      	ldr	r2, [pc, #252]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002000:	6593      	str	r3, [r2, #88]	; 0x58
 8002002:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200e:	2301      	movs	r3, #1
 8002010:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002012:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a39      	ldr	r2, [pc, #228]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800201e:	f7fe fe3d 	bl	8000c9c <HAL_GetTick>
 8002022:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002024:	e009      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7fe fe39 	bl	8000c9c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d902      	bls.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	74fb      	strb	r3, [r7, #19]
        break;
 8002038:	e005      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0ef      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002046:	7cfb      	ldrb	r3, [r7, #19]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d159      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002056:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d01e      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	d019      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002068:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002072:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	4a1f      	ldr	r2, [pc, #124]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002084:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002094:	4a18      	ldr	r2, [pc, #96]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d016      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe fdf9 	bl	8000c9c <HAL_GetTick>
 80020aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ac:	e00b      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7fe fdf5 	bl	8000c9c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d902      	bls.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	74fb      	strb	r3, [r7, #19]
            break;
 80020c4:	e006      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ec      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e8:	4903      	ldr	r1, [pc, #12]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020f0:	e008      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020f2:	7cfb      	ldrb	r3, [r7, #19]
 80020f4:	74bb      	strb	r3, [r7, #18]
 80020f6:	e005      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002104:	7c7b      	ldrb	r3, [r7, #17]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d105      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210a:	4ba7      	ldr	r3, [pc, #668]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	4aa6      	ldr	r2, [pc, #664]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002114:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002122:	4ba1      	ldr	r3, [pc, #644]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002128:	f023 0203 	bic.w	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	499d      	ldr	r1, [pc, #628]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002144:	4b98      	ldr	r3, [pc, #608]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	f023 020c 	bic.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	4995      	ldr	r1, [pc, #596]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002166:	4b90      	ldr	r3, [pc, #576]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	498c      	ldr	r1, [pc, #560]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002188:	4b87      	ldr	r3, [pc, #540]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	4984      	ldr	r1, [pc, #528]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021aa:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	497b      	ldr	r1, [pc, #492]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021cc:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	4973      	ldr	r1, [pc, #460]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ee:	4b6e      	ldr	r3, [pc, #440]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	496a      	ldr	r1, [pc, #424]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002210:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4962      	ldr	r1, [pc, #392]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002232:	4b5d      	ldr	r3, [pc, #372]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	4959      	ldr	r1, [pc, #356]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002254:	4b54      	ldr	r3, [pc, #336]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002256:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	4951      	ldr	r1, [pc, #324]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002276:	4b4c      	ldr	r3, [pc, #304]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	4948      	ldr	r1, [pc, #288]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d015      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002298:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4940      	ldr	r1, [pc, #256]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b6:	d105      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b8:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d015      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022de:	4932      	ldr	r1, [pc, #200]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ee:	d105      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a2c      	ldr	r2, [pc, #176]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d015      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	4924      	ldr	r1, [pc, #144]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002326:	d105      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002328:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a1e      	ldr	r2, [pc, #120]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002332:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d015      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	4916      	ldr	r1, [pc, #88]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800235e:	d105      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800236a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d019      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4908      	ldr	r1, [pc, #32]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002396:	d109      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a02      	ldr	r2, [pc, #8]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023a2:	60d3      	str	r3, [r2, #12]
 80023a4:	e002      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023b8:	4b29      	ldr	r3, [pc, #164]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4926      	ldr	r1, [pc, #152]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023d6:	d105      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023d8:	4b21      	ldr	r3, [pc, #132]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4a20      	ldr	r2, [pc, #128]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fe:	4918      	ldr	r1, [pc, #96]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d105      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a12      	ldr	r2, [pc, #72]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d015      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002428:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800242a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800242e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	490a      	ldr	r1, [pc, #40]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002446:	d105      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800244e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002452:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002454:	7cbb      	ldrb	r3, [r7, #18]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000

08002464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e042      	b.n	80024fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247c:	2b00      	cmp	r3, #0
 800247e:	d106      	bne.n	800248e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7fe fa95 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2224      	movs	r2, #36	; 0x24
 8002492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f001 f89e 	bl	80035f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fd9f 	bl	8002ff8 <UART_SetConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e01b      	b.n	80024fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f001 f91d 	bl	8003734 <UART_CheckIdleState>
 80024fa:	4603      	mov	r3, r0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	2b20      	cmp	r3, #32
 800251c:	d17b      	bne.n	8002616 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_UART_Transmit+0x26>
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e074      	b.n	8002618 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2221      	movs	r2, #33	; 0x21
 800253a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800253e:	f7fe fbad 	bl	8000c9c <HAL_GetTick>
 8002542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	88fa      	ldrh	r2, [r7, #6]
 8002548:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	88fa      	ldrh	r2, [r7, #6]
 8002550:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255c:	d108      	bne.n	8002570 <HAL_UART_Transmit+0x6c>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d104      	bne.n	8002570 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	e003      	b.n	8002578 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002578:	e030      	b.n	80025dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f001 f97f 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e03d      	b.n	8002618 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10b      	bne.n	80025ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	3302      	adds	r3, #2
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e007      	b.n	80025ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	3301      	adds	r3, #1
 80025c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1c8      	bne.n	800257a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2200      	movs	r2, #0
 80025f0:	2140      	movs	r1, #64	; 0x40
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f001 f948 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e006      	b.n	8002618 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e000      	b.n	8002618 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002616:	2302      	movs	r3, #2
  }
}
 8002618:	4618      	mov	r0, r3
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002636:	2b20      	cmp	r3, #32
 8002638:	f040 80b5 	bne.w	80027a6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_UART_Receive+0x28>
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0ad      	b.n	80027a8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2222      	movs	r2, #34	; 0x22
 8002658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002662:	f7fe fb1b 	bl	8000c9c <HAL_GetTick>
 8002666:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	88fa      	ldrh	r2, [r7, #6]
 800266c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	88fa      	ldrh	r2, [r7, #6]
 8002674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002680:	d10e      	bne.n	80026a0 <HAL_UART_Receive+0x80>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d105      	bne.n	8002696 <HAL_UART_Receive+0x76>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002690:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002694:	e02d      	b.n	80026f2 <HAL_UART_Receive+0xd2>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	22ff      	movs	r2, #255	; 0xff
 800269a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800269e:	e028      	b.n	80026f2 <HAL_UART_Receive+0xd2>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10d      	bne.n	80026c4 <HAL_UART_Receive+0xa4>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d104      	bne.n	80026ba <HAL_UART_Receive+0x9a>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	22ff      	movs	r2, #255	; 0xff
 80026b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80026b8:	e01b      	b.n	80026f2 <HAL_UART_Receive+0xd2>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	227f      	movs	r2, #127	; 0x7f
 80026be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80026c2:	e016      	b.n	80026f2 <HAL_UART_Receive+0xd2>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026cc:	d10d      	bne.n	80026ea <HAL_UART_Receive+0xca>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d104      	bne.n	80026e0 <HAL_UART_Receive+0xc0>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	227f      	movs	r2, #127	; 0x7f
 80026da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80026de:	e008      	b.n	80026f2 <HAL_UART_Receive+0xd2>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	223f      	movs	r2, #63	; 0x3f
 80026e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80026e8:	e003      	b.n	80026f2 <HAL_UART_Receive+0xd2>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80026f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002702:	d108      	bne.n	8002716 <HAL_UART_Receive+0xf6>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	e003      	b.n	800271e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800271e:	e036      	b.n	800278e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2200      	movs	r2, #0
 8002728:	2120      	movs	r1, #32
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f001 f8ac 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e032      	b.n	80027a8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10c      	bne.n	8002762 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	b29a      	uxth	r2, r3
 8002750:	8a7b      	ldrh	r3, [r7, #18]
 8002752:	4013      	ands	r3, r2
 8002754:	b29a      	uxth	r2, r3
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	3302      	adds	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	e00c      	b.n	800277c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	b2da      	uxtb	r2, r3
 800276a:	8a7b      	ldrh	r3, [r7, #18]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4013      	ands	r3, r2
 8002770:	b2da      	uxtb	r2, r3
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1c2      	bne.n	8002720 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
  }
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b091      	sub	sp, #68	; 0x44
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d178      	bne.n	80028ba <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_UART_Transmit_IT+0x24>
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e071      	b.n	80028bc <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	88fa      	ldrh	r2, [r7, #6]
 80027e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	88fa      	ldrh	r2, [r7, #6]
 80027ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2221      	movs	r2, #33	; 0x21
 8002800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800280c:	d12a      	bne.n	8002864 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002816:	d107      	bne.n	8002828 <HAL_UART_Transmit_IT+0x78>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d103      	bne.n	8002828 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a29      	ldr	r2, [pc, #164]	; (80028c8 <HAL_UART_Transmit_IT+0x118>)
 8002824:	679a      	str	r2, [r3, #120]	; 0x78
 8002826:	e002      	b.n	800282e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a28      	ldr	r2, [pc, #160]	; (80028cc <HAL_UART_Transmit_IT+0x11c>)
 800282c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3308      	adds	r3, #8
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	e853 3f00 	ldrex	r3, [r3]
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002844:	63bb      	str	r3, [r7, #56]	; 0x38
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	3308      	adds	r3, #8
 800284c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800284e:	637a      	str	r2, [r7, #52]	; 0x34
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002852:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002856:	e841 2300 	strex	r3, r2, [r1]
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1e5      	bne.n	800282e <HAL_UART_Transmit_IT+0x7e>
 8002862:	e028      	b.n	80028b6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286c:	d107      	bne.n	800287e <HAL_UART_Transmit_IT+0xce>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <HAL_UART_Transmit_IT+0x120>)
 800287a:	679a      	str	r2, [r3, #120]	; 0x78
 800287c:	e002      	b.n	8002884 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <HAL_UART_Transmit_IT+0x124>)
 8002882:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	613b      	str	r3, [r7, #16]
   return(result);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a2:	623b      	str	r3, [r7, #32]
 80028a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a6:	69f9      	ldr	r1, [r7, #28]
 80028a8:	6a3a      	ldr	r2, [r7, #32]
 80028aa:	e841 2300 	strex	r3, r2, [r1]
 80028ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1e6      	bne.n	8002884 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e000      	b.n	80028bc <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80028ba:	2302      	movs	r3, #2
  }
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3744      	adds	r7, #68	; 0x44
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	08003efb 	.word	0x08003efb
 80028cc:	08003e1b 	.word	0x08003e1b
 80028d0:	08003d59 	.word	0x08003d59
 80028d4:	08003ca1 	.word	0x08003ca1

080028d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	4613      	mov	r3, r2
 80028e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d137      	bne.n	8002960 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_UART_Receive_IT+0x24>
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e030      	b.n	8002962 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a18      	ldr	r2, [pc, #96]	; (800296c <HAL_UART_Receive_IT+0x94>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d01f      	beq.n	8002950 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d018      	beq.n	8002950 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	e853 3f00 	ldrex	r3, [r3]
 800292a:	613b      	str	r3, [r7, #16]
   return(result);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	623b      	str	r3, [r7, #32]
 800293e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002940:	69f9      	ldr	r1, [r7, #28]
 8002942:	6a3a      	ldr	r2, [r7, #32]
 8002944:	e841 2300 	strex	r3, r2, [r1]
 8002948:	61bb      	str	r3, [r7, #24]
   return(result);
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e6      	bne.n	800291e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	461a      	mov	r2, r3
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f001 f804 	bl	8003964 <UART_Start_Receive_IT>
 800295c:	4603      	mov	r3, r0
 800295e:	e000      	b.n	8002962 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002960:	2302      	movs	r3, #2
  }
}
 8002962:	4618      	mov	r0, r3
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40008000 	.word	0x40008000

08002970 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b0ba      	sub	sp, #232	; 0xe8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002996:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800299a:	f640 030f 	movw	r3, #2063	; 0x80f
 800299e:	4013      	ands	r3, r2
 80029a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80029a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d11b      	bne.n	80029e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80029ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80029b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 82e3 	beq.w	8002fa0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
      }
      return;
 80029e2:	e2dd      	b.n	8002fa0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8123 	beq.w	8002c34 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80029ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80029f2:	4b8d      	ldr	r3, [pc, #564]	; (8002c28 <HAL_UART_IRQHandler+0x2b8>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80029fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80029fe:	4b8b      	ldr	r3, [pc, #556]	; (8002c2c <HAL_UART_IRQHandler+0x2bc>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8116 	beq.w	8002c34 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d011      	beq.n	8002a38 <HAL_UART_IRQHandler+0xc8>
 8002a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2201      	movs	r2, #1
 8002a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d011      	beq.n	8002a68 <HAL_UART_IRQHandler+0xf8>
 8002a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2202      	movs	r2, #2
 8002a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	f043 0204 	orr.w	r2, r3, #4
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d011      	beq.n	8002a98 <HAL_UART_IRQHandler+0x128>
 8002a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00b      	beq.n	8002a98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2204      	movs	r2, #4
 8002a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	f043 0202 	orr.w	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d017      	beq.n	8002ad4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002ab0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002ab4:	4b5c      	ldr	r3, [pc, #368]	; (8002c28 <HAL_UART_IRQHandler+0x2b8>)
 8002ab6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	f043 0208 	orr.w	r2, r3, #8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d012      	beq.n	8002b06 <HAL_UART_IRQHandler+0x196>
 8002ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00c      	beq.n	8002b06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002af4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afc:	f043 0220 	orr.w	r2, r3, #32
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8249 	beq.w	8002fa4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d013      	beq.n	8002b46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d105      	bne.n	8002b36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d005      	beq.n	8002b6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d054      	beq.n	8002c14 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f001 f81c 	bl	8003ba8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d146      	bne.n	8002c0c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3308      	adds	r3, #8
 8002b84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3308      	adds	r3, #8
 8002ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002baa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1d9      	bne.n	8002b7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d017      	beq.n	8002c04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bda:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <HAL_UART_IRQHandler+0x2c0>)
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe f9cd 	bl	8000f84 <HAL_DMA_Abort_IT>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d019      	beq.n	8002c24 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c02:	e00f      	b.n	8002c24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f9e1 	bl	8002fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0a:	e00b      	b.n	8002c24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f9dd 	bl	8002fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c12:	e007      	b.n	8002c24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f9d9 	bl	8002fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002c22:	e1bf      	b.n	8002fa4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	bf00      	nop
    return;
 8002c26:	e1bd      	b.n	8002fa4 <HAL_UART_IRQHandler+0x634>
 8002c28:	10000001 	.word	0x10000001
 8002c2c:	04000120 	.word	0x04000120
 8002c30:	08003c75 	.word	0x08003c75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	f040 8153 	bne.w	8002ee4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 814c 	beq.w	8002ee4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8145 	beq.w	8002ee4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2210      	movs	r2, #16
 8002c60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b40      	cmp	r3, #64	; 0x40
 8002c6e:	f040 80bb 	bne.w	8002de8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 818f 	beq.w	8002fa8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c94:	429a      	cmp	r2, r3
 8002c96:	f080 8187 	bcs.w	8002fa8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ca0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 8087 	bne.w	8002dc6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ce6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cf2:	e841 2300 	strex	r3, r2, [r1]
 8002cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1da      	bne.n	8002cb8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3308      	adds	r3, #8
 8002d08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3308      	adds	r3, #8
 8002d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d32:	e841 2300 	strex	r3, r2, [r1]
 8002d36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e1      	bne.n	8002d02 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3308      	adds	r3, #8
 8002d44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d48:	e853 3f00 	ldrex	r3, [r3]
 8002d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d6a:	e841 2300 	strex	r3, r2, [r1]
 8002d6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1e3      	bne.n	8002d3e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8c:	e853 3f00 	ldrex	r3, [r3]
 8002d90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d94:	f023 0310 	bic.w	r3, r3, #16
 8002d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002da6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002da8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002daa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dae:	e841 2300 	strex	r3, r2, [r1]
 8002db2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1e4      	bne.n	8002d84 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe f886 	bl	8000ed2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	4619      	mov	r1, r3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f8fd 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002de6:	e0df      	b.n	8002fa8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80d1 	beq.w	8002fac <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002e0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80cc 	beq.w	8002fac <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e36:	647b      	str	r3, [r7, #68]	; 0x44
 8002e38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e3e:	e841 2300 	strex	r3, r2, [r1]
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1e4      	bne.n	8002e14 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3308      	adds	r3, #8
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	e853 3f00 	ldrex	r3, [r3]
 8002e58:	623b      	str	r3, [r7, #32]
   return(result);
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e72:	633a      	str	r2, [r7, #48]	; 0x30
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e1      	bne.n	8002e4a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	e853 3f00 	ldrex	r3, [r3]
 8002ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0310 	bic.w	r3, r3, #16
 8002eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	69b9      	ldr	r1, [r7, #24]
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e4      	bne.n	8002e9a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ed6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eda:	4619      	mov	r1, r3
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f87f 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ee2:	e063      	b.n	8002fac <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00e      	beq.n	8002f0e <HAL_UART_IRQHandler+0x59e>
 8002ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f001 fdb4 	bl	8004a74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f0c:	e051      	b.n	8002fb2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d014      	beq.n	8002f44 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d03a      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
    }
    return;
 8002f42:	e035      	b.n	8002fb0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HAL_UART_IRQHandler+0x5f4>
 8002f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f001 f841 	bl	8003fe4 <UART_EndTransmit_IT>
    return;
 8002f62:	e026      	b.n	8002fb2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_UART_IRQHandler+0x614>
 8002f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f001 fd8d 	bl	8004a9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f82:	e016      	b.n	8002fb2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x642>
 8002f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da0c      	bge.n	8002fb2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f001 fd75 	bl	8004a88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f9e:	e008      	b.n	8002fb2 <HAL_UART_IRQHandler+0x642>
      return;
 8002fa0:	bf00      	nop
 8002fa2:	e006      	b.n	8002fb2 <HAL_UART_IRQHandler+0x642>
    return;
 8002fa4:	bf00      	nop
 8002fa6:	e004      	b.n	8002fb2 <HAL_UART_IRQHandler+0x642>
      return;
 8002fa8:	bf00      	nop
 8002faa:	e002      	b.n	8002fb2 <HAL_UART_IRQHandler+0x642>
      return;
 8002fac:	bf00      	nop
 8002fae:	e000      	b.n	8002fb2 <HAL_UART_IRQHandler+0x642>
    return;
 8002fb0:	bf00      	nop
  }
}
 8002fb2:	37e8      	adds	r7, #232	; 0xe8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ffc:	b08c      	sub	sp, #48	; 0x30
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	431a      	orrs	r2, r3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	431a      	orrs	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	4313      	orrs	r3, r2
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4baa      	ldr	r3, [pc, #680]	; (80032d0 <UART_SetConfig+0x2d8>)
 8003028:	4013      	ands	r3, r2
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003030:	430b      	orrs	r3, r1
 8003032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a9f      	ldr	r2, [pc, #636]	; (80032d4 <UART_SetConfig+0x2dc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d004      	beq.n	8003064 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003060:	4313      	orrs	r3, r2
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800306e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003078:	430b      	orrs	r3, r1
 800307a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	f023 010f 	bic.w	r1, r3, #15
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a90      	ldr	r2, [pc, #576]	; (80032d8 <UART_SetConfig+0x2e0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d125      	bne.n	80030e8 <UART_SetConfig+0xf0>
 800309c:	4b8f      	ldr	r3, [pc, #572]	; (80032dc <UART_SetConfig+0x2e4>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d81a      	bhi.n	80030e0 <UART_SetConfig+0xe8>
 80030aa:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <UART_SetConfig+0xb8>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030d1 	.word	0x080030d1
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030d9 	.word	0x080030d9
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030c6:	e116      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80030c8:	2302      	movs	r3, #2
 80030ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ce:	e112      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80030d0:	2304      	movs	r3, #4
 80030d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030d6:	e10e      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80030d8:	2308      	movs	r3, #8
 80030da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030de:	e10a      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80030e0:	2310      	movs	r3, #16
 80030e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e6:	e106      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a7c      	ldr	r2, [pc, #496]	; (80032e0 <UART_SetConfig+0x2e8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d138      	bne.n	8003164 <UART_SetConfig+0x16c>
 80030f2:	4b7a      	ldr	r3, [pc, #488]	; (80032dc <UART_SetConfig+0x2e4>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b0c      	cmp	r3, #12
 80030fe:	d82d      	bhi.n	800315c <UART_SetConfig+0x164>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <UART_SetConfig+0x110>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	0800313d 	.word	0x0800313d
 800310c:	0800315d 	.word	0x0800315d
 8003110:	0800315d 	.word	0x0800315d
 8003114:	0800315d 	.word	0x0800315d
 8003118:	0800314d 	.word	0x0800314d
 800311c:	0800315d 	.word	0x0800315d
 8003120:	0800315d 	.word	0x0800315d
 8003124:	0800315d 	.word	0x0800315d
 8003128:	08003145 	.word	0x08003145
 800312c:	0800315d 	.word	0x0800315d
 8003130:	0800315d 	.word	0x0800315d
 8003134:	0800315d 	.word	0x0800315d
 8003138:	08003155 	.word	0x08003155
 800313c:	2300      	movs	r3, #0
 800313e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003142:	e0d8      	b.n	80032f6 <UART_SetConfig+0x2fe>
 8003144:	2302      	movs	r3, #2
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314a:	e0d4      	b.n	80032f6 <UART_SetConfig+0x2fe>
 800314c:	2304      	movs	r3, #4
 800314e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003152:	e0d0      	b.n	80032f6 <UART_SetConfig+0x2fe>
 8003154:	2308      	movs	r3, #8
 8003156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800315a:	e0cc      	b.n	80032f6 <UART_SetConfig+0x2fe>
 800315c:	2310      	movs	r3, #16
 800315e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003162:	e0c8      	b.n	80032f6 <UART_SetConfig+0x2fe>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a5e      	ldr	r2, [pc, #376]	; (80032e4 <UART_SetConfig+0x2ec>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d125      	bne.n	80031ba <UART_SetConfig+0x1c2>
 800316e:	4b5b      	ldr	r3, [pc, #364]	; (80032dc <UART_SetConfig+0x2e4>)
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003174:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003178:	2b30      	cmp	r3, #48	; 0x30
 800317a:	d016      	beq.n	80031aa <UART_SetConfig+0x1b2>
 800317c:	2b30      	cmp	r3, #48	; 0x30
 800317e:	d818      	bhi.n	80031b2 <UART_SetConfig+0x1ba>
 8003180:	2b20      	cmp	r3, #32
 8003182:	d00a      	beq.n	800319a <UART_SetConfig+0x1a2>
 8003184:	2b20      	cmp	r3, #32
 8003186:	d814      	bhi.n	80031b2 <UART_SetConfig+0x1ba>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <UART_SetConfig+0x19a>
 800318c:	2b10      	cmp	r3, #16
 800318e:	d008      	beq.n	80031a2 <UART_SetConfig+0x1aa>
 8003190:	e00f      	b.n	80031b2 <UART_SetConfig+0x1ba>
 8003192:	2300      	movs	r3, #0
 8003194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003198:	e0ad      	b.n	80032f6 <UART_SetConfig+0x2fe>
 800319a:	2302      	movs	r3, #2
 800319c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031a0:	e0a9      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80031a2:	2304      	movs	r3, #4
 80031a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031a8:	e0a5      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80031aa:	2308      	movs	r3, #8
 80031ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031b0:	e0a1      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80031b2:	2310      	movs	r3, #16
 80031b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031b8:	e09d      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a4a      	ldr	r2, [pc, #296]	; (80032e8 <UART_SetConfig+0x2f0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d125      	bne.n	8003210 <UART_SetConfig+0x218>
 80031c4:	4b45      	ldr	r3, [pc, #276]	; (80032dc <UART_SetConfig+0x2e4>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031ce:	2bc0      	cmp	r3, #192	; 0xc0
 80031d0:	d016      	beq.n	8003200 <UART_SetConfig+0x208>
 80031d2:	2bc0      	cmp	r3, #192	; 0xc0
 80031d4:	d818      	bhi.n	8003208 <UART_SetConfig+0x210>
 80031d6:	2b80      	cmp	r3, #128	; 0x80
 80031d8:	d00a      	beq.n	80031f0 <UART_SetConfig+0x1f8>
 80031da:	2b80      	cmp	r3, #128	; 0x80
 80031dc:	d814      	bhi.n	8003208 <UART_SetConfig+0x210>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <UART_SetConfig+0x1f0>
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d008      	beq.n	80031f8 <UART_SetConfig+0x200>
 80031e6:	e00f      	b.n	8003208 <UART_SetConfig+0x210>
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ee:	e082      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80031f0:	2302      	movs	r3, #2
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031f6:	e07e      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80031f8:	2304      	movs	r3, #4
 80031fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031fe:	e07a      	b.n	80032f6 <UART_SetConfig+0x2fe>
 8003200:	2308      	movs	r3, #8
 8003202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003206:	e076      	b.n	80032f6 <UART_SetConfig+0x2fe>
 8003208:	2310      	movs	r3, #16
 800320a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800320e:	e072      	b.n	80032f6 <UART_SetConfig+0x2fe>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a35      	ldr	r2, [pc, #212]	; (80032ec <UART_SetConfig+0x2f4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d12a      	bne.n	8003270 <UART_SetConfig+0x278>
 800321a:	4b30      	ldr	r3, [pc, #192]	; (80032dc <UART_SetConfig+0x2e4>)
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003224:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003228:	d01a      	beq.n	8003260 <UART_SetConfig+0x268>
 800322a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800322e:	d81b      	bhi.n	8003268 <UART_SetConfig+0x270>
 8003230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003234:	d00c      	beq.n	8003250 <UART_SetConfig+0x258>
 8003236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323a:	d815      	bhi.n	8003268 <UART_SetConfig+0x270>
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <UART_SetConfig+0x250>
 8003240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003244:	d008      	beq.n	8003258 <UART_SetConfig+0x260>
 8003246:	e00f      	b.n	8003268 <UART_SetConfig+0x270>
 8003248:	2300      	movs	r3, #0
 800324a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800324e:	e052      	b.n	80032f6 <UART_SetConfig+0x2fe>
 8003250:	2302      	movs	r3, #2
 8003252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003256:	e04e      	b.n	80032f6 <UART_SetConfig+0x2fe>
 8003258:	2304      	movs	r3, #4
 800325a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800325e:	e04a      	b.n	80032f6 <UART_SetConfig+0x2fe>
 8003260:	2308      	movs	r3, #8
 8003262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003266:	e046      	b.n	80032f6 <UART_SetConfig+0x2fe>
 8003268:	2310      	movs	r3, #16
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800326e:	e042      	b.n	80032f6 <UART_SetConfig+0x2fe>
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <UART_SetConfig+0x2dc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d13a      	bne.n	80032f0 <UART_SetConfig+0x2f8>
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <UART_SetConfig+0x2e4>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003284:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003288:	d01a      	beq.n	80032c0 <UART_SetConfig+0x2c8>
 800328a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800328e:	d81b      	bhi.n	80032c8 <UART_SetConfig+0x2d0>
 8003290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003294:	d00c      	beq.n	80032b0 <UART_SetConfig+0x2b8>
 8003296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800329a:	d815      	bhi.n	80032c8 <UART_SetConfig+0x2d0>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <UART_SetConfig+0x2b0>
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a4:	d008      	beq.n	80032b8 <UART_SetConfig+0x2c0>
 80032a6:	e00f      	b.n	80032c8 <UART_SetConfig+0x2d0>
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ae:	e022      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80032b0:	2302      	movs	r3, #2
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032b6:	e01e      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80032b8:	2304      	movs	r3, #4
 80032ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032be:	e01a      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80032c0:	2308      	movs	r3, #8
 80032c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032c6:	e016      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80032c8:	2310      	movs	r3, #16
 80032ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ce:	e012      	b.n	80032f6 <UART_SetConfig+0x2fe>
 80032d0:	cfff69f3 	.word	0xcfff69f3
 80032d4:	40008000 	.word	0x40008000
 80032d8:	40013800 	.word	0x40013800
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40004400 	.word	0x40004400
 80032e4:	40004800 	.word	0x40004800
 80032e8:	40004c00 	.word	0x40004c00
 80032ec:	40005000 	.word	0x40005000
 80032f0:	2310      	movs	r3, #16
 80032f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4aae      	ldr	r2, [pc, #696]	; (80035b4 <UART_SetConfig+0x5bc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	f040 8097 	bne.w	8003430 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003302:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003306:	2b08      	cmp	r3, #8
 8003308:	d823      	bhi.n	8003352 <UART_SetConfig+0x35a>
 800330a:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <UART_SetConfig+0x318>)
 800330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003310:	08003335 	.word	0x08003335
 8003314:	08003353 	.word	0x08003353
 8003318:	0800333d 	.word	0x0800333d
 800331c:	08003353 	.word	0x08003353
 8003320:	08003343 	.word	0x08003343
 8003324:	08003353 	.word	0x08003353
 8003328:	08003353 	.word	0x08003353
 800332c:	08003353 	.word	0x08003353
 8003330:	0800334b 	.word	0x0800334b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003334:	f7fe fdd6 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 8003338:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800333a:	e010      	b.n	800335e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800333c:	4b9e      	ldr	r3, [pc, #632]	; (80035b8 <UART_SetConfig+0x5c0>)
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003340:	e00d      	b.n	800335e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003342:	f7fe fd61 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8003346:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003348:	e009      	b.n	800335e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003350:	e005      	b.n	800335e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800335c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8130 	beq.w	80035c6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	4a94      	ldr	r2, [pc, #592]	; (80035bc <UART_SetConfig+0x5c4>)
 800336c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003370:	461a      	mov	r2, r3
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	fbb3 f3f2 	udiv	r3, r3, r2
 8003378:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	429a      	cmp	r2, r3
 8003388:	d305      	bcc.n	8003396 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	429a      	cmp	r2, r3
 8003394:	d903      	bls.n	800339e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800339c:	e113      	b.n	80035c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	2200      	movs	r2, #0
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	60fa      	str	r2, [r7, #12]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	4a84      	ldr	r2, [pc, #528]	; (80035bc <UART_SetConfig+0x5c4>)
 80033ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2200      	movs	r2, #0
 80033b4:	603b      	str	r3, [r7, #0]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033c0:	f7fc ff86 	bl	80002d0 <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4610      	mov	r0, r2
 80033ca:	4619      	mov	r1, r3
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	020b      	lsls	r3, r1, #8
 80033d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033da:	0202      	lsls	r2, r0, #8
 80033dc:	6979      	ldr	r1, [r7, #20]
 80033de:	6849      	ldr	r1, [r1, #4]
 80033e0:	0849      	lsrs	r1, r1, #1
 80033e2:	2000      	movs	r0, #0
 80033e4:	460c      	mov	r4, r1
 80033e6:	4605      	mov	r5, r0
 80033e8:	eb12 0804 	adds.w	r8, r2, r4
 80033ec:	eb43 0905 	adc.w	r9, r3, r5
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	469a      	mov	sl, r3
 80033f8:	4693      	mov	fp, r2
 80033fa:	4652      	mov	r2, sl
 80033fc:	465b      	mov	r3, fp
 80033fe:	4640      	mov	r0, r8
 8003400:	4649      	mov	r1, r9
 8003402:	f7fc ff65 	bl	80002d0 <__aeabi_uldivmod>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4613      	mov	r3, r2
 800340c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003414:	d308      	bcc.n	8003428 <UART_SetConfig+0x430>
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800341c:	d204      	bcs.n	8003428 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a3a      	ldr	r2, [r7, #32]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	e0ce      	b.n	80035c6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800342e:	e0ca      	b.n	80035c6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003438:	d166      	bne.n	8003508 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800343a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800343e:	2b08      	cmp	r3, #8
 8003440:	d827      	bhi.n	8003492 <UART_SetConfig+0x49a>
 8003442:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <UART_SetConfig+0x450>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	0800346d 	.word	0x0800346d
 800344c:	08003475 	.word	0x08003475
 8003450:	0800347d 	.word	0x0800347d
 8003454:	08003493 	.word	0x08003493
 8003458:	08003483 	.word	0x08003483
 800345c:	08003493 	.word	0x08003493
 8003460:	08003493 	.word	0x08003493
 8003464:	08003493 	.word	0x08003493
 8003468:	0800348b 	.word	0x0800348b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800346c:	f7fe fd3a 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 8003470:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003472:	e014      	b.n	800349e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003474:	f7fe fd4c 	bl	8001f10 <HAL_RCC_GetPCLK2Freq>
 8003478:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800347a:	e010      	b.n	800349e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800347c:	4b4e      	ldr	r3, [pc, #312]	; (80035b8 <UART_SetConfig+0x5c0>)
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003480:	e00d      	b.n	800349e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003482:	f7fe fcc1 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8003486:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003488:	e009      	b.n	800349e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800348a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003490:	e005      	b.n	800349e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800349c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8090 	beq.w	80035c6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	4a44      	ldr	r2, [pc, #272]	; (80035bc <UART_SetConfig+0x5c4>)
 80034ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034b0:	461a      	mov	r2, r3
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80034b8:	005a      	lsls	r2, r3, #1
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	441a      	add	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	2b0f      	cmp	r3, #15
 80034d0:	d916      	bls.n	8003500 <UART_SetConfig+0x508>
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d8:	d212      	bcs.n	8003500 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f023 030f 	bic.w	r3, r3, #15
 80034e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	8bfb      	ldrh	r3, [r7, #30]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	8bfa      	ldrh	r2, [r7, #30]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	e062      	b.n	80035c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003506:	e05e      	b.n	80035c6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003508:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800350c:	2b08      	cmp	r3, #8
 800350e:	d828      	bhi.n	8003562 <UART_SetConfig+0x56a>
 8003510:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <UART_SetConfig+0x520>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	0800353d 	.word	0x0800353d
 800351c:	08003545 	.word	0x08003545
 8003520:	0800354d 	.word	0x0800354d
 8003524:	08003563 	.word	0x08003563
 8003528:	08003553 	.word	0x08003553
 800352c:	08003563 	.word	0x08003563
 8003530:	08003563 	.word	0x08003563
 8003534:	08003563 	.word	0x08003563
 8003538:	0800355b 	.word	0x0800355b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800353c:	f7fe fcd2 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 8003540:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003542:	e014      	b.n	800356e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003544:	f7fe fce4 	bl	8001f10 <HAL_RCC_GetPCLK2Freq>
 8003548:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800354a:	e010      	b.n	800356e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800354c:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <UART_SetConfig+0x5c0>)
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003550:	e00d      	b.n	800356e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003552:	f7fe fc59 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8003556:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003558:	e009      	b.n	800356e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800355a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003560:	e005      	b.n	800356e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800356c:	bf00      	nop
    }

    if (pclk != 0U)
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	2b00      	cmp	r3, #0
 8003572:	d028      	beq.n	80035c6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	4a10      	ldr	r2, [pc, #64]	; (80035bc <UART_SetConfig+0x5c4>)
 800357a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800357e:	461a      	mov	r2, r3
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	fbb3 f2f2 	udiv	r2, r3, r2
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	441a      	add	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	fbb2 f3f3 	udiv	r3, r2, r3
 8003596:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	d910      	bls.n	80035c0 <UART_SetConfig+0x5c8>
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d20c      	bcs.n	80035c0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60da      	str	r2, [r3, #12]
 80035b0:	e009      	b.n	80035c6 <UART_SetConfig+0x5ce>
 80035b2:	bf00      	nop
 80035b4:	40008000 	.word	0x40008000
 80035b8:	00f42400 	.word	0x00f42400
 80035bc:	08005664 	.word	0x08005664
      }
      else
      {
        ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2200      	movs	r2, #0
 80035e0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80035e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3730      	adds	r7, #48	; 0x30
 80035ea:	46bd      	mov	sp, r7
 80035ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01a      	beq.n	8003706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ee:	d10a      	bne.n	8003706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	605a      	str	r2, [r3, #4]
  }
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b098      	sub	sp, #96	; 0x60
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003744:	f7fd faaa 	bl	8000c9c <HAL_GetTick>
 8003748:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b08      	cmp	r3, #8
 8003756:	d12f      	bne.n	80037b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003760:	2200      	movs	r2, #0
 8003762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f88e 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d022      	beq.n	80037b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003786:	653b      	str	r3, [r7, #80]	; 0x50
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003790:	647b      	str	r3, [r7, #68]	; 0x44
 8003792:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800379e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e6      	bne.n	8003772 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e063      	b.n	8003880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d149      	bne.n	800385a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ce:	2200      	movs	r2, #0
 80037d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f857 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d03c      	beq.n	800385a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	623b      	str	r3, [r7, #32]
   return(result);
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003800:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e6      	bne.n	80037e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3308      	adds	r3, #8
 8003818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	60fb      	str	r3, [r7, #12]
   return(result);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	64bb      	str	r3, [r7, #72]	; 0x48
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3308      	adds	r3, #8
 8003830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003832:	61fa      	str	r2, [r7, #28]
 8003834:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	69b9      	ldr	r1, [r7, #24]
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	617b      	str	r3, [r7, #20]
   return(result);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e5      	bne.n	8003812 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e012      	b.n	8003880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3758      	adds	r7, #88	; 0x58
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003898:	e04f      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d04b      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fd f9fb 	bl	8000c9c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e04e      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d037      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d034      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d031      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d110      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2208      	movs	r2, #8
 80038ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f95b 	bl	8003ba8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2208      	movs	r2, #8
 80038f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e029      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003914:	d111      	bne.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800391e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f941 	bl	8003ba8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e00f      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	429a      	cmp	r2, r3
 8003956:	d0a0      	beq.n	800389a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003964:	b480      	push	{r7}
 8003966:	b0a3      	sub	sp, #140	; 0x8c
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	88fa      	ldrh	r2, [r7, #6]
 800397c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003996:	d10e      	bne.n	80039b6 <UART_Start_Receive_IT+0x52>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <UART_Start_Receive_IT+0x48>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039aa:	e02d      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	22ff      	movs	r2, #255	; 0xff
 80039b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039b4:	e028      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <UART_Start_Receive_IT+0x76>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <UART_Start_Receive_IT+0x6c>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	22ff      	movs	r2, #255	; 0xff
 80039ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039ce:	e01b      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	227f      	movs	r2, #127	; 0x7f
 80039d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039d8:	e016      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e2:	d10d      	bne.n	8003a00 <UART_Start_Receive_IT+0x9c>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <UART_Start_Receive_IT+0x92>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	227f      	movs	r2, #127	; 0x7f
 80039f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039f4:	e008      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	223f      	movs	r2, #63	; 0x3f
 80039fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039fe:	e003      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2222      	movs	r2, #34	; 0x22
 8003a14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3308      	adds	r3, #8
 8003a38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003a3c:	673a      	str	r2, [r7, #112]	; 0x70
 8003a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003a42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e3      	bne.n	8003a18 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a58:	d14f      	bne.n	8003afa <UART_Start_Receive_IT+0x196>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003a60:	88fa      	ldrh	r2, [r7, #6]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d349      	bcc.n	8003afa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6e:	d107      	bne.n	8003a80 <UART_Start_Receive_IT+0x11c>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d103      	bne.n	8003a80 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a47      	ldr	r2, [pc, #284]	; (8003b98 <UART_Start_Receive_IT+0x234>)
 8003a7c:	675a      	str	r2, [r3, #116]	; 0x74
 8003a7e:	e002      	b.n	8003a86 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a46      	ldr	r2, [pc, #280]	; (8003b9c <UART_Start_Receive_IT+0x238>)
 8003a84:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01a      	beq.n	8003ac4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ab2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ab6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ab8:	e841 2300 	strex	r3, r2, [r1]
 8003abc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e4      	bne.n	8003a8e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003ae4:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ae6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e5      	bne.n	8003ac4 <UART_Start_Receive_IT+0x160>
 8003af8:	e046      	b.n	8003b88 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b02:	d107      	bne.n	8003b14 <UART_Start_Receive_IT+0x1b0>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a24      	ldr	r2, [pc, #144]	; (8003ba0 <UART_Start_Receive_IT+0x23c>)
 8003b10:	675a      	str	r2, [r3, #116]	; 0x74
 8003b12:	e002      	b.n	8003b1a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <UART_Start_Receive_IT+0x240>)
 8003b18:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d019      	beq.n	8003b56 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003b36:	677b      	str	r3, [r7, #116]	; 0x74
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b40:	637b      	str	r3, [r7, #52]	; 0x34
 8003b42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e6      	bne.n	8003b22 <UART_Start_Receive_IT+0x1be>
 8003b54:	e018      	b.n	8003b88 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	613b      	str	r3, [r7, #16]
   return(result);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f043 0320 	orr.w	r3, r3, #32
 8003b6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b74:	623b      	str	r3, [r7, #32]
 8003b76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b78:	69f9      	ldr	r1, [r7, #28]
 8003b7a:	6a3a      	ldr	r2, [r7, #32]
 8003b7c:	e841 2300 	strex	r3, r2, [r1]
 8003b80:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e6      	bne.n	8003b56 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	378c      	adds	r7, #140	; 0x8c
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	0800470d 	.word	0x0800470d
 8003b9c:	080043ad 	.word	0x080043ad
 8003ba0:	080041f5 	.word	0x080041f5
 8003ba4:	0800403d 	.word	0x0800403d

08003ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b095      	sub	sp, #84	; 0x54
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bce:	643b      	str	r3, [r7, #64]	; 0x40
 8003bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e6      	bne.n	8003bb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3308      	adds	r3, #8
 8003be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3308      	adds	r3, #8
 8003c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e3      	bne.n	8003be2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d118      	bne.n	8003c54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f023 0310 	bic.w	r3, r3, #16
 8003c36:	647b      	str	r3, [r7, #68]	; 0x44
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6979      	ldr	r1, [r7, #20]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e6      	bne.n	8003c22 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003c68:	bf00      	nop
 8003c6a:	3754      	adds	r7, #84	; 0x54
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff f99a 	bl	8002fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b08f      	sub	sp, #60	; 0x3c
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	2b21      	cmp	r3, #33	; 0x21
 8003cb0:	d14c      	bne.n	8003d4c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d132      	bne.n	8003d24 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cde:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e6      	bne.n	8003cbe <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d04:	633b      	str	r3, [r7, #48]	; 0x30
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6979      	ldr	r1, [r7, #20]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e6      	bne.n	8003cf0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003d22:	e013      	b.n	8003d4c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003d4c:	bf00      	nop
 8003d4e:	373c      	adds	r7, #60	; 0x3c
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b091      	sub	sp, #68	; 0x44
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	2b21      	cmp	r3, #33	; 0x21
 8003d68:	d151      	bne.n	8003e0e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d132      	bne.n	8003ddc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	623b      	str	r3, [r7, #32]
   return(result);
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	633b      	str	r3, [r7, #48]	; 0x30
 8003d96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e6      	bne.n	8003d76 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	69b9      	ldr	r1, [r7, #24]
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	617b      	str	r3, [r7, #20]
   return(result);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e6      	bne.n	8003da8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003dda:	e018      	b.n	8003e0e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df6:	1c9a      	adds	r2, r3, #2
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003e0e:	bf00      	nop
 8003e10:	3744      	adds	r7, #68	; 0x44
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b091      	sub	sp, #68	; 0x44
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	2b21      	cmp	r3, #33	; 0x21
 8003e2a:	d160      	bne.n	8003eee <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003e32:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003e34:	e057      	b.n	8003ee6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d133      	bne.n	8003eaa <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3308      	adds	r3, #8
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	623b      	str	r3, [r7, #32]
   return(result);
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e58:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3308      	adds	r3, #8
 8003e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e62:	633a      	str	r2, [r7, #48]	; 0x30
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e5      	bne.n	8003e42 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	69b9      	ldr	r1, [r7, #24]
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e6      	bne.n	8003e76 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003ea8:	e021      	b.n	8003eee <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003ee0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003ee6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1a4      	bne.n	8003e36 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003eec:	e7ff      	b.n	8003eee <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003eee:	bf00      	nop
 8003ef0:	3744      	adds	r7, #68	; 0x44
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b091      	sub	sp, #68	; 0x44
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	2b21      	cmp	r3, #33	; 0x21
 8003f0a:	d165      	bne.n	8003fd8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003f12:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f14:	e05c      	b.n	8003fd0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d133      	bne.n	8003f8a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3308      	adds	r3, #8
 8003f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e5      	bne.n	8003f22 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f78:	6979      	ldr	r1, [r7, #20]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	e841 2300 	strex	r3, r2, [r1]
 8003f80:	613b      	str	r3, [r7, #16]
   return(result);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e6      	bne.n	8003f56 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003f88:	e026      	b.n	8003fd8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d018      	beq.n	8003fca <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fac:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb2:	1c9a      	adds	r2, r3, #2
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003fca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003fd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d19f      	bne.n	8003f16 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003fd6:	e7ff      	b.n	8003fd8 <UART_TxISR_16BIT_FIFOEN+0xde>
 8003fd8:	bf00      	nop
 8003fda:	3744      	adds	r7, #68	; 0x44
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6979      	ldr	r1, [r7, #20]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	613b      	str	r3, [r7, #16]
   return(result);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e6      	bne.n	8003fec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fe ffc3 	bl	8002fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004032:	bf00      	nop
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b09c      	sub	sp, #112	; 0x70
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800404a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004054:	2b22      	cmp	r3, #34	; 0x22
 8004056:	f040 80be 	bne.w	80041d6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004064:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004068:	b2d9      	uxtb	r1, r3
 800406a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800406e:	b2da      	uxtb	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	400a      	ands	r2, r1
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 80a1 	bne.w	80041e6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80040c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e6      	bne.n	80040a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3308      	adds	r3, #8
 80040dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	667b      	str	r3, [r7, #100]	; 0x64
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3308      	adds	r3, #8
 80040f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040f6:	647a      	str	r2, [r7, #68]	; 0x44
 80040f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e5      	bne.n	80040d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a33      	ldr	r2, [pc, #204]	; (80041f0 <UART_RxISR_8BIT+0x1b4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d01f      	beq.n	8004168 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d018      	beq.n	8004168 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	623b      	str	r3, [r7, #32]
   return(result);
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800414a:	663b      	str	r3, [r7, #96]	; 0x60
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004154:	633b      	str	r3, [r7, #48]	; 0x30
 8004156:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800415a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e6      	bne.n	8004136 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d12e      	bne.n	80041ce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	60fb      	str	r3, [r7, #12]
   return(result);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0310 	bic.w	r3, r3, #16
 800418a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	69b9      	ldr	r1, [r7, #24]
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	617b      	str	r3, [r7, #20]
   return(result);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d103      	bne.n	80041be <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2210      	movs	r2, #16
 80041bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe ff0a 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041cc:	e00b      	b.n	80041e6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fc fb9c 	bl	800090c <HAL_UART_RxCpltCallback>
}
 80041d4:	e007      	b.n	80041e6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0208 	orr.w	r2, r2, #8
 80041e4:	619a      	str	r2, [r3, #24]
}
 80041e6:	bf00      	nop
 80041e8:	3770      	adds	r7, #112	; 0x70
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40008000 	.word	0x40008000

080041f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b09c      	sub	sp, #112	; 0x70
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004202:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800420c:	2b22      	cmp	r3, #34	; 0x22
 800420e:	f040 80be 	bne.w	800438e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004222:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004226:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800422a:	4013      	ands	r3, r2
 800422c:	b29a      	uxth	r2, r3
 800422e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004230:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	1c9a      	adds	r2, r3, #2
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 80a1 	bne.w	800439e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800426a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800426c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004270:	667b      	str	r3, [r7, #100]	; 0x64
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800427a:	657b      	str	r3, [r7, #84]	; 0x54
 800427c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004280:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e6      	bne.n	800425c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3308      	adds	r3, #8
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	663b      	str	r3, [r7, #96]	; 0x60
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3308      	adds	r3, #8
 80042ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042ae:	643a      	str	r2, [r7, #64]	; 0x40
 80042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e5      	bne.n	800428e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <UART_RxISR_16BIT+0x1b4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d01f      	beq.n	8004320 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d018      	beq.n	8004320 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800430e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e6      	bne.n	80042ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d12e      	bne.n	8004386 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	60bb      	str	r3, [r7, #8]
   return(result);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f023 0310 	bic.w	r3, r3, #16
 8004342:	65bb      	str	r3, [r7, #88]	; 0x58
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6979      	ldr	r1, [r7, #20]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	613b      	str	r3, [r7, #16]
   return(result);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e6      	bne.n	800432e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b10      	cmp	r3, #16
 800436c:	d103      	bne.n	8004376 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2210      	movs	r2, #16
 8004374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fe fe2e 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004384:	e00b      	b.n	800439e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fc fac0 	bl	800090c <HAL_UART_RxCpltCallback>
}
 800438c:	e007      	b.n	800439e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0208 	orr.w	r2, r2, #8
 800439c:	619a      	str	r2, [r3, #24]
}
 800439e:	bf00      	nop
 80043a0:	3770      	adds	r7, #112	; 0x70
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40008000 	.word	0x40008000

080043ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b0ac      	sub	sp, #176	; 0xb0
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80043ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e2:	2b22      	cmp	r3, #34	; 0x22
 80043e4:	f040 8182 	bne.w	80046ec <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80043ee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80043f2:	e125      	b.n	8004640 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80043fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8004402:	b2d9      	uxtb	r1, r3
 8004404:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004408:	b2da      	uxtb	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	400a      	ands	r2, r1
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800443a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	2b00      	cmp	r3, #0
 8004444:	d053      	beq.n	80044ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d011      	beq.n	8004476 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2201      	movs	r2, #1
 8004464:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446c:	f043 0201 	orr.w	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d011      	beq.n	80044a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2202      	movs	r2, #2
 8004494:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	f043 0204 	orr.w	r2, r3, #4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d011      	beq.n	80044d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80044b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2204      	movs	r2, #4
 80044c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f043 0202 	orr.w	r2, r3, #2
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d006      	beq.n	80044ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fe fd73 	bl	8002fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 80a2 	bne.w	8004640 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800450a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800451e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004520:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004524:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800452c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e4      	bne.n	80044fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3308      	adds	r3, #8
 8004538:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3308      	adds	r3, #8
 8004556:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800455a:	66ba      	str	r2, [r7, #104]	; 0x68
 800455c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004560:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e1      	bne.n	8004532 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a5f      	ldr	r2, [pc, #380]	; (8004704 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d021      	beq.n	80045d0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01a      	beq.n	80045d0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80045a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045bc:	657b      	str	r3, [r7, #84]	; 0x54
 80045be:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80045c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e4      	bne.n	800459a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d130      	bne.n	800463a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	f023 0310 	bic.w	r3, r3, #16
 80045f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004600:	643b      	str	r3, [r7, #64]	; 0x40
 8004602:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e4      	bne.n	80045de <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b10      	cmp	r3, #16
 8004620:	d103      	bne.n	800462a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2210      	movs	r2, #16
 8004628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004630:	4619      	mov	r1, r3
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fe fcd4 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
 8004638:	e002      	b.n	8004640 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fc f966 	bl	800090c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004640:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004644:	2b00      	cmp	r3, #0
 8004646:	d006      	beq.n	8004656 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	f47f aecf 	bne.w	80043f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800465c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004660:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004664:	2b00      	cmp	r3, #0
 8004666:	d049      	beq.n	80046fc <UART_RxISR_8BIT_FIFOEN+0x350>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800466e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004672:	429a      	cmp	r2, r3
 8004674:	d242      	bcs.n	80046fc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3308      	adds	r3, #8
 800467c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	61fb      	str	r3, [r7, #28]
   return(result);
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800468c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3308      	adds	r3, #8
 8004696:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800469a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e3      	bne.n	8004676 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a15      	ldr	r2, [pc, #84]	; (8004708 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80046b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f043 0320 	orr.w	r3, r3, #32
 80046c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6979      	ldr	r1, [r7, #20]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	613b      	str	r3, [r7, #16]
   return(result);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e4      	bne.n	80046b4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046ea:	e007      	b.n	80046fc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0208 	orr.w	r2, r2, #8
 80046fa:	619a      	str	r2, [r3, #24]
}
 80046fc:	bf00      	nop
 80046fe:	37b0      	adds	r7, #176	; 0xb0
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40008000 	.word	0x40008000
 8004708:	0800403d 	.word	0x0800403d

0800470c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b0ae      	sub	sp, #184	; 0xb8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800471a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004742:	2b22      	cmp	r3, #34	; 0x22
 8004744:	f040 8186 	bne.w	8004a54 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800474e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004752:	e129      	b.n	80049a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004766:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800476a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800476e:	4013      	ands	r3, r2
 8004770:	b29a      	uxth	r2, r3
 8004772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004776:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477c:	1c9a      	adds	r2, r3, #2
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800479e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d053      	beq.n	8004852 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d011      	beq.n	80047da <UART_RxISR_16BIT_FIFOEN+0xce>
 80047b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2201      	movs	r2, #1
 80047c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d0:	f043 0201 	orr.w	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d011      	beq.n	800480a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80047e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2202      	movs	r2, #2
 80047f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f043 0204 	orr.w	r2, r3, #4
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800480a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d011      	beq.n	800483a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004816:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2204      	movs	r2, #4
 8004828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f043 0202 	orr.w	r2, r3, #2
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7fe fbc1 	bl	8002fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 80a4 	bne.w	80049a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800486e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004882:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004886:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800488a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e2      	bne.n	8004860 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3308      	adds	r3, #8
 80048a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3308      	adds	r3, #8
 80048be:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80048c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e1      	bne.n	800489a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a5f      	ldr	r2, [pc, #380]	; (8004a6c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d021      	beq.n	8004938 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01a      	beq.n	8004938 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004912:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004924:	65bb      	str	r3, [r7, #88]	; 0x58
 8004926:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800492a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800492c:	e841 2300 	strex	r3, r2, [r1]
 8004930:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e4      	bne.n	8004902 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800493c:	2b01      	cmp	r3, #1
 800493e:	d130      	bne.n	80049a2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004956:	f023 0310 	bic.w	r3, r3, #16
 800495a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004968:	647b      	str	r3, [r7, #68]	; 0x44
 800496a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800496e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e4      	bne.n	8004946 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b10      	cmp	r3, #16
 8004988:	d103      	bne.n	8004992 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2210      	movs	r2, #16
 8004990:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fe fb20 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
 80049a0:	e002      	b.n	80049a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fb ffb2 	bl	800090c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80049a8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d006      	beq.n	80049be <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80049b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f47f aecb 	bne.w	8004754 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049c4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80049c8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d049      	beq.n	8004a64 <UART_RxISR_16BIT_FIFOEN+0x358>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80049d6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80049da:	429a      	cmp	r2, r3
 80049dc:	d242      	bcs.n	8004a64 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3308      	adds	r3, #8
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	623b      	str	r3, [r7, #32]
   return(result);
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3308      	adds	r3, #8
 80049fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004a02:	633a      	str	r2, [r7, #48]	; 0x30
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e3      	bne.n	80049de <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004a1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f043 0320 	orr.w	r3, r3, #32
 8004a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a3e:	61fb      	str	r3, [r7, #28]
 8004a40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	69b9      	ldr	r1, [r7, #24]
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e4      	bne.n	8004a1c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a52:	e007      	b.n	8004a64 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0208 	orr.w	r2, r2, #8
 8004a62:	619a      	str	r2, [r3, #24]
}
 8004a64:	bf00      	nop
 8004a66:	37b8      	adds	r7, #184	; 0xb8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40008000 	.word	0x40008000
 8004a70:	080041f5 	.word	0x080041f5

08004a74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e027      	b.n	8004b16 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2224      	movs	r2, #36	; 0x24
 8004ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004af4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e02d      	b.n	8004b96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2224      	movs	r2, #36	; 0x24
 8004b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f850 	bl	8004c1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e02d      	b.n	8004c12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2224      	movs	r2, #36	; 0x24
 8004bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0201 	bic.w	r2, r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f812 	bl	8004c1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d108      	bne.n	8004c3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c3c:	e031      	b.n	8004ca2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c3e:	2308      	movs	r3, #8
 8004c40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c42:	2308      	movs	r3, #8
 8004c44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	0e5b      	lsrs	r3, r3, #25
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	0f5b      	lsrs	r3, r3, #29
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c66:	7bbb      	ldrb	r3, [r7, #14]
 8004c68:	7b3a      	ldrb	r2, [r7, #12]
 8004c6a:	4911      	ldr	r1, [pc, #68]	; (8004cb0 <UARTEx_SetNbDataToProcess+0x94>)
 8004c6c:	5c8a      	ldrb	r2, [r1, r2]
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c72:	7b3a      	ldrb	r2, [r7, #12]
 8004c74:	490f      	ldr	r1, [pc, #60]	; (8004cb4 <UARTEx_SetNbDataToProcess+0x98>)
 8004c76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c78:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	7b7a      	ldrb	r2, [r7, #13]
 8004c88:	4909      	ldr	r1, [pc, #36]	; (8004cb0 <UARTEx_SetNbDataToProcess+0x94>)
 8004c8a:	5c8a      	ldrb	r2, [r1, r2]
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c90:	7b7a      	ldrb	r2, [r7, #13]
 8004c92:	4908      	ldr	r1, [pc, #32]	; (8004cb4 <UARTEx_SetNbDataToProcess+0x98>)
 8004c94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c96:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	0800567c 	.word	0x0800567c
 8004cb4:	08005684 	.word	0x08005684

08004cb8 <siprintf>:
 8004cb8:	b40e      	push	{r1, r2, r3}
 8004cba:	b500      	push	{lr}
 8004cbc:	b09c      	sub	sp, #112	; 0x70
 8004cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8004cc0:	9002      	str	r0, [sp, #8]
 8004cc2:	9006      	str	r0, [sp, #24]
 8004cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cc8:	4809      	ldr	r0, [pc, #36]	; (8004cf0 <siprintf+0x38>)
 8004cca:	9107      	str	r1, [sp, #28]
 8004ccc:	9104      	str	r1, [sp, #16]
 8004cce:	4909      	ldr	r1, [pc, #36]	; (8004cf4 <siprintf+0x3c>)
 8004cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cd4:	9105      	str	r1, [sp, #20]
 8004cd6:	6800      	ldr	r0, [r0, #0]
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	a902      	add	r1, sp, #8
 8004cdc:	f000 f992 	bl	8005004 <_svfiprintf_r>
 8004ce0:	9b02      	ldr	r3, [sp, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	b01c      	add	sp, #112	; 0x70
 8004ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cec:	b003      	add	sp, #12
 8004cee:	4770      	bx	lr
 8004cf0:	20000058 	.word	0x20000058
 8004cf4:	ffff0208 	.word	0xffff0208

08004cf8 <memset>:
 8004cf8:	4402      	add	r2, r0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d100      	bne.n	8004d02 <memset+0xa>
 8004d00:	4770      	bx	lr
 8004d02:	f803 1b01 	strb.w	r1, [r3], #1
 8004d06:	e7f9      	b.n	8004cfc <memset+0x4>

08004d08 <__errno>:
 8004d08:	4b01      	ldr	r3, [pc, #4]	; (8004d10 <__errno+0x8>)
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000058 	.word	0x20000058

08004d14 <__libc_init_array>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	4d0d      	ldr	r5, [pc, #52]	; (8004d4c <__libc_init_array+0x38>)
 8004d18:	4c0d      	ldr	r4, [pc, #52]	; (8004d50 <__libc_init_array+0x3c>)
 8004d1a:	1b64      	subs	r4, r4, r5
 8004d1c:	10a4      	asrs	r4, r4, #2
 8004d1e:	2600      	movs	r6, #0
 8004d20:	42a6      	cmp	r6, r4
 8004d22:	d109      	bne.n	8004d38 <__libc_init_array+0x24>
 8004d24:	4d0b      	ldr	r5, [pc, #44]	; (8004d54 <__libc_init_array+0x40>)
 8004d26:	4c0c      	ldr	r4, [pc, #48]	; (8004d58 <__libc_init_array+0x44>)
 8004d28:	f000 fc6a 	bl	8005600 <_init>
 8004d2c:	1b64      	subs	r4, r4, r5
 8004d2e:	10a4      	asrs	r4, r4, #2
 8004d30:	2600      	movs	r6, #0
 8004d32:	42a6      	cmp	r6, r4
 8004d34:	d105      	bne.n	8004d42 <__libc_init_array+0x2e>
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3c:	4798      	blx	r3
 8004d3e:	3601      	adds	r6, #1
 8004d40:	e7ee      	b.n	8004d20 <__libc_init_array+0xc>
 8004d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d46:	4798      	blx	r3
 8004d48:	3601      	adds	r6, #1
 8004d4a:	e7f2      	b.n	8004d32 <__libc_init_array+0x1e>
 8004d4c:	080056c8 	.word	0x080056c8
 8004d50:	080056c8 	.word	0x080056c8
 8004d54:	080056c8 	.word	0x080056c8
 8004d58:	080056cc 	.word	0x080056cc

08004d5c <__retarget_lock_acquire_recursive>:
 8004d5c:	4770      	bx	lr

08004d5e <__retarget_lock_release_recursive>:
 8004d5e:	4770      	bx	lr

08004d60 <_free_r>:
 8004d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d62:	2900      	cmp	r1, #0
 8004d64:	d044      	beq.n	8004df0 <_free_r+0x90>
 8004d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d6a:	9001      	str	r0, [sp, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d72:	bfb8      	it	lt
 8004d74:	18e4      	addlt	r4, r4, r3
 8004d76:	f000 f8df 	bl	8004f38 <__malloc_lock>
 8004d7a:	4a1e      	ldr	r2, [pc, #120]	; (8004df4 <_free_r+0x94>)
 8004d7c:	9801      	ldr	r0, [sp, #4]
 8004d7e:	6813      	ldr	r3, [r2, #0]
 8004d80:	b933      	cbnz	r3, 8004d90 <_free_r+0x30>
 8004d82:	6063      	str	r3, [r4, #4]
 8004d84:	6014      	str	r4, [r2, #0]
 8004d86:	b003      	add	sp, #12
 8004d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d8c:	f000 b8da 	b.w	8004f44 <__malloc_unlock>
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	d908      	bls.n	8004da6 <_free_r+0x46>
 8004d94:	6825      	ldr	r5, [r4, #0]
 8004d96:	1961      	adds	r1, r4, r5
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	bf01      	itttt	eq
 8004d9c:	6819      	ldreq	r1, [r3, #0]
 8004d9e:	685b      	ldreq	r3, [r3, #4]
 8004da0:	1949      	addeq	r1, r1, r5
 8004da2:	6021      	streq	r1, [r4, #0]
 8004da4:	e7ed      	b.n	8004d82 <_free_r+0x22>
 8004da6:	461a      	mov	r2, r3
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	b10b      	cbz	r3, 8004db0 <_free_r+0x50>
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	d9fa      	bls.n	8004da6 <_free_r+0x46>
 8004db0:	6811      	ldr	r1, [r2, #0]
 8004db2:	1855      	adds	r5, r2, r1
 8004db4:	42a5      	cmp	r5, r4
 8004db6:	d10b      	bne.n	8004dd0 <_free_r+0x70>
 8004db8:	6824      	ldr	r4, [r4, #0]
 8004dba:	4421      	add	r1, r4
 8004dbc:	1854      	adds	r4, r2, r1
 8004dbe:	42a3      	cmp	r3, r4
 8004dc0:	6011      	str	r1, [r2, #0]
 8004dc2:	d1e0      	bne.n	8004d86 <_free_r+0x26>
 8004dc4:	681c      	ldr	r4, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	6053      	str	r3, [r2, #4]
 8004dca:	440c      	add	r4, r1
 8004dcc:	6014      	str	r4, [r2, #0]
 8004dce:	e7da      	b.n	8004d86 <_free_r+0x26>
 8004dd0:	d902      	bls.n	8004dd8 <_free_r+0x78>
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	6003      	str	r3, [r0, #0]
 8004dd6:	e7d6      	b.n	8004d86 <_free_r+0x26>
 8004dd8:	6825      	ldr	r5, [r4, #0]
 8004dda:	1961      	adds	r1, r4, r5
 8004ddc:	428b      	cmp	r3, r1
 8004dde:	bf04      	itt	eq
 8004de0:	6819      	ldreq	r1, [r3, #0]
 8004de2:	685b      	ldreq	r3, [r3, #4]
 8004de4:	6063      	str	r3, [r4, #4]
 8004de6:	bf04      	itt	eq
 8004de8:	1949      	addeq	r1, r1, r5
 8004dea:	6021      	streq	r1, [r4, #0]
 8004dec:	6054      	str	r4, [r2, #4]
 8004dee:	e7ca      	b.n	8004d86 <_free_r+0x26>
 8004df0:	b003      	add	sp, #12
 8004df2:	bd30      	pop	{r4, r5, pc}
 8004df4:	20000294 	.word	0x20000294

08004df8 <sbrk_aligned>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	4e0e      	ldr	r6, [pc, #56]	; (8004e34 <sbrk_aligned+0x3c>)
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	6831      	ldr	r1, [r6, #0]
 8004e00:	4605      	mov	r5, r0
 8004e02:	b911      	cbnz	r1, 8004e0a <sbrk_aligned+0x12>
 8004e04:	f000 fba6 	bl	8005554 <_sbrk_r>
 8004e08:	6030      	str	r0, [r6, #0]
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 fba1 	bl	8005554 <_sbrk_r>
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	d00a      	beq.n	8004e2c <sbrk_aligned+0x34>
 8004e16:	1cc4      	adds	r4, r0, #3
 8004e18:	f024 0403 	bic.w	r4, r4, #3
 8004e1c:	42a0      	cmp	r0, r4
 8004e1e:	d007      	beq.n	8004e30 <sbrk_aligned+0x38>
 8004e20:	1a21      	subs	r1, r4, r0
 8004e22:	4628      	mov	r0, r5
 8004e24:	f000 fb96 	bl	8005554 <_sbrk_r>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d101      	bne.n	8004e30 <sbrk_aligned+0x38>
 8004e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8004e30:	4620      	mov	r0, r4
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	20000298 	.word	0x20000298

08004e38 <_malloc_r>:
 8004e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e3c:	1ccd      	adds	r5, r1, #3
 8004e3e:	f025 0503 	bic.w	r5, r5, #3
 8004e42:	3508      	adds	r5, #8
 8004e44:	2d0c      	cmp	r5, #12
 8004e46:	bf38      	it	cc
 8004e48:	250c      	movcc	r5, #12
 8004e4a:	2d00      	cmp	r5, #0
 8004e4c:	4607      	mov	r7, r0
 8004e4e:	db01      	blt.n	8004e54 <_malloc_r+0x1c>
 8004e50:	42a9      	cmp	r1, r5
 8004e52:	d905      	bls.n	8004e60 <_malloc_r+0x28>
 8004e54:	230c      	movs	r3, #12
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	2600      	movs	r6, #0
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f34 <_malloc_r+0xfc>
 8004e64:	f000 f868 	bl	8004f38 <__malloc_lock>
 8004e68:	f8d8 3000 	ldr.w	r3, [r8]
 8004e6c:	461c      	mov	r4, r3
 8004e6e:	bb5c      	cbnz	r4, 8004ec8 <_malloc_r+0x90>
 8004e70:	4629      	mov	r1, r5
 8004e72:	4638      	mov	r0, r7
 8004e74:	f7ff ffc0 	bl	8004df8 <sbrk_aligned>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	d155      	bne.n	8004f2a <_malloc_r+0xf2>
 8004e7e:	f8d8 4000 	ldr.w	r4, [r8]
 8004e82:	4626      	mov	r6, r4
 8004e84:	2e00      	cmp	r6, #0
 8004e86:	d145      	bne.n	8004f14 <_malloc_r+0xdc>
 8004e88:	2c00      	cmp	r4, #0
 8004e8a:	d048      	beq.n	8004f1e <_malloc_r+0xe6>
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	4631      	mov	r1, r6
 8004e90:	4638      	mov	r0, r7
 8004e92:	eb04 0903 	add.w	r9, r4, r3
 8004e96:	f000 fb5d 	bl	8005554 <_sbrk_r>
 8004e9a:	4581      	cmp	r9, r0
 8004e9c:	d13f      	bne.n	8004f1e <_malloc_r+0xe6>
 8004e9e:	6821      	ldr	r1, [r4, #0]
 8004ea0:	1a6d      	subs	r5, r5, r1
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	4638      	mov	r0, r7
 8004ea6:	f7ff ffa7 	bl	8004df8 <sbrk_aligned>
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d037      	beq.n	8004f1e <_malloc_r+0xe6>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	442b      	add	r3, r5
 8004eb2:	6023      	str	r3, [r4, #0]
 8004eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d038      	beq.n	8004f2e <_malloc_r+0xf6>
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	42a2      	cmp	r2, r4
 8004ec0:	d12b      	bne.n	8004f1a <_malloc_r+0xe2>
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	605a      	str	r2, [r3, #4]
 8004ec6:	e00f      	b.n	8004ee8 <_malloc_r+0xb0>
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	1b52      	subs	r2, r2, r5
 8004ecc:	d41f      	bmi.n	8004f0e <_malloc_r+0xd6>
 8004ece:	2a0b      	cmp	r2, #11
 8004ed0:	d917      	bls.n	8004f02 <_malloc_r+0xca>
 8004ed2:	1961      	adds	r1, r4, r5
 8004ed4:	42a3      	cmp	r3, r4
 8004ed6:	6025      	str	r5, [r4, #0]
 8004ed8:	bf18      	it	ne
 8004eda:	6059      	strne	r1, [r3, #4]
 8004edc:	6863      	ldr	r3, [r4, #4]
 8004ede:	bf08      	it	eq
 8004ee0:	f8c8 1000 	streq.w	r1, [r8]
 8004ee4:	5162      	str	r2, [r4, r5]
 8004ee6:	604b      	str	r3, [r1, #4]
 8004ee8:	4638      	mov	r0, r7
 8004eea:	f104 060b 	add.w	r6, r4, #11
 8004eee:	f000 f829 	bl	8004f44 <__malloc_unlock>
 8004ef2:	f026 0607 	bic.w	r6, r6, #7
 8004ef6:	1d23      	adds	r3, r4, #4
 8004ef8:	1af2      	subs	r2, r6, r3
 8004efa:	d0ae      	beq.n	8004e5a <_malloc_r+0x22>
 8004efc:	1b9b      	subs	r3, r3, r6
 8004efe:	50a3      	str	r3, [r4, r2]
 8004f00:	e7ab      	b.n	8004e5a <_malloc_r+0x22>
 8004f02:	42a3      	cmp	r3, r4
 8004f04:	6862      	ldr	r2, [r4, #4]
 8004f06:	d1dd      	bne.n	8004ec4 <_malloc_r+0x8c>
 8004f08:	f8c8 2000 	str.w	r2, [r8]
 8004f0c:	e7ec      	b.n	8004ee8 <_malloc_r+0xb0>
 8004f0e:	4623      	mov	r3, r4
 8004f10:	6864      	ldr	r4, [r4, #4]
 8004f12:	e7ac      	b.n	8004e6e <_malloc_r+0x36>
 8004f14:	4634      	mov	r4, r6
 8004f16:	6876      	ldr	r6, [r6, #4]
 8004f18:	e7b4      	b.n	8004e84 <_malloc_r+0x4c>
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	e7cc      	b.n	8004eb8 <_malloc_r+0x80>
 8004f1e:	230c      	movs	r3, #12
 8004f20:	603b      	str	r3, [r7, #0]
 8004f22:	4638      	mov	r0, r7
 8004f24:	f000 f80e 	bl	8004f44 <__malloc_unlock>
 8004f28:	e797      	b.n	8004e5a <_malloc_r+0x22>
 8004f2a:	6025      	str	r5, [r4, #0]
 8004f2c:	e7dc      	b.n	8004ee8 <_malloc_r+0xb0>
 8004f2e:	605b      	str	r3, [r3, #4]
 8004f30:	deff      	udf	#255	; 0xff
 8004f32:	bf00      	nop
 8004f34:	20000294 	.word	0x20000294

08004f38 <__malloc_lock>:
 8004f38:	4801      	ldr	r0, [pc, #4]	; (8004f40 <__malloc_lock+0x8>)
 8004f3a:	f7ff bf0f 	b.w	8004d5c <__retarget_lock_acquire_recursive>
 8004f3e:	bf00      	nop
 8004f40:	20000290 	.word	0x20000290

08004f44 <__malloc_unlock>:
 8004f44:	4801      	ldr	r0, [pc, #4]	; (8004f4c <__malloc_unlock+0x8>)
 8004f46:	f7ff bf0a 	b.w	8004d5e <__retarget_lock_release_recursive>
 8004f4a:	bf00      	nop
 8004f4c:	20000290 	.word	0x20000290

08004f50 <__ssputs_r>:
 8004f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f54:	688e      	ldr	r6, [r1, #8]
 8004f56:	461f      	mov	r7, r3
 8004f58:	42be      	cmp	r6, r7
 8004f5a:	680b      	ldr	r3, [r1, #0]
 8004f5c:	4682      	mov	sl, r0
 8004f5e:	460c      	mov	r4, r1
 8004f60:	4690      	mov	r8, r2
 8004f62:	d82c      	bhi.n	8004fbe <__ssputs_r+0x6e>
 8004f64:	898a      	ldrh	r2, [r1, #12]
 8004f66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f6a:	d026      	beq.n	8004fba <__ssputs_r+0x6a>
 8004f6c:	6965      	ldr	r5, [r4, #20]
 8004f6e:	6909      	ldr	r1, [r1, #16]
 8004f70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f74:	eba3 0901 	sub.w	r9, r3, r1
 8004f78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f7c:	1c7b      	adds	r3, r7, #1
 8004f7e:	444b      	add	r3, r9
 8004f80:	106d      	asrs	r5, r5, #1
 8004f82:	429d      	cmp	r5, r3
 8004f84:	bf38      	it	cc
 8004f86:	461d      	movcc	r5, r3
 8004f88:	0553      	lsls	r3, r2, #21
 8004f8a:	d527      	bpl.n	8004fdc <__ssputs_r+0x8c>
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	f7ff ff53 	bl	8004e38 <_malloc_r>
 8004f92:	4606      	mov	r6, r0
 8004f94:	b360      	cbz	r0, 8004ff0 <__ssputs_r+0xa0>
 8004f96:	6921      	ldr	r1, [r4, #16]
 8004f98:	464a      	mov	r2, r9
 8004f9a:	f000 faeb 	bl	8005574 <memcpy>
 8004f9e:	89a3      	ldrh	r3, [r4, #12]
 8004fa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa8:	81a3      	strh	r3, [r4, #12]
 8004faa:	6126      	str	r6, [r4, #16]
 8004fac:	6165      	str	r5, [r4, #20]
 8004fae:	444e      	add	r6, r9
 8004fb0:	eba5 0509 	sub.w	r5, r5, r9
 8004fb4:	6026      	str	r6, [r4, #0]
 8004fb6:	60a5      	str	r5, [r4, #8]
 8004fb8:	463e      	mov	r6, r7
 8004fba:	42be      	cmp	r6, r7
 8004fbc:	d900      	bls.n	8004fc0 <__ssputs_r+0x70>
 8004fbe:	463e      	mov	r6, r7
 8004fc0:	6820      	ldr	r0, [r4, #0]
 8004fc2:	4632      	mov	r2, r6
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	f000 faab 	bl	8005520 <memmove>
 8004fca:	68a3      	ldr	r3, [r4, #8]
 8004fcc:	1b9b      	subs	r3, r3, r6
 8004fce:	60a3      	str	r3, [r4, #8]
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	4433      	add	r3, r6
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fdc:	462a      	mov	r2, r5
 8004fde:	f000 fad7 	bl	8005590 <_realloc_r>
 8004fe2:	4606      	mov	r6, r0
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d1e0      	bne.n	8004faa <__ssputs_r+0x5a>
 8004fe8:	6921      	ldr	r1, [r4, #16]
 8004fea:	4650      	mov	r0, sl
 8004fec:	f7ff feb8 	bl	8004d60 <_free_r>
 8004ff0:	230c      	movs	r3, #12
 8004ff2:	f8ca 3000 	str.w	r3, [sl]
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8005002:	e7e9      	b.n	8004fd8 <__ssputs_r+0x88>

08005004 <_svfiprintf_r>:
 8005004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005008:	4698      	mov	r8, r3
 800500a:	898b      	ldrh	r3, [r1, #12]
 800500c:	061b      	lsls	r3, r3, #24
 800500e:	b09d      	sub	sp, #116	; 0x74
 8005010:	4607      	mov	r7, r0
 8005012:	460d      	mov	r5, r1
 8005014:	4614      	mov	r4, r2
 8005016:	d50e      	bpl.n	8005036 <_svfiprintf_r+0x32>
 8005018:	690b      	ldr	r3, [r1, #16]
 800501a:	b963      	cbnz	r3, 8005036 <_svfiprintf_r+0x32>
 800501c:	2140      	movs	r1, #64	; 0x40
 800501e:	f7ff ff0b 	bl	8004e38 <_malloc_r>
 8005022:	6028      	str	r0, [r5, #0]
 8005024:	6128      	str	r0, [r5, #16]
 8005026:	b920      	cbnz	r0, 8005032 <_svfiprintf_r+0x2e>
 8005028:	230c      	movs	r3, #12
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	e0d0      	b.n	80051d4 <_svfiprintf_r+0x1d0>
 8005032:	2340      	movs	r3, #64	; 0x40
 8005034:	616b      	str	r3, [r5, #20]
 8005036:	2300      	movs	r3, #0
 8005038:	9309      	str	r3, [sp, #36]	; 0x24
 800503a:	2320      	movs	r3, #32
 800503c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005040:	f8cd 800c 	str.w	r8, [sp, #12]
 8005044:	2330      	movs	r3, #48	; 0x30
 8005046:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051ec <_svfiprintf_r+0x1e8>
 800504a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800504e:	f04f 0901 	mov.w	r9, #1
 8005052:	4623      	mov	r3, r4
 8005054:	469a      	mov	sl, r3
 8005056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800505a:	b10a      	cbz	r2, 8005060 <_svfiprintf_r+0x5c>
 800505c:	2a25      	cmp	r2, #37	; 0x25
 800505e:	d1f9      	bne.n	8005054 <_svfiprintf_r+0x50>
 8005060:	ebba 0b04 	subs.w	fp, sl, r4
 8005064:	d00b      	beq.n	800507e <_svfiprintf_r+0x7a>
 8005066:	465b      	mov	r3, fp
 8005068:	4622      	mov	r2, r4
 800506a:	4629      	mov	r1, r5
 800506c:	4638      	mov	r0, r7
 800506e:	f7ff ff6f 	bl	8004f50 <__ssputs_r>
 8005072:	3001      	adds	r0, #1
 8005074:	f000 80a9 	beq.w	80051ca <_svfiprintf_r+0x1c6>
 8005078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800507a:	445a      	add	r2, fp
 800507c:	9209      	str	r2, [sp, #36]	; 0x24
 800507e:	f89a 3000 	ldrb.w	r3, [sl]
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 80a1 	beq.w	80051ca <_svfiprintf_r+0x1c6>
 8005088:	2300      	movs	r3, #0
 800508a:	f04f 32ff 	mov.w	r2, #4294967295
 800508e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005092:	f10a 0a01 	add.w	sl, sl, #1
 8005096:	9304      	str	r3, [sp, #16]
 8005098:	9307      	str	r3, [sp, #28]
 800509a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800509e:	931a      	str	r3, [sp, #104]	; 0x68
 80050a0:	4654      	mov	r4, sl
 80050a2:	2205      	movs	r2, #5
 80050a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a8:	4850      	ldr	r0, [pc, #320]	; (80051ec <_svfiprintf_r+0x1e8>)
 80050aa:	f7fb f8c1 	bl	8000230 <memchr>
 80050ae:	9a04      	ldr	r2, [sp, #16]
 80050b0:	b9d8      	cbnz	r0, 80050ea <_svfiprintf_r+0xe6>
 80050b2:	06d0      	lsls	r0, r2, #27
 80050b4:	bf44      	itt	mi
 80050b6:	2320      	movmi	r3, #32
 80050b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050bc:	0711      	lsls	r1, r2, #28
 80050be:	bf44      	itt	mi
 80050c0:	232b      	movmi	r3, #43	; 0x2b
 80050c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050c6:	f89a 3000 	ldrb.w	r3, [sl]
 80050ca:	2b2a      	cmp	r3, #42	; 0x2a
 80050cc:	d015      	beq.n	80050fa <_svfiprintf_r+0xf6>
 80050ce:	9a07      	ldr	r2, [sp, #28]
 80050d0:	4654      	mov	r4, sl
 80050d2:	2000      	movs	r0, #0
 80050d4:	f04f 0c0a 	mov.w	ip, #10
 80050d8:	4621      	mov	r1, r4
 80050da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050de:	3b30      	subs	r3, #48	; 0x30
 80050e0:	2b09      	cmp	r3, #9
 80050e2:	d94d      	bls.n	8005180 <_svfiprintf_r+0x17c>
 80050e4:	b1b0      	cbz	r0, 8005114 <_svfiprintf_r+0x110>
 80050e6:	9207      	str	r2, [sp, #28]
 80050e8:	e014      	b.n	8005114 <_svfiprintf_r+0x110>
 80050ea:	eba0 0308 	sub.w	r3, r0, r8
 80050ee:	fa09 f303 	lsl.w	r3, r9, r3
 80050f2:	4313      	orrs	r3, r2
 80050f4:	9304      	str	r3, [sp, #16]
 80050f6:	46a2      	mov	sl, r4
 80050f8:	e7d2      	b.n	80050a0 <_svfiprintf_r+0x9c>
 80050fa:	9b03      	ldr	r3, [sp, #12]
 80050fc:	1d19      	adds	r1, r3, #4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	9103      	str	r1, [sp, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	bfbb      	ittet	lt
 8005106:	425b      	neglt	r3, r3
 8005108:	f042 0202 	orrlt.w	r2, r2, #2
 800510c:	9307      	strge	r3, [sp, #28]
 800510e:	9307      	strlt	r3, [sp, #28]
 8005110:	bfb8      	it	lt
 8005112:	9204      	strlt	r2, [sp, #16]
 8005114:	7823      	ldrb	r3, [r4, #0]
 8005116:	2b2e      	cmp	r3, #46	; 0x2e
 8005118:	d10c      	bne.n	8005134 <_svfiprintf_r+0x130>
 800511a:	7863      	ldrb	r3, [r4, #1]
 800511c:	2b2a      	cmp	r3, #42	; 0x2a
 800511e:	d134      	bne.n	800518a <_svfiprintf_r+0x186>
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	1d1a      	adds	r2, r3, #4
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	9203      	str	r2, [sp, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	bfb8      	it	lt
 800512c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005130:	3402      	adds	r4, #2
 8005132:	9305      	str	r3, [sp, #20]
 8005134:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80051fc <_svfiprintf_r+0x1f8>
 8005138:	7821      	ldrb	r1, [r4, #0]
 800513a:	2203      	movs	r2, #3
 800513c:	4650      	mov	r0, sl
 800513e:	f7fb f877 	bl	8000230 <memchr>
 8005142:	b138      	cbz	r0, 8005154 <_svfiprintf_r+0x150>
 8005144:	9b04      	ldr	r3, [sp, #16]
 8005146:	eba0 000a 	sub.w	r0, r0, sl
 800514a:	2240      	movs	r2, #64	; 0x40
 800514c:	4082      	lsls	r2, r0
 800514e:	4313      	orrs	r3, r2
 8005150:	3401      	adds	r4, #1
 8005152:	9304      	str	r3, [sp, #16]
 8005154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005158:	4825      	ldr	r0, [pc, #148]	; (80051f0 <_svfiprintf_r+0x1ec>)
 800515a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800515e:	2206      	movs	r2, #6
 8005160:	f7fb f866 	bl	8000230 <memchr>
 8005164:	2800      	cmp	r0, #0
 8005166:	d038      	beq.n	80051da <_svfiprintf_r+0x1d6>
 8005168:	4b22      	ldr	r3, [pc, #136]	; (80051f4 <_svfiprintf_r+0x1f0>)
 800516a:	bb1b      	cbnz	r3, 80051b4 <_svfiprintf_r+0x1b0>
 800516c:	9b03      	ldr	r3, [sp, #12]
 800516e:	3307      	adds	r3, #7
 8005170:	f023 0307 	bic.w	r3, r3, #7
 8005174:	3308      	adds	r3, #8
 8005176:	9303      	str	r3, [sp, #12]
 8005178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800517a:	4433      	add	r3, r6
 800517c:	9309      	str	r3, [sp, #36]	; 0x24
 800517e:	e768      	b.n	8005052 <_svfiprintf_r+0x4e>
 8005180:	fb0c 3202 	mla	r2, ip, r2, r3
 8005184:	460c      	mov	r4, r1
 8005186:	2001      	movs	r0, #1
 8005188:	e7a6      	b.n	80050d8 <_svfiprintf_r+0xd4>
 800518a:	2300      	movs	r3, #0
 800518c:	3401      	adds	r4, #1
 800518e:	9305      	str	r3, [sp, #20]
 8005190:	4619      	mov	r1, r3
 8005192:	f04f 0c0a 	mov.w	ip, #10
 8005196:	4620      	mov	r0, r4
 8005198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800519c:	3a30      	subs	r2, #48	; 0x30
 800519e:	2a09      	cmp	r2, #9
 80051a0:	d903      	bls.n	80051aa <_svfiprintf_r+0x1a6>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0c6      	beq.n	8005134 <_svfiprintf_r+0x130>
 80051a6:	9105      	str	r1, [sp, #20]
 80051a8:	e7c4      	b.n	8005134 <_svfiprintf_r+0x130>
 80051aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80051ae:	4604      	mov	r4, r0
 80051b0:	2301      	movs	r3, #1
 80051b2:	e7f0      	b.n	8005196 <_svfiprintf_r+0x192>
 80051b4:	ab03      	add	r3, sp, #12
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	462a      	mov	r2, r5
 80051ba:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <_svfiprintf_r+0x1f4>)
 80051bc:	a904      	add	r1, sp, #16
 80051be:	4638      	mov	r0, r7
 80051c0:	f3af 8000 	nop.w
 80051c4:	1c42      	adds	r2, r0, #1
 80051c6:	4606      	mov	r6, r0
 80051c8:	d1d6      	bne.n	8005178 <_svfiprintf_r+0x174>
 80051ca:	89ab      	ldrh	r3, [r5, #12]
 80051cc:	065b      	lsls	r3, r3, #25
 80051ce:	f53f af2d 	bmi.w	800502c <_svfiprintf_r+0x28>
 80051d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051d4:	b01d      	add	sp, #116	; 0x74
 80051d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051da:	ab03      	add	r3, sp, #12
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	462a      	mov	r2, r5
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <_svfiprintf_r+0x1f4>)
 80051e2:	a904      	add	r1, sp, #16
 80051e4:	4638      	mov	r0, r7
 80051e6:	f000 f879 	bl	80052dc <_printf_i>
 80051ea:	e7eb      	b.n	80051c4 <_svfiprintf_r+0x1c0>
 80051ec:	0800568c 	.word	0x0800568c
 80051f0:	08005696 	.word	0x08005696
 80051f4:	00000000 	.word	0x00000000
 80051f8:	08004f51 	.word	0x08004f51
 80051fc:	08005692 	.word	0x08005692

08005200 <_printf_common>:
 8005200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	4616      	mov	r6, r2
 8005206:	4699      	mov	r9, r3
 8005208:	688a      	ldr	r2, [r1, #8]
 800520a:	690b      	ldr	r3, [r1, #16]
 800520c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005210:	4293      	cmp	r3, r2
 8005212:	bfb8      	it	lt
 8005214:	4613      	movlt	r3, r2
 8005216:	6033      	str	r3, [r6, #0]
 8005218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800521c:	4607      	mov	r7, r0
 800521e:	460c      	mov	r4, r1
 8005220:	b10a      	cbz	r2, 8005226 <_printf_common+0x26>
 8005222:	3301      	adds	r3, #1
 8005224:	6033      	str	r3, [r6, #0]
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	0699      	lsls	r1, r3, #26
 800522a:	bf42      	ittt	mi
 800522c:	6833      	ldrmi	r3, [r6, #0]
 800522e:	3302      	addmi	r3, #2
 8005230:	6033      	strmi	r3, [r6, #0]
 8005232:	6825      	ldr	r5, [r4, #0]
 8005234:	f015 0506 	ands.w	r5, r5, #6
 8005238:	d106      	bne.n	8005248 <_printf_common+0x48>
 800523a:	f104 0a19 	add.w	sl, r4, #25
 800523e:	68e3      	ldr	r3, [r4, #12]
 8005240:	6832      	ldr	r2, [r6, #0]
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	42ab      	cmp	r3, r5
 8005246:	dc26      	bgt.n	8005296 <_printf_common+0x96>
 8005248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800524c:	1e13      	subs	r3, r2, #0
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	bf18      	it	ne
 8005252:	2301      	movne	r3, #1
 8005254:	0692      	lsls	r2, r2, #26
 8005256:	d42b      	bmi.n	80052b0 <_printf_common+0xb0>
 8005258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800525c:	4649      	mov	r1, r9
 800525e:	4638      	mov	r0, r7
 8005260:	47c0      	blx	r8
 8005262:	3001      	adds	r0, #1
 8005264:	d01e      	beq.n	80052a4 <_printf_common+0xa4>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	6922      	ldr	r2, [r4, #16]
 800526a:	f003 0306 	and.w	r3, r3, #6
 800526e:	2b04      	cmp	r3, #4
 8005270:	bf02      	ittt	eq
 8005272:	68e5      	ldreq	r5, [r4, #12]
 8005274:	6833      	ldreq	r3, [r6, #0]
 8005276:	1aed      	subeq	r5, r5, r3
 8005278:	68a3      	ldr	r3, [r4, #8]
 800527a:	bf0c      	ite	eq
 800527c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005280:	2500      	movne	r5, #0
 8005282:	4293      	cmp	r3, r2
 8005284:	bfc4      	itt	gt
 8005286:	1a9b      	subgt	r3, r3, r2
 8005288:	18ed      	addgt	r5, r5, r3
 800528a:	2600      	movs	r6, #0
 800528c:	341a      	adds	r4, #26
 800528e:	42b5      	cmp	r5, r6
 8005290:	d11a      	bne.n	80052c8 <_printf_common+0xc8>
 8005292:	2000      	movs	r0, #0
 8005294:	e008      	b.n	80052a8 <_printf_common+0xa8>
 8005296:	2301      	movs	r3, #1
 8005298:	4652      	mov	r2, sl
 800529a:	4649      	mov	r1, r9
 800529c:	4638      	mov	r0, r7
 800529e:	47c0      	blx	r8
 80052a0:	3001      	adds	r0, #1
 80052a2:	d103      	bne.n	80052ac <_printf_common+0xac>
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ac:	3501      	adds	r5, #1
 80052ae:	e7c6      	b.n	800523e <_printf_common+0x3e>
 80052b0:	18e1      	adds	r1, r4, r3
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	2030      	movs	r0, #48	; 0x30
 80052b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052ba:	4422      	add	r2, r4
 80052bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052c4:	3302      	adds	r3, #2
 80052c6:	e7c7      	b.n	8005258 <_printf_common+0x58>
 80052c8:	2301      	movs	r3, #1
 80052ca:	4622      	mov	r2, r4
 80052cc:	4649      	mov	r1, r9
 80052ce:	4638      	mov	r0, r7
 80052d0:	47c0      	blx	r8
 80052d2:	3001      	adds	r0, #1
 80052d4:	d0e6      	beq.n	80052a4 <_printf_common+0xa4>
 80052d6:	3601      	adds	r6, #1
 80052d8:	e7d9      	b.n	800528e <_printf_common+0x8e>
	...

080052dc <_printf_i>:
 80052dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	7e0f      	ldrb	r7, [r1, #24]
 80052e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052e4:	2f78      	cmp	r7, #120	; 0x78
 80052e6:	4691      	mov	r9, r2
 80052e8:	4680      	mov	r8, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	469a      	mov	sl, r3
 80052ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052f2:	d807      	bhi.n	8005304 <_printf_i+0x28>
 80052f4:	2f62      	cmp	r7, #98	; 0x62
 80052f6:	d80a      	bhi.n	800530e <_printf_i+0x32>
 80052f8:	2f00      	cmp	r7, #0
 80052fa:	f000 80d4 	beq.w	80054a6 <_printf_i+0x1ca>
 80052fe:	2f58      	cmp	r7, #88	; 0x58
 8005300:	f000 80c0 	beq.w	8005484 <_printf_i+0x1a8>
 8005304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800530c:	e03a      	b.n	8005384 <_printf_i+0xa8>
 800530e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005312:	2b15      	cmp	r3, #21
 8005314:	d8f6      	bhi.n	8005304 <_printf_i+0x28>
 8005316:	a101      	add	r1, pc, #4	; (adr r1, 800531c <_printf_i+0x40>)
 8005318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800531c:	08005375 	.word	0x08005375
 8005320:	08005389 	.word	0x08005389
 8005324:	08005305 	.word	0x08005305
 8005328:	08005305 	.word	0x08005305
 800532c:	08005305 	.word	0x08005305
 8005330:	08005305 	.word	0x08005305
 8005334:	08005389 	.word	0x08005389
 8005338:	08005305 	.word	0x08005305
 800533c:	08005305 	.word	0x08005305
 8005340:	08005305 	.word	0x08005305
 8005344:	08005305 	.word	0x08005305
 8005348:	0800548d 	.word	0x0800548d
 800534c:	080053b5 	.word	0x080053b5
 8005350:	08005447 	.word	0x08005447
 8005354:	08005305 	.word	0x08005305
 8005358:	08005305 	.word	0x08005305
 800535c:	080054af 	.word	0x080054af
 8005360:	08005305 	.word	0x08005305
 8005364:	080053b5 	.word	0x080053b5
 8005368:	08005305 	.word	0x08005305
 800536c:	08005305 	.word	0x08005305
 8005370:	0800544f 	.word	0x0800544f
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	602a      	str	r2, [r5, #0]
 800537c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005384:	2301      	movs	r3, #1
 8005386:	e09f      	b.n	80054c8 <_printf_i+0x1ec>
 8005388:	6820      	ldr	r0, [r4, #0]
 800538a:	682b      	ldr	r3, [r5, #0]
 800538c:	0607      	lsls	r7, r0, #24
 800538e:	f103 0104 	add.w	r1, r3, #4
 8005392:	6029      	str	r1, [r5, #0]
 8005394:	d501      	bpl.n	800539a <_printf_i+0xbe>
 8005396:	681e      	ldr	r6, [r3, #0]
 8005398:	e003      	b.n	80053a2 <_printf_i+0xc6>
 800539a:	0646      	lsls	r6, r0, #25
 800539c:	d5fb      	bpl.n	8005396 <_printf_i+0xba>
 800539e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80053a2:	2e00      	cmp	r6, #0
 80053a4:	da03      	bge.n	80053ae <_printf_i+0xd2>
 80053a6:	232d      	movs	r3, #45	; 0x2d
 80053a8:	4276      	negs	r6, r6
 80053aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ae:	485a      	ldr	r0, [pc, #360]	; (8005518 <_printf_i+0x23c>)
 80053b0:	230a      	movs	r3, #10
 80053b2:	e012      	b.n	80053da <_printf_i+0xfe>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	1d19      	adds	r1, r3, #4
 80053ba:	6029      	str	r1, [r5, #0]
 80053bc:	0605      	lsls	r5, r0, #24
 80053be:	d501      	bpl.n	80053c4 <_printf_i+0xe8>
 80053c0:	681e      	ldr	r6, [r3, #0]
 80053c2:	e002      	b.n	80053ca <_printf_i+0xee>
 80053c4:	0641      	lsls	r1, r0, #25
 80053c6:	d5fb      	bpl.n	80053c0 <_printf_i+0xe4>
 80053c8:	881e      	ldrh	r6, [r3, #0]
 80053ca:	4853      	ldr	r0, [pc, #332]	; (8005518 <_printf_i+0x23c>)
 80053cc:	2f6f      	cmp	r7, #111	; 0x6f
 80053ce:	bf0c      	ite	eq
 80053d0:	2308      	moveq	r3, #8
 80053d2:	230a      	movne	r3, #10
 80053d4:	2100      	movs	r1, #0
 80053d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053da:	6865      	ldr	r5, [r4, #4]
 80053dc:	60a5      	str	r5, [r4, #8]
 80053de:	2d00      	cmp	r5, #0
 80053e0:	bfa2      	ittt	ge
 80053e2:	6821      	ldrge	r1, [r4, #0]
 80053e4:	f021 0104 	bicge.w	r1, r1, #4
 80053e8:	6021      	strge	r1, [r4, #0]
 80053ea:	b90e      	cbnz	r6, 80053f0 <_printf_i+0x114>
 80053ec:	2d00      	cmp	r5, #0
 80053ee:	d04b      	beq.n	8005488 <_printf_i+0x1ac>
 80053f0:	4615      	mov	r5, r2
 80053f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80053f6:	fb03 6711 	mls	r7, r3, r1, r6
 80053fa:	5dc7      	ldrb	r7, [r0, r7]
 80053fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005400:	4637      	mov	r7, r6
 8005402:	42bb      	cmp	r3, r7
 8005404:	460e      	mov	r6, r1
 8005406:	d9f4      	bls.n	80053f2 <_printf_i+0x116>
 8005408:	2b08      	cmp	r3, #8
 800540a:	d10b      	bne.n	8005424 <_printf_i+0x148>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	07de      	lsls	r6, r3, #31
 8005410:	d508      	bpl.n	8005424 <_printf_i+0x148>
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	6861      	ldr	r1, [r4, #4]
 8005416:	4299      	cmp	r1, r3
 8005418:	bfde      	ittt	le
 800541a:	2330      	movle	r3, #48	; 0x30
 800541c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005420:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005424:	1b52      	subs	r2, r2, r5
 8005426:	6122      	str	r2, [r4, #16]
 8005428:	f8cd a000 	str.w	sl, [sp]
 800542c:	464b      	mov	r3, r9
 800542e:	aa03      	add	r2, sp, #12
 8005430:	4621      	mov	r1, r4
 8005432:	4640      	mov	r0, r8
 8005434:	f7ff fee4 	bl	8005200 <_printf_common>
 8005438:	3001      	adds	r0, #1
 800543a:	d14a      	bne.n	80054d2 <_printf_i+0x1f6>
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	b004      	add	sp, #16
 8005442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	f043 0320 	orr.w	r3, r3, #32
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	4833      	ldr	r0, [pc, #204]	; (800551c <_printf_i+0x240>)
 8005450:	2778      	movs	r7, #120	; 0x78
 8005452:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	6829      	ldr	r1, [r5, #0]
 800545a:	061f      	lsls	r7, r3, #24
 800545c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005460:	d402      	bmi.n	8005468 <_printf_i+0x18c>
 8005462:	065f      	lsls	r7, r3, #25
 8005464:	bf48      	it	mi
 8005466:	b2b6      	uxthmi	r6, r6
 8005468:	07df      	lsls	r7, r3, #31
 800546a:	bf48      	it	mi
 800546c:	f043 0320 	orrmi.w	r3, r3, #32
 8005470:	6029      	str	r1, [r5, #0]
 8005472:	bf48      	it	mi
 8005474:	6023      	strmi	r3, [r4, #0]
 8005476:	b91e      	cbnz	r6, 8005480 <_printf_i+0x1a4>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	f023 0320 	bic.w	r3, r3, #32
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	2310      	movs	r3, #16
 8005482:	e7a7      	b.n	80053d4 <_printf_i+0xf8>
 8005484:	4824      	ldr	r0, [pc, #144]	; (8005518 <_printf_i+0x23c>)
 8005486:	e7e4      	b.n	8005452 <_printf_i+0x176>
 8005488:	4615      	mov	r5, r2
 800548a:	e7bd      	b.n	8005408 <_printf_i+0x12c>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	6826      	ldr	r6, [r4, #0]
 8005490:	6961      	ldr	r1, [r4, #20]
 8005492:	1d18      	adds	r0, r3, #4
 8005494:	6028      	str	r0, [r5, #0]
 8005496:	0635      	lsls	r5, r6, #24
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	d501      	bpl.n	80054a0 <_printf_i+0x1c4>
 800549c:	6019      	str	r1, [r3, #0]
 800549e:	e002      	b.n	80054a6 <_printf_i+0x1ca>
 80054a0:	0670      	lsls	r0, r6, #25
 80054a2:	d5fb      	bpl.n	800549c <_printf_i+0x1c0>
 80054a4:	8019      	strh	r1, [r3, #0]
 80054a6:	2300      	movs	r3, #0
 80054a8:	6123      	str	r3, [r4, #16]
 80054aa:	4615      	mov	r5, r2
 80054ac:	e7bc      	b.n	8005428 <_printf_i+0x14c>
 80054ae:	682b      	ldr	r3, [r5, #0]
 80054b0:	1d1a      	adds	r2, r3, #4
 80054b2:	602a      	str	r2, [r5, #0]
 80054b4:	681d      	ldr	r5, [r3, #0]
 80054b6:	6862      	ldr	r2, [r4, #4]
 80054b8:	2100      	movs	r1, #0
 80054ba:	4628      	mov	r0, r5
 80054bc:	f7fa feb8 	bl	8000230 <memchr>
 80054c0:	b108      	cbz	r0, 80054c6 <_printf_i+0x1ea>
 80054c2:	1b40      	subs	r0, r0, r5
 80054c4:	6060      	str	r0, [r4, #4]
 80054c6:	6863      	ldr	r3, [r4, #4]
 80054c8:	6123      	str	r3, [r4, #16]
 80054ca:	2300      	movs	r3, #0
 80054cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d0:	e7aa      	b.n	8005428 <_printf_i+0x14c>
 80054d2:	6923      	ldr	r3, [r4, #16]
 80054d4:	462a      	mov	r2, r5
 80054d6:	4649      	mov	r1, r9
 80054d8:	4640      	mov	r0, r8
 80054da:	47d0      	blx	sl
 80054dc:	3001      	adds	r0, #1
 80054de:	d0ad      	beq.n	800543c <_printf_i+0x160>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	079b      	lsls	r3, r3, #30
 80054e4:	d413      	bmi.n	800550e <_printf_i+0x232>
 80054e6:	68e0      	ldr	r0, [r4, #12]
 80054e8:	9b03      	ldr	r3, [sp, #12]
 80054ea:	4298      	cmp	r0, r3
 80054ec:	bfb8      	it	lt
 80054ee:	4618      	movlt	r0, r3
 80054f0:	e7a6      	b.n	8005440 <_printf_i+0x164>
 80054f2:	2301      	movs	r3, #1
 80054f4:	4632      	mov	r2, r6
 80054f6:	4649      	mov	r1, r9
 80054f8:	4640      	mov	r0, r8
 80054fa:	47d0      	blx	sl
 80054fc:	3001      	adds	r0, #1
 80054fe:	d09d      	beq.n	800543c <_printf_i+0x160>
 8005500:	3501      	adds	r5, #1
 8005502:	68e3      	ldr	r3, [r4, #12]
 8005504:	9903      	ldr	r1, [sp, #12]
 8005506:	1a5b      	subs	r3, r3, r1
 8005508:	42ab      	cmp	r3, r5
 800550a:	dcf2      	bgt.n	80054f2 <_printf_i+0x216>
 800550c:	e7eb      	b.n	80054e6 <_printf_i+0x20a>
 800550e:	2500      	movs	r5, #0
 8005510:	f104 0619 	add.w	r6, r4, #25
 8005514:	e7f5      	b.n	8005502 <_printf_i+0x226>
 8005516:	bf00      	nop
 8005518:	0800569d 	.word	0x0800569d
 800551c:	080056ae 	.word	0x080056ae

08005520 <memmove>:
 8005520:	4288      	cmp	r0, r1
 8005522:	b510      	push	{r4, lr}
 8005524:	eb01 0402 	add.w	r4, r1, r2
 8005528:	d902      	bls.n	8005530 <memmove+0x10>
 800552a:	4284      	cmp	r4, r0
 800552c:	4623      	mov	r3, r4
 800552e:	d807      	bhi.n	8005540 <memmove+0x20>
 8005530:	1e43      	subs	r3, r0, #1
 8005532:	42a1      	cmp	r1, r4
 8005534:	d008      	beq.n	8005548 <memmove+0x28>
 8005536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800553a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800553e:	e7f8      	b.n	8005532 <memmove+0x12>
 8005540:	4402      	add	r2, r0
 8005542:	4601      	mov	r1, r0
 8005544:	428a      	cmp	r2, r1
 8005546:	d100      	bne.n	800554a <memmove+0x2a>
 8005548:	bd10      	pop	{r4, pc}
 800554a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800554e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005552:	e7f7      	b.n	8005544 <memmove+0x24>

08005554 <_sbrk_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4d06      	ldr	r5, [pc, #24]	; (8005570 <_sbrk_r+0x1c>)
 8005558:	2300      	movs	r3, #0
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	f7fb fac6 	bl	8000af0 <_sbrk>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_sbrk_r+0x1a>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_sbrk_r+0x1a>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	2000028c 	.word	0x2000028c

08005574 <memcpy>:
 8005574:	440a      	add	r2, r1
 8005576:	4291      	cmp	r1, r2
 8005578:	f100 33ff 	add.w	r3, r0, #4294967295
 800557c:	d100      	bne.n	8005580 <memcpy+0xc>
 800557e:	4770      	bx	lr
 8005580:	b510      	push	{r4, lr}
 8005582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800558a:	4291      	cmp	r1, r2
 800558c:	d1f9      	bne.n	8005582 <memcpy+0xe>
 800558e:	bd10      	pop	{r4, pc}

08005590 <_realloc_r>:
 8005590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005594:	4680      	mov	r8, r0
 8005596:	4614      	mov	r4, r2
 8005598:	460e      	mov	r6, r1
 800559a:	b921      	cbnz	r1, 80055a6 <_realloc_r+0x16>
 800559c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055a0:	4611      	mov	r1, r2
 80055a2:	f7ff bc49 	b.w	8004e38 <_malloc_r>
 80055a6:	b92a      	cbnz	r2, 80055b4 <_realloc_r+0x24>
 80055a8:	f7ff fbda 	bl	8004d60 <_free_r>
 80055ac:	4625      	mov	r5, r4
 80055ae:	4628      	mov	r0, r5
 80055b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b4:	f000 f81b 	bl	80055ee <_malloc_usable_size_r>
 80055b8:	4284      	cmp	r4, r0
 80055ba:	4607      	mov	r7, r0
 80055bc:	d802      	bhi.n	80055c4 <_realloc_r+0x34>
 80055be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055c2:	d812      	bhi.n	80055ea <_realloc_r+0x5a>
 80055c4:	4621      	mov	r1, r4
 80055c6:	4640      	mov	r0, r8
 80055c8:	f7ff fc36 	bl	8004e38 <_malloc_r>
 80055cc:	4605      	mov	r5, r0
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d0ed      	beq.n	80055ae <_realloc_r+0x1e>
 80055d2:	42bc      	cmp	r4, r7
 80055d4:	4622      	mov	r2, r4
 80055d6:	4631      	mov	r1, r6
 80055d8:	bf28      	it	cs
 80055da:	463a      	movcs	r2, r7
 80055dc:	f7ff ffca 	bl	8005574 <memcpy>
 80055e0:	4631      	mov	r1, r6
 80055e2:	4640      	mov	r0, r8
 80055e4:	f7ff fbbc 	bl	8004d60 <_free_r>
 80055e8:	e7e1      	b.n	80055ae <_realloc_r+0x1e>
 80055ea:	4635      	mov	r5, r6
 80055ec:	e7df      	b.n	80055ae <_realloc_r+0x1e>

080055ee <_malloc_usable_size_r>:
 80055ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f2:	1f18      	subs	r0, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bfbc      	itt	lt
 80055f8:	580b      	ldrlt	r3, [r1, r0]
 80055fa:	18c0      	addlt	r0, r0, r3
 80055fc:	4770      	bx	lr
	...

08005600 <_init>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr

0800560c <_fini>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	bf00      	nop
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr
