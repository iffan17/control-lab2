
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08006484  08006484  00007484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800669c  0800669c  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  0800669c  0800669c  0000769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066a4  080066a4  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066a4  080066a4  000076a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066a8  080066a8  000076a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080066ac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000064  08006710  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08006710  00008448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fb4  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281f  00000000  00000000  0001d048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0001f868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e94  00000000  00000000  00020b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c5d  00000000  00000000  00021994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d0a  00000000  00000000  000485f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdec3  00000000  00000000  0005e2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c1be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005470  00000000  00000000  0015c204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00161674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800646c 	.word	0x0800646c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	0800646c 	.word	0x0800646c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fe6b 	bl	800129e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f880 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f9d2 	bl	8000974 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 f99e 	bl	8000910 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d4:	f000 f8c6 	bl	8000764 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 80005d8:	f000 f90e 	bl	80007f8 <MX_SPI3_Init>
  MX_TIM2_Init();
 80005dc:	f000 f94a 	bl	8000874 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // UART CODE //
  //UARTDMAConfig();
  //HAL_UART_Transmit(ส่งด้วย , สิ่งที่ส่ง ,
  sprintf((char*)TxBuffer,"Welcome to WORDLE, You have 5 attempts to guess the word\r\n\n");
 80005e0:	492f      	ldr	r1, [pc, #188]	@ (80006a0 <main+0xe0>)
 80005e2:	4830      	ldr	r0, [pc, #192]	@ (80006a4 <main+0xe4>)
 80005e4:	f005 faa2 	bl	8005b2c <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 80005e8:	482e      	ldr	r0, [pc, #184]	@ (80006a4 <main+0xe4>)
 80005ea:	f7ff fe19 	bl	8000220 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	2305      	movs	r3, #5
 80005f4:	492b      	ldr	r1, [pc, #172]	@ (80006a4 <main+0xe4>)
 80005f6:	482c      	ldr	r0, [pc, #176]	@ (80006a8 <main+0xe8>)
 80005f8:	f003 ff80 	bl	80044fc <HAL_UART_Transmit>
  sprintf((char*)TxBuffer,"PRESS - to clear your word\r\n");
 80005fc:	492b      	ldr	r1, [pc, #172]	@ (80006ac <main+0xec>)
 80005fe:	4829      	ldr	r0, [pc, #164]	@ (80006a4 <main+0xe4>)
 8000600:	f005 fa94 	bl	8005b2c <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000604:	4827      	ldr	r0, [pc, #156]	@ (80006a4 <main+0xe4>)
 8000606:	f7ff fe0b 	bl	8000220 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	2305      	movs	r3, #5
 8000610:	4924      	ldr	r1, [pc, #144]	@ (80006a4 <main+0xe4>)
 8000612:	4825      	ldr	r0, [pc, #148]	@ (80006a8 <main+0xe8>)
 8000614:	f003 ff72 	bl	80044fc <HAL_UART_Transmit>
  sprintf((char*)TxBuffer,"SEND 11111 to re-attempt \n\n");
 8000618:	4925      	ldr	r1, [pc, #148]	@ (80006b0 <main+0xf0>)
 800061a:	4822      	ldr	r0, [pc, #136]	@ (80006a4 <main+0xe4>)
 800061c:	f005 fa86 	bl	8005b2c <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000620:	4820      	ldr	r0, [pc, #128]	@ (80006a4 <main+0xe4>)
 8000622:	f7ff fdfd 	bl	8000220 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	2305      	movs	r3, #5
 800062c:	491d      	ldr	r1, [pc, #116]	@ (80006a4 <main+0xe4>)
 800062e:	481e      	ldr	r0, [pc, #120]	@ (80006a8 <main+0xe8>)
 8000630:	f003 ff64 	bl	80044fc <HAL_UART_Transmit>
  sprintf((char*)TxBuffer,"Turn CAPLOCK on and begin typing \r\n");
 8000634:	491f      	ldr	r1, [pc, #124]	@ (80006b4 <main+0xf4>)
 8000636:	481b      	ldr	r0, [pc, #108]	@ (80006a4 <main+0xe4>)
 8000638:	f005 fa78 	bl	8005b2c <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 800063c:	4819      	ldr	r0, [pc, #100]	@ (80006a4 <main+0xe4>)
 800063e:	f7ff fdef 	bl	8000220 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	2305      	movs	r3, #5
 8000648:	4916      	ldr	r1, [pc, #88]	@ (80006a4 <main+0xe4>)
 800064a:	4817      	ldr	r0, [pc, #92]	@ (80006a8 <main+0xe8>)
 800064c:	f003 ff56 	bl	80044fc <HAL_UART_Transmit>
  // UART END //
  // SPI CODE //
  SPI_FirstSetup();
 8000650:	f000 fa20 	bl	8000a94 <SPI_FirstSetup>
  HAL_TIM_Base_Start_IT(&htim2);
 8000654:	4818      	ldr	r0, [pc, #96]	@ (80006b8 <main+0xf8>)
 8000656:	f003 f9c5 	bl	80039e4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UARTPollingMethod();
 800065a:	f000 fb71 	bl	8000d40 <UARTPollingMethod>
	  //UARTInterruptConfig();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(readFlag && attempt < 5 && point != 5 && RxBuffer[0] != 1 && RxBuffer[4] != 1){
 800065e:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <main+0xfc>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d014      	beq.n	8000690 <main+0xd0>
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <main+0x100>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b04      	cmp	r3, #4
 800066c:	d810      	bhi.n	8000690 <main+0xd0>
 800066e:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <main+0x104>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b05      	cmp	r3, #5
 8000674:	d00c      	beq.n	8000690 <main+0xd0>
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <main+0x108>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d008      	beq.n	8000690 <main+0xd0>
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <main+0x108>)
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d004      	beq.n	8000690 <main+0xd0>
		  readFlag = 0;
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <main+0xfc>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
		  Wordle();
 800068c:	f000 fa86 	bl	8000b9c <Wordle>
	  }

	  HAL_Delay(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f000 fe75 	bl	8001380 <HAL_Delay>
	  SPI_Worker();
 8000696:	f000 fa1d 	bl	8000ad4 <SPI_Worker>
	  ButtonRead();
 800069a:	f000 fa55 	bl	8000b48 <ButtonRead>
	  UARTPollingMethod();
 800069e:	e7dc      	b.n	800065a <main+0x9a>
 80006a0:	08006484 	.word	0x08006484
 80006a4:	20000298 	.word	0x20000298
 80006a8:	20000080 	.word	0x20000080
 80006ac:	080064c0 	.word	0x080064c0
 80006b0:	080064e0 	.word	0x080064e0
 80006b4:	080064fc 	.word	0x080064fc
 80006b8:	20000238 	.word	0x20000238
 80006bc:	200002dc 	.word	0x200002dc
 80006c0:	200002db 	.word	0x200002db
 80006c4:	200002da 	.word	0x200002da
 80006c8:	20000284 	.word	0x20000284

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	@ 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	2238      	movs	r2, #56	@ 0x38
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 fa46 	bl	8005b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f001 fbc8 	bl	8001e84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fe:	2340      	movs	r3, #64	@ 0x40
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000706:	2302      	movs	r3, #2
 8000708:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800070a:	2304      	movs	r3, #4
 800070c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800070e:	2355      	movs	r3, #85	@ 0x55
 8000710:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0318 	add.w	r3, r7, #24
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fc62 	bl	8001fec <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800072e:	f000 fb85 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2303      	movs	r3, #3
 8000738:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2104      	movs	r1, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f001 ff60 	bl	8002610 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000756:	f000 fb71 	bl	8000e3c <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	@ 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 800076a:	4a22      	ldr	r2, [pc, #136]	@ (80007f4 <MX_LPUART1_UART_Init+0x90>)
 800076c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000774:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000782:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000794:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007a6:	4812      	ldr	r0, [pc, #72]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 80007a8:	f003 fe58 	bl	800445c <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 fb43 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b6:	2100      	movs	r1, #0
 80007b8:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 80007ba:	f005 f8ec 	bl	8005996 <HAL_UARTEx_SetTxFifoThreshold>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007c4:	f000 fb3a 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 80007cc:	f005 f921 	bl	8005a12 <HAL_UARTEx_SetRxFifoThreshold>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007d6:	f000 fb31 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_LPUART1_UART_Init+0x8c>)
 80007dc:	f005 f8a2 	bl	8005924 <HAL_UARTEx_DisableFifoMode>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007e6:	f000 fb29 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000080 	.word	0x20000080
 80007f4:	40008000 	.word	0x40008000

080007f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_SPI3_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <MX_SPI3_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_SPI3_Init+0x74>)
 8000804:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000808:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_SPI3_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000810:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_SPI3_Init+0x74>)
 8000812:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000816:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000818:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_SPI3_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_SPI3_Init+0x74>)
 8000826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_SPI3_Init+0x74>)
 800082e:	2238      	movs	r2, #56	@ 0x38
 8000830:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_SPI3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_SPI3_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_SPI3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_SPI3_Init+0x74>)
 8000846:	2207      	movs	r2, #7
 8000848:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_SPI3_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_SPI3_Init+0x74>)
 8000852:	2208      	movs	r2, #8
 8000854:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_SPI3_Init+0x74>)
 8000858:	f002 fb44 	bl	8002ee4 <HAL_SPI_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 faeb 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200001d4 	.word	0x200001d4
 8000870:	40003c00 	.word	0x40003c00

08000874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000892:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <MX_TIM2_Init+0x98>)
 8000894:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000898:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_TIM2_Init+0x98>)
 800089c:	f244 2267 	movw	r2, #16999	@ 0x4267
 80008a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_TIM2_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80008a8:	4b18      	ldr	r3, [pc, #96]	@ (800090c <MX_TIM2_Init+0x98>)
 80008aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_TIM2_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b15      	ldr	r3, [pc, #84]	@ (800090c <MX_TIM2_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008bc:	4813      	ldr	r0, [pc, #76]	@ (800090c <MX_TIM2_Init+0x98>)
 80008be:	f003 f839 	bl	8003934 <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008c8:	f000 fab8 	bl	8000e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	@ (800090c <MX_TIM2_Init+0x98>)
 80008da:	f003 fa4b 	bl	8003d74 <HAL_TIM_ConfigClockSource>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008e4:	f000 faaa 	bl	8000e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_TIM2_Init+0x98>)
 80008f6:	f003 fcd5 	bl	80042a4 <HAL_TIMEx_MasterConfigSynchronization>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000900:	f000 fa9c 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000238 	.word	0x20000238

08000910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_DMA_Init+0x60>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800091a:	4a15      	ldr	r2, [pc, #84]	@ (8000970 <MX_DMA_Init+0x60>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6493      	str	r3, [r2, #72]	@ 0x48
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MX_DMA_Init+0x60>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <MX_DMA_Init+0x60>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000932:	4a0f      	ldr	r2, [pc, #60]	@ (8000970 <MX_DMA_Init+0x60>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6493      	str	r3, [r2, #72]	@ 0x48
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <MX_DMA_Init+0x60>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	200b      	movs	r0, #11
 800094c:	f000 fe15 	bl	800157a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000950:	200b      	movs	r0, #11
 8000952:	f000 fe2c 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	200c      	movs	r0, #12
 800095c:	f000 fe0d 	bl	800157a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000960:	200c      	movs	r0, #12
 8000962:	f000 fe24 	bl	80015ae <HAL_NVIC_EnableIRQ>

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a88 <MX_GPIO_Init+0x114>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a88 <MX_GPIO_Init+0x114>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b3c      	ldr	r3, [pc, #240]	@ (8000a88 <MX_GPIO_Init+0x114>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009a2:	4b39      	ldr	r3, [pc, #228]	@ (8000a88 <MX_GPIO_Init+0x114>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	4a38      	ldr	r2, [pc, #224]	@ (8000a88 <MX_GPIO_Init+0x114>)
 80009a8:	f043 0320 	orr.w	r3, r3, #32
 80009ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ae:	4b36      	ldr	r3, [pc, #216]	@ (8000a88 <MX_GPIO_Init+0x114>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	f003 0320 	and.w	r3, r3, #32
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b33      	ldr	r3, [pc, #204]	@ (8000a88 <MX_GPIO_Init+0x114>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	4a32      	ldr	r2, [pc, #200]	@ (8000a88 <MX_GPIO_Init+0x114>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c6:	4b30      	ldr	r3, [pc, #192]	@ (8000a88 <MX_GPIO_Init+0x114>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a88 <MX_GPIO_Init+0x114>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a88 <MX_GPIO_Init+0x114>)
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009de:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <MX_GPIO_Init+0x114>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <MX_GPIO_Init+0x114>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	4a26      	ldr	r2, [pc, #152]	@ (8000a88 <MX_GPIO_Init+0x114>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f6:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <MX_GPIO_Init+0x114>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2120      	movs	r1, #32
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0a:	f001 f9ff 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2104      	movs	r1, #4
 8000a12:	481e      	ldr	r0, [pc, #120]	@ (8000a8c <MX_GPIO_Init+0x118>)
 8000a14:	f001 f9fa 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4818      	ldr	r0, [pc, #96]	@ (8000a90 <MX_GPIO_Init+0x11c>)
 8000a30:	f001 f852 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a34:	2320      	movs	r3, #32
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4e:	f001 f843 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a52:	2304      	movs	r3, #4
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	4808      	ldr	r0, [pc, #32]	@ (8000a8c <MX_GPIO_Init+0x118>)
 8000a6a:	f001 f835 	bl	8001ad8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2028      	movs	r0, #40	@ 0x28
 8000a74:	f000 fd81 	bl	800157a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a78:	2028      	movs	r0, #40	@ 0x28
 8000a7a:	f000 fd98 	bl	80015ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	@ 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	48000c00 	.word	0x48000c00
 8000a90:	48000800 	.word	0x48000800

08000a94 <SPI_FirstSetup>:

/* USER CODE BEGIN 4 */

/*/ SPI Function begin /*/
void SPI_FirstSetup()//at BEGIN 2
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <SPI_FirstSetup+0x30>)
 8000a9e:	f001 f9b5 	bl	8001e0c <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;//write
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <SPI_FirstSetup+0x34>)
 8000aa4:	2240      	movs	r2, #64	@ 0x40
 8000aa6:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;//IODIRB
 8000aa8:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <SPI_FirstSetup+0x34>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b00000000;
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <SPI_FirstSetup+0x34>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <SPI_FirstSetup+0x38>)
 8000ab8:	4903      	ldr	r1, [pc, #12]	@ (8000ac8 <SPI_FirstSetup+0x34>)
 8000aba:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <SPI_FirstSetup+0x3c>)
 8000abc:	f002 fabe 	bl	800303c <HAL_SPI_TransmitReceive_IT>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	48000c00 	.word	0x48000c00
 8000ac8:	200002ec 	.word	0x200002ec
 8000acc:	200002e0 	.word	0x200002e0
 8000ad0:	200001d4 	.word	0x200001d4

08000ad4 <SPI_Worker>:

void SPI_Worker()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000ad8:	2104      	movs	r1, #4
 8000ada:	480f      	ldr	r0, [pc, #60]	@ (8000b18 <SPI_Worker+0x44>)
 8000adc:	f001 f97e 	bl	8001ddc <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d016      	beq.n	8000b14 <SPI_Worker+0x40>
	{
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2104      	movs	r1, #4
 8000aea:	480b      	ldr	r0, [pc, #44]	@ (8000b18 <SPI_Worker+0x44>)
 8000aec:	f001 f98e 	bl	8001e0c <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000001;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <SPI_Worker+0x48>)
 8000af2:	2241      	movs	r2, #65	@ 0x41
 8000af4:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x12;
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <SPI_Worker+0x48>)
 8000af8:	2212      	movs	r2, #18
 8000afa:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0;
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <SPI_Worker+0x48>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	709a      	strb	r2, [r3, #2]
	SPITx[3] = 0;
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <SPI_Worker+0x48>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	70da      	strb	r2, [r3, #3]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000b08:	2304      	movs	r3, #4
 8000b0a:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <SPI_Worker+0x4c>)
 8000b0c:	4903      	ldr	r1, [pc, #12]	@ (8000b1c <SPI_Worker+0x48>)
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <SPI_Worker+0x50>)
 8000b10:	f002 fa94 	bl	800303c <HAL_SPI_TransmitReceive_IT>
	}
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	48000c00 	.word	0x48000c00
 8000b1c:	200002ec 	.word	0x200002ec
 8000b20:	200002e0 	.word	0x200002e0
 8000b24:	200001d4 	.word	0x200001d4

08000b28 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000b30:	2201      	movs	r2, #1
 8000b32:	2104      	movs	r1, #4
 8000b34:	4803      	ldr	r0, [pc, #12]	@ (8000b44 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000b36:	f001 f969 	bl	8001e0c <HAL_GPIO_WritePin>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	48000c00 	.word	0x48000c00

08000b48 <ButtonRead>:
void ButtonRead()
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	if (SPIRx[2]==14)
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <ButtonRead+0x4c>)
 8000b4e:	789b      	ldrb	r3, [r3, #2]
 8000b50:	2b0e      	cmp	r3, #14
 8000b52:	d103      	bne.n	8000b5c <ButtonRead+0x14>
		{
			Switch = 1;
 8000b54:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <ButtonRead+0x50>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
		}
	else if (SPIRx[2]==11)
		{
			Switch = 4;
		}
}
 8000b5a:	e016      	b.n	8000b8a <ButtonRead+0x42>
	else if (SPIRx[2]==13)
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <ButtonRead+0x4c>)
 8000b5e:	789b      	ldrb	r3, [r3, #2]
 8000b60:	2b0d      	cmp	r3, #13
 8000b62:	d103      	bne.n	8000b6c <ButtonRead+0x24>
			Switch = 2;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <ButtonRead+0x50>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	701a      	strb	r2, [r3, #0]
}
 8000b6a:	e00e      	b.n	8000b8a <ButtonRead+0x42>
	else if (SPIRx[2]==7)
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <ButtonRead+0x4c>)
 8000b6e:	789b      	ldrb	r3, [r3, #2]
 8000b70:	2b07      	cmp	r3, #7
 8000b72:	d103      	bne.n	8000b7c <ButtonRead+0x34>
			Switch = 3;
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <ButtonRead+0x50>)
 8000b76:	2203      	movs	r2, #3
 8000b78:	701a      	strb	r2, [r3, #0]
}
 8000b7a:	e006      	b.n	8000b8a <ButtonRead+0x42>
	else if (SPIRx[2]==11)
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <ButtonRead+0x4c>)
 8000b7e:	789b      	ldrb	r3, [r3, #2]
 8000b80:	2b0b      	cmp	r3, #11
 8000b82:	d102      	bne.n	8000b8a <ButtonRead+0x42>
			Switch = 4;
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <ButtonRead+0x50>)
 8000b86:	2204      	movs	r2, #4
 8000b88:	701a      	strb	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	200002e0 	.word	0x200002e0
 8000b98:	20000006 	.word	0x20000006

08000b9c <Wordle>:
/*/ SPI Function end /*/

void Wordle()
	{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
		//readFlag = 0;
	for(uint8_t i = 0;i <5;i++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	e055      	b.n	8000c54 <Wordle+0xb8>
	{
		output[5] = '\0';
 8000ba8:	4b59      	ldr	r3, [pc, #356]	@ (8000d10 <Wordle+0x174>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	715a      	strb	r2, [r3, #5]

		if(RxBuffer[i] == '-') //retry press "-"
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	4a58      	ldr	r2, [pc, #352]	@ (8000d14 <Wordle+0x178>)
 8000bb2:	5cd3      	ldrb	r3, [r2, r3]
 8000bb4:	2b2d      	cmp	r3, #45	@ 0x2d
 8000bb6:	d10e      	bne.n	8000bd6 <Wordle+0x3a>
		{
			sprintf((char*)TxBuffer,"Deleting");
 8000bb8:	4957      	ldr	r1, [pc, #348]	@ (8000d18 <Wordle+0x17c>)
 8000bba:	4858      	ldr	r0, [pc, #352]	@ (8000d1c <Wordle+0x180>)
 8000bbc:	f004 ffb6 	bl	8005b2c <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5); // uart1, text , size , timeout
 8000bc0:	4856      	ldr	r0, [pc, #344]	@ (8000d1c <Wordle+0x180>)
 8000bc2:	f7ff fb2d 	bl	8000220 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	2305      	movs	r3, #5
 8000bcc:	4953      	ldr	r1, [pc, #332]	@ (8000d1c <Wordle+0x180>)
 8000bce:	4854      	ldr	r0, [pc, #336]	@ (8000d20 <Wordle+0x184>)
 8000bd0:	f003 fc94 	bl	80044fc <HAL_UART_Transmit>
			return;
 8000bd4:	e098      	b.n	8000d08 <Wordle+0x16c>
		}
		else if(RxBuffer[i] == wordle[i]){
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8000d14 <Wordle+0x178>)
 8000bda:	5cd2      	ldrb	r2, [r2, r3]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4951      	ldr	r1, [pc, #324]	@ (8000d24 <Wordle+0x188>)
 8000be0:	5ccb      	ldrb	r3, [r1, r3]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d10c      	bne.n	8000c00 <Wordle+0x64>
			output[i] = RxBuffer[i];
 8000be6:	79fa      	ldrb	r2, [r7, #7]
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	494a      	ldr	r1, [pc, #296]	@ (8000d14 <Wordle+0x178>)
 8000bec:	5c89      	ldrb	r1, [r1, r2]
 8000bee:	4a48      	ldr	r2, [pc, #288]	@ (8000d10 <Wordle+0x174>)
 8000bf0:	54d1      	strb	r1, [r2, r3]
			point++;
 8000bf2:	4b4d      	ldr	r3, [pc, #308]	@ (8000d28 <Wordle+0x18c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8000d28 <Wordle+0x18c>)
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	e015      	b.n	8000c2c <Wordle+0x90>

		}
		else {
			for(uint8_t j=0; j<5;j++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	71bb      	strb	r3, [r7, #6]
 8000c04:	e00f      	b.n	8000c26 <Wordle+0x8a>
			{
				if(RxBuffer[i] == wordle[j])
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4a42      	ldr	r2, [pc, #264]	@ (8000d14 <Wordle+0x178>)
 8000c0a:	5cd2      	ldrb	r2, [r2, r3]
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	4945      	ldr	r1, [pc, #276]	@ (8000d24 <Wordle+0x188>)
 8000c10:	5ccb      	ldrb	r3, [r1, r3]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d104      	bne.n	8000c20 <Wordle+0x84>
				{
					output[i] = '?';
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a3d      	ldr	r2, [pc, #244]	@ (8000d10 <Wordle+0x174>)
 8000c1a:	213f      	movs	r1, #63	@ 0x3f
 8000c1c:	54d1      	strb	r1, [r2, r3]
					break;
 8000c1e:	e005      	b.n	8000c2c <Wordle+0x90>
			for(uint8_t j=0; j<5;j++)
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	3301      	adds	r3, #1
 8000c24:	71bb      	strb	r3, [r7, #6]
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d9ec      	bls.n	8000c06 <Wordle+0x6a>
				}
			}
		}
		if(output[i] != '?' && output[i] != RxBuffer[i]){
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	4a38      	ldr	r2, [pc, #224]	@ (8000d10 <Wordle+0x174>)
 8000c30:	5cd3      	ldrb	r3, [r2, r3]
 8000c32:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c34:	d00b      	beq.n	8000c4e <Wordle+0xb2>
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4a35      	ldr	r2, [pc, #212]	@ (8000d10 <Wordle+0x174>)
 8000c3a:	5cd2      	ldrb	r2, [r2, r3]
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	4935      	ldr	r1, [pc, #212]	@ (8000d14 <Wordle+0x178>)
 8000c40:	5ccb      	ldrb	r3, [r1, r3]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d003      	beq.n	8000c4e <Wordle+0xb2>
			output[i] = '_';
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4a31      	ldr	r2, [pc, #196]	@ (8000d10 <Wordle+0x174>)
 8000c4a:	215f      	movs	r1, #95	@ 0x5f
 8000c4c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0;i <5;i++)
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	3301      	adds	r3, #1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d9a6      	bls.n	8000ba8 <Wordle+0xc>
		}
	}
	if(point == 5){
 8000c5a:	4b33      	ldr	r3, [pc, #204]	@ (8000d28 <Wordle+0x18c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d10f      	bne.n	8000c82 <Wordle+0xe6>
		sprintf((char*)TxBuffer,"\n Congratulations\n %s is correct\r\n", output);
 8000c62:	4a2b      	ldr	r2, [pc, #172]	@ (8000d10 <Wordle+0x174>)
 8000c64:	4931      	ldr	r1, [pc, #196]	@ (8000d2c <Wordle+0x190>)
 8000c66:	482d      	ldr	r0, [pc, #180]	@ (8000d1c <Wordle+0x180>)
 8000c68:	f004 ff60 	bl	8005b2c <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000c6c:	482b      	ldr	r0, [pc, #172]	@ (8000d1c <Wordle+0x180>)
 8000c6e:	f7ff fad7 	bl	8000220 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	2305      	movs	r3, #5
 8000c78:	4928      	ldr	r1, [pc, #160]	@ (8000d1c <Wordle+0x180>)
 8000c7a:	4829      	ldr	r0, [pc, #164]	@ (8000d20 <Wordle+0x184>)
 8000c7c:	f003 fc3e 	bl	80044fc <HAL_UART_Transmit>
 8000c80:	e042      	b.n	8000d08 <Wordle+0x16c>
	}
	else{
		point = 0;
 8000c82:	4b29      	ldr	r3, [pc, #164]	@ (8000d28 <Wordle+0x18c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
		attempt++;
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <Wordle+0x194>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b27      	ldr	r3, [pc, #156]	@ (8000d30 <Wordle+0x194>)
 8000c92:	701a      	strb	r2, [r3, #0]
		if(attempt >= 5){
 8000c94:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <Wordle+0x194>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d90f      	bls.n	8000cbc <Wordle+0x120>
				sprintf((char*)TxBuffer,"\n Game Over\r\n\n Correct Answer is %s\n\r\n", (char*)wordle);
 8000c9c:	4a21      	ldr	r2, [pc, #132]	@ (8000d24 <Wordle+0x188>)
 8000c9e:	4925      	ldr	r1, [pc, #148]	@ (8000d34 <Wordle+0x198>)
 8000ca0:	481e      	ldr	r0, [pc, #120]	@ (8000d1c <Wordle+0x180>)
 8000ca2:	f004 ff43 	bl	8005b2c <siprintf>
				HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000ca6:	481d      	ldr	r0, [pc, #116]	@ (8000d1c <Wordle+0x180>)
 8000ca8:	f7ff faba 	bl	8000220 <strlen>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	491a      	ldr	r1, [pc, #104]	@ (8000d1c <Wordle+0x180>)
 8000cb4:	481a      	ldr	r0, [pc, #104]	@ (8000d20 <Wordle+0x184>)
 8000cb6:	f003 fc21 	bl	80044fc <HAL_UART_Transmit>
 8000cba:	e025      	b.n	8000d08 <Wordle+0x16c>
		}
		else if(RxBuffer[1] != '1'){
 8000cbc:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <Wordle+0x178>)
 8000cbe:	785b      	ldrb	r3, [r3, #1]
 8000cc0:	2b31      	cmp	r3, #49	@ 0x31
 8000cc2:	d021      	beq.n	8000d08 <Wordle+0x16c>
			sprintf((char*)TxBuffer,"Wrong Answer \n Your word : %s\r\n", (char*)output);
 8000cc4:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <Wordle+0x174>)
 8000cc6:	491c      	ldr	r1, [pc, #112]	@ (8000d38 <Wordle+0x19c>)
 8000cc8:	4814      	ldr	r0, [pc, #80]	@ (8000d1c <Wordle+0x180>)
 8000cca:	f004 ff2f 	bl	8005b2c <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000cce:	4813      	ldr	r0, [pc, #76]	@ (8000d1c <Wordle+0x180>)
 8000cd0:	f7ff faa6 	bl	8000220 <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	2305      	movs	r3, #5
 8000cda:	4910      	ldr	r1, [pc, #64]	@ (8000d1c <Wordle+0x180>)
 8000cdc:	4810      	ldr	r0, [pc, #64]	@ (8000d20 <Wordle+0x184>)
 8000cde:	f003 fc0d 	bl	80044fc <HAL_UART_Transmit>
			sprintf((char*)TxBuffer,"Remaining Chances: %d/5 \r\n", (int)(5-attempt));
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <Wordle+0x194>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f1c3 0305 	rsb	r3, r3, #5
 8000cea:	461a      	mov	r2, r3
 8000cec:	4913      	ldr	r1, [pc, #76]	@ (8000d3c <Wordle+0x1a0>)
 8000cee:	480b      	ldr	r0, [pc, #44]	@ (8000d1c <Wordle+0x180>)
 8000cf0:	f004 ff1c 	bl	8005b2c <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000cf4:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <Wordle+0x180>)
 8000cf6:	f7ff fa93 	bl	8000220 <strlen>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	2305      	movs	r3, #5
 8000d00:	4906      	ldr	r1, [pc, #24]	@ (8000d1c <Wordle+0x180>)
 8000d02:	4807      	ldr	r0, [pc, #28]	@ (8000d20 <Wordle+0x184>)
 8000d04:	f003 fbfa 	bl	80044fc <HAL_UART_Transmit>
		}

	}

}
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200002d4 	.word	0x200002d4
 8000d14:	20000284 	.word	0x20000284
 8000d18:	08006520 	.word	0x08006520
 8000d1c:	20000298 	.word	0x20000298
 8000d20:	20000080 	.word	0x20000080
 8000d24:	20000000 	.word	0x20000000
 8000d28:	200002da 	.word	0x200002da
 8000d2c:	0800652c 	.word	0x0800652c
 8000d30:	200002db 	.word	0x200002db
 8000d34:	08006550 	.word	0x08006550
 8000d38:	08006578 	.word	0x08006578
 8000d3c:	08006598 	.word	0x08006598

08000d40 <UARTPollingMethod>:

void UARTPollingMethod()
	{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
	//read UART 10 char with in 10s
	HAL_StatusTypeDef HAL_status = HAL_UART_Receive(&hlpuart1, RxBuffer, 5, 15000);
 8000d46:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8000d4a:	2205      	movs	r2, #5
 8000d4c:	4931      	ldr	r1, [pc, #196]	@ (8000e14 <UARTPollingMethod+0xd4>)
 8000d4e:	4832      	ldr	r0, [pc, #200]	@ (8000e18 <UARTPollingMethod+0xd8>)
 8000d50:	f003 fc62 	bl	8004618 <HAL_UART_Receive>
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]

	//if complete read 10 char
	if(HAL_status == HAL_OK)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d135      	bne.n	8000dca <UARTPollingMethod+0x8a>
	{
		readFlag = 1;
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e1c <UARTPollingMethod+0xdc>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
		RxBuffer[5] = '\0';
 8000d64:	4b2b      	ldr	r3, [pc, #172]	@ (8000e14 <UARTPollingMethod+0xd4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	715a      	strb	r2, [r3, #5]
		if(RxBuffer[0] == '1' || RxBuffer[4] == '1'){
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e14 <UARTPollingMethod+0xd4>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b31      	cmp	r3, #49	@ 0x31
 8000d70:	d003      	beq.n	8000d7a <UARTPollingMethod+0x3a>
 8000d72:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <UARTPollingMethod+0xd4>)
 8000d74:	791b      	ldrb	r3, [r3, #4]
 8000d76:	2b31      	cmp	r3, #49	@ 0x31
 8000d78:	d10a      	bne.n	8000d90 <UARTPollingMethod+0x50>
			point = 0;
 8000d7a:	4b29      	ldr	r3, [pc, #164]	@ (8000e20 <UARTPollingMethod+0xe0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
			attempt = 0;
 8000d80:	4b28      	ldr	r3, [pc, #160]	@ (8000e24 <UARTPollingMethod+0xe4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
			sprintf((char*)TxBuffer,"Reset Completed");
 8000d86:	4928      	ldr	r1, [pc, #160]	@ (8000e28 <UARTPollingMethod+0xe8>)
 8000d88:	4828      	ldr	r0, [pc, #160]	@ (8000e2c <UARTPollingMethod+0xec>)
 8000d8a:	f004 fecf 	bl	8005b2c <siprintf>
 8000d8e:	e011      	b.n	8000db4 <UARTPollingMethod+0x74>
		}
		else if(attempt >= 5 || point == 5){
 8000d90:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <UARTPollingMethod+0xe4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d803      	bhi.n	8000da0 <UARTPollingMethod+0x60>
 8000d98:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <UARTPollingMethod+0xe0>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b05      	cmp	r3, #5
 8000d9e:	d104      	bne.n	8000daa <UARTPollingMethod+0x6a>
			sprintf((char*)TxBuffer,"Game Halted, SEND 11111 to re-attempt\r\n");
 8000da0:	4923      	ldr	r1, [pc, #140]	@ (8000e30 <UARTPollingMethod+0xf0>)
 8000da2:	4822      	ldr	r0, [pc, #136]	@ (8000e2c <UARTPollingMethod+0xec>)
 8000da4:	f004 fec2 	bl	8005b2c <siprintf>
 8000da8:	e004      	b.n	8000db4 <UARTPollingMethod+0x74>
		}
		else{
			sprintf((char*)TxBuffer,"Your answer : %s\r\n",(char*)RxBuffer);
 8000daa:	4a1a      	ldr	r2, [pc, #104]	@ (8000e14 <UARTPollingMethod+0xd4>)
 8000dac:	4921      	ldr	r1, [pc, #132]	@ (8000e34 <UARTPollingMethod+0xf4>)
 8000dae:	481f      	ldr	r0, [pc, #124]	@ (8000e2c <UARTPollingMethod+0xec>)
 8000db0:	f004 febc 	bl	8005b2c <siprintf>
		}
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000db4:	481d      	ldr	r0, [pc, #116]	@ (8000e2c <UARTPollingMethod+0xec>)
 8000db6:	f7ff fa33 	bl	8000220 <strlen>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	491a      	ldr	r1, [pc, #104]	@ (8000e2c <UARTPollingMethod+0xec>)
 8000dc2:	4815      	ldr	r0, [pc, #84]	@ (8000e18 <UARTPollingMethod+0xd8>)
 8000dc4:	f003 fb9a 	bl	80044fc <HAL_UART_Transmit>
		//return received char
		sprintf((char*)TxBuffer,"turn CAPLOCK on, send S____ to begin\r\n");
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);

	}
}
 8000dc8:	e01f      	b.n	8000e0a <UARTPollingMethod+0xca>
	else if(HAL_status == HAL_TIMEOUT)
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d11c      	bne.n	8000e0a <UARTPollingMethod+0xca>
		uint32_t lastCharPos = hlpuart1.RxXferSize - hlpuart1.RxXferCount;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <UARTPollingMethod+0xd8>)
 8000dd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <UARTPollingMethod+0xd8>)
 8000dda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	603b      	str	r3, [r7, #0]
		RxBuffer[lastCharPos] = '\0';
 8000de4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e14 <UARTPollingMethod+0xd4>)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
		sprintf((char*)TxBuffer,"turn CAPLOCK on, send S____ to begin\r\n");
 8000dee:	4912      	ldr	r1, [pc, #72]	@ (8000e38 <UARTPollingMethod+0xf8>)
 8000df0:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <UARTPollingMethod+0xec>)
 8000df2:	f004 fe9b 	bl	8005b2c <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <UARTPollingMethod+0xec>)
 8000df8:	f7ff fa12 	bl	8000220 <strlen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	2305      	movs	r3, #5
 8000e02:	490a      	ldr	r1, [pc, #40]	@ (8000e2c <UARTPollingMethod+0xec>)
 8000e04:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <UARTPollingMethod+0xd8>)
 8000e06:	f003 fb79 	bl	80044fc <HAL_UART_Transmit>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000284 	.word	0x20000284
 8000e18:	20000080 	.word	0x20000080
 8000e1c:	200002dc 	.word	0x200002dc
 8000e20:	200002da 	.word	0x200002da
 8000e24:	200002db 	.word	0x200002db
 8000e28:	080065b4 	.word	0x080065b4
 8000e2c:	20000298 	.word	0x20000298
 8000e30:	080065c4 	.word	0x080065c4
 8000e34:	080065ec 	.word	0x080065ec
 8000e38:	08006600 	.word	0x08006600

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <Error_Handler+0x8>

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e52:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6a:	4a08      	ldr	r2, [pc, #32]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e7e:	f001 f8a5 	bl	8001fcc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09e      	sub	sp, #120	@ 0x78
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2254      	movs	r2, #84	@ 0x54
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 fe5b 	bl	8005b6c <memset>
  if(huart->Instance==LPUART1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a4d      	ldr	r2, [pc, #308]	@ (8000ff0 <HAL_UART_MspInit+0x160>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	f040 8092 	bne.w	8000fe6 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fdba 	bl	8002a48 <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eda:	f7ff ffaf 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ede:	4b45      	ldr	r3, [pc, #276]	@ (8000ff4 <HAL_UART_MspInit+0x164>)
 8000ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ee2:	4a44      	ldr	r2, [pc, #272]	@ (8000ff4 <HAL_UART_MspInit+0x164>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000eea:	4b42      	ldr	r3, [pc, #264]	@ (8000ff4 <HAL_UART_MspInit+0x164>)
 8000eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff4 <HAL_UART_MspInit+0x164>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a3e      	ldr	r2, [pc, #248]	@ (8000ff4 <HAL_UART_MspInit+0x164>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff4 <HAL_UART_MspInit+0x164>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000f0e:	230c      	movs	r3, #12
 8000f10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f26:	4619      	mov	r1, r3
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2c:	f000 fdd4 	bl	8001ad8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000f30:	4b31      	ldr	r3, [pc, #196]	@ (8000ff8 <HAL_UART_MspInit+0x168>)
 8000f32:	4a32      	ldr	r2, [pc, #200]	@ (8000ffc <HAL_UART_MspInit+0x16c>)
 8000f34:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000f36:	4b30      	ldr	r3, [pc, #192]	@ (8000ff8 <HAL_UART_MspInit+0x168>)
 8000f38:	2222      	movs	r2, #34	@ 0x22
 8000f3a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff8 <HAL_UART_MspInit+0x168>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <HAL_UART_MspInit+0x168>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f48:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff8 <HAL_UART_MspInit+0x168>)
 8000f4a:	2280      	movs	r2, #128	@ 0x80
 8000f4c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <HAL_UART_MspInit+0x168>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f54:	4b28      	ldr	r3, [pc, #160]	@ (8000ff8 <HAL_UART_MspInit+0x168>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <HAL_UART_MspInit+0x168>)
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f60:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <HAL_UART_MspInit+0x168>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000f66:	4824      	ldr	r0, [pc, #144]	@ (8000ff8 <HAL_UART_MspInit+0x168>)
 8000f68:	f000 fb3c 	bl	80015e4 <HAL_DMA_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000f72:	f7ff ff63 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff8 <HAL_UART_MspInit+0x168>)
 8000f7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <HAL_UART_MspInit+0x168>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <HAL_UART_MspInit+0x170>)
 8000f86:	4a1f      	ldr	r2, [pc, #124]	@ (8001004 <HAL_UART_MspInit+0x174>)
 8000f88:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <HAL_UART_MspInit+0x170>)
 8000f8c:	2223      	movs	r2, #35	@ 0x23
 8000f8e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <HAL_UART_MspInit+0x170>)
 8000f92:	2210      	movs	r2, #16
 8000f94:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <HAL_UART_MspInit+0x170>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_UART_MspInit+0x170>)
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <HAL_UART_MspInit+0x170>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_UART_MspInit+0x170>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <HAL_UART_MspInit+0x170>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_UART_MspInit+0x170>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000fba:	4811      	ldr	r0, [pc, #68]	@ (8001000 <HAL_UART_MspInit+0x170>)
 8000fbc:	f000 fb12 	bl	80015e4 <HAL_DMA_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000fc6:	f7ff ff39 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001000 <HAL_UART_MspInit+0x170>)
 8000fce:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <HAL_UART_MspInit+0x170>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	205b      	movs	r0, #91	@ 0x5b
 8000fdc:	f000 facd 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000fe0:	205b      	movs	r0, #91	@ 0x5b
 8000fe2:	f000 fae4 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3778      	adds	r7, #120	@ 0x78
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40008000 	.word	0x40008000
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	20000114 	.word	0x20000114
 8000ffc:	40020008 	.word	0x40020008
 8001000:	20000174 	.word	0x20000174
 8001004:	4002001c 	.word	0x4002001c

08001008 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	@ 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <HAL_SPI_MspInit+0x8c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d130      	bne.n	800108c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <HAL_SPI_MspInit+0x90>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102e:	4a1a      	ldr	r2, [pc, #104]	@ (8001098 <HAL_SPI_MspInit+0x90>)
 8001030:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001034:	6593      	str	r3, [r2, #88]	@ 0x58
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <HAL_SPI_MspInit+0x90>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_SPI_MspInit+0x90>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <HAL_SPI_MspInit+0x90>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104e:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <HAL_SPI_MspInit+0x90>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800105a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800106c:	2306      	movs	r3, #6
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4809      	ldr	r0, [pc, #36]	@ (800109c <HAL_SPI_MspInit+0x94>)
 8001078:	f000 fd2e 	bl	8001ad8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2033      	movs	r0, #51	@ 0x33
 8001082:	f000 fa7a 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001086:	2033      	movs	r0, #51	@ 0x33
 8001088:	f000 fa91 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	@ 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40003c00 	.word	0x40003c00
 8001098:	40021000 	.word	0x40021000
 800109c:	48000800 	.word	0x48000800

080010a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010b0:	d113      	bne.n	80010da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <HAL_TIM_Base_MspInit+0x44>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b6:	4a0b      	ldr	r2, [pc, #44]	@ (80010e4 <HAL_TIM_Base_MspInit+0x44>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <HAL_TIM_Base_MspInit+0x44>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	201c      	movs	r0, #28
 80010d0:	f000 fa53 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010d4:	201c      	movs	r0, #28
 80010d6:	f000 fa6a 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <NMI_Handler+0x4>

080010f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MemManage_Handler+0x4>

08001100 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <UsageFault_Handler+0x4>

08001110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113e:	f000 f901 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <DMA1_Channel1_IRQHandler+0x10>)
 800114e:	f000 fbb1 	bl	80018b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000114 	.word	0x20000114

0800115c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <DMA1_Channel2_IRQHandler+0x10>)
 8001162:	f000 fba7 	bl	80018b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000174 	.word	0x20000174

08001170 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001174:	4802      	ldr	r0, [pc, #8]	@ (8001180 <TIM2_IRQHandler+0x10>)
 8001176:	f002 fcad 	bl	8003ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000238 	.word	0x20000238

08001184 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001188:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800118c:	f000 fe56 	bl	8001e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <SPI3_IRQHandler+0x10>)
 800119a:	f001 fffd 	bl	8003198 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200001d4 	.word	0x200001d4

080011a8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <LPUART1_IRQHandler+0x10>)
 80011ae:	f003 fafb 	bl	80047a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000080 	.word	0x20000080

080011bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c4:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <_sbrk+0x5c>)
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <_sbrk+0x60>)
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <_sbrk+0x64>)
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <_sbrk+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d207      	bcs.n	80011fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ec:	f004 fcc6 	bl	8005b7c <__errno>
 80011f0:	4603      	mov	r3, r0
 80011f2:	220c      	movs	r2, #12
 80011f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e009      	b.n	8001210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	4a05      	ldr	r2, [pc, #20]	@ (8001220 <_sbrk+0x64>)
 800120c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20020000 	.word	0x20020000
 800121c:	00000400 	.word	0x00000400
 8001220:	200002f8 	.word	0x200002f8
 8001224:	20000448 	.word	0x20000448

08001228 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <SystemInit+0x20>)
 800122e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <SystemInit+0x20>)
 8001234:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001238:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800124c:	480d      	ldr	r0, [pc, #52]	@ (8001284 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800124e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001250:	f7ff ffea 	bl	8001228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <LoopForever+0x6>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	@ (800128c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <LoopForever+0xe>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <LoopForever+0x12>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	@ (8001298 <LoopForever+0x16>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127a:	f004 fc85 	bl	8005b88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800127e:	f7ff f99f 	bl	80005c0 <main>

08001282 <LoopForever>:

LoopForever:
    b LoopForever
 8001282:	e7fe      	b.n	8001282 <LoopForever>
  ldr   r0, =_estack
 8001284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001290:	080066ac 	.word	0x080066ac
  ldr r2, =_sbss
 8001294:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001298:	20000448 	.word	0x20000448

0800129c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC1_2_IRQHandler>

0800129e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 f95b 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 f80e 	bl	80012d0 <HAL_InitTick>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	e001      	b.n	80012c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c0:	f7ff fdc2 	bl	8000e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c4:	79fb      	ldrb	r3, [r7, #7]

}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <HAL_InitTick+0x68>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d022      	beq.n	800132a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012e4:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_InitTick+0x6c>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <HAL_InitTick+0x68>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f966 	bl	80015ca <HAL_SYSTICK_Config>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10f      	bne.n	8001324 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b0f      	cmp	r3, #15
 8001308:	d809      	bhi.n	800131e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130a:	2200      	movs	r2, #0
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	f04f 30ff 	mov.w	r0, #4294967295
 8001312:	f000 f932 	bl	800157a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001316:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <HAL_InitTick+0x70>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e007      	b.n	800132e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e004      	b.n	800132e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e001      	b.n	800132e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000010 	.word	0x20000010
 800133c:	20000008 	.word	0x20000008
 8001340:	2000000c 	.word	0x2000000c

08001344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <HAL_IncTick+0x1c>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_IncTick+0x20>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4413      	add	r3, r2
 8001352:	4a03      	ldr	r2, [pc, #12]	@ (8001360 <HAL_IncTick+0x1c>)
 8001354:	6013      	str	r3, [r2, #0]
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	200002fc 	.word	0x200002fc
 8001364:	20000010 	.word	0x20000010

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200002fc 	.word	0x200002fc

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001398:	d004      	beq.n	80013a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_Delay+0x40>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a4:	bf00      	nop
 80013a6:	f7ff ffdf 	bl	8001368 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8f7      	bhi.n	80013a6 <HAL_Delay+0x26>
  {
  }
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000010 	.word	0x20000010

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4907      	ldr	r1, [pc, #28]	@ (8001460 <__NVIC_EnableIRQ+0x38>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	@ (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	@ (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	@ 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	@ 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff29 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff40 	bl	800140c <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff90 	bl	80014b8 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5f 	bl	8001464 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff33 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa4 	bl	8001520 <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e08d      	b.n	8001712 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b47      	ldr	r3, [pc, #284]	@ (800171c <HAL_DMA_Init+0x138>)
 80015fe:	429a      	cmp	r2, r3
 8001600:	d80f      	bhi.n	8001622 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4b45      	ldr	r3, [pc, #276]	@ (8001720 <HAL_DMA_Init+0x13c>)
 800160a:	4413      	add	r3, r2
 800160c:	4a45      	ldr	r2, [pc, #276]	@ (8001724 <HAL_DMA_Init+0x140>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	009a      	lsls	r2, r3, #2
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a42      	ldr	r2, [pc, #264]	@ (8001728 <HAL_DMA_Init+0x144>)
 800161e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001620:	e00e      	b.n	8001640 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	4b40      	ldr	r3, [pc, #256]	@ (800172c <HAL_DMA_Init+0x148>)
 800162a:	4413      	add	r3, r2
 800162c:	4a3d      	ldr	r2, [pc, #244]	@ (8001724 <HAL_DMA_Init+0x140>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	009a      	lsls	r2, r3, #2
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a3c      	ldr	r2, [pc, #240]	@ (8001730 <HAL_DMA_Init+0x14c>)
 800163e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800165a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f9be 	bl	8001a14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016a0:	d102      	bne.n	80016a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d010      	beq.n	80016e8 <HAL_DMA_Init+0x104>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d80c      	bhi.n	80016e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f9de 	bl	8001a90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	e008      	b.n	80016fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40020407 	.word	0x40020407
 8001720:	bffdfff8 	.word	0xbffdfff8
 8001724:	cccccccd 	.word	0xcccccccd
 8001728:	40020000 	.word	0x40020000
 800172c:	bffdfbf8 	.word	0xbffdfbf8
 8001730:	40020400 	.word	0x40020400

08001734 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d005      	beq.n	8001758 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2204      	movs	r2, #4
 8001750:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	e037      	b.n	80017c8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 020e 	bic.w	r2, r2, #14
 8001766:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001772:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001776:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001794:	2101      	movs	r1, #1
 8001796:	fa01 f202 	lsl.w	r2, r1, r2
 800179a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017a4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00c      	beq.n	80017c8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017bc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017c6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d00d      	beq.n	800181a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2204      	movs	r2, #4
 8001802:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e047      	b.n	80018aa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 020e 	bic.w	r2, r2, #14
 8001828:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001844:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001848:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	f003 021f 	and.w	r2, r3, #31
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	2101      	movs	r1, #1
 8001858:	fa01 f202 	lsl.w	r2, r1, r2
 800185c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001866:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00c      	beq.n	800188a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800187a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800187e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001888:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	4798      	blx	r3
    }
  }
  return status;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d0:	f003 031f 	and.w	r3, r3, #31
 80018d4:	2204      	movs	r2, #4
 80018d6:	409a      	lsls	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d026      	beq.n	800192e <HAL_DMA_IRQHandler+0x7a>
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d021      	beq.n	800192e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d107      	bne.n	8001908 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0204 	bic.w	r2, r2, #4
 8001906:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190c:	f003 021f 	and.w	r2, r3, #31
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	2104      	movs	r1, #4
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001920:	2b00      	cmp	r3, #0
 8001922:	d071      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800192c:	e06c      	b.n	8001a08 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	2202      	movs	r2, #2
 8001938:	409a      	lsls	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d02e      	beq.n	80019a0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d029      	beq.n	80019a0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10b      	bne.n	8001972 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 020a 	bic.w	r2, r2, #10
 8001968:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	f003 021f 	and.w	r2, r3, #31
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	2102      	movs	r1, #2
 8001980:	fa01 f202 	lsl.w	r2, r1, r2
 8001984:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001992:	2b00      	cmp	r3, #0
 8001994:	d038      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800199e:	e033      	b.n	8001a08 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a4:	f003 031f 	and.w	r3, r3, #31
 80019a8:	2208      	movs	r2, #8
 80019aa:	409a      	lsls	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d02a      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d025      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 020e 	bic.w	r2, r2, #14
 80019cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	f003 021f 	and.w	r2, r3, #31
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	2101      	movs	r1, #1
 80019dc:	fa01 f202 	lsl.w	r2, r1, r2
 80019e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
}
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d802      	bhi.n	8001a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001a28:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	e001      	b.n	8001a32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001a30:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3b08      	subs	r3, #8
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	009a      	lsls	r2, r3, #2
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4413      	add	r3, r2
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001a5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	2201      	movs	r2, #1
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a6e:	bf00      	nop
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40020407 	.word	0x40020407
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020820 	.word	0x40020820
 8001a88:	cccccccd 	.word	0xcccccccd
 8001a8c:	40020880 	.word	0x40020880

08001a90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ab2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	2201      	movs	r2, #1
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	1000823f 	.word	0x1000823f
 8001ad4:	40020940 	.word	0x40020940

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ae6:	e15a      	b.n	8001d9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 814c 	beq.w	8001d98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d005      	beq.n	8001b18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d130      	bne.n	8001b7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b4e:	2201      	movs	r2, #1
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	f003 0201 	and.w	r2, r3, #1
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d017      	beq.n	8001bb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d123      	bne.n	8001c0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	220f      	movs	r2, #15
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	6939      	ldr	r1, [r7, #16]
 8001c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0203 	and.w	r2, r3, #3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80a6 	beq.w	8001d98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4c:	4b5b      	ldr	r3, [pc, #364]	@ (8001dbc <HAL_GPIO_Init+0x2e4>)
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c50:	4a5a      	ldr	r2, [pc, #360]	@ (8001dbc <HAL_GPIO_Init+0x2e4>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c58:	4b58      	ldr	r3, [pc, #352]	@ (8001dbc <HAL_GPIO_Init+0x2e4>)
 8001c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c64:	4a56      	ldr	r2, [pc, #344]	@ (8001dc0 <HAL_GPIO_Init+0x2e8>)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c8e:	d01f      	beq.n	8001cd0 <HAL_GPIO_Init+0x1f8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a4c      	ldr	r2, [pc, #304]	@ (8001dc4 <HAL_GPIO_Init+0x2ec>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d019      	beq.n	8001ccc <HAL_GPIO_Init+0x1f4>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a4b      	ldr	r2, [pc, #300]	@ (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d013      	beq.n	8001cc8 <HAL_GPIO_Init+0x1f0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a4a      	ldr	r2, [pc, #296]	@ (8001dcc <HAL_GPIO_Init+0x2f4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_GPIO_Init+0x1ec>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a49      	ldr	r2, [pc, #292]	@ (8001dd0 <HAL_GPIO_Init+0x2f8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d007      	beq.n	8001cc0 <HAL_GPIO_Init+0x1e8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a48      	ldr	r2, [pc, #288]	@ (8001dd4 <HAL_GPIO_Init+0x2fc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d101      	bne.n	8001cbc <HAL_GPIO_Init+0x1e4>
 8001cb8:	2305      	movs	r3, #5
 8001cba:	e00a      	b.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001cbc:	2306      	movs	r3, #6
 8001cbe:	e008      	b.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	e006      	b.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e004      	b.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e002      	b.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	f002 0203 	and.w	r2, r2, #3
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	4093      	lsls	r3, r2
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce2:	4937      	ldr	r1, [pc, #220]	@ (8001dc0 <HAL_GPIO_Init+0x2e8>)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cf0:	4b39      	ldr	r3, [pc, #228]	@ (8001dd8 <HAL_GPIO_Init+0x300>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d14:	4a30      	ldr	r2, [pc, #192]	@ (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d3e:	4a26      	ldr	r2, [pc, #152]	@ (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d44:	4b24      	ldr	r3, [pc, #144]	@ (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d68:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d92:	4a11      	ldr	r2, [pc, #68]	@ (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f47f ae9d 	bne.w	8001ae8 <HAL_GPIO_Init+0x10>
  }
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	48000400 	.word	0x48000400
 8001dc8:	48000800 	.word	0x48000800
 8001dcc:	48000c00 	.word	0x48000c00
 8001dd0:	48001000 	.word	0x48001000
 8001dd4:	48001400 	.word	0x48001400
 8001dd8:	40010400 	.word	0x40010400

08001ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e001      	b.n	8001dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e1c:	787b      	ldrb	r3, [r7, #1]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e28:	e002      	b.n	8001e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e46:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d006      	beq.n	8001e60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e52:	4a05      	ldr	r2, [pc, #20]	@ (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f806 	bl	8001e6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40010400 	.word	0x40010400

08001e6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d141      	bne.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e92:	4b4b      	ldr	r3, [pc, #300]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e9e:	d131      	bne.n	8001f04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ea0:	4b47      	ldr	r3, [pc, #284]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ea6:	4a46      	ldr	r2, [pc, #280]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb0:	4b43      	ldr	r3, [pc, #268]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001eb8:	4a41      	ldr	r2, [pc, #260]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ec0:	4b40      	ldr	r3, [pc, #256]	@ (8001fc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2232      	movs	r2, #50	@ 0x32
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	4a3f      	ldr	r2, [pc, #252]	@ (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	0c9b      	lsrs	r3, r3, #18
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed6:	e002      	b.n	8001ede <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ede:	4b38      	ldr	r3, [pc, #224]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eea:	d102      	bne.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f2      	bne.n	8001ed8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ef2:	4b33      	ldr	r3, [pc, #204]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efe:	d158      	bne.n	8001fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e057      	b.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f04:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f14:	e04d      	b.n	8001fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f1c:	d141      	bne.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f1e:	4b28      	ldr	r3, [pc, #160]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f2a:	d131      	bne.n	8001f90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f2c:	4b24      	ldr	r3, [pc, #144]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f32:	4a23      	ldr	r2, [pc, #140]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f3c:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f44:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2232      	movs	r2, #50	@ 0x32
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	0c9b      	lsrs	r3, r3, #18
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f62:	e002      	b.n	8001f6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f76:	d102      	bne.n	8001f7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f2      	bne.n	8001f64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f7e:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f8a:	d112      	bne.n	8001fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e011      	b.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fa0:	e007      	b.n	8001fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fa2:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001faa:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fb0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	431bde83 	.word	0x431bde83

08001fcc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a04      	ldr	r2, [pc, #16]	@ (8001fe8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fda:	6093      	str	r3, [r2, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40007000 	.word	0x40007000

08001fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e2fe      	b.n	80025fc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d075      	beq.n	80020f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800200a:	4b97      	ldr	r3, [pc, #604]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002014:	4b94      	ldr	r3, [pc, #592]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	2b0c      	cmp	r3, #12
 8002022:	d102      	bne.n	800202a <HAL_RCC_OscConfig+0x3e>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d002      	beq.n	8002030 <HAL_RCC_OscConfig+0x44>
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d10b      	bne.n	8002048 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	4b8d      	ldr	r3, [pc, #564]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d05b      	beq.n	80020f4 <HAL_RCC_OscConfig+0x108>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d157      	bne.n	80020f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e2d9      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002050:	d106      	bne.n	8002060 <HAL_RCC_OscConfig+0x74>
 8002052:	4b85      	ldr	r3, [pc, #532]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a84      	ldr	r2, [pc, #528]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e01d      	b.n	800209c <HAL_RCC_OscConfig+0xb0>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x98>
 800206a:	4b7f      	ldr	r3, [pc, #508]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a7e      	ldr	r2, [pc, #504]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b7c      	ldr	r3, [pc, #496]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a7b      	ldr	r2, [pc, #492]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0xb0>
 8002084:	4b78      	ldr	r3, [pc, #480]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a77      	ldr	r2, [pc, #476]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b75      	ldr	r3, [pc, #468]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a74      	ldr	r2, [pc, #464]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800209a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f960 	bl	8001368 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff f95c 	bl	8001368 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	@ 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e29e      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020be:	4b6a      	ldr	r3, [pc, #424]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0xc0>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7ff f94c 	bl	8001368 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff f948 	bl	8001368 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	@ 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e28a      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020e6:	4b60      	ldr	r3, [pc, #384]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0xe8>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d075      	beq.n	80021ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002102:	4b59      	ldr	r3, [pc, #356]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800210c:	4b56      	ldr	r3, [pc, #344]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b0c      	cmp	r3, #12
 800211a:	d102      	bne.n	8002122 <HAL_RCC_OscConfig+0x136>
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d002      	beq.n	8002128 <HAL_RCC_OscConfig+0x13c>
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d11f      	bne.n	8002168 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002128:	4b4f      	ldr	r3, [pc, #316]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_OscConfig+0x154>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e25d      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b49      	ldr	r3, [pc, #292]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	4946      	ldr	r1, [pc, #280]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002154:	4b45      	ldr	r3, [pc, #276]	@ (800226c <HAL_RCC_OscConfig+0x280>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff f8b9 	bl	80012d0 <HAL_InitTick>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d043      	beq.n	80021ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e249      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d023      	beq.n	80021b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	4b3d      	ldr	r3, [pc, #244]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a3c      	ldr	r2, [pc, #240]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7ff f8f4 	bl	8001368 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002184:	f7ff f8f0 	bl	8001368 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e232      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002196:	4b34      	ldr	r3, [pc, #208]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a2:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	061b      	lsls	r3, r3, #24
 80021b0:	492d      	ldr	r1, [pc, #180]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
 80021b6:	e01a      	b.n	80021ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 80021be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7ff f8d0 	bl	8001368 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021cc:	f7ff f8cc 	bl	8001368 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e20e      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021de:	4b22      	ldr	r3, [pc, #136]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x1e0>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d041      	beq.n	800227e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01c      	beq.n	800223c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002202:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002204:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002208:	4a17      	ldr	r2, [pc, #92]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002212:	f7ff f8a9 	bl	8001368 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221a:	f7ff f8a5 	bl	8001368 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1e7      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800222c:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 800222e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0ef      	beq.n	800221a <HAL_RCC_OscConfig+0x22e>
 800223a:	e020      	b.n	800227e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223c:	4b0a      	ldr	r3, [pc, #40]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 800223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002242:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <HAL_RCC_OscConfig+0x27c>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7ff f88c 	bl	8001368 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002252:	e00d      	b.n	8002270 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002254:	f7ff f888 	bl	8001368 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d906      	bls.n	8002270 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1ca      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002270:	4b8c      	ldr	r3, [pc, #560]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 8002272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ea      	bne.n	8002254 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80a6 	beq.w	80023d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002290:	4b84      	ldr	r3, [pc, #528]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_OscConfig+0x2b4>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <HAL_RCC_OscConfig+0x2b6>
 80022a0:	2300      	movs	r3, #0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00d      	beq.n	80022c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	4b7f      	ldr	r3, [pc, #508]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	4a7e      	ldr	r2, [pc, #504]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b2:	4b7c      	ldr	r3, [pc, #496]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022be:	2301      	movs	r3, #1
 80022c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c2:	4b79      	ldr	r3, [pc, #484]	@ (80024a8 <HAL_RCC_OscConfig+0x4bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d118      	bne.n	8002300 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ce:	4b76      	ldr	r3, [pc, #472]	@ (80024a8 <HAL_RCC_OscConfig+0x4bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a75      	ldr	r2, [pc, #468]	@ (80024a8 <HAL_RCC_OscConfig+0x4bc>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022da:	f7ff f845 	bl	8001368 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e2:	f7ff f841 	bl	8001368 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e183      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f4:	4b6c      	ldr	r3, [pc, #432]	@ (80024a8 <HAL_RCC_OscConfig+0x4bc>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d108      	bne.n	800231a <HAL_RCC_OscConfig+0x32e>
 8002308:	4b66      	ldr	r3, [pc, #408]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230e:	4a65      	ldr	r2, [pc, #404]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002318:	e024      	b.n	8002364 <HAL_RCC_OscConfig+0x378>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b05      	cmp	r3, #5
 8002320:	d110      	bne.n	8002344 <HAL_RCC_OscConfig+0x358>
 8002322:	4b60      	ldr	r3, [pc, #384]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002328:	4a5e      	ldr	r2, [pc, #376]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002332:	4b5c      	ldr	r3, [pc, #368]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002338:	4a5a      	ldr	r2, [pc, #360]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002342:	e00f      	b.n	8002364 <HAL_RCC_OscConfig+0x378>
 8002344:	4b57      	ldr	r3, [pc, #348]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234a:	4a56      	ldr	r2, [pc, #344]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002354:	4b53      	ldr	r3, [pc, #332]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800235a:	4a52      	ldr	r2, [pc, #328]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d016      	beq.n	800239a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7fe fffc 	bl	8001368 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002372:	e00a      	b.n	800238a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002374:	f7fe fff8 	bl	8001368 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e138      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	4b46      	ldr	r3, [pc, #280]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ed      	beq.n	8002374 <HAL_RCC_OscConfig+0x388>
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239a:	f7fe ffe5 	bl	8001368 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7fe ffe1 	bl	8001368 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e121      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b8:	4b3a      	ldr	r3, [pc, #232]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1ed      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023c6:	7ffb      	ldrb	r3, [r7, #31]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d105      	bne.n	80023d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023cc:	4b35      	ldr	r3, [pc, #212]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d0:	4a34      	ldr	r2, [pc, #208]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 80023d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d03c      	beq.n	800245e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01c      	beq.n	8002426 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023ec:	4b2d      	ldr	r3, [pc, #180]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 80023ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023f2:	4a2c      	ldr	r2, [pc, #176]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe ffb4 	bl	8001368 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002404:	f7fe ffb0 	bl	8001368 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e0f2      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002416:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 8002418:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0ef      	beq.n	8002404 <HAL_RCC_OscConfig+0x418>
 8002424:	e01b      	b.n	800245e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002426:	4b1f      	ldr	r3, [pc, #124]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 8002428:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800242c:	4a1d      	ldr	r2, [pc, #116]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7fe ff97 	bl	8001368 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800243e:	f7fe ff93 	bl	8001368 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0d5      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002450:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 8002452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ef      	bne.n	800243e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80c9 	beq.w	80025fa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002468:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b0c      	cmp	r3, #12
 8002472:	f000 8083 	beq.w	800257c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d15e      	bne.n	800253c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247e:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a08      	ldr	r2, [pc, #32]	@ (80024a4 <HAL_RCC_OscConfig+0x4b8>)
 8002484:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe ff6d 	bl	8001368 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002490:	e00c      	b.n	80024ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7fe ff69 	bl	8001368 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d905      	bls.n	80024ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e0ab      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ac:	4b55      	ldr	r3, [pc, #340]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ec      	bne.n	8002492 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b8:	4b52      	ldr	r3, [pc, #328]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	4b52      	ldr	r3, [pc, #328]	@ (8002608 <HAL_RCC_OscConfig+0x61c>)
 80024be:	4013      	ands	r3, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6a11      	ldr	r1, [r2, #32]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024c8:	3a01      	subs	r2, #1
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	4311      	orrs	r1, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024d2:	0212      	lsls	r2, r2, #8
 80024d4:	4311      	orrs	r1, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024da:	0852      	lsrs	r2, r2, #1
 80024dc:	3a01      	subs	r2, #1
 80024de:	0552      	lsls	r2, r2, #21
 80024e0:	4311      	orrs	r1, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024e6:	0852      	lsrs	r2, r2, #1
 80024e8:	3a01      	subs	r2, #1
 80024ea:	0652      	lsls	r2, r2, #25
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024f2:	06d2      	lsls	r2, r2, #27
 80024f4:	430a      	orrs	r2, r1
 80024f6:	4943      	ldr	r1, [pc, #268]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024fc:	4b41      	ldr	r3, [pc, #260]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a40      	ldr	r2, [pc, #256]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 8002502:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002506:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002508:	4b3e      	ldr	r3, [pc, #248]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a3d      	ldr	r2, [pc, #244]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002512:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe ff28 	bl	8001368 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251c:	f7fe ff24 	bl	8001368 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e066      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800252e:	4b35      	ldr	r3, [pc, #212]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x530>
 800253a:	e05e      	b.n	80025fa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b31      	ldr	r3, [pc, #196]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a30      	ldr	r2, [pc, #192]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 8002542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe ff0e 	bl	8001368 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe ff0a 	bl	8001368 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e04c      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002562:	4b28      	ldr	r3, [pc, #160]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800256e:	4b25      	ldr	r3, [pc, #148]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	4924      	ldr	r1, [pc, #144]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 8002574:	4b25      	ldr	r3, [pc, #148]	@ (800260c <HAL_RCC_OscConfig+0x620>)
 8002576:	4013      	ands	r3, r2
 8002578:	60cb      	str	r3, [r1, #12]
 800257a:	e03e      	b.n	80025fa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e039      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002588:	4b1e      	ldr	r3, [pc, #120]	@ (8002604 <HAL_RCC_OscConfig+0x618>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0203 	and.w	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	429a      	cmp	r2, r3
 800259a:	d12c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	3b01      	subs	r3, #1
 80025a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d123      	bne.n	80025f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d11b      	bne.n	80025f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d113      	bne.n	80025f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	3b01      	subs	r3, #1
 80025dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	3b01      	subs	r3, #1
 80025f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000
 8002608:	019f800c 	.word	0x019f800c
 800260c:	feeefffc 	.word	0xfeeefffc

08002610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e11e      	b.n	8002866 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002628:	4b91      	ldr	r3, [pc, #580]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d910      	bls.n	8002658 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b8e      	ldr	r3, [pc, #568]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 020f 	bic.w	r2, r3, #15
 800263e:	498c      	ldr	r1, [pc, #560]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b8a      	ldr	r3, [pc, #552]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e106      	b.n	8002866 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d073      	beq.n	800274c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d129      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266c:	4b81      	ldr	r3, [pc, #516]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0f4      	b.n	8002866 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800267c:	f000 f99e 	bl	80029bc <RCC_GetSysClockFreqFromPLLSource>
 8002680:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4a7c      	ldr	r2, [pc, #496]	@ (8002878 <HAL_RCC_ClockConfig+0x268>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d93f      	bls.n	800270a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800268a:	4b7a      	ldr	r3, [pc, #488]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d033      	beq.n	800270a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d12f      	bne.n	800270a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026aa:	4b72      	ldr	r3, [pc, #456]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026b2:	4a70      	ldr	r2, [pc, #448]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 80026b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	e024      	b.n	800270a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0c6      	b.n	8002866 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d8:	4b66      	ldr	r3, [pc, #408]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0be      	b.n	8002866 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026e8:	f000 f8ce 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4a61      	ldr	r2, [pc, #388]	@ (8002878 <HAL_RCC_ClockConfig+0x268>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d909      	bls.n	800270a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026fe:	4a5d      	ldr	r2, [pc, #372]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 8002700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002704:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800270a:	4b5a      	ldr	r3, [pc, #360]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f023 0203 	bic.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4957      	ldr	r1, [pc, #348]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271c:	f7fe fe24 	bl	8001368 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7fe fe20 	bl	8001368 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e095      	b.n	8002866 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b4e      	ldr	r3, [pc, #312]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 020c 	and.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1eb      	bne.n	8002724 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d023      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b43      	ldr	r3, [pc, #268]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a42      	ldr	r2, [pc, #264]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 800276a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800276e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d007      	beq.n	800278c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800277c:	4b3d      	ldr	r3, [pc, #244]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002784:	4a3b      	ldr	r2, [pc, #236]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 8002786:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800278a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278c:	4b39      	ldr	r3, [pc, #228]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4936      	ldr	r1, [pc, #216]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
 800279e:	e008      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b80      	cmp	r3, #128	@ 0x80
 80027a4:	d105      	bne.n	80027b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027a6:	4b33      	ldr	r3, [pc, #204]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	4a32      	ldr	r2, [pc, #200]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 80027ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d21d      	bcs.n	80027fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 020f 	bic.w	r2, r3, #15
 80027c8:	4929      	ldr	r1, [pc, #164]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027d0:	f7fe fdca 	bl	8001368 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7fe fdc6 	bl	8001368 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e03b      	b.n	8002866 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b20      	ldr	r3, [pc, #128]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1ed      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002808:	4b1a      	ldr	r3, [pc, #104]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4917      	ldr	r1, [pc, #92]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002826:	4b13      	ldr	r3, [pc, #76]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	490f      	ldr	r1, [pc, #60]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800283a:	f000 f825 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 800283e:	4602      	mov	r2, r0
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <HAL_RCC_ClockConfig+0x264>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	490c      	ldr	r1, [pc, #48]	@ (800287c <HAL_RCC_ClockConfig+0x26c>)
 800284c:	5ccb      	ldrb	r3, [r1, r3]
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	fa22 f303 	lsr.w	r3, r2, r3
 8002856:	4a0a      	ldr	r2, [pc, #40]	@ (8002880 <HAL_RCC_ClockConfig+0x270>)
 8002858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800285a:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <HAL_RCC_ClockConfig+0x274>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fd36 	bl	80012d0 <HAL_InitTick>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40022000 	.word	0x40022000
 8002874:	40021000 	.word	0x40021000
 8002878:	04c4b400 	.word	0x04c4b400
 800287c:	08006628 	.word	0x08006628
 8002880:	20000008 	.word	0x20000008
 8002884:	2000000c 	.word	0x2000000c

08002888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800288e:	4b2c      	ldr	r3, [pc, #176]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b04      	cmp	r3, #4
 8002898:	d102      	bne.n	80028a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800289a:	4b2a      	ldr	r3, [pc, #168]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xbc>)
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	e047      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028a0:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d102      	bne.n	80028b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028ac:	4b26      	ldr	r3, [pc, #152]	@ (8002948 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	e03e      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028b2:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d136      	bne.n	800292c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3301      	adds	r3, #1
 80028d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002948 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	4a16      	ldr	r2, [pc, #88]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e6:	68d2      	ldr	r2, [r2, #12]
 80028e8:	0a12      	lsrs	r2, r2, #8
 80028ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	617b      	str	r3, [r7, #20]
      break;
 80028f4:	e00c      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f6:	4a13      	ldr	r2, [pc, #76]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	4a10      	ldr	r2, [pc, #64]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	0a12      	lsrs	r2, r2, #8
 8002904:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002908:	fb02 f303 	mul.w	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
      break;
 800290e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0e5b      	lsrs	r3, r3, #25
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	3301      	adds	r3, #1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	e001      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002930:	693b      	ldr	r3, [r7, #16]
}
 8002932:	4618      	mov	r0, r3
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	00f42400 	.word	0x00f42400
 8002948:	016e3600 	.word	0x016e3600

0800294c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002950:	4b03      	ldr	r3, [pc, #12]	@ (8002960 <HAL_RCC_GetHCLKFreq+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000008 	.word	0x20000008

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002968:	f7ff fff0 	bl	800294c <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4904      	ldr	r1, [pc, #16]	@ (800298c <HAL_RCC_GetPCLK1Freq+0x28>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	08006638 	.word	0x08006638

08002990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002994:	f7ff ffda 	bl	800294c <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0adb      	lsrs	r3, r3, #11
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4904      	ldr	r1, [pc, #16]	@ (80029b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	08006638 	.word	0x08006638

080029bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029c2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029cc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	3301      	adds	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d10c      	bne.n	80029fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029e0:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	4a14      	ldr	r2, [pc, #80]	@ (8002a3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029ea:	68d2      	ldr	r2, [r2, #12]
 80029ec:	0a12      	lsrs	r2, r2, #8
 80029ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029f2:	fb02 f303 	mul.w	r3, r2, r3
 80029f6:	617b      	str	r3, [r7, #20]
    break;
 80029f8:	e00c      	b.n	8002a14 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029fa:	4a12      	ldr	r2, [pc, #72]	@ (8002a44 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a02:	4a0e      	ldr	r2, [pc, #56]	@ (8002a3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a04:	68d2      	ldr	r2, [r2, #12]
 8002a06:	0a12      	lsrs	r2, r2, #8
 8002a08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]
    break;
 8002a12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a14:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	0e5b      	lsrs	r3, r3, #25
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a2e:	687b      	ldr	r3, [r7, #4]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	016e3600 	.word	0x016e3600
 8002a44:	00f42400 	.word	0x00f42400

08002a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a50:	2300      	movs	r3, #0
 8002a52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a54:	2300      	movs	r3, #0
 8002a56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8098 	beq.w	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b43      	ldr	r3, [pc, #268]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10d      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	4b40      	ldr	r3, [pc, #256]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a82:	4b3d      	ldr	r3, [pc, #244]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a92:	4b3a      	ldr	r3, [pc, #232]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a39      	ldr	r2, [pc, #228]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a9e:	f7fe fc63 	bl	8001368 <HAL_GetTick>
 8002aa2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aa4:	e009      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa6:	f7fe fc5f 	bl	8001368 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d902      	bls.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	74fb      	strb	r3, [r7, #19]
        break;
 8002ab8:	e005      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aba:	4b30      	ldr	r3, [pc, #192]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0ef      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d159      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002acc:	4b2a      	ldr	r3, [pc, #168]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01e      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d019      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ae8:	4b23      	ldr	r3, [pc, #140]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002af2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002af4:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afa:	4a1f      	ldr	r2, [pc, #124]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b04:	4b1c      	ldr	r3, [pc, #112]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b14:	4a18      	ldr	r2, [pc, #96]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d016      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7fe fc1f 	bl	8001368 <HAL_GetTick>
 8002b2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2c:	e00b      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fc1b 	bl	8001368 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d902      	bls.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	74fb      	strb	r3, [r7, #19]
            break;
 8002b44:	e006      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b46:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0ec      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b54:	7cfb      	ldrb	r3, [r7, #19]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10b      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b5a:	4b07      	ldr	r3, [pc, #28]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b68:	4903      	ldr	r1, [pc, #12]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b70:	e008      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	74bb      	strb	r3, [r7, #18]
 8002b76:	e005      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b80:	7cfb      	ldrb	r3, [r7, #19]
 8002b82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b84:	7c7b      	ldrb	r3, [r7, #17]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d105      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8a:	4ba7      	ldr	r3, [pc, #668]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8e:	4aa6      	ldr	r2, [pc, #664]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b94:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ba2:	4ba1      	ldr	r3, [pc, #644]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba8:	f023 0203 	bic.w	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	499d      	ldr	r1, [pc, #628]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bc4:	4b98      	ldr	r3, [pc, #608]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bca:	f023 020c 	bic.w	r2, r3, #12
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	4995      	ldr	r1, [pc, #596]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002be6:	4b90      	ldr	r3, [pc, #576]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	498c      	ldr	r1, [pc, #560]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c08:	4b87      	ldr	r3, [pc, #540]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	4984      	ldr	r1, [pc, #528]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	497b      	ldr	r1, [pc, #492]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c4c:	4b76      	ldr	r3, [pc, #472]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	4973      	ldr	r1, [pc, #460]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c6e:	4b6e      	ldr	r3, [pc, #440]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c74:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	496a      	ldr	r1, [pc, #424]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c90:	4b65      	ldr	r3, [pc, #404]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c96:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4962      	ldr	r1, [pc, #392]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	4959      	ldr	r1, [pc, #356]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cd4:	4b54      	ldr	r3, [pc, #336]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cda:	f023 0203 	bic.w	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce2:	4951      	ldr	r1, [pc, #324]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	4948      	ldr	r1, [pc, #288]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d015      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d18:	4b43      	ldr	r3, [pc, #268]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	4940      	ldr	r1, [pc, #256]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d36:	d105      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d38:	4b3b      	ldr	r3, [pc, #236]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d015      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d50:	4b35      	ldr	r3, [pc, #212]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5e:	4932      	ldr	r1, [pc, #200]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d70:	4b2d      	ldr	r3, [pc, #180]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a2c      	ldr	r2, [pc, #176]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d015      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d88:	4b27      	ldr	r3, [pc, #156]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d96:	4924      	ldr	r1, [pc, #144]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002da6:	d105      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a1e      	ldr	r2, [pc, #120]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002db2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dc0:	4b19      	ldr	r3, [pc, #100]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dce:	4916      	ldr	r1, [pc, #88]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dde:	d105      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de0:	4b11      	ldr	r3, [pc, #68]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a10      	ldr	r2, [pc, #64]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d019      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	4908      	ldr	r1, [pc, #32]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e16:	d109      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e18:	4b03      	ldr	r3, [pc, #12]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4a02      	ldr	r2, [pc, #8]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e22:	60d3      	str	r3, [r2, #12]
 8002e24:	e002      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d015      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e38:	4b29      	ldr	r3, [pc, #164]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	4926      	ldr	r1, [pc, #152]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e56:	d105      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e58:	4b21      	ldr	r3, [pc, #132]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e62:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d015      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002e70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e76:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e7e:	4918      	ldr	r1, [pc, #96]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e90:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a12      	ldr	r2, [pc, #72]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e9a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d015      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb6:	490a      	ldr	r1, [pc, #40]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec8:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a04      	ldr	r2, [pc, #16]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ed2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ed4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e09d      	b.n	8003032 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f06:	d009      	beq.n	8002f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
 8002f0e:	e005      	b.n	8002f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe f866 	bl	8001008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f5c:	d902      	bls.n	8002f64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	e002      	b.n	8002f6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f72:	d007      	beq.n	8002f84 <HAL_SPI_Init+0xa0>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f7c:	d002      	beq.n	8002f84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc6:	ea42 0103 	orr.w	r1, r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	f003 0204 	and.w	r2, r3, #4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003000:	ea42 0103 	orr.w	r1, r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003020:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003054:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800305c:	7dbb      	ldrb	r3, [r7, #22]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d00d      	beq.n	800307e <HAL_SPI_TransmitReceive_IT+0x42>
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003068:	d106      	bne.n	8003078 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <HAL_SPI_TransmitReceive_IT+0x3c>
 8003072:	7dbb      	ldrb	r3, [r7, #22]
 8003074:	2b04      	cmp	r3, #4
 8003076:	d002      	beq.n	800307e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8003078:	2302      	movs	r3, #2
 800307a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800307c:	e07d      	b.n	800317a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_SPI_TransmitReceive_IT+0x54>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_SPI_TransmitReceive_IT+0x54>
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d102      	bne.n	8003096 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003094:	e071      	b.n	800317a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_SPI_TransmitReceive_IT+0x68>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e06b      	b.n	800317c <HAL_SPI_TransmitReceive_IT+0x140>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d003      	beq.n	80030c0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2205      	movs	r2, #5
 80030bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	887a      	ldrh	r2, [r7, #2]
 80030d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	887a      	ldrh	r2, [r7, #2]
 80030e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	887a      	ldrh	r2, [r7, #2]
 80030ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030f6:	d906      	bls.n	8003106 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4a23      	ldr	r2, [pc, #140]	@ (8003188 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80030fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4a22      	ldr	r2, [pc, #136]	@ (800318c <HAL_SPI_TransmitReceive_IT+0x150>)
 8003102:	651a      	str	r2, [r3, #80]	@ 0x50
 8003104:	e005      	b.n	8003112 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4a21      	ldr	r2, [pc, #132]	@ (8003190 <HAL_SPI_TransmitReceive_IT+0x154>)
 800310a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4a21      	ldr	r2, [pc, #132]	@ (8003194 <HAL_SPI_TransmitReceive_IT+0x158>)
 8003110:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800311a:	d802      	bhi.n	8003122 <HAL_SPI_TransmitReceive_IT+0xe6>
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d908      	bls.n	8003134 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	e007      	b.n	8003144 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003142:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800314e:	2b40      	cmp	r3, #64	@ 0x40
 8003150:	d007      	beq.n	8003162 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8003178:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800317a:	7dfb      	ldrb	r3, [r7, #23]
}
 800317c:	4618      	mov	r0, r3
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	08003523 	.word	0x08003523
 800318c:	08003589 	.word	0x08003589
 8003190:	080033d3 	.word	0x080033d3
 8003194:	08003491 	.word	0x08003491

08003198 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10e      	bne.n	80031d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d004      	beq.n	80031d8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
    return;
 80031d6:	e0ce      	b.n	8003376 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_SPI_IRQHandler+0x5e>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
    return;
 80031f4:	e0bf      	b.n	8003376 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <HAL_SPI_IRQHandler+0x7e>
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80b0 	beq.w	8003376 <HAL_SPI_IRQHandler+0x1de>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80aa 	beq.w	8003376 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d023      	beq.n	8003274 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b03      	cmp	r3, #3
 8003236:	d011      	beq.n	800325c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323c:	f043 0204 	orr.w	r2, r3, #4
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	e00b      	b.n	8003274 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
        return;
 8003272:	e080      	b.n	8003376 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d014      	beq.n	80032a8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00c      	beq.n	80032cc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b6:	f043 0208 	orr.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d04f      	beq.n	8003374 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d104      	bne.n	8003300 <HAL_SPI_IRQHandler+0x168>
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d034      	beq.n	800336a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0203 	bic.w	r2, r2, #3
 800330e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003314:	2b00      	cmp	r3, #0
 8003316:	d011      	beq.n	800333c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	4a17      	ldr	r2, [pc, #92]	@ (800337c <HAL_SPI_IRQHandler+0x1e4>)
 800331e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe fa5e 	bl	80017e6 <HAL_DMA_Abort_IT>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003334:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003340:	2b00      	cmp	r3, #0
 8003342:	d016      	beq.n	8003372 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003348:	4a0c      	ldr	r2, [pc, #48]	@ (800337c <HAL_SPI_IRQHandler+0x1e4>)
 800334a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe fa48 	bl	80017e6 <HAL_DMA_Abort_IT>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003360:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003368:	e003      	b.n	8003372 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f812 	bl	8003394 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003370:	e000      	b.n	8003374 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003372:	bf00      	nop
    return;
 8003374:	bf00      	nop
  }
}
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	080033a9 	.word	0x080033a9

08003380 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7ff ffe5 	bl	8003394 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d923      	bls.n	800342e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	b292      	uxth	r2, r2
 80033f2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	1c9a      	adds	r2, r3, #2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b02      	subs	r3, #2
 8003408:	b29a      	uxth	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d11f      	bne.n	800345c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	e016      	b.n	800345c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f103 020c 	add.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	7812      	ldrb	r2, [r2, #0]
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10f      	bne.n	8003488 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003476:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fa14 	bl	80038b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d912      	bls.n	80034c8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a6:	881a      	ldrh	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b2:	1c9a      	adds	r2, r3, #2
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b02      	subs	r3, #2
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034c6:	e012      	b.n	80034ee <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	330c      	adds	r3, #12
 80034d2:	7812      	ldrb	r2, [r2, #0]
 80034d4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d110      	bne.n	800351a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003506:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f9cb 	bl	80038b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	b292      	uxth	r2, r2
 8003536:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353c:	1c9a      	adds	r2, r3, #2
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10f      	bne.n	8003580 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800356e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d102      	bne.n	8003580 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f998 	bl	80038b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003594:	881a      	ldrh	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	1c9a      	adds	r2, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d110      	bne.n	80035e0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035cc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f968 	bl	80038b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035f8:	f7fd feb6 	bl	8001368 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	4413      	add	r3, r2
 8003606:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003608:	f7fd feae 	bl	8001368 <HAL_GetTick>
 800360c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800360e:	4b39      	ldr	r3, [pc, #228]	@ (80036f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	015b      	lsls	r3, r3, #5
 8003614:	0d1b      	lsrs	r3, r3, #20
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	fb02 f303 	mul.w	r3, r2, r3
 800361c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800361e:	e054      	b.n	80036ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d050      	beq.n	80036ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003628:	f7fd fe9e 	bl	8001368 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	429a      	cmp	r2, r3
 8003636:	d902      	bls.n	800363e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d13d      	bne.n	80036ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800364c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003656:	d111      	bne.n	800367c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003660:	d004      	beq.n	800366c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366a:	d107      	bne.n	800367c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800367a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003684:	d10f      	bne.n	80036a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e017      	b.n	80036ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4013      	ands	r3, r2
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	bf0c      	ite	eq
 80036da:	2301      	moveq	r3, #1
 80036dc:	2300      	movne	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d19b      	bne.n	8003620 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000008 	.word	0x20000008

080036f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	@ 0x28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800370a:	f7fd fe2d 	bl	8001368 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	4413      	add	r3, r2
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800371a:	f7fd fe25 	bl	8001368 <HAL_GetTick>
 800371e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003728:	4b3d      	ldr	r3, [pc, #244]	@ (8003820 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	00da      	lsls	r2, r3, #3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	0d1b      	lsrs	r3, r3, #20
 8003738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003740:	e060      	b.n	8003804 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003748:	d107      	bne.n	800375a <SPI_WaitFifoStateUntilTimeout+0x62>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003758:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d050      	beq.n	8003804 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003762:	f7fd fe01 	bl	8001368 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800376e:	429a      	cmp	r2, r3
 8003770:	d902      	bls.n	8003778 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	2b00      	cmp	r3, #0
 8003776:	d13d      	bne.n	80037f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003786:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003790:	d111      	bne.n	80037b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800379a:	d004      	beq.n	80037a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a4:	d107      	bne.n	80037b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037be:	d10f      	bne.n	80037e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e010      	b.n	8003816 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	3b01      	subs	r3, #1
 8003802:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d196      	bne.n	8003742 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3728      	adds	r7, #40	@ 0x28
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000008 	.word	0x20000008

08003824 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2200      	movs	r2, #0
 8003838:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff ff5b 	bl	80036f8 <SPI_WaitFifoStateUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e027      	b.n	80038a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2200      	movs	r2, #0
 8003860:	2180      	movs	r1, #128	@ 0x80
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff fec0 	bl	80035e8 <SPI_WaitFlagStateUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e014      	b.n	80038a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2200      	movs	r2, #0
 8003886:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f7ff ff34 	bl	80036f8 <SPI_WaitFifoStateUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e000      	b.n	80038a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038b8:	f7fd fd56 	bl	8001368 <HAL_GetTick>
 80038bc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0220 	bic.w	r2, r2, #32
 80038cc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	2164      	movs	r1, #100	@ 0x64
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ffa6 	bl	8003824 <SPI_EndRxTxTransaction>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e2:	f043 0220 	orr.w	r2, r3, #32
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d115      	bne.n	800391e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d107      	bne.n	800390e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fd3a 	bl	8003380 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800390c:	e00e      	b.n	800392c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd f906 	bl	8000b28 <HAL_SPI_TxRxCpltCallback>
}
 800391c:	e006      	b.n	800392c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff fd34 	bl	8003394 <HAL_SPI_ErrorCallback>
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e049      	b.n	80039da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd fba0 	bl	80010a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f000 fb46 	bl	8004004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d001      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e054      	b.n	8003aa6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a26      	ldr	r2, [pc, #152]	@ (8003ab4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a26:	d01d      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a22      	ldr	r2, [pc, #136]	@ (8003ab8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a21      	ldr	r2, [pc, #132]	@ (8003abc <HAL_TIM_Base_Start_IT+0xd8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x80>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003acc <HAL_TIM_Base_Start_IT+0xe8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d115      	bne.n	8003a90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <HAL_TIM_Base_Start_IT+0xec>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d015      	beq.n	8003aa2 <HAL_TIM_Base_Start_IT+0xbe>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a7c:	d011      	beq.n	8003aa2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8e:	e008      	b.n	8003aa2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e000      	b.n	8003aa4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40015000 	.word	0x40015000
 8003ad0:	00010007 	.word	0x00010007

08003ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d020      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01b      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0202 	mvn.w	r2, #2
 8003b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa52 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fa44 	bl	8003fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fa55 	bl	8003fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d020      	beq.n	8003b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01b      	beq.n	8003b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0204 	mvn.w	r2, #4
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa2c 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa1e 	bl	8003fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fa2f 	bl	8003fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d020      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01b      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0208 	mvn.w	r2, #8
 8003ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa06 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 8003bbc:	e005      	b.n	8003bca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9f8 	bl	8003fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fa09 	bl	8003fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d020      	beq.n	8003c1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01b      	beq.n	8003c1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0210 	mvn.w	r2, #16
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9e0 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f9d2 	bl	8003fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f9e3 	bl	8003fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00c      	beq.n	8003c40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0201 	mvn.w	r2, #1
 8003c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f9b0 	bl	8003fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d104      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00c      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fbbb 	bl	80043e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00c      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fbb3 	bl	80043f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f99d 	bl	8003ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00c      	beq.n	8003cda <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f06f 0220 	mvn.w	r2, #32
 8003cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fb7b 	bl	80043d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00c      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fb87 	bl	800440c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00c      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fb7f 	bl	8004420 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00c      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fb77 	bl	8004434 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00c      	beq.n	8003d6a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fb6f 	bl	8004448 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e0f6      	b.n	8003f7e <HAL_TIM_ConfigClockSource+0x20a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003dae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a6f      	ldr	r2, [pc, #444]	@ (8003f88 <HAL_TIM_ConfigClockSource+0x214>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	f000 80c1 	beq.w	8003f52 <HAL_TIM_ConfigClockSource+0x1de>
 8003dd0:	4a6d      	ldr	r2, [pc, #436]	@ (8003f88 <HAL_TIM_ConfigClockSource+0x214>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	f200 80c6 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dd8:	4a6c      	ldr	r2, [pc, #432]	@ (8003f8c <HAL_TIM_ConfigClockSource+0x218>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	f000 80b9 	beq.w	8003f52 <HAL_TIM_ConfigClockSource+0x1de>
 8003de0:	4a6a      	ldr	r2, [pc, #424]	@ (8003f8c <HAL_TIM_ConfigClockSource+0x218>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	f200 80be 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003de8:	4a69      	ldr	r2, [pc, #420]	@ (8003f90 <HAL_TIM_ConfigClockSource+0x21c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	f000 80b1 	beq.w	8003f52 <HAL_TIM_ConfigClockSource+0x1de>
 8003df0:	4a67      	ldr	r2, [pc, #412]	@ (8003f90 <HAL_TIM_ConfigClockSource+0x21c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	f200 80b6 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003df8:	4a66      	ldr	r2, [pc, #408]	@ (8003f94 <HAL_TIM_ConfigClockSource+0x220>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	f000 80a9 	beq.w	8003f52 <HAL_TIM_ConfigClockSource+0x1de>
 8003e00:	4a64      	ldr	r2, [pc, #400]	@ (8003f94 <HAL_TIM_ConfigClockSource+0x220>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	f200 80ae 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e08:	4a63      	ldr	r2, [pc, #396]	@ (8003f98 <HAL_TIM_ConfigClockSource+0x224>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	f000 80a1 	beq.w	8003f52 <HAL_TIM_ConfigClockSource+0x1de>
 8003e10:	4a61      	ldr	r2, [pc, #388]	@ (8003f98 <HAL_TIM_ConfigClockSource+0x224>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	f200 80a6 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e18:	4a60      	ldr	r2, [pc, #384]	@ (8003f9c <HAL_TIM_ConfigClockSource+0x228>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	f000 8099 	beq.w	8003f52 <HAL_TIM_ConfigClockSource+0x1de>
 8003e20:	4a5e      	ldr	r2, [pc, #376]	@ (8003f9c <HAL_TIM_ConfigClockSource+0x228>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	f200 809e 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003e2c:	f000 8091 	beq.w	8003f52 <HAL_TIM_ConfigClockSource+0x1de>
 8003e30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003e34:	f200 8096 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e3c:	f000 8089 	beq.w	8003f52 <HAL_TIM_ConfigClockSource+0x1de>
 8003e40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e44:	f200 808e 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e4c:	d03e      	beq.n	8003ecc <HAL_TIM_ConfigClockSource+0x158>
 8003e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e52:	f200 8087 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e5a:	f000 8086 	beq.w	8003f6a <HAL_TIM_ConfigClockSource+0x1f6>
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e62:	d87f      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e64:	2b70      	cmp	r3, #112	@ 0x70
 8003e66:	d01a      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0x12a>
 8003e68:	2b70      	cmp	r3, #112	@ 0x70
 8003e6a:	d87b      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e6c:	2b60      	cmp	r3, #96	@ 0x60
 8003e6e:	d050      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x19e>
 8003e70:	2b60      	cmp	r3, #96	@ 0x60
 8003e72:	d877      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e74:	2b50      	cmp	r3, #80	@ 0x50
 8003e76:	d03c      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x17e>
 8003e78:	2b50      	cmp	r3, #80	@ 0x50
 8003e7a:	d873      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e7c:	2b40      	cmp	r3, #64	@ 0x40
 8003e7e:	d058      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x1be>
 8003e80:	2b40      	cmp	r3, #64	@ 0x40
 8003e82:	d86f      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e84:	2b30      	cmp	r3, #48	@ 0x30
 8003e86:	d064      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x1de>
 8003e88:	2b30      	cmp	r3, #48	@ 0x30
 8003e8a:	d86b      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d060      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x1de>
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d867      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d05c      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x1de>
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d05a      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x1de>
 8003e9c:	e062      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eae:	f000 f9d9 	bl	8004264 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	609a      	str	r2, [r3, #8]
      break;
 8003eca:	e04f      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	f000 f9c2 	bl	8004264 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003eee:	609a      	str	r2, [r3, #8]
      break;
 8003ef0:	e03c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	461a      	mov	r2, r3
 8003f00:	f000 f934 	bl	800416c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2150      	movs	r1, #80	@ 0x50
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f98d 	bl	800422a <TIM_ITRx_SetConfig>
      break;
 8003f10:	e02c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f000 f953 	bl	80041ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2160      	movs	r1, #96	@ 0x60
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f97d 	bl	800422a <TIM_ITRx_SetConfig>
      break;
 8003f30:	e01c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f000 f914 	bl	800416c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2140      	movs	r1, #64	@ 0x40
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f96d 	bl	800422a <TIM_ITRx_SetConfig>
      break;
 8003f50:	e00c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f000 f964 	bl	800422a <TIM_ITRx_SetConfig>
      break;
 8003f62:	e003      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
      break;
 8003f68:	e000      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	00100070 	.word	0x00100070
 8003f8c:	00100060 	.word	0x00100060
 8003f90:	00100050 	.word	0x00100050
 8003f94:	00100040 	.word	0x00100040
 8003f98:	00100030 	.word	0x00100030
 8003f9c:	00100020 	.word	0x00100020

08003fa0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a4c      	ldr	r2, [pc, #304]	@ (8004148 <TIM_Base_SetConfig+0x144>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d017      	beq.n	800404c <TIM_Base_SetConfig+0x48>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004022:	d013      	beq.n	800404c <TIM_Base_SetConfig+0x48>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a49      	ldr	r2, [pc, #292]	@ (800414c <TIM_Base_SetConfig+0x148>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00f      	beq.n	800404c <TIM_Base_SetConfig+0x48>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a48      	ldr	r2, [pc, #288]	@ (8004150 <TIM_Base_SetConfig+0x14c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00b      	beq.n	800404c <TIM_Base_SetConfig+0x48>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a47      	ldr	r2, [pc, #284]	@ (8004154 <TIM_Base_SetConfig+0x150>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d007      	beq.n	800404c <TIM_Base_SetConfig+0x48>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a46      	ldr	r2, [pc, #280]	@ (8004158 <TIM_Base_SetConfig+0x154>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_Base_SetConfig+0x48>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a45      	ldr	r2, [pc, #276]	@ (800415c <TIM_Base_SetConfig+0x158>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d108      	bne.n	800405e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a39      	ldr	r2, [pc, #228]	@ (8004148 <TIM_Base_SetConfig+0x144>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d023      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406c:	d01f      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a36      	ldr	r2, [pc, #216]	@ (800414c <TIM_Base_SetConfig+0x148>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01b      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a35      	ldr	r2, [pc, #212]	@ (8004150 <TIM_Base_SetConfig+0x14c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d017      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a34      	ldr	r2, [pc, #208]	@ (8004154 <TIM_Base_SetConfig+0x150>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a33      	ldr	r2, [pc, #204]	@ (8004158 <TIM_Base_SetConfig+0x154>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00f      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a33      	ldr	r2, [pc, #204]	@ (8004160 <TIM_Base_SetConfig+0x15c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00b      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a32      	ldr	r2, [pc, #200]	@ (8004164 <TIM_Base_SetConfig+0x160>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d007      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a31      	ldr	r2, [pc, #196]	@ (8004168 <TIM_Base_SetConfig+0x164>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d003      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a2c      	ldr	r2, [pc, #176]	@ (800415c <TIM_Base_SetConfig+0x158>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d108      	bne.n	80040c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a18      	ldr	r2, [pc, #96]	@ (8004148 <TIM_Base_SetConfig+0x144>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d013      	beq.n	8004114 <TIM_Base_SetConfig+0x110>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004158 <TIM_Base_SetConfig+0x154>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00f      	beq.n	8004114 <TIM_Base_SetConfig+0x110>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004160 <TIM_Base_SetConfig+0x15c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00b      	beq.n	8004114 <TIM_Base_SetConfig+0x110>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a19      	ldr	r2, [pc, #100]	@ (8004164 <TIM_Base_SetConfig+0x160>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <TIM_Base_SetConfig+0x110>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a18      	ldr	r2, [pc, #96]	@ (8004168 <TIM_Base_SetConfig+0x164>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_Base_SetConfig+0x110>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a13      	ldr	r2, [pc, #76]	@ (800415c <TIM_Base_SetConfig+0x158>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d103      	bne.n	800411c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b01      	cmp	r3, #1
 800412c:	d105      	bne.n	800413a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f023 0201 	bic.w	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	611a      	str	r2, [r3, #16]
  }
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800
 8004154:	40000c00 	.word	0x40000c00
 8004158:	40013400 	.word	0x40013400
 800415c:	40015000 	.word	0x40015000
 8004160:	40014000 	.word	0x40014000
 8004164:	40014400 	.word	0x40014400
 8004168:	40014800 	.word	0x40014800

0800416c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0201 	bic.w	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f023 030a 	bic.w	r3, r3, #10
 80041a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b087      	sub	sp, #28
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f023 0210 	bic.w	r2, r3, #16
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	031b      	lsls	r3, r3, #12
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004206:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	f043 0307 	orr.w	r3, r3, #7
 8004250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800427e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	021a      	lsls	r2, r3, #8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	431a      	orrs	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4313      	orrs	r3, r2
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	609a      	str	r2, [r3, #8]
}
 8004298:	bf00      	nop
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e074      	b.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a34      	ldr	r2, [pc, #208]	@ (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a33      	ldr	r2, [pc, #204]	@ (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a31      	ldr	r2, [pc, #196]	@ (80043bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d108      	bne.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004300:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a21      	ldr	r2, [pc, #132]	@ (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d022      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800433c:	d01d      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1f      	ldr	r2, [pc, #124]	@ (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d018      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1d      	ldr	r2, [pc, #116]	@ (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d013      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1c      	ldr	r2, [pc, #112]	@ (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00e      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a15      	ldr	r2, [pc, #84]	@ (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d009      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a18      	ldr	r2, [pc, #96]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d004      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a11      	ldr	r2, [pc, #68]	@ (80043bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d10c      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	4313      	orrs	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40013400 	.word	0x40013400
 80043bc:	40015000 	.word	0x40015000
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800
 80043c8:	40000c00 	.word	0x40000c00
 80043cc:	40014000 	.word	0x40014000

080043d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e042      	b.n	80044f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fc fd05 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2224      	movs	r2, #36	@ 0x24
 800448a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 ffbe 	bl	8005428 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fcbf 	bl	8004e30 <UART_SetConfig>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e01b      	b.n	80044f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f001 f83d 	bl	800556c <UART_CheckIdleState>
 80044f2:	4603      	mov	r3, r0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	@ 0x28
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	4613      	mov	r3, r2
 800450a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	2b20      	cmp	r3, #32
 8004514:	d17b      	bne.n	800460e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_UART_Transmit+0x26>
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e074      	b.n	8004610 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2221      	movs	r2, #33	@ 0x21
 8004532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004536:	f7fc ff17 	bl	8001368 <HAL_GetTick>
 800453a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004554:	d108      	bne.n	8004568 <HAL_UART_Transmit+0x6c>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	e003      	b.n	8004570 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800456c:	2300      	movs	r3, #0
 800456e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004570:	e030      	b.n	80045d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2200      	movs	r2, #0
 800457a:	2180      	movs	r1, #128	@ 0x80
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f001 f89f 	bl	80056c0 <UART_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e03d      	b.n	8004610 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10b      	bne.n	80045b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	3302      	adds	r3, #2
 80045ae:	61bb      	str	r3, [r7, #24]
 80045b0:	e007      	b.n	80045c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	781a      	ldrb	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	3301      	adds	r3, #1
 80045c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1c8      	bne.n	8004572 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2200      	movs	r2, #0
 80045e8:	2140      	movs	r1, #64	@ 0x40
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f001 f868 	bl	80056c0 <UART_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e006      	b.n	8004610 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	e000      	b.n	8004610 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800460e:	2302      	movs	r3, #2
  }
}
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	@ 0x28
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800462e:	2b20      	cmp	r3, #32
 8004630:	f040 80b5 	bne.w	800479e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <HAL_UART_Receive+0x28>
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0ad      	b.n	80047a0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2222      	movs	r2, #34	@ 0x22
 8004650:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800465a:	f7fc fe85 	bl	8001368 <HAL_GetTick>
 800465e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004678:	d10e      	bne.n	8004698 <HAL_UART_Receive+0x80>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d105      	bne.n	800468e <HAL_UART_Receive+0x76>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004688:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800468c:	e02d      	b.n	80046ea <HAL_UART_Receive+0xd2>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	22ff      	movs	r2, #255	@ 0xff
 8004692:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004696:	e028      	b.n	80046ea <HAL_UART_Receive+0xd2>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10d      	bne.n	80046bc <HAL_UART_Receive+0xa4>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d104      	bne.n	80046b2 <HAL_UART_Receive+0x9a>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	22ff      	movs	r2, #255	@ 0xff
 80046ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046b0:	e01b      	b.n	80046ea <HAL_UART_Receive+0xd2>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	227f      	movs	r2, #127	@ 0x7f
 80046b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046ba:	e016      	b.n	80046ea <HAL_UART_Receive+0xd2>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046c4:	d10d      	bne.n	80046e2 <HAL_UART_Receive+0xca>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <HAL_UART_Receive+0xc0>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	227f      	movs	r2, #127	@ 0x7f
 80046d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046d6:	e008      	b.n	80046ea <HAL_UART_Receive+0xd2>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	223f      	movs	r2, #63	@ 0x3f
 80046dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046e0:	e003      	b.n	80046ea <HAL_UART_Receive+0xd2>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80046f0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046fa:	d108      	bne.n	800470e <HAL_UART_Receive+0xf6>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004704:	2300      	movs	r3, #0
 8004706:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e003      	b.n	8004716 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004716:	e036      	b.n	8004786 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2200      	movs	r2, #0
 8004720:	2120      	movs	r1, #32
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 ffcc 	bl	80056c0 <UART_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e032      	b.n	80047a0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10c      	bne.n	800475a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	b29a      	uxth	r2, r3
 8004748:	8a7b      	ldrh	r3, [r7, #18]
 800474a:	4013      	ands	r3, r2
 800474c:	b29a      	uxth	r2, r3
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	3302      	adds	r3, #2
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e00c      	b.n	8004774 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	b2da      	uxtb	r2, r3
 8004762:	8a7b      	ldrh	r3, [r7, #18]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	4013      	ands	r3, r2
 8004768:	b2da      	uxtb	r2, r3
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3301      	adds	r3, #1
 8004772:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1c2      	bne.n	8004718 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e000      	b.n	80047a0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800479e:	2302      	movs	r3, #2
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3720      	adds	r7, #32
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b0ba      	sub	sp, #232	@ 0xe8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80047d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80047d6:	4013      	ands	r3, r2
 80047d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80047dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d11b      	bne.n	800481c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d015      	beq.n	800481c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80047f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d105      	bne.n	8004808 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d009      	beq.n	800481c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 82e3 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	4798      	blx	r3
      }
      return;
 800481a:	e2dd      	b.n	8004dd8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800481c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8123 	beq.w	8004a6c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004826:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800482a:	4b8d      	ldr	r3, [pc, #564]	@ (8004a60 <HAL_UART_IRQHandler+0x2b8>)
 800482c:	4013      	ands	r3, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004832:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004836:	4b8b      	ldr	r3, [pc, #556]	@ (8004a64 <HAL_UART_IRQHandler+0x2bc>)
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 8116 	beq.w	8004a6c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d011      	beq.n	8004870 <HAL_UART_IRQHandler+0xc8>
 800484c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00b      	beq.n	8004870 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2201      	movs	r2, #1
 800485e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004866:	f043 0201 	orr.w	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d011      	beq.n	80048a0 <HAL_UART_IRQHandler+0xf8>
 800487c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2202      	movs	r2, #2
 800488e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004896:	f043 0204 	orr.w	r2, r3, #4
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d011      	beq.n	80048d0 <HAL_UART_IRQHandler+0x128>
 80048ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2204      	movs	r2, #4
 80048be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c6:	f043 0202 	orr.w	r2, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d017      	beq.n	800490c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d105      	bne.n	80048f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80048e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80048ec:	4b5c      	ldr	r3, [pc, #368]	@ (8004a60 <HAL_UART_IRQHandler+0x2b8>)
 80048ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00b      	beq.n	800490c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2208      	movs	r2, #8
 80048fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004902:	f043 0208 	orr.w	r2, r3, #8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800490c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004914:	2b00      	cmp	r3, #0
 8004916:	d012      	beq.n	800493e <HAL_UART_IRQHandler+0x196>
 8004918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800491c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00c      	beq.n	800493e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800492c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8249 	beq.w	8004ddc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800494a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	d013      	beq.n	800497e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004984:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004992:	2b40      	cmp	r3, #64	@ 0x40
 8004994:	d005      	beq.n	80049a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800499a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d054      	beq.n	8004a4c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fef9 	bl	800579a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b2:	2b40      	cmp	r3, #64	@ 0x40
 80049b4:	d146      	bne.n	8004a44 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3308      	adds	r3, #8
 80049bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3308      	adds	r3, #8
 80049de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1d9      	bne.n	80049b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d017      	beq.n	8004a3c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a12:	4a15      	ldr	r2, [pc, #84]	@ (8004a68 <HAL_UART_IRQHandler+0x2c0>)
 8004a14:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fc fee2 	bl	80017e6 <HAL_DMA_Abort_IT>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d019      	beq.n	8004a5c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004a36:	4610      	mov	r0, r2
 8004a38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3a:	e00f      	b.n	8004a5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f9e1 	bl	8004e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a42:	e00b      	b.n	8004a5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f9dd 	bl	8004e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4a:	e007      	b.n	8004a5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f9d9 	bl	8004e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004a5a:	e1bf      	b.n	8004ddc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	bf00      	nop
    return;
 8004a5e:	e1bd      	b.n	8004ddc <HAL_UART_IRQHandler+0x634>
 8004a60:	10000001 	.word	0x10000001
 8004a64:	04000120 	.word	0x04000120
 8004a68:	08005867 	.word	0x08005867

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	f040 8153 	bne.w	8004d1c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 814c 	beq.w	8004d1c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8145 	beq.w	8004d1c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2210      	movs	r2, #16
 8004a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa4:	2b40      	cmp	r3, #64	@ 0x40
 8004aa6:	f040 80bb 	bne.w	8004c20 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ab8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 818f 	beq.w	8004de0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ac8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004acc:	429a      	cmp	r2, r3
 8004ace:	f080 8187 	bcs.w	8004de0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ad8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 8087 	bne.w	8004bfe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b1e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1da      	bne.n	8004af0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3308      	adds	r3, #8
 8004b40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3308      	adds	r3, #8
 8004b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e1      	bne.n	8004b3a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3308      	adds	r3, #8
 8004b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ba0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e3      	bne.n	8004b76 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bcc:	f023 0310 	bic.w	r3, r3, #16
 8004bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004be0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004be4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e4      	bne.n	8004bbc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fc fd9b 	bl	8001734 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2202      	movs	r2, #2
 8004c02:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8fd 	bl	8004e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c1e:	e0df      	b.n	8004de0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 80d1 	beq.w	8004de4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004c42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 80cc 	beq.w	8004de4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c70:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e4      	bne.n	8004c4c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3308      	adds	r3, #8
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	623b      	str	r3, [r7, #32]
   return(result);
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004caa:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e1      	bne.n	8004c82 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0310 	bic.w	r3, r3, #16
 8004ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	69b9      	ldr	r1, [r7, #24]
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	617b      	str	r3, [r7, #20]
   return(result);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e4      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f87f 	bl	8004e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d1a:	e063      	b.n	8004de4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00e      	beq.n	8004d46 <HAL_UART_IRQHandler+0x59e>
 8004d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fdd2 	bl	80058e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d44:	e051      	b.n	8004dea <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d014      	beq.n	8004d7c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d105      	bne.n	8004d6a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d03a      	beq.n	8004de8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
    }
    return;
 8004d7a:	e035      	b.n	8004de8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <HAL_UART_IRQHandler+0x5f4>
 8004d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fd7c 	bl	8005892 <UART_EndTransmit_IT>
    return;
 8004d9a:	e026      	b.n	8004dea <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <HAL_UART_IRQHandler+0x614>
 8004da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fdab 	bl	8005910 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dba:	e016      	b.n	8004dea <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d010      	beq.n	8004dea <HAL_UART_IRQHandler+0x642>
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	da0c      	bge.n	8004dea <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fd93 	bl	80058fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dd6:	e008      	b.n	8004dea <HAL_UART_IRQHandler+0x642>
      return;
 8004dd8:	bf00      	nop
 8004dda:	e006      	b.n	8004dea <HAL_UART_IRQHandler+0x642>
    return;
 8004ddc:	bf00      	nop
 8004dde:	e004      	b.n	8004dea <HAL_UART_IRQHandler+0x642>
      return;
 8004de0:	bf00      	nop
 8004de2:	e002      	b.n	8004dea <HAL_UART_IRQHandler+0x642>
      return;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <HAL_UART_IRQHandler+0x642>
    return;
 8004de8:	bf00      	nop
  }
}
 8004dea:	37e8      	adds	r7, #232	@ 0xe8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e34:	b08c      	sub	sp, #48	@ 0x30
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4baa      	ldr	r3, [pc, #680]	@ (8005108 <UART_SetConfig+0x2d8>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a9f      	ldr	r2, [pc, #636]	@ (800510c <UART_SetConfig+0x2dc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d004      	beq.n	8004e9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004ea6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	f023 010f 	bic.w	r1, r3, #15
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a90      	ldr	r2, [pc, #576]	@ (8005110 <UART_SetConfig+0x2e0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d125      	bne.n	8004f20 <UART_SetConfig+0xf0>
 8004ed4:	4b8f      	ldr	r3, [pc, #572]	@ (8005114 <UART_SetConfig+0x2e4>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d81a      	bhi.n	8004f18 <UART_SetConfig+0xe8>
 8004ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee8 <UART_SetConfig+0xb8>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004ef9 	.word	0x08004ef9
 8004eec:	08004f09 	.word	0x08004f09
 8004ef0:	08004f01 	.word	0x08004f01
 8004ef4:	08004f11 	.word	0x08004f11
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004efe:	e116      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f00:	2302      	movs	r3, #2
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f06:	e112      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f0e:	e10e      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f16:	e10a      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1e:	e106      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a7c      	ldr	r2, [pc, #496]	@ (8005118 <UART_SetConfig+0x2e8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d138      	bne.n	8004f9c <UART_SetConfig+0x16c>
 8004f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8005114 <UART_SetConfig+0x2e4>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	d82d      	bhi.n	8004f94 <UART_SetConfig+0x164>
 8004f38:	a201      	add	r2, pc, #4	@ (adr r2, 8004f40 <UART_SetConfig+0x110>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08004f95 	.word	0x08004f95
 8004f48:	08004f95 	.word	0x08004f95
 8004f4c:	08004f95 	.word	0x08004f95
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08004f95 	.word	0x08004f95
 8004f58:	08004f95 	.word	0x08004f95
 8004f5c:	08004f95 	.word	0x08004f95
 8004f60:	08004f7d 	.word	0x08004f7d
 8004f64:	08004f95 	.word	0x08004f95
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f8d 	.word	0x08004f8d
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f7a:	e0d8      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f82:	e0d4      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f84:	2304      	movs	r3, #4
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f8a:	e0d0      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f92:	e0cc      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f94:	2310      	movs	r3, #16
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9a:	e0c8      	b.n	800512e <UART_SetConfig+0x2fe>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a5e      	ldr	r2, [pc, #376]	@ (800511c <UART_SetConfig+0x2ec>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d125      	bne.n	8004ff2 <UART_SetConfig+0x1c2>
 8004fa6:	4b5b      	ldr	r3, [pc, #364]	@ (8005114 <UART_SetConfig+0x2e4>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fb0:	2b30      	cmp	r3, #48	@ 0x30
 8004fb2:	d016      	beq.n	8004fe2 <UART_SetConfig+0x1b2>
 8004fb4:	2b30      	cmp	r3, #48	@ 0x30
 8004fb6:	d818      	bhi.n	8004fea <UART_SetConfig+0x1ba>
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d00a      	beq.n	8004fd2 <UART_SetConfig+0x1a2>
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d814      	bhi.n	8004fea <UART_SetConfig+0x1ba>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <UART_SetConfig+0x19a>
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d008      	beq.n	8004fda <UART_SetConfig+0x1aa>
 8004fc8:	e00f      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd0:	e0ad      	b.n	800512e <UART_SetConfig+0x2fe>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd8:	e0a9      	b.n	800512e <UART_SetConfig+0x2fe>
 8004fda:	2304      	movs	r3, #4
 8004fdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe0:	e0a5      	b.n	800512e <UART_SetConfig+0x2fe>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe8:	e0a1      	b.n	800512e <UART_SetConfig+0x2fe>
 8004fea:	2310      	movs	r3, #16
 8004fec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff0:	e09d      	b.n	800512e <UART_SetConfig+0x2fe>
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8005120 <UART_SetConfig+0x2f0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d125      	bne.n	8005048 <UART_SetConfig+0x218>
 8004ffc:	4b45      	ldr	r3, [pc, #276]	@ (8005114 <UART_SetConfig+0x2e4>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005002:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005006:	2bc0      	cmp	r3, #192	@ 0xc0
 8005008:	d016      	beq.n	8005038 <UART_SetConfig+0x208>
 800500a:	2bc0      	cmp	r3, #192	@ 0xc0
 800500c:	d818      	bhi.n	8005040 <UART_SetConfig+0x210>
 800500e:	2b80      	cmp	r3, #128	@ 0x80
 8005010:	d00a      	beq.n	8005028 <UART_SetConfig+0x1f8>
 8005012:	2b80      	cmp	r3, #128	@ 0x80
 8005014:	d814      	bhi.n	8005040 <UART_SetConfig+0x210>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <UART_SetConfig+0x1f0>
 800501a:	2b40      	cmp	r3, #64	@ 0x40
 800501c:	d008      	beq.n	8005030 <UART_SetConfig+0x200>
 800501e:	e00f      	b.n	8005040 <UART_SetConfig+0x210>
 8005020:	2300      	movs	r3, #0
 8005022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005026:	e082      	b.n	800512e <UART_SetConfig+0x2fe>
 8005028:	2302      	movs	r3, #2
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502e:	e07e      	b.n	800512e <UART_SetConfig+0x2fe>
 8005030:	2304      	movs	r3, #4
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005036:	e07a      	b.n	800512e <UART_SetConfig+0x2fe>
 8005038:	2308      	movs	r3, #8
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503e:	e076      	b.n	800512e <UART_SetConfig+0x2fe>
 8005040:	2310      	movs	r3, #16
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005046:	e072      	b.n	800512e <UART_SetConfig+0x2fe>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a35      	ldr	r2, [pc, #212]	@ (8005124 <UART_SetConfig+0x2f4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d12a      	bne.n	80050a8 <UART_SetConfig+0x278>
 8005052:	4b30      	ldr	r3, [pc, #192]	@ (8005114 <UART_SetConfig+0x2e4>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800505c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005060:	d01a      	beq.n	8005098 <UART_SetConfig+0x268>
 8005062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005066:	d81b      	bhi.n	80050a0 <UART_SetConfig+0x270>
 8005068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800506c:	d00c      	beq.n	8005088 <UART_SetConfig+0x258>
 800506e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005072:	d815      	bhi.n	80050a0 <UART_SetConfig+0x270>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <UART_SetConfig+0x250>
 8005078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800507c:	d008      	beq.n	8005090 <UART_SetConfig+0x260>
 800507e:	e00f      	b.n	80050a0 <UART_SetConfig+0x270>
 8005080:	2300      	movs	r3, #0
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005086:	e052      	b.n	800512e <UART_SetConfig+0x2fe>
 8005088:	2302      	movs	r3, #2
 800508a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508e:	e04e      	b.n	800512e <UART_SetConfig+0x2fe>
 8005090:	2304      	movs	r3, #4
 8005092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005096:	e04a      	b.n	800512e <UART_SetConfig+0x2fe>
 8005098:	2308      	movs	r3, #8
 800509a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509e:	e046      	b.n	800512e <UART_SetConfig+0x2fe>
 80050a0:	2310      	movs	r3, #16
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a6:	e042      	b.n	800512e <UART_SetConfig+0x2fe>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a17      	ldr	r2, [pc, #92]	@ (800510c <UART_SetConfig+0x2dc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d13a      	bne.n	8005128 <UART_SetConfig+0x2f8>
 80050b2:	4b18      	ldr	r3, [pc, #96]	@ (8005114 <UART_SetConfig+0x2e4>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050c0:	d01a      	beq.n	80050f8 <UART_SetConfig+0x2c8>
 80050c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050c6:	d81b      	bhi.n	8005100 <UART_SetConfig+0x2d0>
 80050c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050cc:	d00c      	beq.n	80050e8 <UART_SetConfig+0x2b8>
 80050ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050d2:	d815      	bhi.n	8005100 <UART_SetConfig+0x2d0>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <UART_SetConfig+0x2b0>
 80050d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050dc:	d008      	beq.n	80050f0 <UART_SetConfig+0x2c0>
 80050de:	e00f      	b.n	8005100 <UART_SetConfig+0x2d0>
 80050e0:	2300      	movs	r3, #0
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e6:	e022      	b.n	800512e <UART_SetConfig+0x2fe>
 80050e8:	2302      	movs	r3, #2
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ee:	e01e      	b.n	800512e <UART_SetConfig+0x2fe>
 80050f0:	2304      	movs	r3, #4
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f6:	e01a      	b.n	800512e <UART_SetConfig+0x2fe>
 80050f8:	2308      	movs	r3, #8
 80050fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050fe:	e016      	b.n	800512e <UART_SetConfig+0x2fe>
 8005100:	2310      	movs	r3, #16
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005106:	e012      	b.n	800512e <UART_SetConfig+0x2fe>
 8005108:	cfff69f3 	.word	0xcfff69f3
 800510c:	40008000 	.word	0x40008000
 8005110:	40013800 	.word	0x40013800
 8005114:	40021000 	.word	0x40021000
 8005118:	40004400 	.word	0x40004400
 800511c:	40004800 	.word	0x40004800
 8005120:	40004c00 	.word	0x40004c00
 8005124:	40005000 	.word	0x40005000
 8005128:	2310      	movs	r3, #16
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4aae      	ldr	r2, [pc, #696]	@ (80053ec <UART_SetConfig+0x5bc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	f040 8097 	bne.w	8005268 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800513a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800513e:	2b08      	cmp	r3, #8
 8005140:	d823      	bhi.n	800518a <UART_SetConfig+0x35a>
 8005142:	a201      	add	r2, pc, #4	@ (adr r2, 8005148 <UART_SetConfig+0x318>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	0800516d 	.word	0x0800516d
 800514c:	0800518b 	.word	0x0800518b
 8005150:	08005175 	.word	0x08005175
 8005154:	0800518b 	.word	0x0800518b
 8005158:	0800517b 	.word	0x0800517b
 800515c:	0800518b 	.word	0x0800518b
 8005160:	0800518b 	.word	0x0800518b
 8005164:	0800518b 	.word	0x0800518b
 8005168:	08005183 	.word	0x08005183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800516c:	f7fd fbfa 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8005170:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005172:	e010      	b.n	8005196 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005174:	4b9e      	ldr	r3, [pc, #632]	@ (80053f0 <UART_SetConfig+0x5c0>)
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005178:	e00d      	b.n	8005196 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517a:	f7fd fb85 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 800517e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005180:	e009      	b.n	8005196 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005188:	e005      	b.n	8005196 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005194:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8130 	beq.w	80053fe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a2:	4a94      	ldr	r2, [pc, #592]	@ (80053f4 <UART_SetConfig+0x5c4>)
 80051a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051a8:	461a      	mov	r2, r3
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4413      	add	r3, r2
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d305      	bcc.n	80051ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d903      	bls.n	80051d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051d4:	e113      	b.n	80053fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	2200      	movs	r2, #0
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	60fa      	str	r2, [r7, #12]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	4a84      	ldr	r2, [pc, #528]	@ (80053f4 <UART_SetConfig+0x5c4>)
 80051e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2200      	movs	r2, #0
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051f8:	f7fb f86a 	bl	80002d0 <__aeabi_uldivmod>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	020b      	lsls	r3, r1, #8
 800520e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005212:	0202      	lsls	r2, r0, #8
 8005214:	6979      	ldr	r1, [r7, #20]
 8005216:	6849      	ldr	r1, [r1, #4]
 8005218:	0849      	lsrs	r1, r1, #1
 800521a:	2000      	movs	r0, #0
 800521c:	460c      	mov	r4, r1
 800521e:	4605      	mov	r5, r0
 8005220:	eb12 0804 	adds.w	r8, r2, r4
 8005224:	eb43 0905 	adc.w	r9, r3, r5
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	469a      	mov	sl, r3
 8005230:	4693      	mov	fp, r2
 8005232:	4652      	mov	r2, sl
 8005234:	465b      	mov	r3, fp
 8005236:	4640      	mov	r0, r8
 8005238:	4649      	mov	r1, r9
 800523a:	f7fb f849 	bl	80002d0 <__aeabi_uldivmod>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4613      	mov	r3, r2
 8005244:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800524c:	d308      	bcc.n	8005260 <UART_SetConfig+0x430>
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005254:	d204      	bcs.n	8005260 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a3a      	ldr	r2, [r7, #32]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	e0ce      	b.n	80053fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005266:	e0ca      	b.n	80053fe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005270:	d166      	bne.n	8005340 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005272:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005276:	2b08      	cmp	r3, #8
 8005278:	d827      	bhi.n	80052ca <UART_SetConfig+0x49a>
 800527a:	a201      	add	r2, pc, #4	@ (adr r2, 8005280 <UART_SetConfig+0x450>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052ad 	.word	0x080052ad
 8005288:	080052b5 	.word	0x080052b5
 800528c:	080052cb 	.word	0x080052cb
 8005290:	080052bb 	.word	0x080052bb
 8005294:	080052cb 	.word	0x080052cb
 8005298:	080052cb 	.word	0x080052cb
 800529c:	080052cb 	.word	0x080052cb
 80052a0:	080052c3 	.word	0x080052c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a4:	f7fd fb5e 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 80052a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052aa:	e014      	b.n	80052d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ac:	f7fd fb70 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 80052b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052b2:	e010      	b.n	80052d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b4:	4b4e      	ldr	r3, [pc, #312]	@ (80053f0 <UART_SetConfig+0x5c0>)
 80052b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052b8:	e00d      	b.n	80052d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ba:	f7fd fae5 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 80052be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052c0:	e009      	b.n	80052d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052c8:	e005      	b.n	80052d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8090 	beq.w	80053fe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e2:	4a44      	ldr	r2, [pc, #272]	@ (80053f4 <UART_SetConfig+0x5c4>)
 80052e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052e8:	461a      	mov	r2, r3
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80052f0:	005a      	lsls	r2, r3, #1
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	441a      	add	r2, r3
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	d916      	bls.n	8005338 <UART_SetConfig+0x508>
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005310:	d212      	bcs.n	8005338 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f023 030f 	bic.w	r3, r3, #15
 800531a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	b29b      	uxth	r3, r3
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	b29a      	uxth	r2, r3
 8005328:	8bfb      	ldrh	r3, [r7, #30]
 800532a:	4313      	orrs	r3, r2
 800532c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	8bfa      	ldrh	r2, [r7, #30]
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	e062      	b.n	80053fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800533e:	e05e      	b.n	80053fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005340:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005344:	2b08      	cmp	r3, #8
 8005346:	d828      	bhi.n	800539a <UART_SetConfig+0x56a>
 8005348:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <UART_SetConfig+0x520>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005375 	.word	0x08005375
 8005354:	0800537d 	.word	0x0800537d
 8005358:	08005385 	.word	0x08005385
 800535c:	0800539b 	.word	0x0800539b
 8005360:	0800538b 	.word	0x0800538b
 8005364:	0800539b 	.word	0x0800539b
 8005368:	0800539b 	.word	0x0800539b
 800536c:	0800539b 	.word	0x0800539b
 8005370:	08005393 	.word	0x08005393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005374:	f7fd faf6 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8005378:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800537a:	e014      	b.n	80053a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800537c:	f7fd fb08 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 8005380:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005382:	e010      	b.n	80053a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005384:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <UART_SetConfig+0x5c0>)
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005388:	e00d      	b.n	80053a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800538a:	f7fd fa7d 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 800538e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005390:	e009      	b.n	80053a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005396:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005398:	e005      	b.n	80053a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053a4:	bf00      	nop
    }

    if (pclk != 0U)
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d028      	beq.n	80053fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	4a10      	ldr	r2, [pc, #64]	@ (80053f4 <UART_SetConfig+0x5c4>)
 80053b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053b6:	461a      	mov	r2, r3
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	441a      	add	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	d910      	bls.n	80053f8 <UART_SetConfig+0x5c8>
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053dc:	d20c      	bcs.n	80053f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60da      	str	r2, [r3, #12]
 80053e8:	e009      	b.n	80053fe <UART_SetConfig+0x5ce>
 80053ea:	bf00      	nop
 80053ec:	40008000 	.word	0x40008000
 80053f0:	00f42400 	.word	0x00f42400
 80053f4:	08006640 	.word	0x08006640
      }
      else
      {
        ret = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2201      	movs	r2, #1
 8005402:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2201      	movs	r2, #1
 800540a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2200      	movs	r2, #0
 8005418:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800541a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800541e:	4618      	mov	r0, r3
 8005420:	3730      	adds	r7, #48	@ 0x30
 8005422:	46bd      	mov	sp, r7
 8005424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01a      	beq.n	800553e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005526:	d10a      	bne.n	800553e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  }
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b098      	sub	sp, #96	@ 0x60
 8005570:	af02      	add	r7, sp, #8
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800557c:	f7fb fef4 	bl	8001368 <HAL_GetTick>
 8005580:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b08      	cmp	r3, #8
 800558e:	d12f      	bne.n	80055f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005590:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005598:	2200      	movs	r2, #0
 800559a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f88e 	bl	80056c0 <UART_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d022      	beq.n	80055f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055be:	653b      	str	r3, [r7, #80]	@ 0x50
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e6      	bne.n	80055aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e063      	b.n	80056b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d149      	bne.n	8005692 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005606:	2200      	movs	r2, #0
 8005608:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f857 	bl	80056c0 <UART_WaitOnFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d03c      	beq.n	8005692 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	623b      	str	r3, [r7, #32]
   return(result);
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800562c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005636:	633b      	str	r3, [r7, #48]	@ 0x30
 8005638:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800563c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e6      	bne.n	8005618 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	60fb      	str	r3, [r7, #12]
   return(result);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3308      	adds	r3, #8
 8005668:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800566a:	61fa      	str	r2, [r7, #28]
 800566c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	69b9      	ldr	r1, [r7, #24]
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	617b      	str	r3, [r7, #20]
   return(result);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e5      	bne.n	800564a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e012      	b.n	80056b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3758      	adds	r7, #88	@ 0x58
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d0:	e04f      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d04b      	beq.n	8005772 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056da:	f7fb fe45 	bl	8001368 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d302      	bcc.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e04e      	b.n	8005792 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d037      	beq.n	8005772 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b80      	cmp	r3, #128	@ 0x80
 8005706:	d034      	beq.n	8005772 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b40      	cmp	r3, #64	@ 0x40
 800570c:	d031      	beq.n	8005772 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b08      	cmp	r3, #8
 800571a:	d110      	bne.n	800573e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2208      	movs	r2, #8
 8005722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f838 	bl	800579a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2208      	movs	r2, #8
 800572e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e029      	b.n	8005792 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800574c:	d111      	bne.n	8005772 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005756:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f81e 	bl	800579a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e00f      	b.n	8005792 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4013      	ands	r3, r2
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	bf0c      	ite	eq
 8005782:	2301      	moveq	r3, #1
 8005784:	2300      	movne	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	429a      	cmp	r2, r3
 800578e:	d0a0      	beq.n	80056d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800579a:	b480      	push	{r7}
 800579c:	b095      	sub	sp, #84	@ 0x54
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80057c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e6      	bne.n	80057a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3308      	adds	r3, #8
 80057da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3308      	adds	r3, #8
 80057f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e3      	bne.n	80057d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d118      	bne.n	8005846 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	60bb      	str	r3, [r7, #8]
   return(result);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f023 0310 	bic.w	r3, r3, #16
 8005828:	647b      	str	r3, [r7, #68]	@ 0x44
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6979      	ldr	r1, [r7, #20]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	613b      	str	r3, [r7, #16]
   return(result);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e6      	bne.n	8005814 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800585a:	bf00      	nop
 800585c:	3754      	adds	r7, #84	@ 0x54
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff fabd 	bl	8004e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b088      	sub	sp, #32
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6979      	ldr	r1, [r7, #20]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	613b      	str	r3, [r7, #16]
   return(result);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e6      	bne.n	800589a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff fa88 	bl	8004df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e0:	bf00      	nop
 80058e2:	3720      	adds	r7, #32
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_UARTEx_DisableFifoMode+0x16>
 8005936:	2302      	movs	r3, #2
 8005938:	e027      	b.n	800598a <HAL_UARTEx_DisableFifoMode+0x66>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2224      	movs	r2, #36	@ 0x24
 8005946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0201 	bic.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005968:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e02d      	b.n	8005a0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2224      	movs	r2, #36	@ 0x24
 80059ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f850 	bl	8005a90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e02d      	b.n	8005a86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2224      	movs	r2, #36	@ 0x24
 8005a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0201 	bic.w	r2, r2, #1
 8005a50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f812 	bl	8005a90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d108      	bne.n	8005ab2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ab0:	e031      	b.n	8005b16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	0e5b      	lsrs	r3, r3, #25
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	0f5b      	lsrs	r3, r3, #29
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ada:	7bbb      	ldrb	r3, [r7, #14]
 8005adc:	7b3a      	ldrb	r2, [r7, #12]
 8005ade:	4911      	ldr	r1, [pc, #68]	@ (8005b24 <UARTEx_SetNbDataToProcess+0x94>)
 8005ae0:	5c8a      	ldrb	r2, [r1, r2]
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ae6:	7b3a      	ldrb	r2, [r7, #12]
 8005ae8:	490f      	ldr	r1, [pc, #60]	@ (8005b28 <UARTEx_SetNbDataToProcess+0x98>)
 8005aea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aec:	fb93 f3f2 	sdiv	r3, r3, r2
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	7b7a      	ldrb	r2, [r7, #13]
 8005afc:	4909      	ldr	r1, [pc, #36]	@ (8005b24 <UARTEx_SetNbDataToProcess+0x94>)
 8005afe:	5c8a      	ldrb	r2, [r1, r2]
 8005b00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b04:	7b7a      	ldrb	r2, [r7, #13]
 8005b06:	4908      	ldr	r1, [pc, #32]	@ (8005b28 <UARTEx_SetNbDataToProcess+0x98>)
 8005b08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	08006658 	.word	0x08006658
 8005b28:	08006660 	.word	0x08006660

08005b2c <siprintf>:
 8005b2c:	b40e      	push	{r1, r2, r3}
 8005b2e:	b500      	push	{lr}
 8005b30:	b09c      	sub	sp, #112	@ 0x70
 8005b32:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b34:	9002      	str	r0, [sp, #8]
 8005b36:	9006      	str	r0, [sp, #24]
 8005b38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b3c:	4809      	ldr	r0, [pc, #36]	@ (8005b64 <siprintf+0x38>)
 8005b3e:	9107      	str	r1, [sp, #28]
 8005b40:	9104      	str	r1, [sp, #16]
 8005b42:	4909      	ldr	r1, [pc, #36]	@ (8005b68 <siprintf+0x3c>)
 8005b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b48:	9105      	str	r1, [sp, #20]
 8005b4a:	6800      	ldr	r0, [r0, #0]
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	a902      	add	r1, sp, #8
 8005b50:	f000 f994 	bl	8005e7c <_svfiprintf_r>
 8005b54:	9b02      	ldr	r3, [sp, #8]
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	b01c      	add	sp, #112	@ 0x70
 8005b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b60:	b003      	add	sp, #12
 8005b62:	4770      	bx	lr
 8005b64:	20000014 	.word	0x20000014
 8005b68:	ffff0208 	.word	0xffff0208

08005b6c <memset>:
 8005b6c:	4402      	add	r2, r0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d100      	bne.n	8005b76 <memset+0xa>
 8005b74:	4770      	bx	lr
 8005b76:	f803 1b01 	strb.w	r1, [r3], #1
 8005b7a:	e7f9      	b.n	8005b70 <memset+0x4>

08005b7c <__errno>:
 8005b7c:	4b01      	ldr	r3, [pc, #4]	@ (8005b84 <__errno+0x8>)
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000014 	.word	0x20000014

08005b88 <__libc_init_array>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8005bc0 <__libc_init_array+0x38>)
 8005b8c:	4c0d      	ldr	r4, [pc, #52]	@ (8005bc4 <__libc_init_array+0x3c>)
 8005b8e:	1b64      	subs	r4, r4, r5
 8005b90:	10a4      	asrs	r4, r4, #2
 8005b92:	2600      	movs	r6, #0
 8005b94:	42a6      	cmp	r6, r4
 8005b96:	d109      	bne.n	8005bac <__libc_init_array+0x24>
 8005b98:	4d0b      	ldr	r5, [pc, #44]	@ (8005bc8 <__libc_init_array+0x40>)
 8005b9a:	4c0c      	ldr	r4, [pc, #48]	@ (8005bcc <__libc_init_array+0x44>)
 8005b9c:	f000 fc66 	bl	800646c <_init>
 8005ba0:	1b64      	subs	r4, r4, r5
 8005ba2:	10a4      	asrs	r4, r4, #2
 8005ba4:	2600      	movs	r6, #0
 8005ba6:	42a6      	cmp	r6, r4
 8005ba8:	d105      	bne.n	8005bb6 <__libc_init_array+0x2e>
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb0:	4798      	blx	r3
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	e7ee      	b.n	8005b94 <__libc_init_array+0xc>
 8005bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bba:	4798      	blx	r3
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	e7f2      	b.n	8005ba6 <__libc_init_array+0x1e>
 8005bc0:	080066a4 	.word	0x080066a4
 8005bc4:	080066a4 	.word	0x080066a4
 8005bc8:	080066a4 	.word	0x080066a4
 8005bcc:	080066a8 	.word	0x080066a8

08005bd0 <__retarget_lock_acquire_recursive>:
 8005bd0:	4770      	bx	lr

08005bd2 <__retarget_lock_release_recursive>:
 8005bd2:	4770      	bx	lr

08005bd4 <_free_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	2900      	cmp	r1, #0
 8005bda:	d041      	beq.n	8005c60 <_free_r+0x8c>
 8005bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005be0:	1f0c      	subs	r4, r1, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	bfb8      	it	lt
 8005be6:	18e4      	addlt	r4, r4, r3
 8005be8:	f000 f8e0 	bl	8005dac <__malloc_lock>
 8005bec:	4a1d      	ldr	r2, [pc, #116]	@ (8005c64 <_free_r+0x90>)
 8005bee:	6813      	ldr	r3, [r2, #0]
 8005bf0:	b933      	cbnz	r3, 8005c00 <_free_r+0x2c>
 8005bf2:	6063      	str	r3, [r4, #4]
 8005bf4:	6014      	str	r4, [r2, #0]
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bfc:	f000 b8dc 	b.w	8005db8 <__malloc_unlock>
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	d908      	bls.n	8005c16 <_free_r+0x42>
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	1821      	adds	r1, r4, r0
 8005c08:	428b      	cmp	r3, r1
 8005c0a:	bf01      	itttt	eq
 8005c0c:	6819      	ldreq	r1, [r3, #0]
 8005c0e:	685b      	ldreq	r3, [r3, #4]
 8005c10:	1809      	addeq	r1, r1, r0
 8005c12:	6021      	streq	r1, [r4, #0]
 8005c14:	e7ed      	b.n	8005bf2 <_free_r+0x1e>
 8005c16:	461a      	mov	r2, r3
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	b10b      	cbz	r3, 8005c20 <_free_r+0x4c>
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	d9fa      	bls.n	8005c16 <_free_r+0x42>
 8005c20:	6811      	ldr	r1, [r2, #0]
 8005c22:	1850      	adds	r0, r2, r1
 8005c24:	42a0      	cmp	r0, r4
 8005c26:	d10b      	bne.n	8005c40 <_free_r+0x6c>
 8005c28:	6820      	ldr	r0, [r4, #0]
 8005c2a:	4401      	add	r1, r0
 8005c2c:	1850      	adds	r0, r2, r1
 8005c2e:	4283      	cmp	r3, r0
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	d1e0      	bne.n	8005bf6 <_free_r+0x22>
 8005c34:	6818      	ldr	r0, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	6053      	str	r3, [r2, #4]
 8005c3a:	4408      	add	r0, r1
 8005c3c:	6010      	str	r0, [r2, #0]
 8005c3e:	e7da      	b.n	8005bf6 <_free_r+0x22>
 8005c40:	d902      	bls.n	8005c48 <_free_r+0x74>
 8005c42:	230c      	movs	r3, #12
 8005c44:	602b      	str	r3, [r5, #0]
 8005c46:	e7d6      	b.n	8005bf6 <_free_r+0x22>
 8005c48:	6820      	ldr	r0, [r4, #0]
 8005c4a:	1821      	adds	r1, r4, r0
 8005c4c:	428b      	cmp	r3, r1
 8005c4e:	bf04      	itt	eq
 8005c50:	6819      	ldreq	r1, [r3, #0]
 8005c52:	685b      	ldreq	r3, [r3, #4]
 8005c54:	6063      	str	r3, [r4, #4]
 8005c56:	bf04      	itt	eq
 8005c58:	1809      	addeq	r1, r1, r0
 8005c5a:	6021      	streq	r1, [r4, #0]
 8005c5c:	6054      	str	r4, [r2, #4]
 8005c5e:	e7ca      	b.n	8005bf6 <_free_r+0x22>
 8005c60:	bd38      	pop	{r3, r4, r5, pc}
 8005c62:	bf00      	nop
 8005c64:	20000444 	.word	0x20000444

08005c68 <sbrk_aligned>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	4e0f      	ldr	r6, [pc, #60]	@ (8005ca8 <sbrk_aligned+0x40>)
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	6831      	ldr	r1, [r6, #0]
 8005c70:	4605      	mov	r5, r0
 8005c72:	b911      	cbnz	r1, 8005c7a <sbrk_aligned+0x12>
 8005c74:	f000 fba6 	bl	80063c4 <_sbrk_r>
 8005c78:	6030      	str	r0, [r6, #0]
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f000 fba1 	bl	80063c4 <_sbrk_r>
 8005c82:	1c43      	adds	r3, r0, #1
 8005c84:	d103      	bne.n	8005c8e <sbrk_aligned+0x26>
 8005c86:	f04f 34ff 	mov.w	r4, #4294967295
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	bd70      	pop	{r4, r5, r6, pc}
 8005c8e:	1cc4      	adds	r4, r0, #3
 8005c90:	f024 0403 	bic.w	r4, r4, #3
 8005c94:	42a0      	cmp	r0, r4
 8005c96:	d0f8      	beq.n	8005c8a <sbrk_aligned+0x22>
 8005c98:	1a21      	subs	r1, r4, r0
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 fb92 	bl	80063c4 <_sbrk_r>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d1f2      	bne.n	8005c8a <sbrk_aligned+0x22>
 8005ca4:	e7ef      	b.n	8005c86 <sbrk_aligned+0x1e>
 8005ca6:	bf00      	nop
 8005ca8:	20000440 	.word	0x20000440

08005cac <_malloc_r>:
 8005cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb0:	1ccd      	adds	r5, r1, #3
 8005cb2:	f025 0503 	bic.w	r5, r5, #3
 8005cb6:	3508      	adds	r5, #8
 8005cb8:	2d0c      	cmp	r5, #12
 8005cba:	bf38      	it	cc
 8005cbc:	250c      	movcc	r5, #12
 8005cbe:	2d00      	cmp	r5, #0
 8005cc0:	4606      	mov	r6, r0
 8005cc2:	db01      	blt.n	8005cc8 <_malloc_r+0x1c>
 8005cc4:	42a9      	cmp	r1, r5
 8005cc6:	d904      	bls.n	8005cd2 <_malloc_r+0x26>
 8005cc8:	230c      	movs	r3, #12
 8005cca:	6033      	str	r3, [r6, #0]
 8005ccc:	2000      	movs	r0, #0
 8005cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005da8 <_malloc_r+0xfc>
 8005cd6:	f000 f869 	bl	8005dac <__malloc_lock>
 8005cda:	f8d8 3000 	ldr.w	r3, [r8]
 8005cde:	461c      	mov	r4, r3
 8005ce0:	bb44      	cbnz	r4, 8005d34 <_malloc_r+0x88>
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	f7ff ffbf 	bl	8005c68 <sbrk_aligned>
 8005cea:	1c43      	adds	r3, r0, #1
 8005cec:	4604      	mov	r4, r0
 8005cee:	d158      	bne.n	8005da2 <_malloc_r+0xf6>
 8005cf0:	f8d8 4000 	ldr.w	r4, [r8]
 8005cf4:	4627      	mov	r7, r4
 8005cf6:	2f00      	cmp	r7, #0
 8005cf8:	d143      	bne.n	8005d82 <_malloc_r+0xd6>
 8005cfa:	2c00      	cmp	r4, #0
 8005cfc:	d04b      	beq.n	8005d96 <_malloc_r+0xea>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	4639      	mov	r1, r7
 8005d02:	4630      	mov	r0, r6
 8005d04:	eb04 0903 	add.w	r9, r4, r3
 8005d08:	f000 fb5c 	bl	80063c4 <_sbrk_r>
 8005d0c:	4581      	cmp	r9, r0
 8005d0e:	d142      	bne.n	8005d96 <_malloc_r+0xea>
 8005d10:	6821      	ldr	r1, [r4, #0]
 8005d12:	1a6d      	subs	r5, r5, r1
 8005d14:	4629      	mov	r1, r5
 8005d16:	4630      	mov	r0, r6
 8005d18:	f7ff ffa6 	bl	8005c68 <sbrk_aligned>
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d03a      	beq.n	8005d96 <_malloc_r+0xea>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	442b      	add	r3, r5
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	f8d8 3000 	ldr.w	r3, [r8]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	bb62      	cbnz	r2, 8005d88 <_malloc_r+0xdc>
 8005d2e:	f8c8 7000 	str.w	r7, [r8]
 8005d32:	e00f      	b.n	8005d54 <_malloc_r+0xa8>
 8005d34:	6822      	ldr	r2, [r4, #0]
 8005d36:	1b52      	subs	r2, r2, r5
 8005d38:	d420      	bmi.n	8005d7c <_malloc_r+0xd0>
 8005d3a:	2a0b      	cmp	r2, #11
 8005d3c:	d917      	bls.n	8005d6e <_malloc_r+0xc2>
 8005d3e:	1961      	adds	r1, r4, r5
 8005d40:	42a3      	cmp	r3, r4
 8005d42:	6025      	str	r5, [r4, #0]
 8005d44:	bf18      	it	ne
 8005d46:	6059      	strne	r1, [r3, #4]
 8005d48:	6863      	ldr	r3, [r4, #4]
 8005d4a:	bf08      	it	eq
 8005d4c:	f8c8 1000 	streq.w	r1, [r8]
 8005d50:	5162      	str	r2, [r4, r5]
 8005d52:	604b      	str	r3, [r1, #4]
 8005d54:	4630      	mov	r0, r6
 8005d56:	f000 f82f 	bl	8005db8 <__malloc_unlock>
 8005d5a:	f104 000b 	add.w	r0, r4, #11
 8005d5e:	1d23      	adds	r3, r4, #4
 8005d60:	f020 0007 	bic.w	r0, r0, #7
 8005d64:	1ac2      	subs	r2, r0, r3
 8005d66:	bf1c      	itt	ne
 8005d68:	1a1b      	subne	r3, r3, r0
 8005d6a:	50a3      	strne	r3, [r4, r2]
 8005d6c:	e7af      	b.n	8005cce <_malloc_r+0x22>
 8005d6e:	6862      	ldr	r2, [r4, #4]
 8005d70:	42a3      	cmp	r3, r4
 8005d72:	bf0c      	ite	eq
 8005d74:	f8c8 2000 	streq.w	r2, [r8]
 8005d78:	605a      	strne	r2, [r3, #4]
 8005d7a:	e7eb      	b.n	8005d54 <_malloc_r+0xa8>
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	6864      	ldr	r4, [r4, #4]
 8005d80:	e7ae      	b.n	8005ce0 <_malloc_r+0x34>
 8005d82:	463c      	mov	r4, r7
 8005d84:	687f      	ldr	r7, [r7, #4]
 8005d86:	e7b6      	b.n	8005cf6 <_malloc_r+0x4a>
 8005d88:	461a      	mov	r2, r3
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	42a3      	cmp	r3, r4
 8005d8e:	d1fb      	bne.n	8005d88 <_malloc_r+0xdc>
 8005d90:	2300      	movs	r3, #0
 8005d92:	6053      	str	r3, [r2, #4]
 8005d94:	e7de      	b.n	8005d54 <_malloc_r+0xa8>
 8005d96:	230c      	movs	r3, #12
 8005d98:	6033      	str	r3, [r6, #0]
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f000 f80c 	bl	8005db8 <__malloc_unlock>
 8005da0:	e794      	b.n	8005ccc <_malloc_r+0x20>
 8005da2:	6005      	str	r5, [r0, #0]
 8005da4:	e7d6      	b.n	8005d54 <_malloc_r+0xa8>
 8005da6:	bf00      	nop
 8005da8:	20000444 	.word	0x20000444

08005dac <__malloc_lock>:
 8005dac:	4801      	ldr	r0, [pc, #4]	@ (8005db4 <__malloc_lock+0x8>)
 8005dae:	f7ff bf0f 	b.w	8005bd0 <__retarget_lock_acquire_recursive>
 8005db2:	bf00      	nop
 8005db4:	2000043c 	.word	0x2000043c

08005db8 <__malloc_unlock>:
 8005db8:	4801      	ldr	r0, [pc, #4]	@ (8005dc0 <__malloc_unlock+0x8>)
 8005dba:	f7ff bf0a 	b.w	8005bd2 <__retarget_lock_release_recursive>
 8005dbe:	bf00      	nop
 8005dc0:	2000043c 	.word	0x2000043c

08005dc4 <__ssputs_r>:
 8005dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	688e      	ldr	r6, [r1, #8]
 8005dca:	461f      	mov	r7, r3
 8005dcc:	42be      	cmp	r6, r7
 8005dce:	680b      	ldr	r3, [r1, #0]
 8005dd0:	4682      	mov	sl, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	4690      	mov	r8, r2
 8005dd6:	d82d      	bhi.n	8005e34 <__ssputs_r+0x70>
 8005dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ddc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005de0:	d026      	beq.n	8005e30 <__ssputs_r+0x6c>
 8005de2:	6965      	ldr	r5, [r4, #20]
 8005de4:	6909      	ldr	r1, [r1, #16]
 8005de6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dea:	eba3 0901 	sub.w	r9, r3, r1
 8005dee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005df2:	1c7b      	adds	r3, r7, #1
 8005df4:	444b      	add	r3, r9
 8005df6:	106d      	asrs	r5, r5, #1
 8005df8:	429d      	cmp	r5, r3
 8005dfa:	bf38      	it	cc
 8005dfc:	461d      	movcc	r5, r3
 8005dfe:	0553      	lsls	r3, r2, #21
 8005e00:	d527      	bpl.n	8005e52 <__ssputs_r+0x8e>
 8005e02:	4629      	mov	r1, r5
 8005e04:	f7ff ff52 	bl	8005cac <_malloc_r>
 8005e08:	4606      	mov	r6, r0
 8005e0a:	b360      	cbz	r0, 8005e66 <__ssputs_r+0xa2>
 8005e0c:	6921      	ldr	r1, [r4, #16]
 8005e0e:	464a      	mov	r2, r9
 8005e10:	f000 fae8 	bl	80063e4 <memcpy>
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	6126      	str	r6, [r4, #16]
 8005e22:	6165      	str	r5, [r4, #20]
 8005e24:	444e      	add	r6, r9
 8005e26:	eba5 0509 	sub.w	r5, r5, r9
 8005e2a:	6026      	str	r6, [r4, #0]
 8005e2c:	60a5      	str	r5, [r4, #8]
 8005e2e:	463e      	mov	r6, r7
 8005e30:	42be      	cmp	r6, r7
 8005e32:	d900      	bls.n	8005e36 <__ssputs_r+0x72>
 8005e34:	463e      	mov	r6, r7
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	4632      	mov	r2, r6
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	f000 faa8 	bl	8006390 <memmove>
 8005e40:	68a3      	ldr	r3, [r4, #8]
 8005e42:	1b9b      	subs	r3, r3, r6
 8005e44:	60a3      	str	r3, [r4, #8]
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	4433      	add	r3, r6
 8005e4a:	6023      	str	r3, [r4, #0]
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e52:	462a      	mov	r2, r5
 8005e54:	f000 fad4 	bl	8006400 <_realloc_r>
 8005e58:	4606      	mov	r6, r0
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d1e0      	bne.n	8005e20 <__ssputs_r+0x5c>
 8005e5e:	6921      	ldr	r1, [r4, #16]
 8005e60:	4650      	mov	r0, sl
 8005e62:	f7ff feb7 	bl	8005bd4 <_free_r>
 8005e66:	230c      	movs	r3, #12
 8005e68:	f8ca 3000 	str.w	r3, [sl]
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e72:	81a3      	strh	r3, [r4, #12]
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	e7e9      	b.n	8005e4e <__ssputs_r+0x8a>
	...

08005e7c <_svfiprintf_r>:
 8005e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e80:	4698      	mov	r8, r3
 8005e82:	898b      	ldrh	r3, [r1, #12]
 8005e84:	061b      	lsls	r3, r3, #24
 8005e86:	b09d      	sub	sp, #116	@ 0x74
 8005e88:	4607      	mov	r7, r0
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	d510      	bpl.n	8005eb2 <_svfiprintf_r+0x36>
 8005e90:	690b      	ldr	r3, [r1, #16]
 8005e92:	b973      	cbnz	r3, 8005eb2 <_svfiprintf_r+0x36>
 8005e94:	2140      	movs	r1, #64	@ 0x40
 8005e96:	f7ff ff09 	bl	8005cac <_malloc_r>
 8005e9a:	6028      	str	r0, [r5, #0]
 8005e9c:	6128      	str	r0, [r5, #16]
 8005e9e:	b930      	cbnz	r0, 8005eae <_svfiprintf_r+0x32>
 8005ea0:	230c      	movs	r3, #12
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	b01d      	add	sp, #116	@ 0x74
 8005eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eae:	2340      	movs	r3, #64	@ 0x40
 8005eb0:	616b      	str	r3, [r5, #20]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eb6:	2320      	movs	r3, #32
 8005eb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ebc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ec0:	2330      	movs	r3, #48	@ 0x30
 8005ec2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006060 <_svfiprintf_r+0x1e4>
 8005ec6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005eca:	f04f 0901 	mov.w	r9, #1
 8005ece:	4623      	mov	r3, r4
 8005ed0:	469a      	mov	sl, r3
 8005ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ed6:	b10a      	cbz	r2, 8005edc <_svfiprintf_r+0x60>
 8005ed8:	2a25      	cmp	r2, #37	@ 0x25
 8005eda:	d1f9      	bne.n	8005ed0 <_svfiprintf_r+0x54>
 8005edc:	ebba 0b04 	subs.w	fp, sl, r4
 8005ee0:	d00b      	beq.n	8005efa <_svfiprintf_r+0x7e>
 8005ee2:	465b      	mov	r3, fp
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f7ff ff6b 	bl	8005dc4 <__ssputs_r>
 8005eee:	3001      	adds	r0, #1
 8005ef0:	f000 80a7 	beq.w	8006042 <_svfiprintf_r+0x1c6>
 8005ef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ef6:	445a      	add	r2, fp
 8005ef8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005efa:	f89a 3000 	ldrb.w	r3, [sl]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 809f 	beq.w	8006042 <_svfiprintf_r+0x1c6>
 8005f04:	2300      	movs	r3, #0
 8005f06:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f0e:	f10a 0a01 	add.w	sl, sl, #1
 8005f12:	9304      	str	r3, [sp, #16]
 8005f14:	9307      	str	r3, [sp, #28]
 8005f16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f1c:	4654      	mov	r4, sl
 8005f1e:	2205      	movs	r2, #5
 8005f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f24:	484e      	ldr	r0, [pc, #312]	@ (8006060 <_svfiprintf_r+0x1e4>)
 8005f26:	f7fa f983 	bl	8000230 <memchr>
 8005f2a:	9a04      	ldr	r2, [sp, #16]
 8005f2c:	b9d8      	cbnz	r0, 8005f66 <_svfiprintf_r+0xea>
 8005f2e:	06d0      	lsls	r0, r2, #27
 8005f30:	bf44      	itt	mi
 8005f32:	2320      	movmi	r3, #32
 8005f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f38:	0711      	lsls	r1, r2, #28
 8005f3a:	bf44      	itt	mi
 8005f3c:	232b      	movmi	r3, #43	@ 0x2b
 8005f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f42:	f89a 3000 	ldrb.w	r3, [sl]
 8005f46:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f48:	d015      	beq.n	8005f76 <_svfiprintf_r+0xfa>
 8005f4a:	9a07      	ldr	r2, [sp, #28]
 8005f4c:	4654      	mov	r4, sl
 8005f4e:	2000      	movs	r0, #0
 8005f50:	f04f 0c0a 	mov.w	ip, #10
 8005f54:	4621      	mov	r1, r4
 8005f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f5a:	3b30      	subs	r3, #48	@ 0x30
 8005f5c:	2b09      	cmp	r3, #9
 8005f5e:	d94b      	bls.n	8005ff8 <_svfiprintf_r+0x17c>
 8005f60:	b1b0      	cbz	r0, 8005f90 <_svfiprintf_r+0x114>
 8005f62:	9207      	str	r2, [sp, #28]
 8005f64:	e014      	b.n	8005f90 <_svfiprintf_r+0x114>
 8005f66:	eba0 0308 	sub.w	r3, r0, r8
 8005f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	46a2      	mov	sl, r4
 8005f74:	e7d2      	b.n	8005f1c <_svfiprintf_r+0xa0>
 8005f76:	9b03      	ldr	r3, [sp, #12]
 8005f78:	1d19      	adds	r1, r3, #4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	9103      	str	r1, [sp, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfbb      	ittet	lt
 8005f82:	425b      	neglt	r3, r3
 8005f84:	f042 0202 	orrlt.w	r2, r2, #2
 8005f88:	9307      	strge	r3, [sp, #28]
 8005f8a:	9307      	strlt	r3, [sp, #28]
 8005f8c:	bfb8      	it	lt
 8005f8e:	9204      	strlt	r2, [sp, #16]
 8005f90:	7823      	ldrb	r3, [r4, #0]
 8005f92:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f94:	d10a      	bne.n	8005fac <_svfiprintf_r+0x130>
 8005f96:	7863      	ldrb	r3, [r4, #1]
 8005f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f9a:	d132      	bne.n	8006002 <_svfiprintf_r+0x186>
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	1d1a      	adds	r2, r3, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	9203      	str	r2, [sp, #12]
 8005fa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fa8:	3402      	adds	r4, #2
 8005faa:	9305      	str	r3, [sp, #20]
 8005fac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006070 <_svfiprintf_r+0x1f4>
 8005fb0:	7821      	ldrb	r1, [r4, #0]
 8005fb2:	2203      	movs	r2, #3
 8005fb4:	4650      	mov	r0, sl
 8005fb6:	f7fa f93b 	bl	8000230 <memchr>
 8005fba:	b138      	cbz	r0, 8005fcc <_svfiprintf_r+0x150>
 8005fbc:	9b04      	ldr	r3, [sp, #16]
 8005fbe:	eba0 000a 	sub.w	r0, r0, sl
 8005fc2:	2240      	movs	r2, #64	@ 0x40
 8005fc4:	4082      	lsls	r2, r0
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	3401      	adds	r4, #1
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd0:	4824      	ldr	r0, [pc, #144]	@ (8006064 <_svfiprintf_r+0x1e8>)
 8005fd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fd6:	2206      	movs	r2, #6
 8005fd8:	f7fa f92a 	bl	8000230 <memchr>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d036      	beq.n	800604e <_svfiprintf_r+0x1d2>
 8005fe0:	4b21      	ldr	r3, [pc, #132]	@ (8006068 <_svfiprintf_r+0x1ec>)
 8005fe2:	bb1b      	cbnz	r3, 800602c <_svfiprintf_r+0x1b0>
 8005fe4:	9b03      	ldr	r3, [sp, #12]
 8005fe6:	3307      	adds	r3, #7
 8005fe8:	f023 0307 	bic.w	r3, r3, #7
 8005fec:	3308      	adds	r3, #8
 8005fee:	9303      	str	r3, [sp, #12]
 8005ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff2:	4433      	add	r3, r6
 8005ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ff6:	e76a      	b.n	8005ece <_svfiprintf_r+0x52>
 8005ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	2001      	movs	r0, #1
 8006000:	e7a8      	b.n	8005f54 <_svfiprintf_r+0xd8>
 8006002:	2300      	movs	r3, #0
 8006004:	3401      	adds	r4, #1
 8006006:	9305      	str	r3, [sp, #20]
 8006008:	4619      	mov	r1, r3
 800600a:	f04f 0c0a 	mov.w	ip, #10
 800600e:	4620      	mov	r0, r4
 8006010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006014:	3a30      	subs	r2, #48	@ 0x30
 8006016:	2a09      	cmp	r2, #9
 8006018:	d903      	bls.n	8006022 <_svfiprintf_r+0x1a6>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0c6      	beq.n	8005fac <_svfiprintf_r+0x130>
 800601e:	9105      	str	r1, [sp, #20]
 8006020:	e7c4      	b.n	8005fac <_svfiprintf_r+0x130>
 8006022:	fb0c 2101 	mla	r1, ip, r1, r2
 8006026:	4604      	mov	r4, r0
 8006028:	2301      	movs	r3, #1
 800602a:	e7f0      	b.n	800600e <_svfiprintf_r+0x192>
 800602c:	ab03      	add	r3, sp, #12
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	462a      	mov	r2, r5
 8006032:	4b0e      	ldr	r3, [pc, #56]	@ (800606c <_svfiprintf_r+0x1f0>)
 8006034:	a904      	add	r1, sp, #16
 8006036:	4638      	mov	r0, r7
 8006038:	f3af 8000 	nop.w
 800603c:	1c42      	adds	r2, r0, #1
 800603e:	4606      	mov	r6, r0
 8006040:	d1d6      	bne.n	8005ff0 <_svfiprintf_r+0x174>
 8006042:	89ab      	ldrh	r3, [r5, #12]
 8006044:	065b      	lsls	r3, r3, #25
 8006046:	f53f af2d 	bmi.w	8005ea4 <_svfiprintf_r+0x28>
 800604a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800604c:	e72c      	b.n	8005ea8 <_svfiprintf_r+0x2c>
 800604e:	ab03      	add	r3, sp, #12
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	462a      	mov	r2, r5
 8006054:	4b05      	ldr	r3, [pc, #20]	@ (800606c <_svfiprintf_r+0x1f0>)
 8006056:	a904      	add	r1, sp, #16
 8006058:	4638      	mov	r0, r7
 800605a:	f000 f879 	bl	8006150 <_printf_i>
 800605e:	e7ed      	b.n	800603c <_svfiprintf_r+0x1c0>
 8006060:	08006668 	.word	0x08006668
 8006064:	08006672 	.word	0x08006672
 8006068:	00000000 	.word	0x00000000
 800606c:	08005dc5 	.word	0x08005dc5
 8006070:	0800666e 	.word	0x0800666e

08006074 <_printf_common>:
 8006074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006078:	4616      	mov	r6, r2
 800607a:	4698      	mov	r8, r3
 800607c:	688a      	ldr	r2, [r1, #8]
 800607e:	690b      	ldr	r3, [r1, #16]
 8006080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006084:	4293      	cmp	r3, r2
 8006086:	bfb8      	it	lt
 8006088:	4613      	movlt	r3, r2
 800608a:	6033      	str	r3, [r6, #0]
 800608c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006090:	4607      	mov	r7, r0
 8006092:	460c      	mov	r4, r1
 8006094:	b10a      	cbz	r2, 800609a <_printf_common+0x26>
 8006096:	3301      	adds	r3, #1
 8006098:	6033      	str	r3, [r6, #0]
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	0699      	lsls	r1, r3, #26
 800609e:	bf42      	ittt	mi
 80060a0:	6833      	ldrmi	r3, [r6, #0]
 80060a2:	3302      	addmi	r3, #2
 80060a4:	6033      	strmi	r3, [r6, #0]
 80060a6:	6825      	ldr	r5, [r4, #0]
 80060a8:	f015 0506 	ands.w	r5, r5, #6
 80060ac:	d106      	bne.n	80060bc <_printf_common+0x48>
 80060ae:	f104 0a19 	add.w	sl, r4, #25
 80060b2:	68e3      	ldr	r3, [r4, #12]
 80060b4:	6832      	ldr	r2, [r6, #0]
 80060b6:	1a9b      	subs	r3, r3, r2
 80060b8:	42ab      	cmp	r3, r5
 80060ba:	dc26      	bgt.n	800610a <_printf_common+0x96>
 80060bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060c0:	6822      	ldr	r2, [r4, #0]
 80060c2:	3b00      	subs	r3, #0
 80060c4:	bf18      	it	ne
 80060c6:	2301      	movne	r3, #1
 80060c8:	0692      	lsls	r2, r2, #26
 80060ca:	d42b      	bmi.n	8006124 <_printf_common+0xb0>
 80060cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060d0:	4641      	mov	r1, r8
 80060d2:	4638      	mov	r0, r7
 80060d4:	47c8      	blx	r9
 80060d6:	3001      	adds	r0, #1
 80060d8:	d01e      	beq.n	8006118 <_printf_common+0xa4>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	6922      	ldr	r2, [r4, #16]
 80060de:	f003 0306 	and.w	r3, r3, #6
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	bf02      	ittt	eq
 80060e6:	68e5      	ldreq	r5, [r4, #12]
 80060e8:	6833      	ldreq	r3, [r6, #0]
 80060ea:	1aed      	subeq	r5, r5, r3
 80060ec:	68a3      	ldr	r3, [r4, #8]
 80060ee:	bf0c      	ite	eq
 80060f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060f4:	2500      	movne	r5, #0
 80060f6:	4293      	cmp	r3, r2
 80060f8:	bfc4      	itt	gt
 80060fa:	1a9b      	subgt	r3, r3, r2
 80060fc:	18ed      	addgt	r5, r5, r3
 80060fe:	2600      	movs	r6, #0
 8006100:	341a      	adds	r4, #26
 8006102:	42b5      	cmp	r5, r6
 8006104:	d11a      	bne.n	800613c <_printf_common+0xc8>
 8006106:	2000      	movs	r0, #0
 8006108:	e008      	b.n	800611c <_printf_common+0xa8>
 800610a:	2301      	movs	r3, #1
 800610c:	4652      	mov	r2, sl
 800610e:	4641      	mov	r1, r8
 8006110:	4638      	mov	r0, r7
 8006112:	47c8      	blx	r9
 8006114:	3001      	adds	r0, #1
 8006116:	d103      	bne.n	8006120 <_printf_common+0xac>
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006120:	3501      	adds	r5, #1
 8006122:	e7c6      	b.n	80060b2 <_printf_common+0x3e>
 8006124:	18e1      	adds	r1, r4, r3
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	2030      	movs	r0, #48	@ 0x30
 800612a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800612e:	4422      	add	r2, r4
 8006130:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006134:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006138:	3302      	adds	r3, #2
 800613a:	e7c7      	b.n	80060cc <_printf_common+0x58>
 800613c:	2301      	movs	r3, #1
 800613e:	4622      	mov	r2, r4
 8006140:	4641      	mov	r1, r8
 8006142:	4638      	mov	r0, r7
 8006144:	47c8      	blx	r9
 8006146:	3001      	adds	r0, #1
 8006148:	d0e6      	beq.n	8006118 <_printf_common+0xa4>
 800614a:	3601      	adds	r6, #1
 800614c:	e7d9      	b.n	8006102 <_printf_common+0x8e>
	...

08006150 <_printf_i>:
 8006150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006154:	7e0f      	ldrb	r7, [r1, #24]
 8006156:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006158:	2f78      	cmp	r7, #120	@ 0x78
 800615a:	4691      	mov	r9, r2
 800615c:	4680      	mov	r8, r0
 800615e:	460c      	mov	r4, r1
 8006160:	469a      	mov	sl, r3
 8006162:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006166:	d807      	bhi.n	8006178 <_printf_i+0x28>
 8006168:	2f62      	cmp	r7, #98	@ 0x62
 800616a:	d80a      	bhi.n	8006182 <_printf_i+0x32>
 800616c:	2f00      	cmp	r7, #0
 800616e:	f000 80d2 	beq.w	8006316 <_printf_i+0x1c6>
 8006172:	2f58      	cmp	r7, #88	@ 0x58
 8006174:	f000 80b9 	beq.w	80062ea <_printf_i+0x19a>
 8006178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800617c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006180:	e03a      	b.n	80061f8 <_printf_i+0xa8>
 8006182:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006186:	2b15      	cmp	r3, #21
 8006188:	d8f6      	bhi.n	8006178 <_printf_i+0x28>
 800618a:	a101      	add	r1, pc, #4	@ (adr r1, 8006190 <_printf_i+0x40>)
 800618c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006190:	080061e9 	.word	0x080061e9
 8006194:	080061fd 	.word	0x080061fd
 8006198:	08006179 	.word	0x08006179
 800619c:	08006179 	.word	0x08006179
 80061a0:	08006179 	.word	0x08006179
 80061a4:	08006179 	.word	0x08006179
 80061a8:	080061fd 	.word	0x080061fd
 80061ac:	08006179 	.word	0x08006179
 80061b0:	08006179 	.word	0x08006179
 80061b4:	08006179 	.word	0x08006179
 80061b8:	08006179 	.word	0x08006179
 80061bc:	080062fd 	.word	0x080062fd
 80061c0:	08006227 	.word	0x08006227
 80061c4:	080062b7 	.word	0x080062b7
 80061c8:	08006179 	.word	0x08006179
 80061cc:	08006179 	.word	0x08006179
 80061d0:	0800631f 	.word	0x0800631f
 80061d4:	08006179 	.word	0x08006179
 80061d8:	08006227 	.word	0x08006227
 80061dc:	08006179 	.word	0x08006179
 80061e0:	08006179 	.word	0x08006179
 80061e4:	080062bf 	.word	0x080062bf
 80061e8:	6833      	ldr	r3, [r6, #0]
 80061ea:	1d1a      	adds	r2, r3, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6032      	str	r2, [r6, #0]
 80061f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061f8:	2301      	movs	r3, #1
 80061fa:	e09d      	b.n	8006338 <_printf_i+0x1e8>
 80061fc:	6833      	ldr	r3, [r6, #0]
 80061fe:	6820      	ldr	r0, [r4, #0]
 8006200:	1d19      	adds	r1, r3, #4
 8006202:	6031      	str	r1, [r6, #0]
 8006204:	0606      	lsls	r6, r0, #24
 8006206:	d501      	bpl.n	800620c <_printf_i+0xbc>
 8006208:	681d      	ldr	r5, [r3, #0]
 800620a:	e003      	b.n	8006214 <_printf_i+0xc4>
 800620c:	0645      	lsls	r5, r0, #25
 800620e:	d5fb      	bpl.n	8006208 <_printf_i+0xb8>
 8006210:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006214:	2d00      	cmp	r5, #0
 8006216:	da03      	bge.n	8006220 <_printf_i+0xd0>
 8006218:	232d      	movs	r3, #45	@ 0x2d
 800621a:	426d      	negs	r5, r5
 800621c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006220:	4859      	ldr	r0, [pc, #356]	@ (8006388 <_printf_i+0x238>)
 8006222:	230a      	movs	r3, #10
 8006224:	e011      	b.n	800624a <_printf_i+0xfa>
 8006226:	6821      	ldr	r1, [r4, #0]
 8006228:	6833      	ldr	r3, [r6, #0]
 800622a:	0608      	lsls	r0, r1, #24
 800622c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006230:	d402      	bmi.n	8006238 <_printf_i+0xe8>
 8006232:	0649      	lsls	r1, r1, #25
 8006234:	bf48      	it	mi
 8006236:	b2ad      	uxthmi	r5, r5
 8006238:	2f6f      	cmp	r7, #111	@ 0x6f
 800623a:	4853      	ldr	r0, [pc, #332]	@ (8006388 <_printf_i+0x238>)
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	bf14      	ite	ne
 8006240:	230a      	movne	r3, #10
 8006242:	2308      	moveq	r3, #8
 8006244:	2100      	movs	r1, #0
 8006246:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800624a:	6866      	ldr	r6, [r4, #4]
 800624c:	60a6      	str	r6, [r4, #8]
 800624e:	2e00      	cmp	r6, #0
 8006250:	bfa2      	ittt	ge
 8006252:	6821      	ldrge	r1, [r4, #0]
 8006254:	f021 0104 	bicge.w	r1, r1, #4
 8006258:	6021      	strge	r1, [r4, #0]
 800625a:	b90d      	cbnz	r5, 8006260 <_printf_i+0x110>
 800625c:	2e00      	cmp	r6, #0
 800625e:	d04b      	beq.n	80062f8 <_printf_i+0x1a8>
 8006260:	4616      	mov	r6, r2
 8006262:	fbb5 f1f3 	udiv	r1, r5, r3
 8006266:	fb03 5711 	mls	r7, r3, r1, r5
 800626a:	5dc7      	ldrb	r7, [r0, r7]
 800626c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006270:	462f      	mov	r7, r5
 8006272:	42bb      	cmp	r3, r7
 8006274:	460d      	mov	r5, r1
 8006276:	d9f4      	bls.n	8006262 <_printf_i+0x112>
 8006278:	2b08      	cmp	r3, #8
 800627a:	d10b      	bne.n	8006294 <_printf_i+0x144>
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	07df      	lsls	r7, r3, #31
 8006280:	d508      	bpl.n	8006294 <_printf_i+0x144>
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	6861      	ldr	r1, [r4, #4]
 8006286:	4299      	cmp	r1, r3
 8006288:	bfde      	ittt	le
 800628a:	2330      	movle	r3, #48	@ 0x30
 800628c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006290:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006294:	1b92      	subs	r2, r2, r6
 8006296:	6122      	str	r2, [r4, #16]
 8006298:	f8cd a000 	str.w	sl, [sp]
 800629c:	464b      	mov	r3, r9
 800629e:	aa03      	add	r2, sp, #12
 80062a0:	4621      	mov	r1, r4
 80062a2:	4640      	mov	r0, r8
 80062a4:	f7ff fee6 	bl	8006074 <_printf_common>
 80062a8:	3001      	adds	r0, #1
 80062aa:	d14a      	bne.n	8006342 <_printf_i+0x1f2>
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295
 80062b0:	b004      	add	sp, #16
 80062b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	f043 0320 	orr.w	r3, r3, #32
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	4833      	ldr	r0, [pc, #204]	@ (800638c <_printf_i+0x23c>)
 80062c0:	2778      	movs	r7, #120	@ 0x78
 80062c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	6831      	ldr	r1, [r6, #0]
 80062ca:	061f      	lsls	r7, r3, #24
 80062cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80062d0:	d402      	bmi.n	80062d8 <_printf_i+0x188>
 80062d2:	065f      	lsls	r7, r3, #25
 80062d4:	bf48      	it	mi
 80062d6:	b2ad      	uxthmi	r5, r5
 80062d8:	6031      	str	r1, [r6, #0]
 80062da:	07d9      	lsls	r1, r3, #31
 80062dc:	bf44      	itt	mi
 80062de:	f043 0320 	orrmi.w	r3, r3, #32
 80062e2:	6023      	strmi	r3, [r4, #0]
 80062e4:	b11d      	cbz	r5, 80062ee <_printf_i+0x19e>
 80062e6:	2310      	movs	r3, #16
 80062e8:	e7ac      	b.n	8006244 <_printf_i+0xf4>
 80062ea:	4827      	ldr	r0, [pc, #156]	@ (8006388 <_printf_i+0x238>)
 80062ec:	e7e9      	b.n	80062c2 <_printf_i+0x172>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	f023 0320 	bic.w	r3, r3, #32
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	e7f6      	b.n	80062e6 <_printf_i+0x196>
 80062f8:	4616      	mov	r6, r2
 80062fa:	e7bd      	b.n	8006278 <_printf_i+0x128>
 80062fc:	6833      	ldr	r3, [r6, #0]
 80062fe:	6825      	ldr	r5, [r4, #0]
 8006300:	6961      	ldr	r1, [r4, #20]
 8006302:	1d18      	adds	r0, r3, #4
 8006304:	6030      	str	r0, [r6, #0]
 8006306:	062e      	lsls	r6, r5, #24
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	d501      	bpl.n	8006310 <_printf_i+0x1c0>
 800630c:	6019      	str	r1, [r3, #0]
 800630e:	e002      	b.n	8006316 <_printf_i+0x1c6>
 8006310:	0668      	lsls	r0, r5, #25
 8006312:	d5fb      	bpl.n	800630c <_printf_i+0x1bc>
 8006314:	8019      	strh	r1, [r3, #0]
 8006316:	2300      	movs	r3, #0
 8006318:	6123      	str	r3, [r4, #16]
 800631a:	4616      	mov	r6, r2
 800631c:	e7bc      	b.n	8006298 <_printf_i+0x148>
 800631e:	6833      	ldr	r3, [r6, #0]
 8006320:	1d1a      	adds	r2, r3, #4
 8006322:	6032      	str	r2, [r6, #0]
 8006324:	681e      	ldr	r6, [r3, #0]
 8006326:	6862      	ldr	r2, [r4, #4]
 8006328:	2100      	movs	r1, #0
 800632a:	4630      	mov	r0, r6
 800632c:	f7f9 ff80 	bl	8000230 <memchr>
 8006330:	b108      	cbz	r0, 8006336 <_printf_i+0x1e6>
 8006332:	1b80      	subs	r0, r0, r6
 8006334:	6060      	str	r0, [r4, #4]
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	6123      	str	r3, [r4, #16]
 800633a:	2300      	movs	r3, #0
 800633c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006340:	e7aa      	b.n	8006298 <_printf_i+0x148>
 8006342:	6923      	ldr	r3, [r4, #16]
 8006344:	4632      	mov	r2, r6
 8006346:	4649      	mov	r1, r9
 8006348:	4640      	mov	r0, r8
 800634a:	47d0      	blx	sl
 800634c:	3001      	adds	r0, #1
 800634e:	d0ad      	beq.n	80062ac <_printf_i+0x15c>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	079b      	lsls	r3, r3, #30
 8006354:	d413      	bmi.n	800637e <_printf_i+0x22e>
 8006356:	68e0      	ldr	r0, [r4, #12]
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	4298      	cmp	r0, r3
 800635c:	bfb8      	it	lt
 800635e:	4618      	movlt	r0, r3
 8006360:	e7a6      	b.n	80062b0 <_printf_i+0x160>
 8006362:	2301      	movs	r3, #1
 8006364:	4632      	mov	r2, r6
 8006366:	4649      	mov	r1, r9
 8006368:	4640      	mov	r0, r8
 800636a:	47d0      	blx	sl
 800636c:	3001      	adds	r0, #1
 800636e:	d09d      	beq.n	80062ac <_printf_i+0x15c>
 8006370:	3501      	adds	r5, #1
 8006372:	68e3      	ldr	r3, [r4, #12]
 8006374:	9903      	ldr	r1, [sp, #12]
 8006376:	1a5b      	subs	r3, r3, r1
 8006378:	42ab      	cmp	r3, r5
 800637a:	dcf2      	bgt.n	8006362 <_printf_i+0x212>
 800637c:	e7eb      	b.n	8006356 <_printf_i+0x206>
 800637e:	2500      	movs	r5, #0
 8006380:	f104 0619 	add.w	r6, r4, #25
 8006384:	e7f5      	b.n	8006372 <_printf_i+0x222>
 8006386:	bf00      	nop
 8006388:	08006679 	.word	0x08006679
 800638c:	0800668a 	.word	0x0800668a

08006390 <memmove>:
 8006390:	4288      	cmp	r0, r1
 8006392:	b510      	push	{r4, lr}
 8006394:	eb01 0402 	add.w	r4, r1, r2
 8006398:	d902      	bls.n	80063a0 <memmove+0x10>
 800639a:	4284      	cmp	r4, r0
 800639c:	4623      	mov	r3, r4
 800639e:	d807      	bhi.n	80063b0 <memmove+0x20>
 80063a0:	1e43      	subs	r3, r0, #1
 80063a2:	42a1      	cmp	r1, r4
 80063a4:	d008      	beq.n	80063b8 <memmove+0x28>
 80063a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063ae:	e7f8      	b.n	80063a2 <memmove+0x12>
 80063b0:	4402      	add	r2, r0
 80063b2:	4601      	mov	r1, r0
 80063b4:	428a      	cmp	r2, r1
 80063b6:	d100      	bne.n	80063ba <memmove+0x2a>
 80063b8:	bd10      	pop	{r4, pc}
 80063ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063c2:	e7f7      	b.n	80063b4 <memmove+0x24>

080063c4 <_sbrk_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4d06      	ldr	r5, [pc, #24]	@ (80063e0 <_sbrk_r+0x1c>)
 80063c8:	2300      	movs	r3, #0
 80063ca:	4604      	mov	r4, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	602b      	str	r3, [r5, #0]
 80063d0:	f7fa fef4 	bl	80011bc <_sbrk>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_sbrk_r+0x1a>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	b103      	cbz	r3, 80063de <_sbrk_r+0x1a>
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	20000438 	.word	0x20000438

080063e4 <memcpy>:
 80063e4:	440a      	add	r2, r1
 80063e6:	4291      	cmp	r1, r2
 80063e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063ec:	d100      	bne.n	80063f0 <memcpy+0xc>
 80063ee:	4770      	bx	lr
 80063f0:	b510      	push	{r4, lr}
 80063f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063fa:	4291      	cmp	r1, r2
 80063fc:	d1f9      	bne.n	80063f2 <memcpy+0xe>
 80063fe:	bd10      	pop	{r4, pc}

08006400 <_realloc_r>:
 8006400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006404:	4680      	mov	r8, r0
 8006406:	4615      	mov	r5, r2
 8006408:	460c      	mov	r4, r1
 800640a:	b921      	cbnz	r1, 8006416 <_realloc_r+0x16>
 800640c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006410:	4611      	mov	r1, r2
 8006412:	f7ff bc4b 	b.w	8005cac <_malloc_r>
 8006416:	b92a      	cbnz	r2, 8006424 <_realloc_r+0x24>
 8006418:	f7ff fbdc 	bl	8005bd4 <_free_r>
 800641c:	2400      	movs	r4, #0
 800641e:	4620      	mov	r0, r4
 8006420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006424:	f000 f81a 	bl	800645c <_malloc_usable_size_r>
 8006428:	4285      	cmp	r5, r0
 800642a:	4606      	mov	r6, r0
 800642c:	d802      	bhi.n	8006434 <_realloc_r+0x34>
 800642e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006432:	d8f4      	bhi.n	800641e <_realloc_r+0x1e>
 8006434:	4629      	mov	r1, r5
 8006436:	4640      	mov	r0, r8
 8006438:	f7ff fc38 	bl	8005cac <_malloc_r>
 800643c:	4607      	mov	r7, r0
 800643e:	2800      	cmp	r0, #0
 8006440:	d0ec      	beq.n	800641c <_realloc_r+0x1c>
 8006442:	42b5      	cmp	r5, r6
 8006444:	462a      	mov	r2, r5
 8006446:	4621      	mov	r1, r4
 8006448:	bf28      	it	cs
 800644a:	4632      	movcs	r2, r6
 800644c:	f7ff ffca 	bl	80063e4 <memcpy>
 8006450:	4621      	mov	r1, r4
 8006452:	4640      	mov	r0, r8
 8006454:	f7ff fbbe 	bl	8005bd4 <_free_r>
 8006458:	463c      	mov	r4, r7
 800645a:	e7e0      	b.n	800641e <_realloc_r+0x1e>

0800645c <_malloc_usable_size_r>:
 800645c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006460:	1f18      	subs	r0, r3, #4
 8006462:	2b00      	cmp	r3, #0
 8006464:	bfbc      	itt	lt
 8006466:	580b      	ldrlt	r3, [r1, r0]
 8006468:	18c0      	addlt	r0, r0, r3
 800646a:	4770      	bx	lr

0800646c <_init>:
 800646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646e:	bf00      	nop
 8006470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006472:	bc08      	pop	{r3}
 8006474:	469e      	mov	lr, r3
 8006476:	4770      	bx	lr

08006478 <_fini>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	bf00      	nop
 800647c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647e:	bc08      	pop	{r3}
 8006480:	469e      	mov	lr, r3
 8006482:	4770      	bx	lr
