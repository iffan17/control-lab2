
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080061cc  080061cc  000071cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006278  08006278  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006278  08006278  00007278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006280  08006280  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006280  08006280  00007280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006284  08006284  00007284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006288  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000070  080062f8  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  080062f8  00008388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d769  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec9  00000000  00000000  00015809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  000176d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ef  00000000  00000000  00018130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e5c  00000000  00000000  0001891f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d31b  00000000  00000000  0003d77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e984f  00000000  00000000  0004aa96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001342e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e5c  00000000  00000000  00134328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00137184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080061b4 	.word	0x080061b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080061b4 	.word	0x080061b4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fc3f 	bl	8000e46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f818 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f8de 	bl	800078c <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 f8aa 	bl	8000728 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d4:	f000 f85e 	bl	8000694 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t text[] = "HELLO FIBO";
 // HAL_UART_Transmit(&hlpuart1,text, 11, 10); // มี 10 �?ต่ส่ง 11 ตัวเพราะลงท้ายด้วย backslash zero
  UARTDMAConfig();
 80005d8:	f000 fa4e 	bl	8000a78 <UARTDMAConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UARTPollingMethod();
 80005dc:	f000 f9de 	bl	800099c <UARTPollingMethod>
	  DummyTask();
 80005e0:	f000 fa32 	bl	8000a48 <DummyTask>
	  if(readFlag){
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <main+0x38>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0f7      	beq.n	80005dc <main+0x1c>
		  readFlag = 0;
 80005ec:	4b02      	ldr	r3, [pc, #8]	@ (80005f8 <main+0x38>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
		  Wordle();
 80005f2:	f000 f939 	bl	8000868 <Wordle>
	  UARTPollingMethod();
 80005f6:	e7f1      	b.n	80005dc <main+0x1c>
 80005f8:	20000231 	.word	0x20000231

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2238      	movs	r2, #56	@ 0x38
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f005 f952 	bl	80058b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800061e:	2000      	movs	r0, #0
 8000620:	f001 fa9c 	bl	8001b5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2340      	movs	r3, #64	@ 0x40
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800063a:	2304      	movs	r3, #4
 800063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800063e:	2355      	movs	r3, #85	@ 0x55
 8000640:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fb36 	bl	8001cc4 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800065e:	f000 fa45 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fe34 	bl	80022e8 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000686:	f000 fa31 	bl	8000aec <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	@ 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000698:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 800069a:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <MX_LPUART1_UART_Init+0x90>)
 800069c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800069e:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ca:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006d6:	4812      	ldr	r0, [pc, #72]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006d8:	f002 fa70 	bl	8002bbc <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006e2:	f000 fa03 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	480d      	ldr	r0, [pc, #52]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006ea:	f004 fff8 	bl	80056de <HAL_UARTEx_SetTxFifoThreshold>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006f4:	f000 f9fa 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4809      	ldr	r0, [pc, #36]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006fc:	f005 f82d 	bl	800575a <HAL_UARTEx_SetRxFifoThreshold>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000706:	f000 f9f1 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 800070c:	f004 ffae 	bl	800566c <HAL_UARTEx_DisableFifoMode>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000716:	f000 f9e9 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000008c 	.word	0x2000008c
 8000724:	40008000 	.word	0x40008000

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800072e:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_DMA_Init+0x60>)
 8000730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000732:	4a15      	ldr	r2, [pc, #84]	@ (8000788 <MX_DMA_Init+0x60>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6493      	str	r3, [r2, #72]	@ 0x48
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_DMA_Init+0x60>)
 800073c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <MX_DMA_Init+0x60>)
 8000748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800074a:	4a0f      	ldr	r2, [pc, #60]	@ (8000788 <MX_DMA_Init+0x60>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6493      	str	r3, [r2, #72]	@ 0x48
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <MX_DMA_Init+0x60>)
 8000754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	200b      	movs	r0, #11
 8000764:	f000 fcbb 	bl	80010de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000768:	200b      	movs	r0, #11
 800076a:	f000 fcd2 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	200c      	movs	r0, #12
 8000774:	f000 fcb3 	bl	80010de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000778:	200c      	movs	r0, #12
 800077a:	f000 fcca 	bl	8001112 <HAL_NVIC_EnableIRQ>

}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <MX_GPIO_Init+0xd4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000860 <MX_GPIO_Init+0xd4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000860 <MX_GPIO_Init+0xd4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ba:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <MX_GPIO_Init+0xd4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a28      	ldr	r2, [pc, #160]	@ (8000860 <MX_GPIO_Init+0xd4>)
 80007c0:	f043 0320 	orr.w	r3, r3, #32
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b26      	ldr	r3, [pc, #152]	@ (8000860 <MX_GPIO_Init+0xd4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0320 	and.w	r3, r3, #32
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <MX_GPIO_Init+0xd4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a22      	ldr	r2, [pc, #136]	@ (8000860 <MX_GPIO_Init+0xd4>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <MX_GPIO_Init+0xd4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <MX_GPIO_Init+0xd4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000860 <MX_GPIO_Init+0xd4>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_GPIO_Init+0xd4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080a:	f001 f951 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000814:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	480f      	ldr	r0, [pc, #60]	@ (8000864 <MX_GPIO_Init+0xd8>)
 8000826:	f000 ffc1 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082a:	2320      	movs	r3, #32
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000844:	f000 ffb2 	bl	80017ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2028      	movs	r0, #40	@ 0x28
 800084e:	f000 fc46 	bl	80010de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000852:	2028      	movs	r0, #40	@ 0x28
 8000854:	f000 fc5d 	bl	8001112 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	@ 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000800 	.word	0x48000800

08000868 <Wordle>:

/* USER CODE BEGIN 4 */
void Wordle()
	{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
		//readFlag = 0;
	for(uint8_t i = 0;i <5;i++)
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e065      	b.n	8000940 <Wordle+0xd8>
	{
		output[5] = '\0';
 8000874:	4b41      	ldr	r3, [pc, #260]	@ (800097c <Wordle+0x114>)
 8000876:	2200      	movs	r2, #0
 8000878:	715a      	strb	r2, [r3, #5]
		if(RxBuffer[i] == '-')
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4a40      	ldr	r2, [pc, #256]	@ (8000980 <Wordle+0x118>)
 800087e:	5cd3      	ldrb	r3, [r2, r3]
 8000880:	2b2d      	cmp	r3, #45	@ 0x2d
 8000882:	d11e      	bne.n	80008c2 <Wordle+0x5a>
		{
			output[0] = 'R';
 8000884:	4b3d      	ldr	r3, [pc, #244]	@ (800097c <Wordle+0x114>)
 8000886:	2252      	movs	r2, #82	@ 0x52
 8000888:	701a      	strb	r2, [r3, #0]
			output[1] = 'E';
 800088a:	4b3c      	ldr	r3, [pc, #240]	@ (800097c <Wordle+0x114>)
 800088c:	2245      	movs	r2, #69	@ 0x45
 800088e:	705a      	strb	r2, [r3, #1]
			output[2] = 'T';
 8000890:	4b3a      	ldr	r3, [pc, #232]	@ (800097c <Wordle+0x114>)
 8000892:	2254      	movs	r2, #84	@ 0x54
 8000894:	709a      	strb	r2, [r3, #2]
			output[3] = 'R';
 8000896:	4b39      	ldr	r3, [pc, #228]	@ (800097c <Wordle+0x114>)
 8000898:	2252      	movs	r2, #82	@ 0x52
 800089a:	70da      	strb	r2, [r3, #3]
			output[4] = 'Y';
 800089c:	4b37      	ldr	r3, [pc, #220]	@ (800097c <Wordle+0x114>)
 800089e:	2259      	movs	r2, #89	@ 0x59
 80008a0:	711a      	strb	r2, [r3, #4]
			sprintf((char*)TxBuffer,"Received : %s\r\n",output);
 80008a2:	4a36      	ldr	r2, [pc, #216]	@ (800097c <Wordle+0x114>)
 80008a4:	4937      	ldr	r1, [pc, #220]	@ (8000984 <Wordle+0x11c>)
 80008a6:	4838      	ldr	r0, [pc, #224]	@ (8000988 <Wordle+0x120>)
 80008a8:	f004 ffe4 	bl	8005874 <siprintf>
			HAL_UART_Transmit(&hlpuart1, output, strlen((char*)output) , 5); // uart1, text , size , timeout
 80008ac:	4833      	ldr	r0, [pc, #204]	@ (800097c <Wordle+0x114>)
 80008ae:	f7ff fcb7 	bl	8000220 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	2305      	movs	r3, #5
 80008b8:	4930      	ldr	r1, [pc, #192]	@ (800097c <Wordle+0x114>)
 80008ba:	4834      	ldr	r0, [pc, #208]	@ (800098c <Wordle+0x124>)
 80008bc:	f002 f9ce 	bl	8002c5c <HAL_UART_Transmit>
			break;
 80008c0:	e041      	b.n	8000946 <Wordle+0xde>
		}
		else if(RxBuffer[i] == wordle[i]){
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000980 <Wordle+0x118>)
 80008c6:	5cd2      	ldrb	r2, [r2, r3]
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4931      	ldr	r1, [pc, #196]	@ (8000990 <Wordle+0x128>)
 80008cc:	5ccb      	ldrb	r3, [r1, r3]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d10c      	bne.n	80008ec <Wordle+0x84>
			output[i] = RxBuffer[i];
 80008d2:	79fa      	ldrb	r2, [r7, #7]
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	492a      	ldr	r1, [pc, #168]	@ (8000980 <Wordle+0x118>)
 80008d8:	5c89      	ldrb	r1, [r1, r2]
 80008da:	4a28      	ldr	r2, [pc, #160]	@ (800097c <Wordle+0x114>)
 80008dc:	54d1      	strb	r1, [r2, r3]
			point++;
 80008de:	4b2d      	ldr	r3, [pc, #180]	@ (8000994 <Wordle+0x12c>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000994 <Wordle+0x12c>)
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	e015      	b.n	8000918 <Wordle+0xb0>

		}
		else {
			for(uint8_t j=0; j<5;j++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	71bb      	strb	r3, [r7, #6]
 80008f0:	e00f      	b.n	8000912 <Wordle+0xaa>
			{
				if(RxBuffer[i] == wordle[j])
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <Wordle+0x118>)
 80008f6:	5cd2      	ldrb	r2, [r2, r3]
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	4925      	ldr	r1, [pc, #148]	@ (8000990 <Wordle+0x128>)
 80008fc:	5ccb      	ldrb	r3, [r1, r3]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d104      	bne.n	800090c <Wordle+0xa4>
				{
					output[i] = '?';
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	4a1d      	ldr	r2, [pc, #116]	@ (800097c <Wordle+0x114>)
 8000906:	213f      	movs	r1, #63	@ 0x3f
 8000908:	54d1      	strb	r1, [r2, r3]
					break;
 800090a:	e005      	b.n	8000918 <Wordle+0xb0>
			for(uint8_t j=0; j<5;j++)
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	3301      	adds	r3, #1
 8000910:	71bb      	strb	r3, [r7, #6]
 8000912:	79bb      	ldrb	r3, [r7, #6]
 8000914:	2b04      	cmp	r3, #4
 8000916:	d9ec      	bls.n	80008f2 <Wordle+0x8a>
				}
			}
		}
		if(output[i] != '?' && output[i] != RxBuffer[i])
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a18      	ldr	r2, [pc, #96]	@ (800097c <Wordle+0x114>)
 800091c:	5cd3      	ldrb	r3, [r2, r3]
 800091e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000920:	d00b      	beq.n	800093a <Wordle+0xd2>
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	4a15      	ldr	r2, [pc, #84]	@ (800097c <Wordle+0x114>)
 8000926:	5cd2      	ldrb	r2, [r2, r3]
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4915      	ldr	r1, [pc, #84]	@ (8000980 <Wordle+0x118>)
 800092c:	5ccb      	ldrb	r3, [r1, r3]
 800092e:	429a      	cmp	r2, r3
 8000930:	d003      	beq.n	800093a <Wordle+0xd2>
		{
			output[i] = '_';
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	4a11      	ldr	r2, [pc, #68]	@ (800097c <Wordle+0x114>)
 8000936:	215f      	movs	r1, #95	@ 0x5f
 8000938:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0;i <5;i++)
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	3301      	adds	r3, #1
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b04      	cmp	r3, #4
 8000944:	d996      	bls.n	8000874 <Wordle+0xc>
		}
	}
	if(point == 5){
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <Wordle+0x12c>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b05      	cmp	r3, #5
 800094c:	d10e      	bne.n	800096c <Wordle+0x104>
		sprintf((char*)TxBuffer,"Congratulations");
 800094e:	4912      	ldr	r1, [pc, #72]	@ (8000998 <Wordle+0x130>)
 8000950:	480d      	ldr	r0, [pc, #52]	@ (8000988 <Wordle+0x120>)
 8000952:	f004 ff8f 	bl	8005874 <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000956:	480c      	ldr	r0, [pc, #48]	@ (8000988 <Wordle+0x120>)
 8000958:	f7ff fc62 	bl	8000220 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	b29a      	uxth	r2, r3
 8000960:	2305      	movs	r3, #5
 8000962:	4909      	ldr	r1, [pc, #36]	@ (8000988 <Wordle+0x120>)
 8000964:	4809      	ldr	r0, [pc, #36]	@ (800098c <Wordle+0x124>)
 8000966:	f002 f979 	bl	8002c5c <HAL_UART_Transmit>
	}
	else{
		point = 0;
	}
}
 800096a:	e002      	b.n	8000972 <Wordle+0x10a>
		point = 0;
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <Wordle+0x12c>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000021c 	.word	0x2000021c
 8000980:	200001e0 	.word	0x200001e0
 8000984:	080061cc 	.word	0x080061cc
 8000988:	200001f4 	.word	0x200001f4
 800098c:	2000008c 	.word	0x2000008c
 8000990:	20000000 	.word	0x20000000
 8000994:	20000230 	.word	0x20000230
 8000998:	080061dc 	.word	0x080061dc

0800099c <UARTPollingMethod>:

void UARTPollingMethod()
	{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	//read UART 10 char with in 10s
	HAL_StatusTypeDef HAL_status = HAL_UART_Receive(&hlpuart1, RxBuffer, 5, 10000);
 80009a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80009a6:	2205      	movs	r2, #5
 80009a8:	4921      	ldr	r1, [pc, #132]	@ (8000a30 <UARTPollingMethod+0x94>)
 80009aa:	4822      	ldr	r0, [pc, #136]	@ (8000a34 <UARTPollingMethod+0x98>)
 80009ac:	f002 f9e4 	bl	8002d78 <HAL_UART_Receive>
 80009b0:	4603      	mov	r3, r0
 80009b2:	71fb      	strb	r3, [r7, #7]

	//if complete read 10 char
	if(HAL_status == HAL_OK)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d115      	bne.n	80009e6 <UARTPollingMethod+0x4a>
	{
		readFlag = 1;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <UARTPollingMethod+0x9c>)
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
		RxBuffer[5] = '\0';
 80009c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <UARTPollingMethod+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	715a      	strb	r2, [r3, #5]

		sprintf((char*)TxBuffer,"Received : %s\r\n",RxBuffer);
 80009c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000a30 <UARTPollingMethod+0x94>)
 80009c8:	491c      	ldr	r1, [pc, #112]	@ (8000a3c <UARTPollingMethod+0xa0>)
 80009ca:	481d      	ldr	r0, [pc, #116]	@ (8000a40 <UARTPollingMethod+0xa4>)
 80009cc:	f004 ff52 	bl	8005874 <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 80009d0:	481b      	ldr	r0, [pc, #108]	@ (8000a40 <UARTPollingMethod+0xa4>)
 80009d2:	f7ff fc25 	bl	8000220 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	2305      	movs	r3, #5
 80009dc:	4918      	ldr	r1, [pc, #96]	@ (8000a40 <UARTPollingMethod+0xa4>)
 80009de:	4815      	ldr	r0, [pc, #84]	@ (8000a34 <UARTPollingMethod+0x98>)
 80009e0:	f002 f93c 	bl	8002c5c <HAL_UART_Transmit>
		//return received char
		sprintf((char*)TxBuffer,"Received Timeout : %s\r\n",RxBuffer);
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);

	}
}
 80009e4:	e020      	b.n	8000a28 <UARTPollingMethod+0x8c>
	else if(HAL_status == HAL_TIMEOUT)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d11d      	bne.n	8000a28 <UARTPollingMethod+0x8c>
		uint32_t lastCharPos = hlpuart1.RxXferSize - hlpuart1.RxXferCount;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <UARTPollingMethod+0x98>)
 80009ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <UARTPollingMethod+0x98>)
 80009f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	603b      	str	r3, [r7, #0]
		RxBuffer[lastCharPos] = '\0';
 8000a00:	4a0b      	ldr	r2, [pc, #44]	@ (8000a30 <UARTPollingMethod+0x94>)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	4413      	add	r3, r2
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
		sprintf((char*)TxBuffer,"Received Timeout : %s\r\n",RxBuffer);
 8000a0a:	4a09      	ldr	r2, [pc, #36]	@ (8000a30 <UARTPollingMethod+0x94>)
 8000a0c:	490d      	ldr	r1, [pc, #52]	@ (8000a44 <UARTPollingMethod+0xa8>)
 8000a0e:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <UARTPollingMethod+0xa4>)
 8000a10:	f004 ff30 	bl	8005874 <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000a14:	480a      	ldr	r0, [pc, #40]	@ (8000a40 <UARTPollingMethod+0xa4>)
 8000a16:	f7ff fc03 	bl	8000220 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	2305      	movs	r3, #5
 8000a20:	4907      	ldr	r1, [pc, #28]	@ (8000a40 <UARTPollingMethod+0xa4>)
 8000a22:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <UARTPollingMethod+0x98>)
 8000a24:	f002 f91a 	bl	8002c5c <HAL_UART_Transmit>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200001e0 	.word	0x200001e0
 8000a34:	2000008c 	.word	0x2000008c
 8000a38:	20000231 	.word	0x20000231
 8000a3c:	080061cc 	.word	0x080061cc
 8000a40:	200001f4 	.word	0x200001f4
 8000a44:	080061ec 	.word	0x080061ec

08000a48 <DummyTask>:
//Blink LED 5 Hz
void DummyTask()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	static uint32_t timestamp=0;
	if(HAL_GetTick()>= timestamp)
 8000a4c:	f000 fa60 	bl	8000f10 <HAL_GetTick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <DummyTask+0x2c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d30a      	bcc.n	8000a70 <DummyTask+0x28>
	{
		timestamp = HAL_GetTick()+100;
 8000a5a:	f000 fa59 	bl	8000f10 <HAL_GetTick>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	3364      	adds	r3, #100	@ 0x64
 8000a62:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <DummyTask+0x2c>)
 8000a64:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a66:	2120      	movs	r1, #32
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6c:	f001 f838 	bl	8001ae0 <HAL_GPIO_TogglePin>
	}
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000234 	.word	0x20000234

08000a78 <UARTDMAConfig>:
void UARTInterruptConfig()
{
	//HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
}
void UARTDMAConfig()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 10);
 8000a7c:	220a      	movs	r2, #10
 8000a7e:	4903      	ldr	r1, [pc, #12]	@ (8000a8c <UARTDMAConfig+0x14>)
 8000a80:	4803      	ldr	r0, [pc, #12]	@ (8000a90 <UARTDMAConfig+0x18>)
 8000a82:	f002 fb21 	bl	80030c8 <HAL_UART_Receive_DMA>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200001e0 	.word	0x200001e0
 8000a90:	2000008c 	.word	0x2000008c

08000a94 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if(hlpuart == &hlpuart1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000adc <HAL_UART_RxCpltCallback+0x48>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d116      	bne.n	8000ad2 <HAL_UART_RxCpltCallback+0x3e>
	{
		RxBuffer[10] = '\0';
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	729a      	strb	r2, [r3, #10]

		sprintf((char*)TxBuffer,"Received : %s\r\n",RxBuffer);
 8000aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x4c>)
 8000aac:	490d      	ldr	r1, [pc, #52]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x50>)
 8000aae:	480e      	ldr	r0, [pc, #56]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x54>)
 8000ab0:	f004 fee0 	bl	8005874 <siprintf>
		HAL_UART_Transmit_IT(&hlpuart1, TxBuffer, strlen((char*)TxBuffer));
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x54>)
 8000ab6:	f7ff fbb3 	bl	8000220 <strlen>
 8000aba:	4603      	mov	r3, r0
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4909      	ldr	r1, [pc, #36]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x54>)
 8000ac2:	4806      	ldr	r0, [pc, #24]	@ (8000adc <HAL_UART_RxCpltCallback+0x48>)
 8000ac4:	f002 fa20 	bl	8002f08 <HAL_UART_Transmit_IT>

		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
 8000ac8:	220a      	movs	r2, #10
 8000aca:	4905      	ldr	r1, [pc, #20]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x4c>)
 8000acc:	4803      	ldr	r0, [pc, #12]	@ (8000adc <HAL_UART_RxCpltCallback+0x48>)
 8000ace:	f002 faaf 	bl	8003030 <HAL_UART_Receive_IT>
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000008c 	.word	0x2000008c
 8000ae0:	200001e0 	.word	0x200001e0
 8000ae4:	080061cc 	.word	0x080061cc
 8000ae8:	200001f4 	.word	0x200001f4

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b02:	4a0e      	ldr	r2, [pc, #56]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b2e:	f001 f8b9 	bl	8001ca4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09e      	sub	sp, #120	@ 0x78
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	2254      	movs	r2, #84	@ 0x54
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f004 fea7 	bl	80058b4 <memset>
  if(huart->Instance==LPUART1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a4d      	ldr	r2, [pc, #308]	@ (8000ca0 <HAL_UART_MspInit+0x160>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	f040 8092 	bne.w	8000c96 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b72:	2320      	movs	r3, #32
 8000b74:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 fdce 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b8a:	f7ff ffaf 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b8e:	4b45      	ldr	r3, [pc, #276]	@ (8000ca4 <HAL_UART_MspInit+0x164>)
 8000b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b92:	4a44      	ldr	r2, [pc, #272]	@ (8000ca4 <HAL_UART_MspInit+0x164>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b9a:	4b42      	ldr	r3, [pc, #264]	@ (8000ca4 <HAL_UART_MspInit+0x164>)
 8000b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ca4 <HAL_UART_MspInit+0x164>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	4a3e      	ldr	r2, [pc, #248]	@ (8000ca4 <HAL_UART_MspInit+0x164>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ca4 <HAL_UART_MspInit+0x164>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bce:	230c      	movs	r3, #12
 8000bd0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bdc:	f000 fde6 	bl	80017ac <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000be0:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <HAL_UART_MspInit+0x168>)
 8000be2:	4a32      	ldr	r2, [pc, #200]	@ (8000cac <HAL_UART_MspInit+0x16c>)
 8000be4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000be6:	4b30      	ldr	r3, [pc, #192]	@ (8000ca8 <HAL_UART_MspInit+0x168>)
 8000be8:	2222      	movs	r2, #34	@ 0x22
 8000bea:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <HAL_UART_MspInit+0x168>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <HAL_UART_MspInit+0x168>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca8 <HAL_UART_MspInit+0x168>)
 8000bfa:	2280      	movs	r2, #128	@ 0x80
 8000bfc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca8 <HAL_UART_MspInit+0x168>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c04:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <HAL_UART_MspInit+0x168>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <HAL_UART_MspInit+0x168>)
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c10:	4b25      	ldr	r3, [pc, #148]	@ (8000ca8 <HAL_UART_MspInit+0x168>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000c16:	4824      	ldr	r0, [pc, #144]	@ (8000ca8 <HAL_UART_MspInit+0x168>)
 8000c18:	f000 fa96 	bl	8001148 <HAL_DMA_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000c22:	f7ff ff63 	bl	8000aec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a1f      	ldr	r2, [pc, #124]	@ (8000ca8 <HAL_UART_MspInit+0x168>)
 8000c2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ca8 <HAL_UART_MspInit+0x168>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <HAL_UART_MspInit+0x170>)
 8000c36:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb4 <HAL_UART_MspInit+0x174>)
 8000c38:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <HAL_UART_MspInit+0x170>)
 8000c3c:	2223      	movs	r2, #35	@ 0x23
 8000c3e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <HAL_UART_MspInit+0x170>)
 8000c42:	2210      	movs	r2, #16
 8000c44:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <HAL_UART_MspInit+0x170>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <HAL_UART_MspInit+0x170>)
 8000c4e:	2280      	movs	r2, #128	@ 0x80
 8000c50:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <HAL_UART_MspInit+0x170>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <HAL_UART_MspInit+0x170>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <HAL_UART_MspInit+0x170>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <HAL_UART_MspInit+0x170>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000c6a:	4811      	ldr	r0, [pc, #68]	@ (8000cb0 <HAL_UART_MspInit+0x170>)
 8000c6c:	f000 fa6c 	bl	8001148 <HAL_DMA_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000c76:	f7ff ff39 	bl	8000aec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb0 <HAL_UART_MspInit+0x170>)
 8000c7e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000c80:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb0 <HAL_UART_MspInit+0x170>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	205b      	movs	r0, #91	@ 0x5b
 8000c8c:	f000 fa27 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000c90:	205b      	movs	r0, #91	@ 0x5b
 8000c92:	f000 fa3e 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3778      	adds	r7, #120	@ 0x78
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40008000 	.word	0x40008000
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	20000120 	.word	0x20000120
 8000cac:	40020008 	.word	0x40020008
 8000cb0:	20000180 	.word	0x20000180
 8000cb4:	4002001c 	.word	0x4002001c

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <NMI_Handler+0x4>

08000cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <MemManage_Handler+0x4>

08000cd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <UsageFault_Handler+0x4>

08000ce0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0e:	f000 f8ed 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000d1c:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <DMA1_Channel1_IRQHandler+0x10>)
 8000d1e:	f000 fbf6 	bl	800150e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000120 	.word	0x20000120

08000d2c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000d30:	4802      	ldr	r0, [pc, #8]	@ (8000d3c <DMA1_Channel2_IRQHandler+0x10>)
 8000d32:	f000 fbec 	bl	800150e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000180 	.word	0x20000180

08000d40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d44:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d48:	f000 fee4 	bl	8001b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <LPUART1_IRQHandler+0x10>)
 8000d56:	f002 fa03 	bl	8003160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000008c 	.word	0x2000008c

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	@ (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f004 fd96 	bl	80058c4 <__errno>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20020000 	.word	0x20020000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	20000238 	.word	0x20000238
 8000dcc:	20000388 	.word	0x20000388

08000dd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df4:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df8:	f7ff ffea 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	@ (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	@ (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e22:	f004 fd55 	bl	80058d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e26:	f7ff fbcb 	bl	80005c0 <main>

08000e2a <LoopForever>:

LoopForever:
    b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   r0, =_estack
 8000e2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e38:	08006288 	.word	0x08006288
  ldr r2, =_sbss
 8000e3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e40:	20000388 	.word	0x20000388

08000e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>

08000e46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 f939 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f80e 	bl	8000e78 <HAL_InitTick>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	e001      	b.n	8000e6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e68:	f7ff fe46 	bl	8000af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]

}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e84:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <HAL_InitTick+0x68>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d022      	beq.n	8000ed2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_InitTick+0x6c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <HAL_InitTick+0x68>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f944 	bl	800112e <HAL_SYSTICK_Config>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10f      	bne.n	8000ecc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	d809      	bhi.n	8000ec6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eba:	f000 f910 	bl	80010de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_InitTick+0x70>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	e007      	b.n	8000ed6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e004      	b.n	8000ed6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e001      	b.n	8000ed6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000001c 	.word	0x2000001c
 8000ee4:	20000014 	.word	0x20000014
 8000ee8:	20000018 	.word	0x20000018

08000eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <HAL_IncTick+0x1c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <HAL_IncTick+0x20>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a03      	ldr	r2, [pc, #12]	@ (8000f08 <HAL_IncTick+0x1c>)
 8000efc:	6013      	str	r3, [r2, #0]
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	2000023c 	.word	0x2000023c
 8000f0c:	2000001c 	.word	0x2000001c

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	2000023c 	.word	0x2000023c

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	@ (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	@ (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	@ (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	@ 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	@ 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff29 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff40 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff90 	bl	800101c <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5f 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff33 	bl	8000f8c <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffa4 	bl	8001084 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e08d      	b.n	8001276 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	4b47      	ldr	r3, [pc, #284]	@ (8001280 <HAL_DMA_Init+0x138>)
 8001162:	429a      	cmp	r2, r3
 8001164:	d80f      	bhi.n	8001186 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	4b45      	ldr	r3, [pc, #276]	@ (8001284 <HAL_DMA_Init+0x13c>)
 800116e:	4413      	add	r3, r2
 8001170:	4a45      	ldr	r2, [pc, #276]	@ (8001288 <HAL_DMA_Init+0x140>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	009a      	lsls	r2, r3, #2
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a42      	ldr	r2, [pc, #264]	@ (800128c <HAL_DMA_Init+0x144>)
 8001182:	641a      	str	r2, [r3, #64]	@ 0x40
 8001184:	e00e      	b.n	80011a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	4b40      	ldr	r3, [pc, #256]	@ (8001290 <HAL_DMA_Init+0x148>)
 800118e:	4413      	add	r3, r2
 8001190:	4a3d      	ldr	r2, [pc, #244]	@ (8001288 <HAL_DMA_Init+0x140>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	009a      	lsls	r2, r3, #2
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a3c      	ldr	r2, [pc, #240]	@ (8001294 <HAL_DMA_Init+0x14c>)
 80011a2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2202      	movs	r2, #2
 80011a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80011ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80011be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fa76 	bl	80016e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001204:	d102      	bne.n	800120c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001220:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d010      	beq.n	800124c <HAL_DMA_Init+0x104>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b04      	cmp	r3, #4
 8001230:	d80c      	bhi.n	800124c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 fa96 	bl	8001764 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	e008      	b.n	800125e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40020407 	.word	0x40020407
 8001284:	bffdfff8 	.word	0xbffdfff8
 8001288:	cccccccd 	.word	0xcccccccd
 800128c:	40020000 	.word	0x40020000
 8001290:	bffdfbf8 	.word	0xbffdfbf8
 8001294:	40020400 	.word	0x40020400

08001298 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <HAL_DMA_Start_IT+0x20>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e066      	b.n	8001386 <HAL_DMA_Start_IT+0xee>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d155      	bne.n	8001378 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2202      	movs	r2, #2
 80012d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0201 	bic.w	r2, r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 f9bb 	bl	800166c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d008      	beq.n	8001310 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 020e 	orr.w	r2, r2, #14
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e00f      	b.n	8001330 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0204 	bic.w	r2, r2, #4
 800131e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 020a 	orr.w	r2, r2, #10
 800132e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001348:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800134c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001360:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001364:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0201 	orr.w	r2, r2, #1
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e005      	b.n	8001384 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001380:	2302      	movs	r3, #2
 8001382:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001384:	7dfb      	ldrb	r3, [r7, #23]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d005      	beq.n	80013b2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2204      	movs	r2, #4
 80013aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e037      	b.n	8001422 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 020e 	bic.w	r2, r2, #14
 80013c0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013d0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f003 021f 	and.w	r2, r3, #31
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa01 f202 	lsl.w	r2, r1, r2
 80013f4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80013fe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00c      	beq.n	8001422 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001412:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001416:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001420:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d00d      	beq.n	8001474 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2204      	movs	r2, #4
 800145c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e047      	b.n	8001504 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 020e 	bic.w	r2, r2, #14
 8001482:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0201 	bic.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f202 	lsl.w	r2, r1, r2
 80014b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00c      	beq.n	80014e4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
    }
  }
  return status;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	2204      	movs	r2, #4
 8001530:	409a      	lsls	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d026      	beq.n	8001588 <HAL_DMA_IRQHandler+0x7a>
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d021      	beq.n	8001588 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0320 	and.w	r3, r3, #32
 800154e:	2b00      	cmp	r3, #0
 8001550:	d107      	bne.n	8001562 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0204 	bic.w	r2, r2, #4
 8001560:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	f003 021f 	and.w	r2, r3, #31
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	2104      	movs	r1, #4
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	2b00      	cmp	r3, #0
 800157c:	d071      	beq.n	8001662 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001586:	e06c      	b.n	8001662 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	2202      	movs	r2, #2
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d02e      	beq.n	80015fa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d029      	beq.n	80015fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0320 	and.w	r3, r3, #32
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10b      	bne.n	80015cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 020a 	bic.w	r2, r2, #10
 80015c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	2102      	movs	r1, #2
 80015da:	fa01 f202 	lsl.w	r2, r1, r2
 80015de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d038      	beq.n	8001662 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80015f8:	e033      	b.n	8001662 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	2208      	movs	r2, #8
 8001604:	409a      	lsls	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d02a      	beq.n	8001664 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d025      	beq.n	8001664 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 020e 	bic.w	r2, r2, #14
 8001626:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	2101      	movs	r1, #1
 8001636:	fa01 f202 	lsl.w	r2, r1, r2
 800163a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001656:	2b00      	cmp	r3, #0
 8001658:	d004      	beq.n	8001664 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001662:	bf00      	nop
 8001664:	bf00      	nop
}
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001682:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001694:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f003 021f 	and.w	r2, r3, #31
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d108      	bne.n	80016cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016ca:	e007      	b.n	80016dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	60da      	str	r2, [r3, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d802      	bhi.n	8001702 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e001      	b.n	8001706 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001704:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	3b08      	subs	r3, #8
 8001712:	4a12      	ldr	r2, [pc, #72]	@ (800175c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	009a      	lsls	r2, r3, #2
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4413      	add	r3, r2
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001732:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	2201      	movs	r2, #1
 800173c:	409a      	lsls	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40020407 	.word	0x40020407
 8001754:	40020800 	.word	0x40020800
 8001758:	40020820 	.word	0x40020820
 800175c:	cccccccd 	.word	0xcccccccd
 8001760:	40020880 	.word	0x40020880

08001764 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	461a      	mov	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a08      	ldr	r2, [pc, #32]	@ (80017a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001786:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3b01      	subs	r3, #1
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	2201      	movs	r2, #1
 8001792:	409a      	lsls	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	1000823f 	.word	0x1000823f
 80017a8:	40020940 	.word	0x40020940

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017ba:	e15a      	b.n	8001a72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2101      	movs	r1, #1
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	4013      	ands	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 814c 	beq.w	8001a6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d005      	beq.n	80017ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d130      	bne.n	800184e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001822:	2201      	movs	r2, #1
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	f003 0201 	and.w	r2, r3, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b03      	cmp	r3, #3
 8001858:	d017      	beq.n	800188a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d123      	bne.n	80018de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	220f      	movs	r2, #15
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	691a      	ldr	r2, [r3, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	6939      	ldr	r1, [r7, #16]
 80018da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0203 	and.w	r2, r3, #3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80a6 	beq.w	8001a6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001920:	4b5b      	ldr	r3, [pc, #364]	@ (8001a90 <HAL_GPIO_Init+0x2e4>)
 8001922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001924:	4a5a      	ldr	r2, [pc, #360]	@ (8001a90 <HAL_GPIO_Init+0x2e4>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6613      	str	r3, [r2, #96]	@ 0x60
 800192c:	4b58      	ldr	r3, [pc, #352]	@ (8001a90 <HAL_GPIO_Init+0x2e4>)
 800192e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001938:	4a56      	ldr	r2, [pc, #344]	@ (8001a94 <HAL_GPIO_Init+0x2e8>)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001962:	d01f      	beq.n	80019a4 <HAL_GPIO_Init+0x1f8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a4c      	ldr	r2, [pc, #304]	@ (8001a98 <HAL_GPIO_Init+0x2ec>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d019      	beq.n	80019a0 <HAL_GPIO_Init+0x1f4>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a4b      	ldr	r2, [pc, #300]	@ (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d013      	beq.n	800199c <HAL_GPIO_Init+0x1f0>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a4a      	ldr	r2, [pc, #296]	@ (8001aa0 <HAL_GPIO_Init+0x2f4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d00d      	beq.n	8001998 <HAL_GPIO_Init+0x1ec>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a49      	ldr	r2, [pc, #292]	@ (8001aa4 <HAL_GPIO_Init+0x2f8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d007      	beq.n	8001994 <HAL_GPIO_Init+0x1e8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a48      	ldr	r2, [pc, #288]	@ (8001aa8 <HAL_GPIO_Init+0x2fc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_GPIO_Init+0x1e4>
 800198c:	2305      	movs	r3, #5
 800198e:	e00a      	b.n	80019a6 <HAL_GPIO_Init+0x1fa>
 8001990:	2306      	movs	r3, #6
 8001992:	e008      	b.n	80019a6 <HAL_GPIO_Init+0x1fa>
 8001994:	2304      	movs	r3, #4
 8001996:	e006      	b.n	80019a6 <HAL_GPIO_Init+0x1fa>
 8001998:	2303      	movs	r3, #3
 800199a:	e004      	b.n	80019a6 <HAL_GPIO_Init+0x1fa>
 800199c:	2302      	movs	r3, #2
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x1fa>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_GPIO_Init+0x1fa>
 80019a4:	2300      	movs	r3, #0
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	f002 0203 	and.w	r2, r2, #3
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	4093      	lsls	r3, r2
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b6:	4937      	ldr	r1, [pc, #220]	@ (8001a94 <HAL_GPIO_Init+0x2e8>)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019c4:	4b39      	ldr	r3, [pc, #228]	@ (8001aac <HAL_GPIO_Init+0x300>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019e8:	4a30      	ldr	r2, [pc, #192]	@ (8001aac <HAL_GPIO_Init+0x300>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ee:	4b2f      	ldr	r3, [pc, #188]	@ (8001aac <HAL_GPIO_Init+0x300>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a12:	4a26      	ldr	r2, [pc, #152]	@ (8001aac <HAL_GPIO_Init+0x300>)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a18:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <HAL_GPIO_Init+0x300>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001aac <HAL_GPIO_Init+0x300>)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <HAL_GPIO_Init+0x300>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a66:	4a11      	ldr	r2, [pc, #68]	@ (8001aac <HAL_GPIO_Init+0x300>)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f47f ae9d 	bne.w	80017bc <HAL_GPIO_Init+0x10>
  }
}
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000
 8001a98:	48000400 	.word	0x48000400
 8001a9c:	48000800 	.word	0x48000800
 8001aa0:	48000c00 	.word	0x48000c00
 8001aa4:	48001000 	.word	0x48001000
 8001aa8:	48001400 	.word	0x48001400
 8001aac:	40010400 	.word	0x40010400

08001ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
 8001abc:	4613      	mov	r3, r2
 8001abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac0:	787b      	ldrb	r3, [r7, #1]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4013      	ands	r3, r2
 8001af8:	041a      	lsls	r2, r3, #16
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43d9      	mvns	r1, r3
 8001afe:	887b      	ldrh	r3, [r7, #2]
 8001b00:	400b      	ands	r3, r1
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b1e:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f806 	bl	8001b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d141      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b76:	d131      	bne.n	8001bdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b78:	4b47      	ldr	r3, [pc, #284]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b7e:	4a46      	ldr	r2, [pc, #280]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b88:	4b43      	ldr	r3, [pc, #268]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b90:	4a41      	ldr	r2, [pc, #260]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b98:	4b40      	ldr	r3, [pc, #256]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2232      	movs	r2, #50	@ 0x32
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	0c9b      	lsrs	r3, r3, #18
 8001baa:	3301      	adds	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bae:	e002      	b.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bb6:	4b38      	ldr	r3, [pc, #224]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bc2:	d102      	bne.n	8001bca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f2      	bne.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bca:	4b33      	ldr	r3, [pc, #204]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bd6:	d158      	bne.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e057      	b.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001be2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001be8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bec:	e04d      	b.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bf4:	d141      	bne.n	8001c7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bf6:	4b28      	ldr	r3, [pc, #160]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c02:	d131      	bne.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c04:	4b24      	ldr	r3, [pc, #144]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c0a:	4a23      	ldr	r2, [pc, #140]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c14:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c24:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2232      	movs	r2, #50	@ 0x32
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	0c9b      	lsrs	r3, r3, #18
 8001c36:	3301      	adds	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c3a:	e002      	b.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c4e:	d102      	bne.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f2      	bne.n	8001c3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c62:	d112      	bne.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e011      	b.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c78:	e007      	b.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c7a:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40007000 	.word	0x40007000
 8001c9c:	20000014 	.word	0x20000014
 8001ca0:	431bde83 	.word	0x431bde83

08001ca4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb2:	6093      	str	r3, [r2, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40007000 	.word	0x40007000

08001cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e2fe      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d075      	beq.n	8001dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce2:	4b97      	ldr	r3, [pc, #604]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cec:	4b94      	ldr	r3, [pc, #592]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b0c      	cmp	r3, #12
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3e>
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d002      	beq.n	8001d08 <HAL_RCC_OscConfig+0x44>
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d10b      	bne.n	8001d20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	4b8d      	ldr	r3, [pc, #564]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d05b      	beq.n	8001dcc <HAL_RCC_OscConfig+0x108>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d157      	bne.n	8001dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e2d9      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d28:	d106      	bne.n	8001d38 <HAL_RCC_OscConfig+0x74>
 8001d2a:	4b85      	ldr	r3, [pc, #532]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a84      	ldr	r2, [pc, #528]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e01d      	b.n	8001d74 <HAL_RCC_OscConfig+0xb0>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x98>
 8001d42:	4b7f      	ldr	r3, [pc, #508]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7e      	ldr	r2, [pc, #504]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a7b      	ldr	r2, [pc, #492]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0xb0>
 8001d5c:	4b78      	ldr	r3, [pc, #480]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a77      	ldr	r2, [pc, #476]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b75      	ldr	r3, [pc, #468]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a74      	ldr	r2, [pc, #464]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d013      	beq.n	8001da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f8c8 	bl	8000f10 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff f8c4 	bl	8000f10 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	@ 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e29e      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d96:	4b6a      	ldr	r3, [pc, #424]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0xc0>
 8001da2:	e014      	b.n	8001dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff f8b4 	bl	8000f10 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff f8b0 	bl	8000f10 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	@ 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e28a      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dbe:	4b60      	ldr	r3, [pc, #384]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0xe8>
 8001dca:	e000      	b.n	8001dce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d075      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dda:	4b59      	ldr	r3, [pc, #356]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de4:	4b56      	ldr	r3, [pc, #344]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b0c      	cmp	r3, #12
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_OscConfig+0x136>
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_OscConfig+0x13c>
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d11f      	bne.n	8001e40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e00:	4b4f      	ldr	r3, [pc, #316]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_OscConfig+0x154>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e25d      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b49      	ldr	r3, [pc, #292]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	061b      	lsls	r3, r3, #24
 8001e26:	4946      	ldr	r1, [pc, #280]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e2c:	4b45      	ldr	r3, [pc, #276]	@ (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff f821 	bl	8000e78 <HAL_InitTick>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d043      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e249      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d023      	beq.n	8001e90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e48:	4b3d      	ldr	r3, [pc, #244]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff f85c 	bl	8000f10 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5c:	f7ff f858 	bl	8000f10 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e232      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e6e:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7a:	4b31      	ldr	r3, [pc, #196]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	061b      	lsls	r3, r3, #24
 8001e88:	492d      	ldr	r1, [pc, #180]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
 8001e8e:	e01a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e90:	4b2b      	ldr	r3, [pc, #172]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2a      	ldr	r2, [pc, #168]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f838 	bl	8000f10 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea4:	f7ff f834 	bl	8000f10 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e20e      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb6:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x1e0>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d041      	beq.n	8001f56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d01c      	beq.n	8001f14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ee0:	4a17      	ldr	r2, [pc, #92]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eea:	f7ff f811 	bl	8000f10 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef2:	f7ff f80d 	bl	8000f10 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e1e7      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f04:	4b0e      	ldr	r3, [pc, #56]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0ef      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x22e>
 8001f12:	e020      	b.n	8001f56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f14:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f1a:	4a09      	ldr	r2, [pc, #36]	@ (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f24:	f7fe fff4 	bl	8000f10 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f2a:	e00d      	b.n	8001f48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2c:	f7fe fff0 	bl	8000f10 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d906      	bls.n	8001f48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1ca      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f48:	4b8c      	ldr	r3, [pc, #560]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1ea      	bne.n	8001f2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80a6 	beq.w	80020b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f68:	4b84      	ldr	r3, [pc, #528]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2b4>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x2b6>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00d      	beq.n	8001f9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	4a7e      	ldr	r2, [pc, #504]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8a:	4b7c      	ldr	r3, [pc, #496]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f96:	2301      	movs	r3, #1
 8001f98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f9a:	4b79      	ldr	r3, [pc, #484]	@ (8002180 <HAL_RCC_OscConfig+0x4bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d118      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fa6:	4b76      	ldr	r3, [pc, #472]	@ (8002180 <HAL_RCC_OscConfig+0x4bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a75      	ldr	r2, [pc, #468]	@ (8002180 <HAL_RCC_OscConfig+0x4bc>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb2:	f7fe ffad 	bl	8000f10 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fba:	f7fe ffa9 	bl	8000f10 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e183      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fcc:	4b6c      	ldr	r3, [pc, #432]	@ (8002180 <HAL_RCC_OscConfig+0x4bc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d108      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x32e>
 8001fe0:	4b66      	ldr	r3, [pc, #408]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe6:	4a65      	ldr	r2, [pc, #404]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ff0:	e024      	b.n	800203c <HAL_RCC_OscConfig+0x378>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d110      	bne.n	800201c <HAL_RCC_OscConfig+0x358>
 8001ffa:	4b60      	ldr	r3, [pc, #384]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002000:	4a5e      	ldr	r2, [pc, #376]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800200a:	4b5c      	ldr	r3, [pc, #368]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002010:	4a5a      	ldr	r2, [pc, #360]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800201a:	e00f      	b.n	800203c <HAL_RCC_OscConfig+0x378>
 800201c:	4b57      	ldr	r3, [pc, #348]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002022:	4a56      	ldr	r2, [pc, #344]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800202c:	4b53      	ldr	r3, [pc, #332]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002032:	4a52      	ldr	r2, [pc, #328]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d016      	beq.n	8002072 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7fe ff64 	bl	8000f10 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7fe ff60 	bl	8000f10 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e138      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002062:	4b46      	ldr	r3, [pc, #280]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ed      	beq.n	800204c <HAL_RCC_OscConfig+0x388>
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7fe ff4d 	bl	8000f10 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7fe ff49 	bl	8000f10 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e121      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002090:	4b3a      	ldr	r3, [pc, #232]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ed      	bne.n	800207a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800209e:	7ffb      	ldrb	r3, [r7, #31]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a4:	4b35      	ldr	r3, [pc, #212]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a8:	4a34      	ldr	r2, [pc, #208]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 80020aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d03c      	beq.n	8002136 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01c      	beq.n	80020fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020c4:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020ca:	4a2c      	ldr	r2, [pc, #176]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d4:	f7fe ff1c 	bl	8000f10 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020dc:	f7fe ff18 	bl	8000f10 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e0f2      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ee:	4b23      	ldr	r3, [pc, #140]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 80020f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ef      	beq.n	80020dc <HAL_RCC_OscConfig+0x418>
 80020fc:	e01b      	b.n	8002136 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020fe:	4b1f      	ldr	r3, [pc, #124]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002100:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002104:	4a1d      	ldr	r2, [pc, #116]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210e:	f7fe feff 	bl	8000f10 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002116:	f7fe fefb 	bl	8000f10 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0d5      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002128:	4b14      	ldr	r3, [pc, #80]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 800212a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1ef      	bne.n	8002116 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80c9 	beq.w	80022d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002140:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b0c      	cmp	r3, #12
 800214a:	f000 8083 	beq.w	8002254 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d15e      	bne.n	8002214 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b09      	ldr	r3, [pc, #36]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a08      	ldr	r2, [pc, #32]	@ (800217c <HAL_RCC_OscConfig+0x4b8>)
 800215c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7fe fed5 	bl	8000f10 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002168:	e00c      	b.n	8002184 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216a:	f7fe fed1 	bl	8000f10 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d905      	bls.n	8002184 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0ab      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002184:	4b55      	ldr	r3, [pc, #340]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1ec      	bne.n	800216a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002190:	4b52      	ldr	r3, [pc, #328]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	4b52      	ldr	r3, [pc, #328]	@ (80022e0 <HAL_RCC_OscConfig+0x61c>)
 8002196:	4013      	ands	r3, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6a11      	ldr	r1, [r2, #32]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0112      	lsls	r2, r2, #4
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80021aa:	0212      	lsls	r2, r2, #8
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021b2:	0852      	lsrs	r2, r2, #1
 80021b4:	3a01      	subs	r2, #1
 80021b6:	0552      	lsls	r2, r2, #21
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021be:	0852      	lsrs	r2, r2, #1
 80021c0:	3a01      	subs	r2, #1
 80021c2:	0652      	lsls	r2, r2, #25
 80021c4:	4311      	orrs	r1, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021ca:	06d2      	lsls	r2, r2, #27
 80021cc:	430a      	orrs	r2, r1
 80021ce:	4943      	ldr	r1, [pc, #268]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d4:	4b41      	ldr	r3, [pc, #260]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a40      	ldr	r2, [pc, #256]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e0:	4b3e      	ldr	r3, [pc, #248]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a3d      	ldr	r2, [pc, #244]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe fe90 	bl	8000f10 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7fe fe8c 	bl	8000f10 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e066      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002206:	4b35      	ldr	r3, [pc, #212]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x530>
 8002212:	e05e      	b.n	80022d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002214:	4b31      	ldr	r3, [pc, #196]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a30      	ldr	r2, [pc, #192]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 800221a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800221e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe fe76 	bl	8000f10 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002228:	f7fe fe72 	bl	8000f10 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e04c      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223a:	4b28      	ldr	r3, [pc, #160]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002246:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	4924      	ldr	r1, [pc, #144]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 800224c:	4b25      	ldr	r3, [pc, #148]	@ (80022e4 <HAL_RCC_OscConfig+0x620>)
 800224e:	4013      	ands	r3, r2
 8002250:	60cb      	str	r3, [r1, #12]
 8002252:	e03e      	b.n	80022d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e039      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002260:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <HAL_RCC_OscConfig+0x618>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f003 0203 	and.w	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	429a      	cmp	r2, r3
 8002272:	d12c      	bne.n	80022ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	3b01      	subs	r3, #1
 8002280:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	429a      	cmp	r2, r3
 8002284:	d123      	bne.n	80022ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002290:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d11b      	bne.n	80022ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d113      	bne.n	80022ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	3b01      	subs	r3, #1
 80022b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	3b01      	subs	r3, #1
 80022c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3720      	adds	r7, #32
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	019f800c 	.word	0x019f800c
 80022e4:	feeefffc 	.word	0xfeeefffc

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e11e      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b91      	ldr	r3, [pc, #580]	@ (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b8e      	ldr	r3, [pc, #568]	@ (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	498c      	ldr	r1, [pc, #560]	@ (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b8a      	ldr	r3, [pc, #552]	@ (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e106      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d073      	beq.n	8002424 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d129      	bne.n	8002398 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002344:	4b81      	ldr	r3, [pc, #516]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0f4      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002354:	f000 f99e 	bl	8002694 <RCC_GetSysClockFreqFromPLLSource>
 8002358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4a7c      	ldr	r2, [pc, #496]	@ (8002550 <HAL_RCC_ClockConfig+0x268>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d93f      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002362:	4b7a      	ldr	r3, [pc, #488]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d033      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12f      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002382:	4b72      	ldr	r3, [pc, #456]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800238a:	4a70      	ldr	r2, [pc, #448]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 800238c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e024      	b.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a0:	4b6a      	ldr	r3, [pc, #424]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0c6      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b66      	ldr	r3, [pc, #408]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0be      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023c0:	f000 f8ce 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a61      	ldr	r2, [pc, #388]	@ (8002550 <HAL_RCC_ClockConfig+0x268>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d909      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ce:	4b5f      	ldr	r3, [pc, #380]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023d6:	4a5d      	ldr	r2, [pc, #372]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b5a      	ldr	r3, [pc, #360]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4957      	ldr	r1, [pc, #348]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe fd8c 	bl	8000f10 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe fd88 	bl	8000f10 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e095      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b4e      	ldr	r3, [pc, #312]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b43      	ldr	r3, [pc, #268]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a42      	ldr	r2, [pc, #264]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 8002442:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002446:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002454:	4b3d      	ldr	r3, [pc, #244]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800245c:	4a3b      	ldr	r2, [pc, #236]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 800245e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b39      	ldr	r3, [pc, #228]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4936      	ldr	r1, [pc, #216]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
 8002476:	e008      	b.n	800248a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b80      	cmp	r3, #128	@ 0x80
 800247c:	d105      	bne.n	800248a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800247e:	4b33      	ldr	r3, [pc, #204]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a32      	ldr	r2, [pc, #200]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 8002484:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002488:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248a:	4b2f      	ldr	r3, [pc, #188]	@ (8002548 <HAL_RCC_ClockConfig+0x260>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d21d      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002498:	4b2b      	ldr	r3, [pc, #172]	@ (8002548 <HAL_RCC_ClockConfig+0x260>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 020f 	bic.w	r2, r3, #15
 80024a0:	4929      	ldr	r1, [pc, #164]	@ (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fd32 	bl	8000f10 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fd2e 	bl	8000f10 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e03b      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	@ (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1ed      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4917      	ldr	r1, [pc, #92]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b13      	ldr	r3, [pc, #76]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490f      	ldr	r1, [pc, #60]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002512:	f000 f825 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <HAL_RCC_ClockConfig+0x264>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490c      	ldr	r1, [pc, #48]	@ (8002554 <HAL_RCC_ClockConfig+0x26c>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <HAL_RCC_ClockConfig+0x270>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002532:	4b0a      	ldr	r3, [pc, #40]	@ (800255c <HAL_RCC_ClockConfig+0x274>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fc9e 	bl	8000e78 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	04c4b400 	.word	0x04c4b400
 8002554:	08006204 	.word	0x08006204
 8002558:	20000014 	.word	0x20000014
 800255c:	20000018 	.word	0x20000018

08002560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002566:	4b2c      	ldr	r3, [pc, #176]	@ (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d102      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002572:	4b2a      	ldr	r3, [pc, #168]	@ (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e047      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002578:	4b27      	ldr	r3, [pc, #156]	@ (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d102      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002584:	4b26      	ldr	r3, [pc, #152]	@ (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e03e      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800258a:	4b23      	ldr	r3, [pc, #140]	@ (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d136      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002596:	4b20      	ldr	r3, [pc, #128]	@ (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4a16      	ldr	r2, [pc, #88]	@ (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	0a12      	lsrs	r2, r2, #8
 80025c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
      break;
 80025cc:	e00c      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ce:	4a13      	ldr	r2, [pc, #76]	@ (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4a10      	ldr	r2, [pc, #64]	@ (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0a12      	lsrs	r2, r2, #8
 80025dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
      break;
 80025e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0e5b      	lsrs	r3, r3, #25
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e001      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002608:	693b      	ldr	r3, [r7, #16]
}
 800260a:	4618      	mov	r0, r3
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	00f42400 	.word	0x00f42400
 8002620:	016e3600 	.word	0x016e3600

08002624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000014 	.word	0x20000014

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	@ (8002664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	08006214 	.word	0x08006214

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800266c:	f7ff ffda 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0adb      	lsrs	r3, r3, #11
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	@ (8002690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08006214 	.word	0x08006214

08002694 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269a:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d10c      	bne.n	80026d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b8:	4a17      	ldr	r2, [pc, #92]	@ (8002718 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	4a14      	ldr	r2, [pc, #80]	@ (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68d2      	ldr	r2, [r2, #12]
 80026c4:	0a12      	lsrs	r2, r2, #8
 80026c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
    break;
 80026d0:	e00c      	b.n	80026ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d2:	4a12      	ldr	r2, [pc, #72]	@ (800271c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4a0e      	ldr	r2, [pc, #56]	@ (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	0a12      	lsrs	r2, r2, #8
 80026e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
    break;
 80026ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	016e3600 	.word	0x016e3600
 800271c:	00f42400 	.word	0x00f42400

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002728:	2300      	movs	r3, #0
 800272a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800272c:	2300      	movs	r3, #0
 800272e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8098 	beq.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b43      	ldr	r3, [pc, #268]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b40      	ldr	r3, [pc, #256]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002752:	4a3f      	ldr	r2, [pc, #252]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	@ 0x58
 800275a:	4b3d      	ldr	r3, [pc, #244]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800276a:	4b3a      	ldr	r3, [pc, #232]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a39      	ldr	r2, [pc, #228]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002776:	f7fe fbcb 	bl	8000f10 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277c:	e009      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fbc7 	bl	8000f10 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	74fb      	strb	r3, [r7, #19]
        break;
 8002790:	e005      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002792:	4b30      	ldr	r3, [pc, #192]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ef      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d159      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d019      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c0:	4b23      	ldr	r3, [pc, #140]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027cc:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ec:	4a18      	ldr	r2, [pc, #96]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fb87 	bl	8000f10 <HAL_GetTick>
 8002802:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	e00b      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fb83 	bl	8000f10 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d902      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	74fb      	strb	r3, [r7, #19]
            break;
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ec      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002838:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002840:	4903      	ldr	r1, [pc, #12]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002848:	e008      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	74bb      	strb	r3, [r7, #18]
 800284e:	e005      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285c:	7c7b      	ldrb	r3, [r7, #17]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4ba7      	ldr	r3, [pc, #668]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002866:	4aa6      	ldr	r2, [pc, #664]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287a:	4ba1      	ldr	r3, [pc, #644]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002880:	f023 0203 	bic.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	499d      	ldr	r1, [pc, #628]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	4b98      	ldr	r3, [pc, #608]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a2:	f023 020c 	bic.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	4995      	ldr	r1, [pc, #596]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028be:	4b90      	ldr	r3, [pc, #576]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	498c      	ldr	r1, [pc, #560]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e0:	4b87      	ldr	r3, [pc, #540]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	4984      	ldr	r1, [pc, #528]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002902:	4b7f      	ldr	r3, [pc, #508]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002908:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	497b      	ldr	r1, [pc, #492]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002924:	4b76      	ldr	r3, [pc, #472]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	4973      	ldr	r1, [pc, #460]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002946:	4b6e      	ldr	r3, [pc, #440]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	496a      	ldr	r1, [pc, #424]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002968:	4b65      	ldr	r3, [pc, #404]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4962      	ldr	r1, [pc, #392]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002990:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	4959      	ldr	r1, [pc, #356]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ac:	4b54      	ldr	r3, [pc, #336]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ba:	4951      	ldr	r1, [pc, #324]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	4948      	ldr	r1, [pc, #288]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f0:	4b43      	ldr	r3, [pc, #268]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	4940      	ldr	r1, [pc, #256]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b3b      	ldr	r3, [pc, #236]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a3a      	ldr	r2, [pc, #232]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a28:	4b35      	ldr	r3, [pc, #212]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a36:	4932      	ldr	r1, [pc, #200]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a60:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a66:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6e:	4924      	ldr	r1, [pc, #144]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b1f      	ldr	r3, [pc, #124]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a1e      	ldr	r2, [pc, #120]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a98:	4b19      	ldr	r3, [pc, #100]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa6:	4916      	ldr	r1, [pc, #88]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab8:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a10      	ldr	r2, [pc, #64]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ac2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d019      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	4908      	ldr	r1, [pc, #32]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aee:	d109      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b03      	ldr	r3, [pc, #12]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a02      	ldr	r2, [pc, #8]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
 8002afc:	e002      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d015      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b10:	4b29      	ldr	r3, [pc, #164]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	4926      	ldr	r1, [pc, #152]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b30:	4b21      	ldr	r3, [pc, #132]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a20      	ldr	r2, [pc, #128]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d015      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b48:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b56:	4918      	ldr	r1, [pc, #96]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b66:	d105      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b68:	4b13      	ldr	r3, [pc, #76]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4a12      	ldr	r2, [pc, #72]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b72:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d015      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b80:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8e:	490a      	ldr	r1, [pc, #40]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b9e:	d105      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002baa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bac:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000

08002bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e042      	b.n	8002c54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d106      	bne.n	8002be6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fd ffad 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2224      	movs	r2, #36	@ 0x24
 8002bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f001 f8f4 	bl	8003df4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fdf5 	bl	80037fc <UART_SetConfig>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e01b      	b.n	8002c54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f001 f973 	bl	8003f38 <UART_CheckIdleState>
 8002c52:	4603      	mov	r3, r0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	@ 0x28
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d17b      	bne.n	8002d6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_UART_Transmit+0x26>
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e074      	b.n	8002d70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2221      	movs	r2, #33	@ 0x21
 8002c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c96:	f7fe f93b 	bl	8000f10 <HAL_GetTick>
 8002c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	88fa      	ldrh	r2, [r7, #6]
 8002ca0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	88fa      	ldrh	r2, [r7, #6]
 8002ca8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cb4:	d108      	bne.n	8002cc8 <HAL_UART_Transmit+0x6c>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d104      	bne.n	8002cc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e003      	b.n	8002cd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cd0:	e030      	b.n	8002d34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2180      	movs	r1, #128	@ 0x80
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f001 f9d5 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e03d      	b.n	8002d70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10b      	bne.n	8002d12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	e007      	b.n	8002d22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1c8      	bne.n	8002cd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2200      	movs	r2, #0
 8002d48:	2140      	movs	r1, #64	@ 0x40
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f001 f99e 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e006      	b.n	8002d70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	@ 0x28
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	f040 80b5 	bne.w	8002efe <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_UART_Receive+0x28>
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0ad      	b.n	8002f00 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2222      	movs	r2, #34	@ 0x22
 8002db0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dba:	f7fe f8a9 	bl	8000f10 <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	88fa      	ldrh	r2, [r7, #6]
 8002dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dd8:	d10e      	bne.n	8002df8 <HAL_UART_Receive+0x80>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d105      	bne.n	8002dee <HAL_UART_Receive+0x76>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002de8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002dec:	e02d      	b.n	8002e4a <HAL_UART_Receive+0xd2>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	22ff      	movs	r2, #255	@ 0xff
 8002df2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002df6:	e028      	b.n	8002e4a <HAL_UART_Receive+0xd2>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10d      	bne.n	8002e1c <HAL_UART_Receive+0xa4>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <HAL_UART_Receive+0x9a>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	22ff      	movs	r2, #255	@ 0xff
 8002e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002e10:	e01b      	b.n	8002e4a <HAL_UART_Receive+0xd2>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	227f      	movs	r2, #127	@ 0x7f
 8002e16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002e1a:	e016      	b.n	8002e4a <HAL_UART_Receive+0xd2>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e24:	d10d      	bne.n	8002e42 <HAL_UART_Receive+0xca>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <HAL_UART_Receive+0xc0>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	227f      	movs	r2, #127	@ 0x7f
 8002e32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002e36:	e008      	b.n	8002e4a <HAL_UART_Receive+0xd2>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	223f      	movs	r2, #63	@ 0x3f
 8002e3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002e40:	e003      	b.n	8002e4a <HAL_UART_Receive+0xd2>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002e50:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e5a:	d108      	bne.n	8002e6e <HAL_UART_Receive+0xf6>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	e003      	b.n	8002e76 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002e76:	e036      	b.n	8002ee6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2120      	movs	r1, #32
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f001 f902 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e032      	b.n	8002f00 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10c      	bne.n	8002eba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	8a7b      	ldrh	r3, [r7, #18]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	e00c      	b.n	8002ed4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	8a7b      	ldrh	r3, [r7, #18]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1c2      	bne.n	8002e78 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b091      	sub	sp, #68	@ 0x44
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d178      	bne.n	8003012 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_UART_Transmit_IT+0x24>
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e071      	b.n	8003014 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	88fa      	ldrh	r2, [r7, #6]
 8002f42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2221      	movs	r2, #33	@ 0x21
 8002f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f64:	d12a      	bne.n	8002fbc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f6e:	d107      	bne.n	8002f80 <HAL_UART_Transmit_IT+0x78>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d103      	bne.n	8002f80 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a29      	ldr	r2, [pc, #164]	@ (8003020 <HAL_UART_Transmit_IT+0x118>)
 8002f7c:	679a      	str	r2, [r3, #120]	@ 0x78
 8002f7e:	e002      	b.n	8002f86 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a28      	ldr	r2, [pc, #160]	@ (8003024 <HAL_UART_Transmit_IT+0x11c>)
 8002f84:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fa6:	637a      	str	r2, [r7, #52]	@ 0x34
 8002fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e5      	bne.n	8002f86 <HAL_UART_Transmit_IT+0x7e>
 8002fba:	e028      	b.n	800300e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fc4:	d107      	bne.n	8002fd6 <HAL_UART_Transmit_IT+0xce>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a15      	ldr	r2, [pc, #84]	@ (8003028 <HAL_UART_Transmit_IT+0x120>)
 8002fd2:	679a      	str	r2, [r3, #120]	@ 0x78
 8002fd4:	e002      	b.n	8002fdc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a14      	ldr	r2, [pc, #80]	@ (800302c <HAL_UART_Transmit_IT+0x124>)
 8002fda:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	e853 3f00 	ldrex	r3, [r3]
 8002fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ffa:	623b      	str	r3, [r7, #32]
 8002ffc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	69f9      	ldr	r1, [r7, #28]
 8003000:	6a3a      	ldr	r2, [r7, #32]
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	61bb      	str	r3, [r7, #24]
   return(result);
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e6      	bne.n	8002fdc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e000      	b.n	8003014 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3744      	adds	r7, #68	@ 0x44
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	08004ab7 	.word	0x08004ab7
 8003024:	080049d7 	.word	0x080049d7
 8003028:	08004915 	.word	0x08004915
 800302c:	0800485d 	.word	0x0800485d

08003030 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	@ 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003044:	2b20      	cmp	r3, #32
 8003046:	d137      	bne.n	80030b8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_UART_Receive_IT+0x24>
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e030      	b.n	80030ba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a18      	ldr	r2, [pc, #96]	@ (80030c4 <HAL_UART_Receive_IT+0x94>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d01f      	beq.n	80030a8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d018      	beq.n	80030a8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	613b      	str	r3, [r7, #16]
   return(result);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	623b      	str	r3, [r7, #32]
 8003096:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	69f9      	ldr	r1, [r7, #28]
 800309a:	6a3a      	ldr	r2, [r7, #32]
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e6      	bne.n	8003076 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f001 f85a 	bl	8004168 <UART_Start_Receive_IT>
 80030b4:	4603      	mov	r3, r0
 80030b6:	e000      	b.n	80030ba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3728      	adds	r7, #40	@ 0x28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40008000 	.word	0x40008000

080030c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	@ 0x28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d137      	bne.n	8003150 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <HAL_UART_Receive_DMA+0x24>
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e030      	b.n	8003152 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a18      	ldr	r2, [pc, #96]	@ (800315c <HAL_UART_Receive_DMA+0x94>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d01f      	beq.n	8003140 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d018      	beq.n	8003140 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	e853 3f00 	ldrex	r3, [r3]
 800311a:	613b      	str	r3, [r7, #16]
   return(result);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003122:	627b      	str	r3, [r7, #36]	@ 0x24
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	623b      	str	r3, [r7, #32]
 800312e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003130:	69f9      	ldr	r1, [r7, #28]
 8003132:	6a3a      	ldr	r2, [r7, #32]
 8003134:	e841 2300 	strex	r3, r2, [r1]
 8003138:	61bb      	str	r3, [r7, #24]
   return(result);
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e6      	bne.n	800310e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	461a      	mov	r2, r3
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f001 f930 	bl	80043ac <UART_Start_Receive_DMA>
 800314c:	4603      	mov	r3, r0
 800314e:	e000      	b.n	8003152 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3728      	adds	r7, #40	@ 0x28
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40008000 	.word	0x40008000

08003160 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b0ba      	sub	sp, #232	@ 0xe8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003186:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800318a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800318e:	4013      	ands	r3, r2
 8003190:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d11b      	bne.n	80031d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800319c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d105      	bne.n	80031c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80031b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d009      	beq.n	80031d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 82e3 	beq.w	8003790 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
      }
      return;
 80031d2:	e2dd      	b.n	8003790 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8123 	beq.w	8003424 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80031de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80031e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003418 <HAL_UART_IRQHandler+0x2b8>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80031ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80031ee:	4b8b      	ldr	r3, [pc, #556]	@ (800341c <HAL_UART_IRQHandler+0x2bc>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8116 	beq.w	8003424 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d011      	beq.n	8003228 <HAL_UART_IRQHandler+0xc8>
 8003204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2201      	movs	r2, #1
 8003216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d011      	beq.n	8003258 <HAL_UART_IRQHandler+0xf8>
 8003234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2202      	movs	r2, #2
 8003246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324e:	f043 0204 	orr.w	r2, r3, #4
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d011      	beq.n	8003288 <HAL_UART_IRQHandler+0x128>
 8003264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2204      	movs	r2, #4
 8003276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327e:	f043 0202 	orr.w	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d017      	beq.n	80032c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80032a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80032a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003418 <HAL_UART_IRQHandler+0x2b8>)
 80032a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2208      	movs	r2, #8
 80032b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ba:	f043 0208 	orr.w	r2, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d012      	beq.n	80032f6 <HAL_UART_IRQHandler+0x196>
 80032d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00c      	beq.n	80032f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8249 	beq.w	8003794 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d013      	beq.n	8003336 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800330e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d105      	bne.n	8003326 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800331a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800331e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334a:	2b40      	cmp	r3, #64	@ 0x40
 800334c:	d005      	beq.n	800335a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800334e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003352:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003356:	2b00      	cmp	r3, #0
 8003358:	d054      	beq.n	8003404 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f001 f90d 	bl	800457a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336a:	2b40      	cmp	r3, #64	@ 0x40
 800336c:	d146      	bne.n	80033fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3308      	adds	r3, #8
 8003374:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003384:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800338c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3308      	adds	r3, #8
 8003396:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800339a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800339e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1d9      	bne.n	800336e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d017      	beq.n	80033f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033ca:	4a15      	ldr	r2, [pc, #84]	@ (8003420 <HAL_UART_IRQHandler+0x2c0>)
 80033cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe f833 	bl	8001440 <HAL_DMA_Abort_IT>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d019      	beq.n	8003414 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80033ee:	4610      	mov	r0, r2
 80033f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f2:	e00f      	b.n	8003414 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f9eb 	bl	80037d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fa:	e00b      	b.n	8003414 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f9e7 	bl	80037d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003402:	e007      	b.n	8003414 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f9e3 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003412:	e1bf      	b.n	8003794 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	bf00      	nop
    return;
 8003416:	e1bd      	b.n	8003794 <HAL_UART_IRQHandler+0x634>
 8003418:	10000001 	.word	0x10000001
 800341c:	04000120 	.word	0x04000120
 8003420:	08004831 	.word	0x08004831

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003428:	2b01      	cmp	r3, #1
 800342a:	f040 8153 	bne.w	80036d4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 814c 	beq.w	80036d4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800343c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8145 	beq.w	80036d4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2210      	movs	r2, #16
 8003450:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345c:	2b40      	cmp	r3, #64	@ 0x40
 800345e:	f040 80bb 	bne.w	80035d8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003470:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 818f 	beq.w	8003798 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003480:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003484:	429a      	cmp	r2, r3
 8003486:	f080 8187 	bcs.w	8003798 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003490:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 8087 	bne.w	80035b6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1da      	bne.n	80034a8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3308      	adds	r3, #8
 80034f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003502:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3308      	adds	r3, #8
 8003512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003516:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800351a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800351e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003528:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e1      	bne.n	80034f2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3308      	adds	r3, #8
 8003534:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800353e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003544:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3308      	adds	r3, #8
 800354e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003552:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003554:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003558:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003560:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e3      	bne.n	800352e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800357c:	e853 3f00 	ldrex	r3, [r3]
 8003580:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003584:	f023 0310 	bic.w	r3, r3, #16
 8003588:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003596:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003598:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800359c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e4      	bne.n	8003574 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fd feec 	bl	800138e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f907 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035d6:	e0df      	b.n	8003798 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80d1 	beq.w	800379c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80035fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80cc 	beq.w	800379c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003614:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003626:	647b      	str	r3, [r7, #68]	@ 0x44
 8003628:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800362c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e4      	bne.n	8003604 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3308      	adds	r3, #8
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	623b      	str	r3, [r7, #32]
   return(result);
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3308      	adds	r3, #8
 800365e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003662:	633a      	str	r2, [r7, #48]	@ 0x30
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e1      	bne.n	800363a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	60fb      	str	r3, [r7, #12]
   return(result);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0310 	bic.w	r3, r3, #16
 800369e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	69b9      	ldr	r1, [r7, #24]
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	e841 2300 	strex	r3, r2, [r1]
 80036b8:	617b      	str	r3, [r7, #20]
   return(result);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e4      	bne.n	800368a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036ca:	4619      	mov	r1, r3
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f889 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036d2:	e063      	b.n	800379c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00e      	beq.n	80036fe <HAL_UART_IRQHandler+0x59e>
 80036e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80036f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f001 ff9a 	bl	8005630 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036fc:	e051      	b.n	80037a2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003706:	2b00      	cmp	r3, #0
 8003708:	d014      	beq.n	8003734 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800370a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d105      	bne.n	8003722 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800371a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003726:	2b00      	cmp	r3, #0
 8003728:	d03a      	beq.n	80037a0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
    }
    return;
 8003732:	e035      	b.n	80037a0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d009      	beq.n	8003754 <HAL_UART_IRQHandler+0x5f4>
 8003740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f001 fa27 	bl	8004ba0 <UART_EndTransmit_IT>
    return;
 8003752:	e026      	b.n	80037a2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003758:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <HAL_UART_IRQHandler+0x614>
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003764:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f001 ff73 	bl	8005658 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003772:	e016      	b.n	80037a2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003778:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d010      	beq.n	80037a2 <HAL_UART_IRQHandler+0x642>
 8003780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003784:	2b00      	cmp	r3, #0
 8003786:	da0c      	bge.n	80037a2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f001 ff5b 	bl	8005644 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800378e:	e008      	b.n	80037a2 <HAL_UART_IRQHandler+0x642>
      return;
 8003790:	bf00      	nop
 8003792:	e006      	b.n	80037a2 <HAL_UART_IRQHandler+0x642>
    return;
 8003794:	bf00      	nop
 8003796:	e004      	b.n	80037a2 <HAL_UART_IRQHandler+0x642>
      return;
 8003798:	bf00      	nop
 800379a:	e002      	b.n	80037a2 <HAL_UART_IRQHandler+0x642>
      return;
 800379c:	bf00      	nop
 800379e:	e000      	b.n	80037a2 <HAL_UART_IRQHandler+0x642>
    return;
 80037a0:	bf00      	nop
  }
}
 80037a2:	37e8      	adds	r7, #232	@ 0xe8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003800:	b08c      	sub	sp, #48	@ 0x30
 8003802:	af00      	add	r7, sp, #0
 8003804:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	431a      	orrs	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	431a      	orrs	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	4313      	orrs	r3, r2
 8003822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4baa      	ldr	r3, [pc, #680]	@ (8003ad4 <UART_SetConfig+0x2d8>)
 800382c:	4013      	ands	r3, r2
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003834:	430b      	orrs	r3, r1
 8003836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a9f      	ldr	r2, [pc, #636]	@ (8003ad8 <UART_SetConfig+0x2dc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d004      	beq.n	8003868 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003864:	4313      	orrs	r3, r2
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003872:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800387c:	430b      	orrs	r3, r1
 800387e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003886:	f023 010f 	bic.w	r1, r3, #15
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a90      	ldr	r2, [pc, #576]	@ (8003adc <UART_SetConfig+0x2e0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d125      	bne.n	80038ec <UART_SetConfig+0xf0>
 80038a0:	4b8f      	ldr	r3, [pc, #572]	@ (8003ae0 <UART_SetConfig+0x2e4>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d81a      	bhi.n	80038e4 <UART_SetConfig+0xe8>
 80038ae:	a201      	add	r2, pc, #4	@ (adr r2, 80038b4 <UART_SetConfig+0xb8>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038d5 	.word	0x080038d5
 80038bc:	080038cd 	.word	0x080038cd
 80038c0:	080038dd 	.word	0x080038dd
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ca:	e116      	b.n	8003afa <UART_SetConfig+0x2fe>
 80038cc:	2302      	movs	r3, #2
 80038ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d2:	e112      	b.n	8003afa <UART_SetConfig+0x2fe>
 80038d4:	2304      	movs	r3, #4
 80038d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038da:	e10e      	b.n	8003afa <UART_SetConfig+0x2fe>
 80038dc:	2308      	movs	r3, #8
 80038de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e2:	e10a      	b.n	8003afa <UART_SetConfig+0x2fe>
 80038e4:	2310      	movs	r3, #16
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ea:	e106      	b.n	8003afa <UART_SetConfig+0x2fe>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a7c      	ldr	r2, [pc, #496]	@ (8003ae4 <UART_SetConfig+0x2e8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d138      	bne.n	8003968 <UART_SetConfig+0x16c>
 80038f6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ae0 <UART_SetConfig+0x2e4>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fc:	f003 030c 	and.w	r3, r3, #12
 8003900:	2b0c      	cmp	r3, #12
 8003902:	d82d      	bhi.n	8003960 <UART_SetConfig+0x164>
 8003904:	a201      	add	r2, pc, #4	@ (adr r2, 800390c <UART_SetConfig+0x110>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	08003941 	.word	0x08003941
 8003910:	08003961 	.word	0x08003961
 8003914:	08003961 	.word	0x08003961
 8003918:	08003961 	.word	0x08003961
 800391c:	08003951 	.word	0x08003951
 8003920:	08003961 	.word	0x08003961
 8003924:	08003961 	.word	0x08003961
 8003928:	08003961 	.word	0x08003961
 800392c:	08003949 	.word	0x08003949
 8003930:	08003961 	.word	0x08003961
 8003934:	08003961 	.word	0x08003961
 8003938:	08003961 	.word	0x08003961
 800393c:	08003959 	.word	0x08003959
 8003940:	2300      	movs	r3, #0
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003946:	e0d8      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003948:	2302      	movs	r3, #2
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800394e:	e0d4      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003950:	2304      	movs	r3, #4
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003956:	e0d0      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003958:	2308      	movs	r3, #8
 800395a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800395e:	e0cc      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003960:	2310      	movs	r3, #16
 8003962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003966:	e0c8      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ae8 <UART_SetConfig+0x2ec>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d125      	bne.n	80039be <UART_SetConfig+0x1c2>
 8003972:	4b5b      	ldr	r3, [pc, #364]	@ (8003ae0 <UART_SetConfig+0x2e4>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003978:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800397c:	2b30      	cmp	r3, #48	@ 0x30
 800397e:	d016      	beq.n	80039ae <UART_SetConfig+0x1b2>
 8003980:	2b30      	cmp	r3, #48	@ 0x30
 8003982:	d818      	bhi.n	80039b6 <UART_SetConfig+0x1ba>
 8003984:	2b20      	cmp	r3, #32
 8003986:	d00a      	beq.n	800399e <UART_SetConfig+0x1a2>
 8003988:	2b20      	cmp	r3, #32
 800398a:	d814      	bhi.n	80039b6 <UART_SetConfig+0x1ba>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <UART_SetConfig+0x19a>
 8003990:	2b10      	cmp	r3, #16
 8003992:	d008      	beq.n	80039a6 <UART_SetConfig+0x1aa>
 8003994:	e00f      	b.n	80039b6 <UART_SetConfig+0x1ba>
 8003996:	2300      	movs	r3, #0
 8003998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800399c:	e0ad      	b.n	8003afa <UART_SetConfig+0x2fe>
 800399e:	2302      	movs	r3, #2
 80039a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039a4:	e0a9      	b.n	8003afa <UART_SetConfig+0x2fe>
 80039a6:	2304      	movs	r3, #4
 80039a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ac:	e0a5      	b.n	8003afa <UART_SetConfig+0x2fe>
 80039ae:	2308      	movs	r3, #8
 80039b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039b4:	e0a1      	b.n	8003afa <UART_SetConfig+0x2fe>
 80039b6:	2310      	movs	r3, #16
 80039b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039bc:	e09d      	b.n	8003afa <UART_SetConfig+0x2fe>
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a4a      	ldr	r2, [pc, #296]	@ (8003aec <UART_SetConfig+0x2f0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d125      	bne.n	8003a14 <UART_SetConfig+0x218>
 80039c8:	4b45      	ldr	r3, [pc, #276]	@ (8003ae0 <UART_SetConfig+0x2e4>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80039d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80039d4:	d016      	beq.n	8003a04 <UART_SetConfig+0x208>
 80039d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80039d8:	d818      	bhi.n	8003a0c <UART_SetConfig+0x210>
 80039da:	2b80      	cmp	r3, #128	@ 0x80
 80039dc:	d00a      	beq.n	80039f4 <UART_SetConfig+0x1f8>
 80039de:	2b80      	cmp	r3, #128	@ 0x80
 80039e0:	d814      	bhi.n	8003a0c <UART_SetConfig+0x210>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <UART_SetConfig+0x1f0>
 80039e6:	2b40      	cmp	r3, #64	@ 0x40
 80039e8:	d008      	beq.n	80039fc <UART_SetConfig+0x200>
 80039ea:	e00f      	b.n	8003a0c <UART_SetConfig+0x210>
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039f2:	e082      	b.n	8003afa <UART_SetConfig+0x2fe>
 80039f4:	2302      	movs	r3, #2
 80039f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039fa:	e07e      	b.n	8003afa <UART_SetConfig+0x2fe>
 80039fc:	2304      	movs	r3, #4
 80039fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a02:	e07a      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003a04:	2308      	movs	r3, #8
 8003a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a0a:	e076      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a12:	e072      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a35      	ldr	r2, [pc, #212]	@ (8003af0 <UART_SetConfig+0x2f4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d12a      	bne.n	8003a74 <UART_SetConfig+0x278>
 8003a1e:	4b30      	ldr	r3, [pc, #192]	@ (8003ae0 <UART_SetConfig+0x2e4>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a2c:	d01a      	beq.n	8003a64 <UART_SetConfig+0x268>
 8003a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a32:	d81b      	bhi.n	8003a6c <UART_SetConfig+0x270>
 8003a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a38:	d00c      	beq.n	8003a54 <UART_SetConfig+0x258>
 8003a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a3e:	d815      	bhi.n	8003a6c <UART_SetConfig+0x270>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <UART_SetConfig+0x250>
 8003a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a48:	d008      	beq.n	8003a5c <UART_SetConfig+0x260>
 8003a4a:	e00f      	b.n	8003a6c <UART_SetConfig+0x270>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a52:	e052      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003a54:	2302      	movs	r3, #2
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5a:	e04e      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a62:	e04a      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003a64:	2308      	movs	r3, #8
 8003a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6a:	e046      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a72:	e042      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a17      	ldr	r2, [pc, #92]	@ (8003ad8 <UART_SetConfig+0x2dc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d13a      	bne.n	8003af4 <UART_SetConfig+0x2f8>
 8003a7e:	4b18      	ldr	r3, [pc, #96]	@ (8003ae0 <UART_SetConfig+0x2e4>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a8c:	d01a      	beq.n	8003ac4 <UART_SetConfig+0x2c8>
 8003a8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a92:	d81b      	bhi.n	8003acc <UART_SetConfig+0x2d0>
 8003a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a98:	d00c      	beq.n	8003ab4 <UART_SetConfig+0x2b8>
 8003a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a9e:	d815      	bhi.n	8003acc <UART_SetConfig+0x2d0>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <UART_SetConfig+0x2b0>
 8003aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa8:	d008      	beq.n	8003abc <UART_SetConfig+0x2c0>
 8003aaa:	e00f      	b.n	8003acc <UART_SetConfig+0x2d0>
 8003aac:	2300      	movs	r3, #0
 8003aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ab2:	e022      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aba:	e01e      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003abc:	2304      	movs	r3, #4
 8003abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac2:	e01a      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aca:	e016      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003acc:	2310      	movs	r3, #16
 8003ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad2:	e012      	b.n	8003afa <UART_SetConfig+0x2fe>
 8003ad4:	cfff69f3 	.word	0xcfff69f3
 8003ad8:	40008000 	.word	0x40008000
 8003adc:	40013800 	.word	0x40013800
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40004400 	.word	0x40004400
 8003ae8:	40004800 	.word	0x40004800
 8003aec:	40004c00 	.word	0x40004c00
 8003af0:	40005000 	.word	0x40005000
 8003af4:	2310      	movs	r3, #16
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4aae      	ldr	r2, [pc, #696]	@ (8003db8 <UART_SetConfig+0x5bc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	f040 8097 	bne.w	8003c34 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d823      	bhi.n	8003b56 <UART_SetConfig+0x35a>
 8003b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b14 <UART_SetConfig+0x318>)
 8003b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b14:	08003b39 	.word	0x08003b39
 8003b18:	08003b57 	.word	0x08003b57
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003b57 	.word	0x08003b57
 8003b24:	08003b47 	.word	0x08003b47
 8003b28:	08003b57 	.word	0x08003b57
 8003b2c:	08003b57 	.word	0x08003b57
 8003b30:	08003b57 	.word	0x08003b57
 8003b34:	08003b4f 	.word	0x08003b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b38:	f7fe fd80 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003b3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b3e:	e010      	b.n	8003b62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b40:	4b9e      	ldr	r3, [pc, #632]	@ (8003dbc <UART_SetConfig+0x5c0>)
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b44:	e00d      	b.n	8003b62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b46:	f7fe fd0b 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8003b4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b4c:	e009      	b.n	8003b62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b54:	e005      	b.n	8003b62 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8130 	beq.w	8003dca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	4a94      	ldr	r2, [pc, #592]	@ (8003dc0 <UART_SetConfig+0x5c4>)
 8003b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b74:	461a      	mov	r2, r3
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d305      	bcc.n	8003b9a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d903      	bls.n	8003ba2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ba0:	e113      	b.n	8003dca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	60bb      	str	r3, [r7, #8]
 8003ba8:	60fa      	str	r2, [r7, #12]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	4a84      	ldr	r2, [pc, #528]	@ (8003dc0 <UART_SetConfig+0x5c4>)
 8003bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bc4:	f7fc fb84 	bl	80002d0 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	020b      	lsls	r3, r1, #8
 8003bda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bde:	0202      	lsls	r2, r0, #8
 8003be0:	6979      	ldr	r1, [r7, #20]
 8003be2:	6849      	ldr	r1, [r1, #4]
 8003be4:	0849      	lsrs	r1, r1, #1
 8003be6:	2000      	movs	r0, #0
 8003be8:	460c      	mov	r4, r1
 8003bea:	4605      	mov	r5, r0
 8003bec:	eb12 0804 	adds.w	r8, r2, r4
 8003bf0:	eb43 0905 	adc.w	r9, r3, r5
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	469a      	mov	sl, r3
 8003bfc:	4693      	mov	fp, r2
 8003bfe:	4652      	mov	r2, sl
 8003c00:	465b      	mov	r3, fp
 8003c02:	4640      	mov	r0, r8
 8003c04:	4649      	mov	r1, r9
 8003c06:	f7fc fb63 	bl	80002d0 <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4613      	mov	r3, r2
 8003c10:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c18:	d308      	bcc.n	8003c2c <UART_SetConfig+0x430>
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c20:	d204      	bcs.n	8003c2c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a3a      	ldr	r2, [r7, #32]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	e0ce      	b.n	8003dca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c32:	e0ca      	b.n	8003dca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c3c:	d166      	bne.n	8003d0c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003c3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d827      	bhi.n	8003c96 <UART_SetConfig+0x49a>
 8003c46:	a201      	add	r2, pc, #4	@ (adr r2, 8003c4c <UART_SetConfig+0x450>)
 8003c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4c:	08003c71 	.word	0x08003c71
 8003c50:	08003c79 	.word	0x08003c79
 8003c54:	08003c81 	.word	0x08003c81
 8003c58:	08003c97 	.word	0x08003c97
 8003c5c:	08003c87 	.word	0x08003c87
 8003c60:	08003c97 	.word	0x08003c97
 8003c64:	08003c97 	.word	0x08003c97
 8003c68:	08003c97 	.word	0x08003c97
 8003c6c:	08003c8f 	.word	0x08003c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c70:	f7fe fce4 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003c74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c76:	e014      	b.n	8003ca2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c78:	f7fe fcf6 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 8003c7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c7e:	e010      	b.n	8003ca2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c80:	4b4e      	ldr	r3, [pc, #312]	@ (8003dbc <UART_SetConfig+0x5c0>)
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c84:	e00d      	b.n	8003ca2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c86:	f7fe fc6b 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8003c8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c8c:	e009      	b.n	8003ca2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c94:	e005      	b.n	8003ca2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ca0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8090 	beq.w	8003dca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	4a44      	ldr	r2, [pc, #272]	@ (8003dc0 <UART_SetConfig+0x5c4>)
 8003cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cbc:	005a      	lsls	r2, r3, #1
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	441a      	add	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	2b0f      	cmp	r3, #15
 8003cd4:	d916      	bls.n	8003d04 <UART_SetConfig+0x508>
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cdc:	d212      	bcs.n	8003d04 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f023 030f 	bic.w	r3, r3, #15
 8003ce6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	8bfb      	ldrh	r3, [r7, #30]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	8bfa      	ldrh	r2, [r7, #30]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	e062      	b.n	8003dca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d0a:	e05e      	b.n	8003dca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d828      	bhi.n	8003d66 <UART_SetConfig+0x56a>
 8003d14:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <UART_SetConfig+0x520>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d49 	.word	0x08003d49
 8003d24:	08003d51 	.word	0x08003d51
 8003d28:	08003d67 	.word	0x08003d67
 8003d2c:	08003d57 	.word	0x08003d57
 8003d30:	08003d67 	.word	0x08003d67
 8003d34:	08003d67 	.word	0x08003d67
 8003d38:	08003d67 	.word	0x08003d67
 8003d3c:	08003d5f 	.word	0x08003d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d40:	f7fe fc7c 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003d44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d46:	e014      	b.n	8003d72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d48:	f7fe fc8e 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 8003d4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d4e:	e010      	b.n	8003d72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d50:	4b1a      	ldr	r3, [pc, #104]	@ (8003dbc <UART_SetConfig+0x5c0>)
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d54:	e00d      	b.n	8003d72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d56:	f7fe fc03 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8003d5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d5c:	e009      	b.n	8003d72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d64:	e005      	b.n	8003d72 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d70:	bf00      	nop
    }

    if (pclk != 0U)
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d028      	beq.n	8003dca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	4a10      	ldr	r2, [pc, #64]	@ (8003dc0 <UART_SetConfig+0x5c4>)
 8003d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d82:	461a      	mov	r2, r3
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	441a      	add	r2, r3
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	2b0f      	cmp	r3, #15
 8003da0:	d910      	bls.n	8003dc4 <UART_SetConfig+0x5c8>
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da8:	d20c      	bcs.n	8003dc4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	e009      	b.n	8003dca <UART_SetConfig+0x5ce>
 8003db6:	bf00      	nop
 8003db8:	40008000 	.word	0x40008000
 8003dbc:	00f42400 	.word	0x00f42400
 8003dc0:	0800621c 	.word	0x0800621c
      }
      else
      {
        ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2200      	movs	r2, #0
 8003de4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003de6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3730      	adds	r7, #48	@ 0x30
 8003dee:	46bd      	mov	sp, r7
 8003df0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01a      	beq.n	8003f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef2:	d10a      	bne.n	8003f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b098      	sub	sp, #96	@ 0x60
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f48:	f7fc ffe2 	bl	8000f10 <HAL_GetTick>
 8003f4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d12f      	bne.n	8003fbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f64:	2200      	movs	r2, #0
 8003f66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f88e 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d022      	beq.n	8003fbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e6      	bne.n	8003f76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e063      	b.n	8004084 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d149      	bne.n	800405e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f857 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d03c      	beq.n	800405e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004002:	633b      	str	r3, [r7, #48]	@ 0x30
 8004004:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e6      	bne.n	8003fe4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3308      	adds	r3, #8
 800401c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	60fb      	str	r3, [r7, #12]
   return(result);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3308      	adds	r3, #8
 8004034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004036:	61fa      	str	r2, [r7, #28]
 8004038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	69b9      	ldr	r1, [r7, #24]
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	617b      	str	r3, [r7, #20]
   return(result);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e5      	bne.n	8004016 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e012      	b.n	8004084 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3758      	adds	r7, #88	@ 0x58
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409c:	e04f      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d04b      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a6:	f7fc ff33 	bl	8000f10 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <UART_WaitOnFlagUntilTimeout+0x30>
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e04e      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d037      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b80      	cmp	r3, #128	@ 0x80
 80040d2:	d034      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b40      	cmp	r3, #64	@ 0x40
 80040d8:	d031      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d110      	bne.n	800410a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2208      	movs	r2, #8
 80040ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fa42 	bl	800457a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2208      	movs	r2, #8
 80040fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e029      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004118:	d111      	bne.n	800413e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fa28 	bl	800457a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e00f      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	429a      	cmp	r2, r3
 800415a:	d0a0      	beq.n	800409e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004168:	b480      	push	{r7}
 800416a:	b0a3      	sub	sp, #140	@ 0x8c
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419a:	d10e      	bne.n	80041ba <UART_Start_Receive_IT+0x52>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <UART_Start_Receive_IT+0x48>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80041aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80041ae:	e02d      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	22ff      	movs	r2, #255	@ 0xff
 80041b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80041b8:	e028      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10d      	bne.n	80041de <UART_Start_Receive_IT+0x76>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <UART_Start_Receive_IT+0x6c>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	22ff      	movs	r2, #255	@ 0xff
 80041ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80041d2:	e01b      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	227f      	movs	r2, #127	@ 0x7f
 80041d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80041dc:	e016      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041e6:	d10d      	bne.n	8004204 <UART_Start_Receive_IT+0x9c>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <UART_Start_Receive_IT+0x92>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	227f      	movs	r2, #127	@ 0x7f
 80041f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80041f8:	e008      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	223f      	movs	r2, #63	@ 0x3f
 80041fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004202:	e003      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2222      	movs	r2, #34	@ 0x22
 8004218:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800422c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004240:	673a      	str	r2, [r7, #112]	@ 0x70
 8004242:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004246:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800424e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e3      	bne.n	800421c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800425c:	d14f      	bne.n	80042fe <UART_Start_Receive_IT+0x196>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	429a      	cmp	r2, r3
 8004268:	d349      	bcc.n	80042fe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004272:	d107      	bne.n	8004284 <UART_Start_Receive_IT+0x11c>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a47      	ldr	r2, [pc, #284]	@ (800439c <UART_Start_Receive_IT+0x234>)
 8004280:	675a      	str	r2, [r3, #116]	@ 0x74
 8004282:	e002      	b.n	800428a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a46      	ldr	r2, [pc, #280]	@ (80043a0 <UART_Start_Receive_IT+0x238>)
 8004288:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01a      	beq.n	80042c8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80042a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042b6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80042ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80042c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e4      	bne.n	8004292 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3308      	adds	r3, #8
 80042ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80042e8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80042ea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80042ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80042f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e5      	bne.n	80042c8 <UART_Start_Receive_IT+0x160>
 80042fc:	e046      	b.n	800438c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004306:	d107      	bne.n	8004318 <UART_Start_Receive_IT+0x1b0>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d103      	bne.n	8004318 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a24      	ldr	r2, [pc, #144]	@ (80043a4 <UART_Start_Receive_IT+0x23c>)
 8004314:	675a      	str	r2, [r3, #116]	@ 0x74
 8004316:	e002      	b.n	800431e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a23      	ldr	r2, [pc, #140]	@ (80043a8 <UART_Start_Receive_IT+0x240>)
 800431c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d019      	beq.n	800435a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800433a:	677b      	str	r3, [r7, #116]	@ 0x74
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004344:	637b      	str	r3, [r7, #52]	@ 0x34
 8004346:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800434a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e6      	bne.n	8004326 <UART_Start_Receive_IT+0x1be>
 8004358:	e018      	b.n	800438c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	613b      	str	r3, [r7, #16]
   return(result);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f043 0320 	orr.w	r3, r3, #32
 800436e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004378:	623b      	str	r3, [r7, #32]
 800437a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	69f9      	ldr	r1, [r7, #28]
 800437e:	6a3a      	ldr	r2, [r7, #32]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	61bb      	str	r3, [r7, #24]
   return(result);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e6      	bne.n	800435a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	378c      	adds	r7, #140	@ 0x8c
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	080052c9 	.word	0x080052c9
 80043a0:	08004f69 	.word	0x08004f69
 80043a4:	08004db1 	.word	0x08004db1
 80043a8:	08004bf9 	.word	0x08004bf9

080043ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b096      	sub	sp, #88	@ 0x58
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	4613      	mov	r3, r2
 80043b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2222      	movs	r2, #34	@ 0x22
 80043d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d02d      	beq.n	800443e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e8:	4a40      	ldr	r2, [pc, #256]	@ (80044ec <UART_Start_Receive_DMA+0x140>)
 80043ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f2:	4a3f      	ldr	r2, [pc, #252]	@ (80044f0 <UART_Start_Receive_DMA+0x144>)
 80043f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043fc:	4a3d      	ldr	r2, [pc, #244]	@ (80044f4 <UART_Start_Receive_DMA+0x148>)
 80043fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004406:	2200      	movs	r2, #0
 8004408:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3324      	adds	r3, #36	@ 0x24
 8004416:	4619      	mov	r1, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441c:	461a      	mov	r2, r3
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	f7fc ff3a 	bl	8001298 <HAL_DMA_Start_IT>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2210      	movs	r2, #16
 800442e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e051      	b.n	80044e2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d018      	beq.n	8004478 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800445a:	657b      	str	r3, [r7, #84]	@ 0x54
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004464:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004466:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800446a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e6      	bne.n	8004446 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3308      	adds	r3, #8
 800447e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3308      	adds	r3, #8
 8004496:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004498:	637a      	str	r2, [r7, #52]	@ 0x34
 800449a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800449e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80044a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e5      	bne.n	8004478 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3308      	adds	r3, #8
 80044b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	613b      	str	r3, [r7, #16]
   return(result);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3308      	adds	r3, #8
 80044ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044cc:	623a      	str	r2, [r7, #32]
 80044ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	69f9      	ldr	r1, [r7, #28]
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e5      	bne.n	80044ac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3758      	adds	r7, #88	@ 0x58
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	08004647 	.word	0x08004647
 80044f0:	08004773 	.word	0x08004773
 80044f4:	080047b1 	.word	0x080047b1

080044f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b08f      	sub	sp, #60	@ 0x3c
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	61fb      	str	r3, [r7, #28]
   return(result);
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004514:	637b      	str	r3, [r7, #52]	@ 0x34
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004520:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e6      	bne.n	8004500 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3308      	adds	r3, #8
 8004538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	60bb      	str	r3, [r7, #8]
   return(result);
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004548:	633b      	str	r3, [r7, #48]	@ 0x30
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3308      	adds	r3, #8
 8004550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004552:	61ba      	str	r2, [r7, #24]
 8004554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	6979      	ldr	r1, [r7, #20]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	613b      	str	r3, [r7, #16]
   return(result);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e5      	bne.n	8004532 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800456e:	bf00      	nop
 8004570:	373c      	adds	r7, #60	@ 0x3c
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800457a:	b480      	push	{r7}
 800457c:	b095      	sub	sp, #84	@ 0x54
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e6      	bne.n	8004582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3308      	adds	r3, #8
 80045ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3308      	adds	r3, #8
 80045d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e3      	bne.n	80045b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d118      	bne.n	8004626 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	60bb      	str	r3, [r7, #8]
   return(result);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f023 0310 	bic.w	r3, r3, #16
 8004608:	647b      	str	r3, [r7, #68]	@ 0x44
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004612:	61bb      	str	r3, [r7, #24]
 8004614:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6979      	ldr	r1, [r7, #20]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	613b      	str	r3, [r7, #16]
   return(result);
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e6      	bne.n	80045f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800463a:	bf00      	nop
 800463c:	3754      	adds	r7, #84	@ 0x54
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b09c      	sub	sp, #112	@ 0x70
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d171      	bne.n	8004746 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004664:	2200      	movs	r2, #0
 8004666:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800466a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800467a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800467e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004688:	65bb      	str	r3, [r7, #88]	@ 0x58
 800468a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800468e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e6      	bne.n	800466a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3308      	adds	r3, #8
 80046a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80046b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3308      	adds	r3, #8
 80046ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80046bc:	647a      	str	r2, [r7, #68]	@ 0x44
 80046be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3308      	adds	r3, #8
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	623b      	str	r3, [r7, #32]
   return(result);
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80046e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3308      	adds	r3, #8
 80046ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80046f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e5      	bne.n	80046d0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004706:	2220      	movs	r2, #32
 8004708:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800470c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800470e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d118      	bne.n	8004746 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	60fb      	str	r3, [r7, #12]
   return(result);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f023 0310 	bic.w	r3, r3, #16
 8004728:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800472a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	69b9      	ldr	r1, [r7, #24]
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	617b      	str	r3, [r7, #20]
   return(result);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e6      	bne.n	8004714 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004746:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004748:	2200      	movs	r2, #0
 800474a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800474e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004750:	2b01      	cmp	r3, #1
 8004752:	d107      	bne.n	8004764 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004756:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800475a:	4619      	mov	r1, r3
 800475c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800475e:	f7ff f841 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004762:	e002      	b.n	800476a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004764:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004766:	f7fc f995 	bl	8000a94 <HAL_UART_RxCpltCallback>
}
 800476a:	bf00      	nop
 800476c:	3770      	adds	r7, #112	@ 0x70
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800478a:	2b01      	cmp	r3, #1
 800478c:	d109      	bne.n	80047a2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	b29b      	uxth	r3, r3
 8004798:	4619      	mov	r1, r3
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7ff f822 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047a0:	e002      	b.n	80047a8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7ff f80a 	bl	80037bc <HAL_UART_RxHalfCpltCallback>
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d8:	2b80      	cmp	r3, #128	@ 0x80
 80047da:	d109      	bne.n	80047f0 <UART_DMAError+0x40>
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b21      	cmp	r3, #33	@ 0x21
 80047e0:	d106      	bne.n	80047f0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80047ea:	6978      	ldr	r0, [r7, #20]
 80047ec:	f7ff fe84 	bl	80044f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fa:	2b40      	cmp	r3, #64	@ 0x40
 80047fc:	d109      	bne.n	8004812 <UART_DMAError+0x62>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b22      	cmp	r3, #34	@ 0x22
 8004802:	d106      	bne.n	8004812 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2200      	movs	r2, #0
 8004808:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800480c:	6978      	ldr	r0, [r7, #20]
 800480e:	f7ff feb4 	bl	800457a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004818:	f043 0210 	orr.w	r2, r3, #16
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004822:	6978      	ldr	r0, [r7, #20]
 8004824:	f7fe ffd4 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004828:	bf00      	nop
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f7fe ffbe 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004854:	bf00      	nop
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800485c:	b480      	push	{r7}
 800485e:	b08f      	sub	sp, #60	@ 0x3c
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486a:	2b21      	cmp	r3, #33	@ 0x21
 800486c:	d14c      	bne.n	8004908 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d132      	bne.n	80048e0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	61fb      	str	r3, [r7, #28]
   return(result);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800488e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800489a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800489e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e6      	bne.n	800487a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	61bb      	str	r3, [r7, #24]
 80048cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6979      	ldr	r1, [r7, #20]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	613b      	str	r3, [r7, #16]
   return(result);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e6      	bne.n	80048ac <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80048de:	e013      	b.n	8004908 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8004908:	bf00      	nop
 800490a:	373c      	adds	r7, #60	@ 0x3c
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004914:	b480      	push	{r7}
 8004916:	b091      	sub	sp, #68	@ 0x44
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004922:	2b21      	cmp	r3, #33	@ 0x21
 8004924:	d151      	bne.n	80049ca <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d132      	bne.n	8004998 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	623b      	str	r3, [r7, #32]
   return(result);
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004946:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004950:	633b      	str	r3, [r7, #48]	@ 0x30
 8004952:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800495e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e6      	bne.n	8004932 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	60fb      	str	r3, [r7, #12]
   return(result);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004978:	637b      	str	r3, [r7, #52]	@ 0x34
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	69b9      	ldr	r1, [r7, #24]
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	617b      	str	r3, [r7, #20]
   return(result);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e6      	bne.n	8004964 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004996:	e018      	b.n	80049ca <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800499c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800499e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b2:	1c9a      	adds	r2, r3, #2
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80049ca:	bf00      	nop
 80049cc:	3744      	adds	r7, #68	@ 0x44
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b091      	sub	sp, #68	@ 0x44
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	2b21      	cmp	r3, #33	@ 0x21
 80049e6:	d160      	bne.n	8004aaa <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80049ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80049f0:	e057      	b.n	8004aa2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d133      	bne.n	8004a66 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3308      	adds	r3, #8
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e5      	bne.n	80049fe <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	69b9      	ldr	r1, [r7, #24]
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e6      	bne.n	8004a32 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004a64:	e021      	b.n	8004aaa <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d013      	beq.n	8004a9c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004a9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004aa2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1a4      	bne.n	80049f2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004aa8:	e7ff      	b.n	8004aaa <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004aaa:	bf00      	nop
 8004aac:	3744      	adds	r7, #68	@ 0x44
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b091      	sub	sp, #68	@ 0x44
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac4:	2b21      	cmp	r3, #33	@ 0x21
 8004ac6:	d165      	bne.n	8004b94 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004ace:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004ad0:	e05c      	b.n	8004b8c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d133      	bne.n	8004b46 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3308      	adds	r3, #8
 8004afc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e5      	bne.n	8004ade <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b26:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6979      	ldr	r1, [r7, #20]
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e6      	bne.n	8004b12 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004b44:	e026      	b.n	8004b94 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d018      	beq.n	8004b86 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b58:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b68:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b6e:	1c9a      	adds	r2, r3, #2
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004b86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004b8c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d19f      	bne.n	8004ad2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004b92:	e7ff      	b.n	8004b94 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004b94:	bf00      	nop
 8004b96:	3744      	adds	r7, #68	@ 0x44
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6979      	ldr	r1, [r7, #20]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e6      	bne.n	8004ba8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fe fddd 	bl	80037a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bee:	bf00      	nop
 8004bf0:	3720      	adds	r7, #32
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b09c      	sub	sp, #112	@ 0x70
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004c06:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c10:	2b22      	cmp	r3, #34	@ 0x22
 8004c12:	f040 80be 	bne.w	8004d92 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004c24:	b2d9      	uxtb	r1, r3
 8004c26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c30:	400a      	ands	r2, r1
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 80a1 	bne.w	8004da2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e6      	bne.n	8004c60 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3308      	adds	r3, #8
 8004c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004cb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004cb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e5      	bne.n	8004c92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a33      	ldr	r2, [pc, #204]	@ (8004dac <UART_RxISR_8BIT+0x1b4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d01f      	beq.n	8004d24 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d018      	beq.n	8004d24 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	623b      	str	r3, [r7, #32]
   return(result);
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d06:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e6      	bne.n	8004cf2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d12e      	bne.n	8004d8a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0310 	bic.w	r3, r3, #16
 8004d46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	69b9      	ldr	r1, [r7, #24]
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e6      	bne.n	8004d32 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f003 0310 	and.w	r3, r3, #16
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d103      	bne.n	8004d7a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2210      	movs	r2, #16
 8004d78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fe fd2e 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d88:	e00b      	b.n	8004da2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fb fe82 	bl	8000a94 <HAL_UART_RxCpltCallback>
}
 8004d90:	e007      	b.n	8004da2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0208 	orr.w	r2, r2, #8
 8004da0:	619a      	str	r2, [r3, #24]
}
 8004da2:	bf00      	nop
 8004da4:	3770      	adds	r7, #112	@ 0x70
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40008000 	.word	0x40008000

08004db0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b09c      	sub	sp, #112	@ 0x70
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004dbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dc8:	2b22      	cmp	r3, #34	@ 0x22
 8004dca:	f040 80be 	bne.w	8004f4a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004dde:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004de2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004de6:	4013      	ands	r3, r2
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df2:	1c9a      	adds	r2, r3, #2
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f040 80a1 	bne.w	8004f5a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e36:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e38:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004e3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e6      	bne.n	8004e18 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004e6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e5      	bne.n	8004e4a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a33      	ldr	r2, [pc, #204]	@ (8004f64 <UART_RxISR_16BIT+0x1b4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d01f      	beq.n	8004edc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d018      	beq.n	8004edc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e6      	bne.n	8004eaa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d12e      	bne.n	8004f42 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f023 0310 	bic.w	r3, r3, #16
 8004efe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6979      	ldr	r1, [r7, #20]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	613b      	str	r3, [r7, #16]
   return(result);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e6      	bne.n	8004eea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d103      	bne.n	8004f32 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2210      	movs	r2, #16
 8004f30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fe fc52 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f40:	e00b      	b.n	8004f5a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fb fda6 	bl	8000a94 <HAL_UART_RxCpltCallback>
}
 8004f48:	e007      	b.n	8004f5a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0208 	orr.w	r2, r2, #8
 8004f58:	619a      	str	r2, [r3, #24]
}
 8004f5a:	bf00      	nop
 8004f5c:	3770      	adds	r7, #112	@ 0x70
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40008000 	.word	0x40008000

08004f68 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b0ac      	sub	sp, #176	@ 0xb0
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004f76:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f9e:	2b22      	cmp	r3, #34	@ 0x22
 8004fa0:	f040 8182 	bne.w	80052a8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004faa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004fae:	e125      	b.n	80051fc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004fbe:	b2d9      	uxtb	r1, r3
 8004fc0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fca:	400a      	ands	r2, r1
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d053      	beq.n	80050aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d011      	beq.n	8005032 <UART_RxISR_8BIT_FIFOEN+0xca>
 800500e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2201      	movs	r2, #1
 8005020:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005028:	f043 0201 	orr.w	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d011      	beq.n	8005062 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800503e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2202      	movs	r2, #2
 8005050:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005058:	f043 0204 	orr.w	r2, r3, #4
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	d011      	beq.n	8005092 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800506e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00b      	beq.n	8005092 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2204      	movs	r2, #4
 8005080:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005088:	f043 0202 	orr.w	r2, r3, #2
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005098:	2b00      	cmp	r3, #0
 800509a:	d006      	beq.n	80050aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7fe fb97 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f040 80a2 	bne.w	80051fc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80050c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050dc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80050e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80050e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e4      	bne.n	80050b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3308      	adds	r3, #8
 80050f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80050fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005100:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3308      	adds	r3, #8
 8005112:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005116:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005118:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800511c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005124:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e1      	bne.n	80050ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a5f      	ldr	r2, [pc, #380]	@ (80052c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d021      	beq.n	800518c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01a      	beq.n	800518c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005166:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800516a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005178:	657b      	str	r3, [r7, #84]	@ 0x54
 800517a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800517e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e4      	bne.n	8005156 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d130      	bne.n	80051f6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051aa:	f023 0310 	bic.w	r3, r3, #16
 80051ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e4      	bne.n	800519a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d103      	bne.n	80051e6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2210      	movs	r2, #16
 80051e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fe faf8 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
 80051f4:	e002      	b.n	80051fc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fb fc4c 	bl	8000a94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051fc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005200:	2b00      	cmp	r3, #0
 8005202:	d006      	beq.n	8005212 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b00      	cmp	r3, #0
 800520e:	f47f aecf 	bne.w	8004fb0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005218:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800521c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005220:	2b00      	cmp	r3, #0
 8005222:	d049      	beq.n	80052b8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800522a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800522e:	429a      	cmp	r2, r3
 8005230:	d242      	bcs.n	80052b8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3308      	adds	r3, #8
 8005238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	61fb      	str	r3, [r7, #28]
   return(result);
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3308      	adds	r3, #8
 8005252:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005258:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800525c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e3      	bne.n	8005232 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a15      	ldr	r2, [pc, #84]	@ (80052c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800526e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	60bb      	str	r3, [r7, #8]
   return(result);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f043 0320 	orr.w	r3, r3, #32
 8005284:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6979      	ldr	r1, [r7, #20]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	613b      	str	r3, [r7, #16]
   return(result);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e4      	bne.n	8005270 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052a6:	e007      	b.n	80052b8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0208 	orr.w	r2, r2, #8
 80052b6:	619a      	str	r2, [r3, #24]
}
 80052b8:	bf00      	nop
 80052ba:	37b0      	adds	r7, #176	@ 0xb0
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40008000 	.word	0x40008000
 80052c4:	08004bf9 	.word	0x08004bf9

080052c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b0ae      	sub	sp, #184	@ 0xb8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80052d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052fe:	2b22      	cmp	r3, #34	@ 0x22
 8005300:	f040 8186 	bne.w	8005610 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800530a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800530e:	e129      	b.n	8005564 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005316:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005322:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005326:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800532a:	4013      	ands	r3, r2
 800532c:	b29a      	uxth	r2, r3
 800532e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005332:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005338:	1c9a      	adds	r2, r3, #2
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800535a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	2b00      	cmp	r3, #0
 8005364:	d053      	beq.n	800540e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005366:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d011      	beq.n	8005396 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2201      	movs	r2, #1
 8005384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538c:	f043 0201 	orr.w	r2, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005396:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d011      	beq.n	80053c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80053a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2202      	movs	r2, #2
 80053b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053bc:	f043 0204 	orr.w	r2, r3, #4
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d011      	beq.n	80053f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80053d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2204      	movs	r2, #4
 80053e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ec:	f043 0202 	orr.w	r2, r3, #2
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d006      	beq.n	800540e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7fe f9e5 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	f040 80a4 	bne.w	8005564 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800542a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800542c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800543e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005442:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005446:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e2      	bne.n	800541c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3308      	adds	r3, #8
 800545c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3308      	adds	r3, #8
 800547a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800547e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005480:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005484:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800548c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e1      	bne.n	8005456 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a5f      	ldr	r2, [pc, #380]	@ (8005628 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d021      	beq.n	80054f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01a      	beq.n	80054f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e4      	bne.n	80054be <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d130      	bne.n	800555e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005512:	f023 0310 	bic.w	r3, r3, #16
 8005516:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005524:	647b      	str	r3, [r7, #68]	@ 0x44
 8005526:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800552a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e4      	bne.n	8005502 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b10      	cmp	r3, #16
 8005544:	d103      	bne.n	800554e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2210      	movs	r2, #16
 800554c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fe f944 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
 800555c:	e002      	b.n	8005564 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fb fa98 	bl	8000a94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005564:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005568:	2b00      	cmp	r3, #0
 800556a:	d006      	beq.n	800557a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800556c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	f47f aecb 	bne.w	8005310 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005580:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005584:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005588:	2b00      	cmp	r3, #0
 800558a:	d049      	beq.n	8005620 <UART_RxISR_16BIT_FIFOEN+0x358>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005592:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005596:	429a      	cmp	r2, r3
 8005598:	d242      	bcs.n	8005620 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	623b      	str	r3, [r7, #32]
   return(result);
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3308      	adds	r3, #8
 80055ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80055be:	633a      	str	r2, [r7, #48]	@ 0x30
 80055c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e3      	bne.n	800559a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a15      	ldr	r2, [pc, #84]	@ (800562c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80055d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f043 0320 	orr.w	r3, r3, #32
 80055ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055fa:	61fb      	str	r3, [r7, #28]
 80055fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	69b9      	ldr	r1, [r7, #24]
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	617b      	str	r3, [r7, #20]
   return(result);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e4      	bne.n	80055d8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800560e:	e007      	b.n	8005620 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0208 	orr.w	r2, r2, #8
 800561e:	619a      	str	r2, [r3, #24]
}
 8005620:	bf00      	nop
 8005622:	37b8      	adds	r7, #184	@ 0xb8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40008000 	.word	0x40008000
 800562c:	08004db1 	.word	0x08004db1

08005630 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_UARTEx_DisableFifoMode+0x16>
 800567e:	2302      	movs	r3, #2
 8005680:	e027      	b.n	80056d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2224      	movs	r2, #36	@ 0x24
 800568e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80056b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b084      	sub	sp, #16
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e02d      	b.n	8005752 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2224      	movs	r2, #36	@ 0x24
 8005702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0201 	bic.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f850 	bl	80057d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800576e:	2302      	movs	r3, #2
 8005770:	e02d      	b.n	80057ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2224      	movs	r2, #36	@ 0x24
 800577e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f812 	bl	80057d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d108      	bne.n	80057fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057f8:	e031      	b.n	800585e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057fa:	2308      	movs	r3, #8
 80057fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057fe:	2308      	movs	r3, #8
 8005800:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	0e5b      	lsrs	r3, r3, #25
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	0f5b      	lsrs	r3, r3, #29
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005822:	7bbb      	ldrb	r3, [r7, #14]
 8005824:	7b3a      	ldrb	r2, [r7, #12]
 8005826:	4911      	ldr	r1, [pc, #68]	@ (800586c <UARTEx_SetNbDataToProcess+0x94>)
 8005828:	5c8a      	ldrb	r2, [r1, r2]
 800582a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800582e:	7b3a      	ldrb	r2, [r7, #12]
 8005830:	490f      	ldr	r1, [pc, #60]	@ (8005870 <UARTEx_SetNbDataToProcess+0x98>)
 8005832:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005834:	fb93 f3f2 	sdiv	r3, r3, r2
 8005838:	b29a      	uxth	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	7b7a      	ldrb	r2, [r7, #13]
 8005844:	4909      	ldr	r1, [pc, #36]	@ (800586c <UARTEx_SetNbDataToProcess+0x94>)
 8005846:	5c8a      	ldrb	r2, [r1, r2]
 8005848:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800584c:	7b7a      	ldrb	r2, [r7, #13]
 800584e:	4908      	ldr	r1, [pc, #32]	@ (8005870 <UARTEx_SetNbDataToProcess+0x98>)
 8005850:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005852:	fb93 f3f2 	sdiv	r3, r3, r2
 8005856:	b29a      	uxth	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	08006234 	.word	0x08006234
 8005870:	0800623c 	.word	0x0800623c

08005874 <siprintf>:
 8005874:	b40e      	push	{r1, r2, r3}
 8005876:	b500      	push	{lr}
 8005878:	b09c      	sub	sp, #112	@ 0x70
 800587a:	ab1d      	add	r3, sp, #116	@ 0x74
 800587c:	9002      	str	r0, [sp, #8]
 800587e:	9006      	str	r0, [sp, #24]
 8005880:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005884:	4809      	ldr	r0, [pc, #36]	@ (80058ac <siprintf+0x38>)
 8005886:	9107      	str	r1, [sp, #28]
 8005888:	9104      	str	r1, [sp, #16]
 800588a:	4909      	ldr	r1, [pc, #36]	@ (80058b0 <siprintf+0x3c>)
 800588c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005890:	9105      	str	r1, [sp, #20]
 8005892:	6800      	ldr	r0, [r0, #0]
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	a902      	add	r1, sp, #8
 8005898:	f000 f994 	bl	8005bc4 <_svfiprintf_r>
 800589c:	9b02      	ldr	r3, [sp, #8]
 800589e:	2200      	movs	r2, #0
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	b01c      	add	sp, #112	@ 0x70
 80058a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058a8:	b003      	add	sp, #12
 80058aa:	4770      	bx	lr
 80058ac:	20000020 	.word	0x20000020
 80058b0:	ffff0208 	.word	0xffff0208

080058b4 <memset>:
 80058b4:	4402      	add	r2, r0
 80058b6:	4603      	mov	r3, r0
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d100      	bne.n	80058be <memset+0xa>
 80058bc:	4770      	bx	lr
 80058be:	f803 1b01 	strb.w	r1, [r3], #1
 80058c2:	e7f9      	b.n	80058b8 <memset+0x4>

080058c4 <__errno>:
 80058c4:	4b01      	ldr	r3, [pc, #4]	@ (80058cc <__errno+0x8>)
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	20000020 	.word	0x20000020

080058d0 <__libc_init_array>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005908 <__libc_init_array+0x38>)
 80058d4:	4c0d      	ldr	r4, [pc, #52]	@ (800590c <__libc_init_array+0x3c>)
 80058d6:	1b64      	subs	r4, r4, r5
 80058d8:	10a4      	asrs	r4, r4, #2
 80058da:	2600      	movs	r6, #0
 80058dc:	42a6      	cmp	r6, r4
 80058de:	d109      	bne.n	80058f4 <__libc_init_array+0x24>
 80058e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005910 <__libc_init_array+0x40>)
 80058e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005914 <__libc_init_array+0x44>)
 80058e4:	f000 fc66 	bl	80061b4 <_init>
 80058e8:	1b64      	subs	r4, r4, r5
 80058ea:	10a4      	asrs	r4, r4, #2
 80058ec:	2600      	movs	r6, #0
 80058ee:	42a6      	cmp	r6, r4
 80058f0:	d105      	bne.n	80058fe <__libc_init_array+0x2e>
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f8:	4798      	blx	r3
 80058fa:	3601      	adds	r6, #1
 80058fc:	e7ee      	b.n	80058dc <__libc_init_array+0xc>
 80058fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005902:	4798      	blx	r3
 8005904:	3601      	adds	r6, #1
 8005906:	e7f2      	b.n	80058ee <__libc_init_array+0x1e>
 8005908:	08006280 	.word	0x08006280
 800590c:	08006280 	.word	0x08006280
 8005910:	08006280 	.word	0x08006280
 8005914:	08006284 	.word	0x08006284

08005918 <__retarget_lock_acquire_recursive>:
 8005918:	4770      	bx	lr

0800591a <__retarget_lock_release_recursive>:
 800591a:	4770      	bx	lr

0800591c <_free_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4605      	mov	r5, r0
 8005920:	2900      	cmp	r1, #0
 8005922:	d041      	beq.n	80059a8 <_free_r+0x8c>
 8005924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005928:	1f0c      	subs	r4, r1, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	bfb8      	it	lt
 800592e:	18e4      	addlt	r4, r4, r3
 8005930:	f000 f8e0 	bl	8005af4 <__malloc_lock>
 8005934:	4a1d      	ldr	r2, [pc, #116]	@ (80059ac <_free_r+0x90>)
 8005936:	6813      	ldr	r3, [r2, #0]
 8005938:	b933      	cbnz	r3, 8005948 <_free_r+0x2c>
 800593a:	6063      	str	r3, [r4, #4]
 800593c:	6014      	str	r4, [r2, #0]
 800593e:	4628      	mov	r0, r5
 8005940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005944:	f000 b8dc 	b.w	8005b00 <__malloc_unlock>
 8005948:	42a3      	cmp	r3, r4
 800594a:	d908      	bls.n	800595e <_free_r+0x42>
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	1821      	adds	r1, r4, r0
 8005950:	428b      	cmp	r3, r1
 8005952:	bf01      	itttt	eq
 8005954:	6819      	ldreq	r1, [r3, #0]
 8005956:	685b      	ldreq	r3, [r3, #4]
 8005958:	1809      	addeq	r1, r1, r0
 800595a:	6021      	streq	r1, [r4, #0]
 800595c:	e7ed      	b.n	800593a <_free_r+0x1e>
 800595e:	461a      	mov	r2, r3
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b10b      	cbz	r3, 8005968 <_free_r+0x4c>
 8005964:	42a3      	cmp	r3, r4
 8005966:	d9fa      	bls.n	800595e <_free_r+0x42>
 8005968:	6811      	ldr	r1, [r2, #0]
 800596a:	1850      	adds	r0, r2, r1
 800596c:	42a0      	cmp	r0, r4
 800596e:	d10b      	bne.n	8005988 <_free_r+0x6c>
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	4401      	add	r1, r0
 8005974:	1850      	adds	r0, r2, r1
 8005976:	4283      	cmp	r3, r0
 8005978:	6011      	str	r1, [r2, #0]
 800597a:	d1e0      	bne.n	800593e <_free_r+0x22>
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	6053      	str	r3, [r2, #4]
 8005982:	4408      	add	r0, r1
 8005984:	6010      	str	r0, [r2, #0]
 8005986:	e7da      	b.n	800593e <_free_r+0x22>
 8005988:	d902      	bls.n	8005990 <_free_r+0x74>
 800598a:	230c      	movs	r3, #12
 800598c:	602b      	str	r3, [r5, #0]
 800598e:	e7d6      	b.n	800593e <_free_r+0x22>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	1821      	adds	r1, r4, r0
 8005994:	428b      	cmp	r3, r1
 8005996:	bf04      	itt	eq
 8005998:	6819      	ldreq	r1, [r3, #0]
 800599a:	685b      	ldreq	r3, [r3, #4]
 800599c:	6063      	str	r3, [r4, #4]
 800599e:	bf04      	itt	eq
 80059a0:	1809      	addeq	r1, r1, r0
 80059a2:	6021      	streq	r1, [r4, #0]
 80059a4:	6054      	str	r4, [r2, #4]
 80059a6:	e7ca      	b.n	800593e <_free_r+0x22>
 80059a8:	bd38      	pop	{r3, r4, r5, pc}
 80059aa:	bf00      	nop
 80059ac:	20000384 	.word	0x20000384

080059b0 <sbrk_aligned>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	4e0f      	ldr	r6, [pc, #60]	@ (80059f0 <sbrk_aligned+0x40>)
 80059b4:	460c      	mov	r4, r1
 80059b6:	6831      	ldr	r1, [r6, #0]
 80059b8:	4605      	mov	r5, r0
 80059ba:	b911      	cbnz	r1, 80059c2 <sbrk_aligned+0x12>
 80059bc:	f000 fba6 	bl	800610c <_sbrk_r>
 80059c0:	6030      	str	r0, [r6, #0]
 80059c2:	4621      	mov	r1, r4
 80059c4:	4628      	mov	r0, r5
 80059c6:	f000 fba1 	bl	800610c <_sbrk_r>
 80059ca:	1c43      	adds	r3, r0, #1
 80059cc:	d103      	bne.n	80059d6 <sbrk_aligned+0x26>
 80059ce:	f04f 34ff 	mov.w	r4, #4294967295
 80059d2:	4620      	mov	r0, r4
 80059d4:	bd70      	pop	{r4, r5, r6, pc}
 80059d6:	1cc4      	adds	r4, r0, #3
 80059d8:	f024 0403 	bic.w	r4, r4, #3
 80059dc:	42a0      	cmp	r0, r4
 80059de:	d0f8      	beq.n	80059d2 <sbrk_aligned+0x22>
 80059e0:	1a21      	subs	r1, r4, r0
 80059e2:	4628      	mov	r0, r5
 80059e4:	f000 fb92 	bl	800610c <_sbrk_r>
 80059e8:	3001      	adds	r0, #1
 80059ea:	d1f2      	bne.n	80059d2 <sbrk_aligned+0x22>
 80059ec:	e7ef      	b.n	80059ce <sbrk_aligned+0x1e>
 80059ee:	bf00      	nop
 80059f0:	20000380 	.word	0x20000380

080059f4 <_malloc_r>:
 80059f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f8:	1ccd      	adds	r5, r1, #3
 80059fa:	f025 0503 	bic.w	r5, r5, #3
 80059fe:	3508      	adds	r5, #8
 8005a00:	2d0c      	cmp	r5, #12
 8005a02:	bf38      	it	cc
 8005a04:	250c      	movcc	r5, #12
 8005a06:	2d00      	cmp	r5, #0
 8005a08:	4606      	mov	r6, r0
 8005a0a:	db01      	blt.n	8005a10 <_malloc_r+0x1c>
 8005a0c:	42a9      	cmp	r1, r5
 8005a0e:	d904      	bls.n	8005a1a <_malloc_r+0x26>
 8005a10:	230c      	movs	r3, #12
 8005a12:	6033      	str	r3, [r6, #0]
 8005a14:	2000      	movs	r0, #0
 8005a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005af0 <_malloc_r+0xfc>
 8005a1e:	f000 f869 	bl	8005af4 <__malloc_lock>
 8005a22:	f8d8 3000 	ldr.w	r3, [r8]
 8005a26:	461c      	mov	r4, r3
 8005a28:	bb44      	cbnz	r4, 8005a7c <_malloc_r+0x88>
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	f7ff ffbf 	bl	80059b0 <sbrk_aligned>
 8005a32:	1c43      	adds	r3, r0, #1
 8005a34:	4604      	mov	r4, r0
 8005a36:	d158      	bne.n	8005aea <_malloc_r+0xf6>
 8005a38:	f8d8 4000 	ldr.w	r4, [r8]
 8005a3c:	4627      	mov	r7, r4
 8005a3e:	2f00      	cmp	r7, #0
 8005a40:	d143      	bne.n	8005aca <_malloc_r+0xd6>
 8005a42:	2c00      	cmp	r4, #0
 8005a44:	d04b      	beq.n	8005ade <_malloc_r+0xea>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	4639      	mov	r1, r7
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	eb04 0903 	add.w	r9, r4, r3
 8005a50:	f000 fb5c 	bl	800610c <_sbrk_r>
 8005a54:	4581      	cmp	r9, r0
 8005a56:	d142      	bne.n	8005ade <_malloc_r+0xea>
 8005a58:	6821      	ldr	r1, [r4, #0]
 8005a5a:	1a6d      	subs	r5, r5, r1
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	4630      	mov	r0, r6
 8005a60:	f7ff ffa6 	bl	80059b0 <sbrk_aligned>
 8005a64:	3001      	adds	r0, #1
 8005a66:	d03a      	beq.n	8005ade <_malloc_r+0xea>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	442b      	add	r3, r5
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	bb62      	cbnz	r2, 8005ad0 <_malloc_r+0xdc>
 8005a76:	f8c8 7000 	str.w	r7, [r8]
 8005a7a:	e00f      	b.n	8005a9c <_malloc_r+0xa8>
 8005a7c:	6822      	ldr	r2, [r4, #0]
 8005a7e:	1b52      	subs	r2, r2, r5
 8005a80:	d420      	bmi.n	8005ac4 <_malloc_r+0xd0>
 8005a82:	2a0b      	cmp	r2, #11
 8005a84:	d917      	bls.n	8005ab6 <_malloc_r+0xc2>
 8005a86:	1961      	adds	r1, r4, r5
 8005a88:	42a3      	cmp	r3, r4
 8005a8a:	6025      	str	r5, [r4, #0]
 8005a8c:	bf18      	it	ne
 8005a8e:	6059      	strne	r1, [r3, #4]
 8005a90:	6863      	ldr	r3, [r4, #4]
 8005a92:	bf08      	it	eq
 8005a94:	f8c8 1000 	streq.w	r1, [r8]
 8005a98:	5162      	str	r2, [r4, r5]
 8005a9a:	604b      	str	r3, [r1, #4]
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f000 f82f 	bl	8005b00 <__malloc_unlock>
 8005aa2:	f104 000b 	add.w	r0, r4, #11
 8005aa6:	1d23      	adds	r3, r4, #4
 8005aa8:	f020 0007 	bic.w	r0, r0, #7
 8005aac:	1ac2      	subs	r2, r0, r3
 8005aae:	bf1c      	itt	ne
 8005ab0:	1a1b      	subne	r3, r3, r0
 8005ab2:	50a3      	strne	r3, [r4, r2]
 8005ab4:	e7af      	b.n	8005a16 <_malloc_r+0x22>
 8005ab6:	6862      	ldr	r2, [r4, #4]
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	bf0c      	ite	eq
 8005abc:	f8c8 2000 	streq.w	r2, [r8]
 8005ac0:	605a      	strne	r2, [r3, #4]
 8005ac2:	e7eb      	b.n	8005a9c <_malloc_r+0xa8>
 8005ac4:	4623      	mov	r3, r4
 8005ac6:	6864      	ldr	r4, [r4, #4]
 8005ac8:	e7ae      	b.n	8005a28 <_malloc_r+0x34>
 8005aca:	463c      	mov	r4, r7
 8005acc:	687f      	ldr	r7, [r7, #4]
 8005ace:	e7b6      	b.n	8005a3e <_malloc_r+0x4a>
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	d1fb      	bne.n	8005ad0 <_malloc_r+0xdc>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	6053      	str	r3, [r2, #4]
 8005adc:	e7de      	b.n	8005a9c <_malloc_r+0xa8>
 8005ade:	230c      	movs	r3, #12
 8005ae0:	6033      	str	r3, [r6, #0]
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f000 f80c 	bl	8005b00 <__malloc_unlock>
 8005ae8:	e794      	b.n	8005a14 <_malloc_r+0x20>
 8005aea:	6005      	str	r5, [r0, #0]
 8005aec:	e7d6      	b.n	8005a9c <_malloc_r+0xa8>
 8005aee:	bf00      	nop
 8005af0:	20000384 	.word	0x20000384

08005af4 <__malloc_lock>:
 8005af4:	4801      	ldr	r0, [pc, #4]	@ (8005afc <__malloc_lock+0x8>)
 8005af6:	f7ff bf0f 	b.w	8005918 <__retarget_lock_acquire_recursive>
 8005afa:	bf00      	nop
 8005afc:	2000037c 	.word	0x2000037c

08005b00 <__malloc_unlock>:
 8005b00:	4801      	ldr	r0, [pc, #4]	@ (8005b08 <__malloc_unlock+0x8>)
 8005b02:	f7ff bf0a 	b.w	800591a <__retarget_lock_release_recursive>
 8005b06:	bf00      	nop
 8005b08:	2000037c 	.word	0x2000037c

08005b0c <__ssputs_r>:
 8005b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b10:	688e      	ldr	r6, [r1, #8]
 8005b12:	461f      	mov	r7, r3
 8005b14:	42be      	cmp	r6, r7
 8005b16:	680b      	ldr	r3, [r1, #0]
 8005b18:	4682      	mov	sl, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	4690      	mov	r8, r2
 8005b1e:	d82d      	bhi.n	8005b7c <__ssputs_r+0x70>
 8005b20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b28:	d026      	beq.n	8005b78 <__ssputs_r+0x6c>
 8005b2a:	6965      	ldr	r5, [r4, #20]
 8005b2c:	6909      	ldr	r1, [r1, #16]
 8005b2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b32:	eba3 0901 	sub.w	r9, r3, r1
 8005b36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b3a:	1c7b      	adds	r3, r7, #1
 8005b3c:	444b      	add	r3, r9
 8005b3e:	106d      	asrs	r5, r5, #1
 8005b40:	429d      	cmp	r5, r3
 8005b42:	bf38      	it	cc
 8005b44:	461d      	movcc	r5, r3
 8005b46:	0553      	lsls	r3, r2, #21
 8005b48:	d527      	bpl.n	8005b9a <__ssputs_r+0x8e>
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	f7ff ff52 	bl	80059f4 <_malloc_r>
 8005b50:	4606      	mov	r6, r0
 8005b52:	b360      	cbz	r0, 8005bae <__ssputs_r+0xa2>
 8005b54:	6921      	ldr	r1, [r4, #16]
 8005b56:	464a      	mov	r2, r9
 8005b58:	f000 fae8 	bl	800612c <memcpy>
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	6126      	str	r6, [r4, #16]
 8005b6a:	6165      	str	r5, [r4, #20]
 8005b6c:	444e      	add	r6, r9
 8005b6e:	eba5 0509 	sub.w	r5, r5, r9
 8005b72:	6026      	str	r6, [r4, #0]
 8005b74:	60a5      	str	r5, [r4, #8]
 8005b76:	463e      	mov	r6, r7
 8005b78:	42be      	cmp	r6, r7
 8005b7a:	d900      	bls.n	8005b7e <__ssputs_r+0x72>
 8005b7c:	463e      	mov	r6, r7
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	4632      	mov	r2, r6
 8005b82:	4641      	mov	r1, r8
 8005b84:	f000 faa8 	bl	80060d8 <memmove>
 8005b88:	68a3      	ldr	r3, [r4, #8]
 8005b8a:	1b9b      	subs	r3, r3, r6
 8005b8c:	60a3      	str	r3, [r4, #8]
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	4433      	add	r3, r6
 8005b92:	6023      	str	r3, [r4, #0]
 8005b94:	2000      	movs	r0, #0
 8005b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9a:	462a      	mov	r2, r5
 8005b9c:	f000 fad4 	bl	8006148 <_realloc_r>
 8005ba0:	4606      	mov	r6, r0
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d1e0      	bne.n	8005b68 <__ssputs_r+0x5c>
 8005ba6:	6921      	ldr	r1, [r4, #16]
 8005ba8:	4650      	mov	r0, sl
 8005baa:	f7ff feb7 	bl	800591c <_free_r>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	f8ca 3000 	str.w	r3, [sl]
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc0:	e7e9      	b.n	8005b96 <__ssputs_r+0x8a>
	...

08005bc4 <_svfiprintf_r>:
 8005bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc8:	4698      	mov	r8, r3
 8005bca:	898b      	ldrh	r3, [r1, #12]
 8005bcc:	061b      	lsls	r3, r3, #24
 8005bce:	b09d      	sub	sp, #116	@ 0x74
 8005bd0:	4607      	mov	r7, r0
 8005bd2:	460d      	mov	r5, r1
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	d510      	bpl.n	8005bfa <_svfiprintf_r+0x36>
 8005bd8:	690b      	ldr	r3, [r1, #16]
 8005bda:	b973      	cbnz	r3, 8005bfa <_svfiprintf_r+0x36>
 8005bdc:	2140      	movs	r1, #64	@ 0x40
 8005bde:	f7ff ff09 	bl	80059f4 <_malloc_r>
 8005be2:	6028      	str	r0, [r5, #0]
 8005be4:	6128      	str	r0, [r5, #16]
 8005be6:	b930      	cbnz	r0, 8005bf6 <_svfiprintf_r+0x32>
 8005be8:	230c      	movs	r3, #12
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf0:	b01d      	add	sp, #116	@ 0x74
 8005bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf6:	2340      	movs	r3, #64	@ 0x40
 8005bf8:	616b      	str	r3, [r5, #20]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bfe:	2320      	movs	r3, #32
 8005c00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c04:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c08:	2330      	movs	r3, #48	@ 0x30
 8005c0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005da8 <_svfiprintf_r+0x1e4>
 8005c0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c12:	f04f 0901 	mov.w	r9, #1
 8005c16:	4623      	mov	r3, r4
 8005c18:	469a      	mov	sl, r3
 8005c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c1e:	b10a      	cbz	r2, 8005c24 <_svfiprintf_r+0x60>
 8005c20:	2a25      	cmp	r2, #37	@ 0x25
 8005c22:	d1f9      	bne.n	8005c18 <_svfiprintf_r+0x54>
 8005c24:	ebba 0b04 	subs.w	fp, sl, r4
 8005c28:	d00b      	beq.n	8005c42 <_svfiprintf_r+0x7e>
 8005c2a:	465b      	mov	r3, fp
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	4638      	mov	r0, r7
 8005c32:	f7ff ff6b 	bl	8005b0c <__ssputs_r>
 8005c36:	3001      	adds	r0, #1
 8005c38:	f000 80a7 	beq.w	8005d8a <_svfiprintf_r+0x1c6>
 8005c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c3e:	445a      	add	r2, fp
 8005c40:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c42:	f89a 3000 	ldrb.w	r3, [sl]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 809f 	beq.w	8005d8a <_svfiprintf_r+0x1c6>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c56:	f10a 0a01 	add.w	sl, sl, #1
 8005c5a:	9304      	str	r3, [sp, #16]
 8005c5c:	9307      	str	r3, [sp, #28]
 8005c5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c62:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c64:	4654      	mov	r4, sl
 8005c66:	2205      	movs	r2, #5
 8005c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6c:	484e      	ldr	r0, [pc, #312]	@ (8005da8 <_svfiprintf_r+0x1e4>)
 8005c6e:	f7fa fadf 	bl	8000230 <memchr>
 8005c72:	9a04      	ldr	r2, [sp, #16]
 8005c74:	b9d8      	cbnz	r0, 8005cae <_svfiprintf_r+0xea>
 8005c76:	06d0      	lsls	r0, r2, #27
 8005c78:	bf44      	itt	mi
 8005c7a:	2320      	movmi	r3, #32
 8005c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c80:	0711      	lsls	r1, r2, #28
 8005c82:	bf44      	itt	mi
 8005c84:	232b      	movmi	r3, #43	@ 0x2b
 8005c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c90:	d015      	beq.n	8005cbe <_svfiprintf_r+0xfa>
 8005c92:	9a07      	ldr	r2, [sp, #28]
 8005c94:	4654      	mov	r4, sl
 8005c96:	2000      	movs	r0, #0
 8005c98:	f04f 0c0a 	mov.w	ip, #10
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ca2:	3b30      	subs	r3, #48	@ 0x30
 8005ca4:	2b09      	cmp	r3, #9
 8005ca6:	d94b      	bls.n	8005d40 <_svfiprintf_r+0x17c>
 8005ca8:	b1b0      	cbz	r0, 8005cd8 <_svfiprintf_r+0x114>
 8005caa:	9207      	str	r2, [sp, #28]
 8005cac:	e014      	b.n	8005cd8 <_svfiprintf_r+0x114>
 8005cae:	eba0 0308 	sub.w	r3, r0, r8
 8005cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	9304      	str	r3, [sp, #16]
 8005cba:	46a2      	mov	sl, r4
 8005cbc:	e7d2      	b.n	8005c64 <_svfiprintf_r+0xa0>
 8005cbe:	9b03      	ldr	r3, [sp, #12]
 8005cc0:	1d19      	adds	r1, r3, #4
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	9103      	str	r1, [sp, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bfbb      	ittet	lt
 8005cca:	425b      	neglt	r3, r3
 8005ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8005cd0:	9307      	strge	r3, [sp, #28]
 8005cd2:	9307      	strlt	r3, [sp, #28]
 8005cd4:	bfb8      	it	lt
 8005cd6:	9204      	strlt	r2, [sp, #16]
 8005cd8:	7823      	ldrb	r3, [r4, #0]
 8005cda:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cdc:	d10a      	bne.n	8005cf4 <_svfiprintf_r+0x130>
 8005cde:	7863      	ldrb	r3, [r4, #1]
 8005ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ce2:	d132      	bne.n	8005d4a <_svfiprintf_r+0x186>
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	1d1a      	adds	r2, r3, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	9203      	str	r2, [sp, #12]
 8005cec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cf0:	3402      	adds	r4, #2
 8005cf2:	9305      	str	r3, [sp, #20]
 8005cf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005db8 <_svfiprintf_r+0x1f4>
 8005cf8:	7821      	ldrb	r1, [r4, #0]
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	4650      	mov	r0, sl
 8005cfe:	f7fa fa97 	bl	8000230 <memchr>
 8005d02:	b138      	cbz	r0, 8005d14 <_svfiprintf_r+0x150>
 8005d04:	9b04      	ldr	r3, [sp, #16]
 8005d06:	eba0 000a 	sub.w	r0, r0, sl
 8005d0a:	2240      	movs	r2, #64	@ 0x40
 8005d0c:	4082      	lsls	r2, r0
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	3401      	adds	r4, #1
 8005d12:	9304      	str	r3, [sp, #16]
 8005d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d18:	4824      	ldr	r0, [pc, #144]	@ (8005dac <_svfiprintf_r+0x1e8>)
 8005d1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d1e:	2206      	movs	r2, #6
 8005d20:	f7fa fa86 	bl	8000230 <memchr>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d036      	beq.n	8005d96 <_svfiprintf_r+0x1d2>
 8005d28:	4b21      	ldr	r3, [pc, #132]	@ (8005db0 <_svfiprintf_r+0x1ec>)
 8005d2a:	bb1b      	cbnz	r3, 8005d74 <_svfiprintf_r+0x1b0>
 8005d2c:	9b03      	ldr	r3, [sp, #12]
 8005d2e:	3307      	adds	r3, #7
 8005d30:	f023 0307 	bic.w	r3, r3, #7
 8005d34:	3308      	adds	r3, #8
 8005d36:	9303      	str	r3, [sp, #12]
 8005d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d3a:	4433      	add	r3, r6
 8005d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d3e:	e76a      	b.n	8005c16 <_svfiprintf_r+0x52>
 8005d40:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d44:	460c      	mov	r4, r1
 8005d46:	2001      	movs	r0, #1
 8005d48:	e7a8      	b.n	8005c9c <_svfiprintf_r+0xd8>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	3401      	adds	r4, #1
 8005d4e:	9305      	str	r3, [sp, #20]
 8005d50:	4619      	mov	r1, r3
 8005d52:	f04f 0c0a 	mov.w	ip, #10
 8005d56:	4620      	mov	r0, r4
 8005d58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d5c:	3a30      	subs	r2, #48	@ 0x30
 8005d5e:	2a09      	cmp	r2, #9
 8005d60:	d903      	bls.n	8005d6a <_svfiprintf_r+0x1a6>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0c6      	beq.n	8005cf4 <_svfiprintf_r+0x130>
 8005d66:	9105      	str	r1, [sp, #20]
 8005d68:	e7c4      	b.n	8005cf4 <_svfiprintf_r+0x130>
 8005d6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d6e:	4604      	mov	r4, r0
 8005d70:	2301      	movs	r3, #1
 8005d72:	e7f0      	b.n	8005d56 <_svfiprintf_r+0x192>
 8005d74:	ab03      	add	r3, sp, #12
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	462a      	mov	r2, r5
 8005d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8005db4 <_svfiprintf_r+0x1f0>)
 8005d7c:	a904      	add	r1, sp, #16
 8005d7e:	4638      	mov	r0, r7
 8005d80:	f3af 8000 	nop.w
 8005d84:	1c42      	adds	r2, r0, #1
 8005d86:	4606      	mov	r6, r0
 8005d88:	d1d6      	bne.n	8005d38 <_svfiprintf_r+0x174>
 8005d8a:	89ab      	ldrh	r3, [r5, #12]
 8005d8c:	065b      	lsls	r3, r3, #25
 8005d8e:	f53f af2d 	bmi.w	8005bec <_svfiprintf_r+0x28>
 8005d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d94:	e72c      	b.n	8005bf0 <_svfiprintf_r+0x2c>
 8005d96:	ab03      	add	r3, sp, #12
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	462a      	mov	r2, r5
 8005d9c:	4b05      	ldr	r3, [pc, #20]	@ (8005db4 <_svfiprintf_r+0x1f0>)
 8005d9e:	a904      	add	r1, sp, #16
 8005da0:	4638      	mov	r0, r7
 8005da2:	f000 f879 	bl	8005e98 <_printf_i>
 8005da6:	e7ed      	b.n	8005d84 <_svfiprintf_r+0x1c0>
 8005da8:	08006244 	.word	0x08006244
 8005dac:	0800624e 	.word	0x0800624e
 8005db0:	00000000 	.word	0x00000000
 8005db4:	08005b0d 	.word	0x08005b0d
 8005db8:	0800624a 	.word	0x0800624a

08005dbc <_printf_common>:
 8005dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc0:	4616      	mov	r6, r2
 8005dc2:	4698      	mov	r8, r3
 8005dc4:	688a      	ldr	r2, [r1, #8]
 8005dc6:	690b      	ldr	r3, [r1, #16]
 8005dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	bfb8      	it	lt
 8005dd0:	4613      	movlt	r3, r2
 8005dd2:	6033      	str	r3, [r6, #0]
 8005dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005dd8:	4607      	mov	r7, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	b10a      	cbz	r2, 8005de2 <_printf_common+0x26>
 8005dde:	3301      	adds	r3, #1
 8005de0:	6033      	str	r3, [r6, #0]
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	0699      	lsls	r1, r3, #26
 8005de6:	bf42      	ittt	mi
 8005de8:	6833      	ldrmi	r3, [r6, #0]
 8005dea:	3302      	addmi	r3, #2
 8005dec:	6033      	strmi	r3, [r6, #0]
 8005dee:	6825      	ldr	r5, [r4, #0]
 8005df0:	f015 0506 	ands.w	r5, r5, #6
 8005df4:	d106      	bne.n	8005e04 <_printf_common+0x48>
 8005df6:	f104 0a19 	add.w	sl, r4, #25
 8005dfa:	68e3      	ldr	r3, [r4, #12]
 8005dfc:	6832      	ldr	r2, [r6, #0]
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	42ab      	cmp	r3, r5
 8005e02:	dc26      	bgt.n	8005e52 <_printf_common+0x96>
 8005e04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e08:	6822      	ldr	r2, [r4, #0]
 8005e0a:	3b00      	subs	r3, #0
 8005e0c:	bf18      	it	ne
 8005e0e:	2301      	movne	r3, #1
 8005e10:	0692      	lsls	r2, r2, #26
 8005e12:	d42b      	bmi.n	8005e6c <_printf_common+0xb0>
 8005e14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e18:	4641      	mov	r1, r8
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	47c8      	blx	r9
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d01e      	beq.n	8005e60 <_printf_common+0xa4>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	6922      	ldr	r2, [r4, #16]
 8005e26:	f003 0306 	and.w	r3, r3, #6
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	bf02      	ittt	eq
 8005e2e:	68e5      	ldreq	r5, [r4, #12]
 8005e30:	6833      	ldreq	r3, [r6, #0]
 8005e32:	1aed      	subeq	r5, r5, r3
 8005e34:	68a3      	ldr	r3, [r4, #8]
 8005e36:	bf0c      	ite	eq
 8005e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e3c:	2500      	movne	r5, #0
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	bfc4      	itt	gt
 8005e42:	1a9b      	subgt	r3, r3, r2
 8005e44:	18ed      	addgt	r5, r5, r3
 8005e46:	2600      	movs	r6, #0
 8005e48:	341a      	adds	r4, #26
 8005e4a:	42b5      	cmp	r5, r6
 8005e4c:	d11a      	bne.n	8005e84 <_printf_common+0xc8>
 8005e4e:	2000      	movs	r0, #0
 8005e50:	e008      	b.n	8005e64 <_printf_common+0xa8>
 8005e52:	2301      	movs	r3, #1
 8005e54:	4652      	mov	r2, sl
 8005e56:	4641      	mov	r1, r8
 8005e58:	4638      	mov	r0, r7
 8005e5a:	47c8      	blx	r9
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d103      	bne.n	8005e68 <_printf_common+0xac>
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295
 8005e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e68:	3501      	adds	r5, #1
 8005e6a:	e7c6      	b.n	8005dfa <_printf_common+0x3e>
 8005e6c:	18e1      	adds	r1, r4, r3
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	2030      	movs	r0, #48	@ 0x30
 8005e72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e76:	4422      	add	r2, r4
 8005e78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e80:	3302      	adds	r3, #2
 8005e82:	e7c7      	b.n	8005e14 <_printf_common+0x58>
 8005e84:	2301      	movs	r3, #1
 8005e86:	4622      	mov	r2, r4
 8005e88:	4641      	mov	r1, r8
 8005e8a:	4638      	mov	r0, r7
 8005e8c:	47c8      	blx	r9
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d0e6      	beq.n	8005e60 <_printf_common+0xa4>
 8005e92:	3601      	adds	r6, #1
 8005e94:	e7d9      	b.n	8005e4a <_printf_common+0x8e>
	...

08005e98 <_printf_i>:
 8005e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9c:	7e0f      	ldrb	r7, [r1, #24]
 8005e9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ea0:	2f78      	cmp	r7, #120	@ 0x78
 8005ea2:	4691      	mov	r9, r2
 8005ea4:	4680      	mov	r8, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	469a      	mov	sl, r3
 8005eaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005eae:	d807      	bhi.n	8005ec0 <_printf_i+0x28>
 8005eb0:	2f62      	cmp	r7, #98	@ 0x62
 8005eb2:	d80a      	bhi.n	8005eca <_printf_i+0x32>
 8005eb4:	2f00      	cmp	r7, #0
 8005eb6:	f000 80d2 	beq.w	800605e <_printf_i+0x1c6>
 8005eba:	2f58      	cmp	r7, #88	@ 0x58
 8005ebc:	f000 80b9 	beq.w	8006032 <_printf_i+0x19a>
 8005ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ec4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ec8:	e03a      	b.n	8005f40 <_printf_i+0xa8>
 8005eca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ece:	2b15      	cmp	r3, #21
 8005ed0:	d8f6      	bhi.n	8005ec0 <_printf_i+0x28>
 8005ed2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ed8 <_printf_i+0x40>)
 8005ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ed8:	08005f31 	.word	0x08005f31
 8005edc:	08005f45 	.word	0x08005f45
 8005ee0:	08005ec1 	.word	0x08005ec1
 8005ee4:	08005ec1 	.word	0x08005ec1
 8005ee8:	08005ec1 	.word	0x08005ec1
 8005eec:	08005ec1 	.word	0x08005ec1
 8005ef0:	08005f45 	.word	0x08005f45
 8005ef4:	08005ec1 	.word	0x08005ec1
 8005ef8:	08005ec1 	.word	0x08005ec1
 8005efc:	08005ec1 	.word	0x08005ec1
 8005f00:	08005ec1 	.word	0x08005ec1
 8005f04:	08006045 	.word	0x08006045
 8005f08:	08005f6f 	.word	0x08005f6f
 8005f0c:	08005fff 	.word	0x08005fff
 8005f10:	08005ec1 	.word	0x08005ec1
 8005f14:	08005ec1 	.word	0x08005ec1
 8005f18:	08006067 	.word	0x08006067
 8005f1c:	08005ec1 	.word	0x08005ec1
 8005f20:	08005f6f 	.word	0x08005f6f
 8005f24:	08005ec1 	.word	0x08005ec1
 8005f28:	08005ec1 	.word	0x08005ec1
 8005f2c:	08006007 	.word	0x08006007
 8005f30:	6833      	ldr	r3, [r6, #0]
 8005f32:	1d1a      	adds	r2, r3, #4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6032      	str	r2, [r6, #0]
 8005f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f40:	2301      	movs	r3, #1
 8005f42:	e09d      	b.n	8006080 <_printf_i+0x1e8>
 8005f44:	6833      	ldr	r3, [r6, #0]
 8005f46:	6820      	ldr	r0, [r4, #0]
 8005f48:	1d19      	adds	r1, r3, #4
 8005f4a:	6031      	str	r1, [r6, #0]
 8005f4c:	0606      	lsls	r6, r0, #24
 8005f4e:	d501      	bpl.n	8005f54 <_printf_i+0xbc>
 8005f50:	681d      	ldr	r5, [r3, #0]
 8005f52:	e003      	b.n	8005f5c <_printf_i+0xc4>
 8005f54:	0645      	lsls	r5, r0, #25
 8005f56:	d5fb      	bpl.n	8005f50 <_printf_i+0xb8>
 8005f58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f5c:	2d00      	cmp	r5, #0
 8005f5e:	da03      	bge.n	8005f68 <_printf_i+0xd0>
 8005f60:	232d      	movs	r3, #45	@ 0x2d
 8005f62:	426d      	negs	r5, r5
 8005f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f68:	4859      	ldr	r0, [pc, #356]	@ (80060d0 <_printf_i+0x238>)
 8005f6a:	230a      	movs	r3, #10
 8005f6c:	e011      	b.n	8005f92 <_printf_i+0xfa>
 8005f6e:	6821      	ldr	r1, [r4, #0]
 8005f70:	6833      	ldr	r3, [r6, #0]
 8005f72:	0608      	lsls	r0, r1, #24
 8005f74:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f78:	d402      	bmi.n	8005f80 <_printf_i+0xe8>
 8005f7a:	0649      	lsls	r1, r1, #25
 8005f7c:	bf48      	it	mi
 8005f7e:	b2ad      	uxthmi	r5, r5
 8005f80:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f82:	4853      	ldr	r0, [pc, #332]	@ (80060d0 <_printf_i+0x238>)
 8005f84:	6033      	str	r3, [r6, #0]
 8005f86:	bf14      	ite	ne
 8005f88:	230a      	movne	r3, #10
 8005f8a:	2308      	moveq	r3, #8
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f92:	6866      	ldr	r6, [r4, #4]
 8005f94:	60a6      	str	r6, [r4, #8]
 8005f96:	2e00      	cmp	r6, #0
 8005f98:	bfa2      	ittt	ge
 8005f9a:	6821      	ldrge	r1, [r4, #0]
 8005f9c:	f021 0104 	bicge.w	r1, r1, #4
 8005fa0:	6021      	strge	r1, [r4, #0]
 8005fa2:	b90d      	cbnz	r5, 8005fa8 <_printf_i+0x110>
 8005fa4:	2e00      	cmp	r6, #0
 8005fa6:	d04b      	beq.n	8006040 <_printf_i+0x1a8>
 8005fa8:	4616      	mov	r6, r2
 8005faa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fae:	fb03 5711 	mls	r7, r3, r1, r5
 8005fb2:	5dc7      	ldrb	r7, [r0, r7]
 8005fb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fb8:	462f      	mov	r7, r5
 8005fba:	42bb      	cmp	r3, r7
 8005fbc:	460d      	mov	r5, r1
 8005fbe:	d9f4      	bls.n	8005faa <_printf_i+0x112>
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d10b      	bne.n	8005fdc <_printf_i+0x144>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	07df      	lsls	r7, r3, #31
 8005fc8:	d508      	bpl.n	8005fdc <_printf_i+0x144>
 8005fca:	6923      	ldr	r3, [r4, #16]
 8005fcc:	6861      	ldr	r1, [r4, #4]
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	bfde      	ittt	le
 8005fd2:	2330      	movle	r3, #48	@ 0x30
 8005fd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fdc:	1b92      	subs	r2, r2, r6
 8005fde:	6122      	str	r2, [r4, #16]
 8005fe0:	f8cd a000 	str.w	sl, [sp]
 8005fe4:	464b      	mov	r3, r9
 8005fe6:	aa03      	add	r2, sp, #12
 8005fe8:	4621      	mov	r1, r4
 8005fea:	4640      	mov	r0, r8
 8005fec:	f7ff fee6 	bl	8005dbc <_printf_common>
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d14a      	bne.n	800608a <_printf_i+0x1f2>
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	b004      	add	sp, #16
 8005ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	f043 0320 	orr.w	r3, r3, #32
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	4833      	ldr	r0, [pc, #204]	@ (80060d4 <_printf_i+0x23c>)
 8006008:	2778      	movs	r7, #120	@ 0x78
 800600a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	6831      	ldr	r1, [r6, #0]
 8006012:	061f      	lsls	r7, r3, #24
 8006014:	f851 5b04 	ldr.w	r5, [r1], #4
 8006018:	d402      	bmi.n	8006020 <_printf_i+0x188>
 800601a:	065f      	lsls	r7, r3, #25
 800601c:	bf48      	it	mi
 800601e:	b2ad      	uxthmi	r5, r5
 8006020:	6031      	str	r1, [r6, #0]
 8006022:	07d9      	lsls	r1, r3, #31
 8006024:	bf44      	itt	mi
 8006026:	f043 0320 	orrmi.w	r3, r3, #32
 800602a:	6023      	strmi	r3, [r4, #0]
 800602c:	b11d      	cbz	r5, 8006036 <_printf_i+0x19e>
 800602e:	2310      	movs	r3, #16
 8006030:	e7ac      	b.n	8005f8c <_printf_i+0xf4>
 8006032:	4827      	ldr	r0, [pc, #156]	@ (80060d0 <_printf_i+0x238>)
 8006034:	e7e9      	b.n	800600a <_printf_i+0x172>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	f023 0320 	bic.w	r3, r3, #32
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	e7f6      	b.n	800602e <_printf_i+0x196>
 8006040:	4616      	mov	r6, r2
 8006042:	e7bd      	b.n	8005fc0 <_printf_i+0x128>
 8006044:	6833      	ldr	r3, [r6, #0]
 8006046:	6825      	ldr	r5, [r4, #0]
 8006048:	6961      	ldr	r1, [r4, #20]
 800604a:	1d18      	adds	r0, r3, #4
 800604c:	6030      	str	r0, [r6, #0]
 800604e:	062e      	lsls	r6, r5, #24
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	d501      	bpl.n	8006058 <_printf_i+0x1c0>
 8006054:	6019      	str	r1, [r3, #0]
 8006056:	e002      	b.n	800605e <_printf_i+0x1c6>
 8006058:	0668      	lsls	r0, r5, #25
 800605a:	d5fb      	bpl.n	8006054 <_printf_i+0x1bc>
 800605c:	8019      	strh	r1, [r3, #0]
 800605e:	2300      	movs	r3, #0
 8006060:	6123      	str	r3, [r4, #16]
 8006062:	4616      	mov	r6, r2
 8006064:	e7bc      	b.n	8005fe0 <_printf_i+0x148>
 8006066:	6833      	ldr	r3, [r6, #0]
 8006068:	1d1a      	adds	r2, r3, #4
 800606a:	6032      	str	r2, [r6, #0]
 800606c:	681e      	ldr	r6, [r3, #0]
 800606e:	6862      	ldr	r2, [r4, #4]
 8006070:	2100      	movs	r1, #0
 8006072:	4630      	mov	r0, r6
 8006074:	f7fa f8dc 	bl	8000230 <memchr>
 8006078:	b108      	cbz	r0, 800607e <_printf_i+0x1e6>
 800607a:	1b80      	subs	r0, r0, r6
 800607c:	6060      	str	r0, [r4, #4]
 800607e:	6863      	ldr	r3, [r4, #4]
 8006080:	6123      	str	r3, [r4, #16]
 8006082:	2300      	movs	r3, #0
 8006084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006088:	e7aa      	b.n	8005fe0 <_printf_i+0x148>
 800608a:	6923      	ldr	r3, [r4, #16]
 800608c:	4632      	mov	r2, r6
 800608e:	4649      	mov	r1, r9
 8006090:	4640      	mov	r0, r8
 8006092:	47d0      	blx	sl
 8006094:	3001      	adds	r0, #1
 8006096:	d0ad      	beq.n	8005ff4 <_printf_i+0x15c>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	079b      	lsls	r3, r3, #30
 800609c:	d413      	bmi.n	80060c6 <_printf_i+0x22e>
 800609e:	68e0      	ldr	r0, [r4, #12]
 80060a0:	9b03      	ldr	r3, [sp, #12]
 80060a2:	4298      	cmp	r0, r3
 80060a4:	bfb8      	it	lt
 80060a6:	4618      	movlt	r0, r3
 80060a8:	e7a6      	b.n	8005ff8 <_printf_i+0x160>
 80060aa:	2301      	movs	r3, #1
 80060ac:	4632      	mov	r2, r6
 80060ae:	4649      	mov	r1, r9
 80060b0:	4640      	mov	r0, r8
 80060b2:	47d0      	blx	sl
 80060b4:	3001      	adds	r0, #1
 80060b6:	d09d      	beq.n	8005ff4 <_printf_i+0x15c>
 80060b8:	3501      	adds	r5, #1
 80060ba:	68e3      	ldr	r3, [r4, #12]
 80060bc:	9903      	ldr	r1, [sp, #12]
 80060be:	1a5b      	subs	r3, r3, r1
 80060c0:	42ab      	cmp	r3, r5
 80060c2:	dcf2      	bgt.n	80060aa <_printf_i+0x212>
 80060c4:	e7eb      	b.n	800609e <_printf_i+0x206>
 80060c6:	2500      	movs	r5, #0
 80060c8:	f104 0619 	add.w	r6, r4, #25
 80060cc:	e7f5      	b.n	80060ba <_printf_i+0x222>
 80060ce:	bf00      	nop
 80060d0:	08006255 	.word	0x08006255
 80060d4:	08006266 	.word	0x08006266

080060d8 <memmove>:
 80060d8:	4288      	cmp	r0, r1
 80060da:	b510      	push	{r4, lr}
 80060dc:	eb01 0402 	add.w	r4, r1, r2
 80060e0:	d902      	bls.n	80060e8 <memmove+0x10>
 80060e2:	4284      	cmp	r4, r0
 80060e4:	4623      	mov	r3, r4
 80060e6:	d807      	bhi.n	80060f8 <memmove+0x20>
 80060e8:	1e43      	subs	r3, r0, #1
 80060ea:	42a1      	cmp	r1, r4
 80060ec:	d008      	beq.n	8006100 <memmove+0x28>
 80060ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060f6:	e7f8      	b.n	80060ea <memmove+0x12>
 80060f8:	4402      	add	r2, r0
 80060fa:	4601      	mov	r1, r0
 80060fc:	428a      	cmp	r2, r1
 80060fe:	d100      	bne.n	8006102 <memmove+0x2a>
 8006100:	bd10      	pop	{r4, pc}
 8006102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800610a:	e7f7      	b.n	80060fc <memmove+0x24>

0800610c <_sbrk_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d06      	ldr	r5, [pc, #24]	@ (8006128 <_sbrk_r+0x1c>)
 8006110:	2300      	movs	r3, #0
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	f7fa fe24 	bl	8000d64 <_sbrk>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_sbrk_r+0x1a>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_sbrk_r+0x1a>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	20000378 	.word	0x20000378

0800612c <memcpy>:
 800612c:	440a      	add	r2, r1
 800612e:	4291      	cmp	r1, r2
 8006130:	f100 33ff 	add.w	r3, r0, #4294967295
 8006134:	d100      	bne.n	8006138 <memcpy+0xc>
 8006136:	4770      	bx	lr
 8006138:	b510      	push	{r4, lr}
 800613a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800613e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006142:	4291      	cmp	r1, r2
 8006144:	d1f9      	bne.n	800613a <memcpy+0xe>
 8006146:	bd10      	pop	{r4, pc}

08006148 <_realloc_r>:
 8006148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614c:	4680      	mov	r8, r0
 800614e:	4615      	mov	r5, r2
 8006150:	460c      	mov	r4, r1
 8006152:	b921      	cbnz	r1, 800615e <_realloc_r+0x16>
 8006154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006158:	4611      	mov	r1, r2
 800615a:	f7ff bc4b 	b.w	80059f4 <_malloc_r>
 800615e:	b92a      	cbnz	r2, 800616c <_realloc_r+0x24>
 8006160:	f7ff fbdc 	bl	800591c <_free_r>
 8006164:	2400      	movs	r4, #0
 8006166:	4620      	mov	r0, r4
 8006168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800616c:	f000 f81a 	bl	80061a4 <_malloc_usable_size_r>
 8006170:	4285      	cmp	r5, r0
 8006172:	4606      	mov	r6, r0
 8006174:	d802      	bhi.n	800617c <_realloc_r+0x34>
 8006176:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800617a:	d8f4      	bhi.n	8006166 <_realloc_r+0x1e>
 800617c:	4629      	mov	r1, r5
 800617e:	4640      	mov	r0, r8
 8006180:	f7ff fc38 	bl	80059f4 <_malloc_r>
 8006184:	4607      	mov	r7, r0
 8006186:	2800      	cmp	r0, #0
 8006188:	d0ec      	beq.n	8006164 <_realloc_r+0x1c>
 800618a:	42b5      	cmp	r5, r6
 800618c:	462a      	mov	r2, r5
 800618e:	4621      	mov	r1, r4
 8006190:	bf28      	it	cs
 8006192:	4632      	movcs	r2, r6
 8006194:	f7ff ffca 	bl	800612c <memcpy>
 8006198:	4621      	mov	r1, r4
 800619a:	4640      	mov	r0, r8
 800619c:	f7ff fbbe 	bl	800591c <_free_r>
 80061a0:	463c      	mov	r4, r7
 80061a2:	e7e0      	b.n	8006166 <_realloc_r+0x1e>

080061a4 <_malloc_usable_size_r>:
 80061a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061a8:	1f18      	subs	r0, r3, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bfbc      	itt	lt
 80061ae:	580b      	ldrlt	r3, [r1, r0]
 80061b0:	18c0      	addlt	r0, r0, r3
 80061b2:	4770      	bx	lr

080061b4 <_init>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	bf00      	nop
 80061b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ba:	bc08      	pop	{r3}
 80061bc:	469e      	mov	lr, r3
 80061be:	4770      	bx	lr

080061c0 <_fini>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	bf00      	nop
 80061c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c6:	bc08      	pop	{r3}
 80061c8:	469e      	mov	lr, r3
 80061ca:	4770      	bx	lr
