
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080062d4  080062d4  000072d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f4  080064f4  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  080064f4  080064f4  000074f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064fc  080064fc  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064fc  080064fc  000074fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006500  08006500  00007500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006504  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000064  08006568  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08006568  00008380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7a0  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef3  00000000  00000000  00015834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00017728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f0  00000000  00000000  00018180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e5c  00000000  00000000  00018970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3bc  00000000  00000000  0003d7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9857  00000000  00000000  0004ab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001343df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e5c  00000000  00000000  00134424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00137280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	080062bc 	.word	0x080062bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	080062bc 	.word	0x080062bc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fcdd 	bl	8000f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f870 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f936 	bl	800083c <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 f902 	bl	80007d8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d4:	f000 f8b6 	bl	8000744 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t text[] = "HELLO FIBO";
 // HAL_UART_Transmit(&hlpuart1,text, 11, 10); // มี 10 �?ต่ส่ง 11 ตัวเพราะลงท้ายด้วย backslash zero
  UARTDMAConfig();
 80005d8:	f000 faec 	bl	8000bb4 <UARTDMAConfig>
  //HAL_UART_Transmit(ส่งด้วย , สิ่งที่ส่ง ,
  sprintf((char*)TxBuffer,"Welcome to WORDLE, You have 5 attempts to guess the word\r\n\n");
 80005dc:	4929      	ldr	r1, [pc, #164]	@ (8000684 <main+0xc4>)
 80005de:	482a      	ldr	r0, [pc, #168]	@ (8000688 <main+0xc8>)
 80005e0:	f005 f9cc 	bl	800597c <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 80005e4:	4828      	ldr	r0, [pc, #160]	@ (8000688 <main+0xc8>)
 80005e6:	f7ff fe1b 	bl	8000220 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	2305      	movs	r3, #5
 80005f0:	4925      	ldr	r1, [pc, #148]	@ (8000688 <main+0xc8>)
 80005f2:	4826      	ldr	r0, [pc, #152]	@ (800068c <main+0xcc>)
 80005f4:	f002 fbb6 	bl	8002d64 <HAL_UART_Transmit>
  sprintf((char*)TxBuffer,"PRESS - to clear your word\r\n");
 80005f8:	4925      	ldr	r1, [pc, #148]	@ (8000690 <main+0xd0>)
 80005fa:	4823      	ldr	r0, [pc, #140]	@ (8000688 <main+0xc8>)
 80005fc:	f005 f9be 	bl	800597c <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000600:	4821      	ldr	r0, [pc, #132]	@ (8000688 <main+0xc8>)
 8000602:	f7ff fe0d 	bl	8000220 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	2305      	movs	r3, #5
 800060c:	491e      	ldr	r1, [pc, #120]	@ (8000688 <main+0xc8>)
 800060e:	481f      	ldr	r0, [pc, #124]	@ (800068c <main+0xcc>)
 8000610:	f002 fba8 	bl	8002d64 <HAL_UART_Transmit>
  sprintf((char*)TxBuffer,"SEND 11111 to re-attempt \n\n");
 8000614:	491f      	ldr	r1, [pc, #124]	@ (8000694 <main+0xd4>)
 8000616:	481c      	ldr	r0, [pc, #112]	@ (8000688 <main+0xc8>)
 8000618:	f005 f9b0 	bl	800597c <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 800061c:	481a      	ldr	r0, [pc, #104]	@ (8000688 <main+0xc8>)
 800061e:	f7ff fdff 	bl	8000220 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	b29a      	uxth	r2, r3
 8000626:	2305      	movs	r3, #5
 8000628:	4917      	ldr	r1, [pc, #92]	@ (8000688 <main+0xc8>)
 800062a:	4818      	ldr	r0, [pc, #96]	@ (800068c <main+0xcc>)
 800062c:	f002 fb9a 	bl	8002d64 <HAL_UART_Transmit>
  sprintf((char*)TxBuffer,"Turn CAPLOCK on and begin typing \r\n");
 8000630:	4919      	ldr	r1, [pc, #100]	@ (8000698 <main+0xd8>)
 8000632:	4815      	ldr	r0, [pc, #84]	@ (8000688 <main+0xc8>)
 8000634:	f005 f9a2 	bl	800597c <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000638:	4813      	ldr	r0, [pc, #76]	@ (8000688 <main+0xc8>)
 800063a:	f7ff fdf1 	bl	8000220 <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	b29a      	uxth	r2, r3
 8000642:	2305      	movs	r3, #5
 8000644:	4910      	ldr	r1, [pc, #64]	@ (8000688 <main+0xc8>)
 8000646:	4811      	ldr	r0, [pc, #68]	@ (800068c <main+0xcc>)
 8000648:	f002 fb8c 	bl	8002d64 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UARTPollingMethod();
 800064c:	f000 fa34 	bl	8000ab8 <UARTPollingMethod>
	  //DummyTask();

	  if(readFlag && attempt < 5 && point != 5 && RxBuffer[0] != 1 && RxBuffer[4] != 1){
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <main+0xdc>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0f9      	beq.n	800064c <main+0x8c>
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <main+0xe0>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b04      	cmp	r3, #4
 800065e:	d8f5      	bhi.n	800064c <main+0x8c>
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <main+0xe4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b05      	cmp	r3, #5
 8000666:	d0f1      	beq.n	800064c <main+0x8c>
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <main+0xe8>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d0ed      	beq.n	800064c <main+0x8c>
 8000670:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <main+0xe8>)
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d0e9      	beq.n	800064c <main+0x8c>
		  readFlag = 0;
 8000678:	4b08      	ldr	r3, [pc, #32]	@ (800069c <main+0xdc>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
		  Wordle();
 800067e:	f000 f94b 	bl	8000918 <Wordle>
	  UARTPollingMethod();
 8000682:	e7e3      	b.n	800064c <main+0x8c>
 8000684:	080062d4 	.word	0x080062d4
 8000688:	200001e8 	.word	0x200001e8
 800068c:	20000080 	.word	0x20000080
 8000690:	08006310 	.word	0x08006310
 8000694:	08006330 	.word	0x08006330
 8000698:	0800634c 	.word	0x0800634c
 800069c:	2000022c 	.word	0x2000022c
 80006a0:	2000022b 	.word	0x2000022b
 80006a4:	2000022a 	.word	0x2000022a
 80006a8:	200001d4 	.word	0x200001d4

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	@ 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	2238      	movs	r2, #56	@ 0x38
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f005 f97e 	bl	80059bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f001 fac8 	bl	8001c64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006de:	2340      	movs	r3, #64	@ 0x40
 80006e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006ea:	2304      	movs	r3, #4
 80006ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006ee:	2355      	movs	r3, #85	@ 0x55
 80006f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fb62 	bl	8001dcc <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800070e:	f000 fa8b 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2303      	movs	r3, #3
 8000718:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2104      	movs	r1, #4
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fe60 	bl	80023f0 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000736:	f000 fa77 	bl	8000c28 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	@ 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000748:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800074a:	4a22      	ldr	r2, [pc, #136]	@ (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800074c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800074e:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000762:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000774:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000786:	4812      	ldr	r0, [pc, #72]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000788:	f002 fa9c 	bl	8002cc4 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 fa49 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800079a:	f005 f824 	bl	80057e6 <HAL_UARTEx_SetTxFifoThreshold>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007a4:	f000 fa40 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a8:	2100      	movs	r1, #0
 80007aa:	4809      	ldr	r0, [pc, #36]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	f005 f859 	bl	8005862 <HAL_UARTEx_SetRxFifoThreshold>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007b6:	f000 fa37 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 80007bc:	f004 ffda 	bl	8005774 <HAL_UARTEx_DisableFifoMode>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007c6:	f000 fa2f 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000080 	.word	0x20000080
 80007d4:	40008000 	.word	0x40008000

080007d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007de:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <MX_DMA_Init+0x60>)
 80007e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007e2:	4a15      	ldr	r2, [pc, #84]	@ (8000838 <MX_DMA_Init+0x60>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <MX_DMA_Init+0x60>)
 80007ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <MX_DMA_Init+0x60>)
 80007f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000838 <MX_DMA_Init+0x60>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6493      	str	r3, [r2, #72]	@ 0x48
 8000802:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <MX_DMA_Init+0x60>)
 8000804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	200b      	movs	r0, #11
 8000814:	f000 fd01 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000818:	200b      	movs	r0, #11
 800081a:	f000 fd18 	bl	800124e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	200c      	movs	r0, #12
 8000824:	f000 fcf9 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000828:	200c      	movs	r0, #12
 800082a:	f000 fd10 	bl	800124e <HAL_NVIC_EnableIRQ>

}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b2f      	ldr	r3, [pc, #188]	@ (8000910 <MX_GPIO_Init+0xd4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a2e      	ldr	r2, [pc, #184]	@ (8000910 <MX_GPIO_Init+0xd4>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <MX_GPIO_Init+0xd4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <MX_GPIO_Init+0xd4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a28      	ldr	r2, [pc, #160]	@ (8000910 <MX_GPIO_Init+0xd4>)
 8000870:	f043 0320 	orr.w	r3, r3, #32
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <MX_GPIO_Init+0xd4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0320 	and.w	r3, r3, #32
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <MX_GPIO_Init+0xd4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a22      	ldr	r2, [pc, #136]	@ (8000910 <MX_GPIO_Init+0xd4>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <MX_GPIO_Init+0xd4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_GPIO_Init+0xd4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a1c      	ldr	r2, [pc, #112]	@ (8000910 <MX_GPIO_Init+0xd4>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_GPIO_Init+0xd4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ba:	f001 f997 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	480f      	ldr	r0, [pc, #60]	@ (8000914 <MX_GPIO_Init+0xd8>)
 80008d6:	f001 f807 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008da:	2320      	movs	r3, #32
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f4:	f000 fff8 	bl	80018e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	2028      	movs	r0, #40	@ 0x28
 80008fe:	f000 fc8c 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000902:	2028      	movs	r0, #40	@ 0x28
 8000904:	f000 fca3 	bl	800124e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	@ 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000
 8000914:	48000800 	.word	0x48000800

08000918 <Wordle>:

/* USER CODE BEGIN 4 */
void Wordle()
	{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
		//readFlag = 0;
	for(uint8_t i = 0;i <5;i++)
 800091e:	2300      	movs	r3, #0
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	e055      	b.n	80009d0 <Wordle+0xb8>
	{
		output[5] = '\0';
 8000924:	4b58      	ldr	r3, [pc, #352]	@ (8000a88 <Wordle+0x170>)
 8000926:	2200      	movs	r2, #0
 8000928:	715a      	strb	r2, [r3, #5]

		if(RxBuffer[i] == '-') //retry press "-"
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	4a57      	ldr	r2, [pc, #348]	@ (8000a8c <Wordle+0x174>)
 800092e:	5cd3      	ldrb	r3, [r2, r3]
 8000930:	2b2d      	cmp	r3, #45	@ 0x2d
 8000932:	d10e      	bne.n	8000952 <Wordle+0x3a>
		{
			sprintf((char*)TxBuffer,"Retrying");
 8000934:	4956      	ldr	r1, [pc, #344]	@ (8000a90 <Wordle+0x178>)
 8000936:	4857      	ldr	r0, [pc, #348]	@ (8000a94 <Wordle+0x17c>)
 8000938:	f005 f820 	bl	800597c <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5); // uart1, text , size , timeout
 800093c:	4855      	ldr	r0, [pc, #340]	@ (8000a94 <Wordle+0x17c>)
 800093e:	f7ff fc6f 	bl	8000220 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	2305      	movs	r3, #5
 8000948:	4952      	ldr	r1, [pc, #328]	@ (8000a94 <Wordle+0x17c>)
 800094a:	4853      	ldr	r0, [pc, #332]	@ (8000a98 <Wordle+0x180>)
 800094c:	f002 fa0a 	bl	8002d64 <HAL_UART_Transmit>
			return;
 8000950:	e097      	b.n	8000a82 <Wordle+0x16a>
		}
		else if(RxBuffer[i] == wordle[i]){
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4a4d      	ldr	r2, [pc, #308]	@ (8000a8c <Wordle+0x174>)
 8000956:	5cd2      	ldrb	r2, [r2, r3]
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4950      	ldr	r1, [pc, #320]	@ (8000a9c <Wordle+0x184>)
 800095c:	5ccb      	ldrb	r3, [r1, r3]
 800095e:	429a      	cmp	r2, r3
 8000960:	d10c      	bne.n	800097c <Wordle+0x64>
			output[i] = RxBuffer[i];
 8000962:	79fa      	ldrb	r2, [r7, #7]
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4949      	ldr	r1, [pc, #292]	@ (8000a8c <Wordle+0x174>)
 8000968:	5c89      	ldrb	r1, [r1, r2]
 800096a:	4a47      	ldr	r2, [pc, #284]	@ (8000a88 <Wordle+0x170>)
 800096c:	54d1      	strb	r1, [r2, r3]
			point++;
 800096e:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa0 <Wordle+0x188>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	3301      	adds	r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa0 <Wordle+0x188>)
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	e015      	b.n	80009a8 <Wordle+0x90>

		}
		else {
			for(uint8_t j=0; j<5;j++)
 800097c:	2300      	movs	r3, #0
 800097e:	71bb      	strb	r3, [r7, #6]
 8000980:	e00f      	b.n	80009a2 <Wordle+0x8a>
			{
				if(RxBuffer[i] == wordle[j])
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4a41      	ldr	r2, [pc, #260]	@ (8000a8c <Wordle+0x174>)
 8000986:	5cd2      	ldrb	r2, [r2, r3]
 8000988:	79bb      	ldrb	r3, [r7, #6]
 800098a:	4944      	ldr	r1, [pc, #272]	@ (8000a9c <Wordle+0x184>)
 800098c:	5ccb      	ldrb	r3, [r1, r3]
 800098e:	429a      	cmp	r2, r3
 8000990:	d104      	bne.n	800099c <Wordle+0x84>
				{
					output[i] = '?';
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4a3c      	ldr	r2, [pc, #240]	@ (8000a88 <Wordle+0x170>)
 8000996:	213f      	movs	r1, #63	@ 0x3f
 8000998:	54d1      	strb	r1, [r2, r3]
					break;
 800099a:	e005      	b.n	80009a8 <Wordle+0x90>
			for(uint8_t j=0; j<5;j++)
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	3301      	adds	r3, #1
 80009a0:	71bb      	strb	r3, [r7, #6]
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	d9ec      	bls.n	8000982 <Wordle+0x6a>
				}
			}
		}
		if(output[i] != '?' && output[i] != RxBuffer[i]){
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4a37      	ldr	r2, [pc, #220]	@ (8000a88 <Wordle+0x170>)
 80009ac:	5cd3      	ldrb	r3, [r2, r3]
 80009ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80009b0:	d00b      	beq.n	80009ca <Wordle+0xb2>
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4a34      	ldr	r2, [pc, #208]	@ (8000a88 <Wordle+0x170>)
 80009b6:	5cd2      	ldrb	r2, [r2, r3]
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4934      	ldr	r1, [pc, #208]	@ (8000a8c <Wordle+0x174>)
 80009bc:	5ccb      	ldrb	r3, [r1, r3]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d003      	beq.n	80009ca <Wordle+0xb2>
			output[i] = '_';
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a30      	ldr	r2, [pc, #192]	@ (8000a88 <Wordle+0x170>)
 80009c6:	215f      	movs	r1, #95	@ 0x5f
 80009c8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0;i <5;i++)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	3301      	adds	r3, #1
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	d9a6      	bls.n	8000924 <Wordle+0xc>
		}
	}
	if(point == 5){
 80009d6:	4b32      	ldr	r3, [pc, #200]	@ (8000aa0 <Wordle+0x188>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b05      	cmp	r3, #5
 80009dc:	d10f      	bne.n	80009fe <Wordle+0xe6>
		sprintf((char*)TxBuffer,"\n Congratulations\n %s is correct\r\n", output);
 80009de:	4a2a      	ldr	r2, [pc, #168]	@ (8000a88 <Wordle+0x170>)
 80009e0:	4930      	ldr	r1, [pc, #192]	@ (8000aa4 <Wordle+0x18c>)
 80009e2:	482c      	ldr	r0, [pc, #176]	@ (8000a94 <Wordle+0x17c>)
 80009e4:	f004 ffca 	bl	800597c <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 80009e8:	482a      	ldr	r0, [pc, #168]	@ (8000a94 <Wordle+0x17c>)
 80009ea:	f7ff fc19 	bl	8000220 <strlen>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	2305      	movs	r3, #5
 80009f4:	4927      	ldr	r1, [pc, #156]	@ (8000a94 <Wordle+0x17c>)
 80009f6:	4828      	ldr	r0, [pc, #160]	@ (8000a98 <Wordle+0x180>)
 80009f8:	f002 f9b4 	bl	8002d64 <HAL_UART_Transmit>
 80009fc:	e041      	b.n	8000a82 <Wordle+0x16a>
	}
	else{
		point = 0;
 80009fe:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <Wordle+0x188>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
		attempt++;
 8000a04:	4b28      	ldr	r3, [pc, #160]	@ (8000aa8 <Wordle+0x190>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <Wordle+0x190>)
 8000a0e:	701a      	strb	r2, [r3, #0]
		if(attempt >= 5){
 8000a10:	4b25      	ldr	r3, [pc, #148]	@ (8000aa8 <Wordle+0x190>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b04      	cmp	r3, #4
 8000a16:	d90f      	bls.n	8000a38 <Wordle+0x120>
				sprintf((char*)TxBuffer,"\n Game Over\r\n\n Correct Answer is %s\n\r\n", (char*)wordle);
 8000a18:	4a20      	ldr	r2, [pc, #128]	@ (8000a9c <Wordle+0x184>)
 8000a1a:	4924      	ldr	r1, [pc, #144]	@ (8000aac <Wordle+0x194>)
 8000a1c:	481d      	ldr	r0, [pc, #116]	@ (8000a94 <Wordle+0x17c>)
 8000a1e:	f004 ffad 	bl	800597c <siprintf>
				HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000a22:	481c      	ldr	r0, [pc, #112]	@ (8000a94 <Wordle+0x17c>)
 8000a24:	f7ff fbfc 	bl	8000220 <strlen>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	4919      	ldr	r1, [pc, #100]	@ (8000a94 <Wordle+0x17c>)
 8000a30:	4819      	ldr	r0, [pc, #100]	@ (8000a98 <Wordle+0x180>)
 8000a32:	f002 f997 	bl	8002d64 <HAL_UART_Transmit>
 8000a36:	e024      	b.n	8000a82 <Wordle+0x16a>
		}
		else if(RxBuffer[1] != '1'){
 8000a38:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <Wordle+0x174>)
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	2b31      	cmp	r3, #49	@ 0x31
 8000a3e:	d020      	beq.n	8000a82 <Wordle+0x16a>
			sprintf((char*)TxBuffer,"Wrong Answer \n Your word : %s\r\n", (char*)output);
 8000a40:	4a11      	ldr	r2, [pc, #68]	@ (8000a88 <Wordle+0x170>)
 8000a42:	491b      	ldr	r1, [pc, #108]	@ (8000ab0 <Wordle+0x198>)
 8000a44:	4813      	ldr	r0, [pc, #76]	@ (8000a94 <Wordle+0x17c>)
 8000a46:	f004 ff99 	bl	800597c <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000a4a:	4812      	ldr	r0, [pc, #72]	@ (8000a94 <Wordle+0x17c>)
 8000a4c:	f7ff fbe8 	bl	8000220 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	2305      	movs	r3, #5
 8000a56:	490f      	ldr	r1, [pc, #60]	@ (8000a94 <Wordle+0x17c>)
 8000a58:	480f      	ldr	r0, [pc, #60]	@ (8000a98 <Wordle+0x180>)
 8000a5a:	f002 f983 	bl	8002d64 <HAL_UART_Transmit>
			sprintf((char*)TxBuffer,"Attempts : %d/5 \r\n", (int)(attempt+1));
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <Wordle+0x190>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	461a      	mov	r2, r3
 8000a66:	4913      	ldr	r1, [pc, #76]	@ (8000ab4 <Wordle+0x19c>)
 8000a68:	480a      	ldr	r0, [pc, #40]	@ (8000a94 <Wordle+0x17c>)
 8000a6a:	f004 ff87 	bl	800597c <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000a6e:	4809      	ldr	r0, [pc, #36]	@ (8000a94 <Wordle+0x17c>)
 8000a70:	f7ff fbd6 	bl	8000220 <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	2305      	movs	r3, #5
 8000a7a:	4906      	ldr	r1, [pc, #24]	@ (8000a94 <Wordle+0x17c>)
 8000a7c:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <Wordle+0x180>)
 8000a7e:	f002 f971 	bl	8002d64 <HAL_UART_Transmit>
		}

	}

}
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000224 	.word	0x20000224
 8000a8c:	200001d4 	.word	0x200001d4
 8000a90:	08006370 	.word	0x08006370
 8000a94:	200001e8 	.word	0x200001e8
 8000a98:	20000080 	.word	0x20000080
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	2000022a 	.word	0x2000022a
 8000aa4:	0800637c 	.word	0x0800637c
 8000aa8:	2000022b 	.word	0x2000022b
 8000aac:	080063a0 	.word	0x080063a0
 8000ab0:	080063c8 	.word	0x080063c8
 8000ab4:	080063e8 	.word	0x080063e8

08000ab8 <UARTPollingMethod>:

void UARTPollingMethod()
	{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	//read UART 10 char with in 10s
	HAL_StatusTypeDef HAL_status = HAL_UART_Receive(&hlpuart1, RxBuffer, 5, 15000);
 8000abe:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8000ac2:	2205      	movs	r2, #5
 8000ac4:	4931      	ldr	r1, [pc, #196]	@ (8000b8c <UARTPollingMethod+0xd4>)
 8000ac6:	4832      	ldr	r0, [pc, #200]	@ (8000b90 <UARTPollingMethod+0xd8>)
 8000ac8:	f002 f9da 	bl	8002e80 <HAL_UART_Receive>
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]

	//if complete read 10 char
	if(HAL_status == HAL_OK)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d135      	bne.n	8000b42 <UARTPollingMethod+0x8a>
	{
		readFlag = 1;
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b94 <UARTPollingMethod+0xdc>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
		RxBuffer[5] = '\0';
 8000adc:	4b2b      	ldr	r3, [pc, #172]	@ (8000b8c <UARTPollingMethod+0xd4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	715a      	strb	r2, [r3, #5]
		if(RxBuffer[0] == '1' || RxBuffer[4] == '1'){
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b8c <UARTPollingMethod+0xd4>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b31      	cmp	r3, #49	@ 0x31
 8000ae8:	d003      	beq.n	8000af2 <UARTPollingMethod+0x3a>
 8000aea:	4b28      	ldr	r3, [pc, #160]	@ (8000b8c <UARTPollingMethod+0xd4>)
 8000aec:	791b      	ldrb	r3, [r3, #4]
 8000aee:	2b31      	cmp	r3, #49	@ 0x31
 8000af0:	d10a      	bne.n	8000b08 <UARTPollingMethod+0x50>
			point = 0;
 8000af2:	4b29      	ldr	r3, [pc, #164]	@ (8000b98 <UARTPollingMethod+0xe0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
			attempt = 0;
 8000af8:	4b28      	ldr	r3, [pc, #160]	@ (8000b9c <UARTPollingMethod+0xe4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
			sprintf((char*)TxBuffer,"Reset Completed");
 8000afe:	4928      	ldr	r1, [pc, #160]	@ (8000ba0 <UARTPollingMethod+0xe8>)
 8000b00:	4828      	ldr	r0, [pc, #160]	@ (8000ba4 <UARTPollingMethod+0xec>)
 8000b02:	f004 ff3b 	bl	800597c <siprintf>
 8000b06:	e011      	b.n	8000b2c <UARTPollingMethod+0x74>
		}
		else if(attempt >= 5 || point == 5){
 8000b08:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <UARTPollingMethod+0xe4>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d803      	bhi.n	8000b18 <UARTPollingMethod+0x60>
 8000b10:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <UARTPollingMethod+0xe0>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b05      	cmp	r3, #5
 8000b16:	d104      	bne.n	8000b22 <UARTPollingMethod+0x6a>
			sprintf((char*)TxBuffer,"Game Halted, SEND 11111 to re-attempt\r\n");
 8000b18:	4923      	ldr	r1, [pc, #140]	@ (8000ba8 <UARTPollingMethod+0xf0>)
 8000b1a:	4822      	ldr	r0, [pc, #136]	@ (8000ba4 <UARTPollingMethod+0xec>)
 8000b1c:	f004 ff2e 	bl	800597c <siprintf>
 8000b20:	e004      	b.n	8000b2c <UARTPollingMethod+0x74>
		}
		else{
			sprintf((char*)TxBuffer,"Your answer : %s\r\n",(char*)RxBuffer);
 8000b22:	4a1a      	ldr	r2, [pc, #104]	@ (8000b8c <UARTPollingMethod+0xd4>)
 8000b24:	4921      	ldr	r1, [pc, #132]	@ (8000bac <UARTPollingMethod+0xf4>)
 8000b26:	481f      	ldr	r0, [pc, #124]	@ (8000ba4 <UARTPollingMethod+0xec>)
 8000b28:	f004 ff28 	bl	800597c <siprintf>
		}
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000b2c:	481d      	ldr	r0, [pc, #116]	@ (8000ba4 <UARTPollingMethod+0xec>)
 8000b2e:	f7ff fb77 	bl	8000220 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	2305      	movs	r3, #5
 8000b38:	491a      	ldr	r1, [pc, #104]	@ (8000ba4 <UARTPollingMethod+0xec>)
 8000b3a:	4815      	ldr	r0, [pc, #84]	@ (8000b90 <UARTPollingMethod+0xd8>)
 8000b3c:	f002 f912 	bl	8002d64 <HAL_UART_Transmit>
		//return received char
		sprintf((char*)TxBuffer,"turn CAPLOCK on, send S____ to begin\r\n");
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);

	}
}
 8000b40:	e01f      	b.n	8000b82 <UARTPollingMethod+0xca>
	else if(HAL_status == HAL_TIMEOUT)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d11c      	bne.n	8000b82 <UARTPollingMethod+0xca>
		uint32_t lastCharPos = hlpuart1.RxXferSize - hlpuart1.RxXferCount;
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <UARTPollingMethod+0xd8>)
 8000b4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <UARTPollingMethod+0xd8>)
 8000b52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	603b      	str	r3, [r7, #0]
		RxBuffer[lastCharPos] = '\0';
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b8c <UARTPollingMethod+0xd4>)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		sprintf((char*)TxBuffer,"turn CAPLOCK on, send S____ to begin\r\n");
 8000b66:	4912      	ldr	r1, [pc, #72]	@ (8000bb0 <UARTPollingMethod+0xf8>)
 8000b68:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <UARTPollingMethod+0xec>)
 8000b6a:	f004 ff07 	bl	800597c <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000b6e:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <UARTPollingMethod+0xec>)
 8000b70:	f7ff fb56 	bl	8000220 <strlen>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	2305      	movs	r3, #5
 8000b7a:	490a      	ldr	r1, [pc, #40]	@ (8000ba4 <UARTPollingMethod+0xec>)
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <UARTPollingMethod+0xd8>)
 8000b7e:	f002 f8f1 	bl	8002d64 <HAL_UART_Transmit>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001d4 	.word	0x200001d4
 8000b90:	20000080 	.word	0x20000080
 8000b94:	2000022c 	.word	0x2000022c
 8000b98:	2000022a 	.word	0x2000022a
 8000b9c:	2000022b 	.word	0x2000022b
 8000ba0:	080063fc 	.word	0x080063fc
 8000ba4:	200001e8 	.word	0x200001e8
 8000ba8:	0800640c 	.word	0x0800640c
 8000bac:	08006434 	.word	0x08006434
 8000bb0:	08006448 	.word	0x08006448

08000bb4 <UARTDMAConfig>:
void UARTInterruptConfig()
{
	//HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
}
void UARTDMAConfig()
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 10);
 8000bb8:	220a      	movs	r2, #10
 8000bba:	4903      	ldr	r1, [pc, #12]	@ (8000bc8 <UARTDMAConfig+0x14>)
 8000bbc:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <UARTDMAConfig+0x18>)
 8000bbe:	f002 fb07 	bl	80031d0 <HAL_UART_Receive_DMA>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200001d4 	.word	0x200001d4
 8000bcc:	20000080 	.word	0x20000080

08000bd0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	if(hlpuart == &hlpuart1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a0f      	ldr	r2, [pc, #60]	@ (8000c18 <HAL_UART_RxCpltCallback+0x48>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d116      	bne.n	8000c0e <HAL_UART_RxCpltCallback+0x3e>
	{
		RxBuffer[10] = '\0';
 8000be0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <HAL_UART_RxCpltCallback+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	729a      	strb	r2, [r3, #10]

		sprintf((char*)TxBuffer,"Received : %s\r\n", RxBuffer);
 8000be6:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <HAL_UART_RxCpltCallback+0x4c>)
 8000be8:	490d      	ldr	r1, [pc, #52]	@ (8000c20 <HAL_UART_RxCpltCallback+0x50>)
 8000bea:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <HAL_UART_RxCpltCallback+0x54>)
 8000bec:	f004 fec6 	bl	800597c <siprintf>
		HAL_UART_Transmit_IT(&hlpuart1, TxBuffer, strlen((char*)TxBuffer));
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <HAL_UART_RxCpltCallback+0x54>)
 8000bf2:	f7ff fb15 	bl	8000220 <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4909      	ldr	r1, [pc, #36]	@ (8000c24 <HAL_UART_RxCpltCallback+0x54>)
 8000bfe:	4806      	ldr	r0, [pc, #24]	@ (8000c18 <HAL_UART_RxCpltCallback+0x48>)
 8000c00:	f002 fa06 	bl	8003010 <HAL_UART_Transmit_IT>

		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
 8000c04:	220a      	movs	r2, #10
 8000c06:	4905      	ldr	r1, [pc, #20]	@ (8000c1c <HAL_UART_RxCpltCallback+0x4c>)
 8000c08:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <HAL_UART_RxCpltCallback+0x48>)
 8000c0a:	f002 fa95 	bl	8003138 <HAL_UART_Receive_IT>
	}
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000080 	.word	0x20000080
 8000c1c:	200001d4 	.word	0x200001d4
 8000c20:	08006470 	.word	0x08006470
 8000c24:	200001e8 	.word	0x200001e8

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <HAL_MspInit+0x44>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c78 <HAL_MspInit+0x44>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <HAL_MspInit+0x44>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_MspInit+0x44>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <HAL_MspInit+0x44>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_MspInit+0x44>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c6a:	f001 f89f 	bl	8001dac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09e      	sub	sp, #120	@ 0x78
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	2254      	movs	r2, #84	@ 0x54
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f004 fe8d 	bl	80059bc <memset>
  if(huart->Instance==LPUART1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a4d      	ldr	r2, [pc, #308]	@ (8000ddc <HAL_UART_MspInit+0x160>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	f040 8092 	bne.w	8000dd2 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fdb4 	bl	8002828 <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cc6:	f7ff ffaf 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cca:	4b45      	ldr	r3, [pc, #276]	@ (8000de0 <HAL_UART_MspInit+0x164>)
 8000ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cce:	4a44      	ldr	r2, [pc, #272]	@ (8000de0 <HAL_UART_MspInit+0x164>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000cd6:	4b42      	ldr	r3, [pc, #264]	@ (8000de0 <HAL_UART_MspInit+0x164>)
 8000cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8000de0 <HAL_UART_MspInit+0x164>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	4a3e      	ldr	r2, [pc, #248]	@ (8000de0 <HAL_UART_MspInit+0x164>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cee:	4b3c      	ldr	r3, [pc, #240]	@ (8000de0 <HAL_UART_MspInit+0x164>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000cfa:	230c      	movs	r3, #12
 8000cfc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d18:	f000 fde6 	bl	80018e8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000d1c:	4b31      	ldr	r3, [pc, #196]	@ (8000de4 <HAL_UART_MspInit+0x168>)
 8000d1e:	4a32      	ldr	r2, [pc, #200]	@ (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d20:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000d22:	4b30      	ldr	r3, [pc, #192]	@ (8000de4 <HAL_UART_MspInit+0x168>)
 8000d24:	2222      	movs	r2, #34	@ 0x22
 8000d26:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d28:	4b2e      	ldr	r3, [pc, #184]	@ (8000de4 <HAL_UART_MspInit+0x168>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <HAL_UART_MspInit+0x168>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d34:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <HAL_UART_MspInit+0x168>)
 8000d36:	2280      	movs	r2, #128	@ 0x80
 8000d38:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <HAL_UART_MspInit+0x168>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d40:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <HAL_UART_MspInit+0x168>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d46:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <HAL_UART_MspInit+0x168>)
 8000d48:	2220      	movs	r2, #32
 8000d4a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d4c:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <HAL_UART_MspInit+0x168>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000d52:	4824      	ldr	r0, [pc, #144]	@ (8000de4 <HAL_UART_MspInit+0x168>)
 8000d54:	f000 fa96 	bl	8001284 <HAL_DMA_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000d5e:	f7ff ff63 	bl	8000c28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a1f      	ldr	r2, [pc, #124]	@ (8000de4 <HAL_UART_MspInit+0x168>)
 8000d66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000de4 <HAL_UART_MspInit+0x168>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000d70:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <HAL_UART_MspInit+0x170>)
 8000d72:	4a1f      	ldr	r2, [pc, #124]	@ (8000df0 <HAL_UART_MspInit+0x174>)
 8000d74:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <HAL_UART_MspInit+0x170>)
 8000d78:	2223      	movs	r2, #35	@ 0x23
 8000d7a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <HAL_UART_MspInit+0x170>)
 8000d7e:	2210      	movs	r2, #16
 8000d80:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <HAL_UART_MspInit+0x170>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d88:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_UART_MspInit+0x170>)
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_UART_MspInit+0x170>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <HAL_UART_MspInit+0x170>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <HAL_UART_MspInit+0x170>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <HAL_UART_MspInit+0x170>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000da6:	4811      	ldr	r0, [pc, #68]	@ (8000dec <HAL_UART_MspInit+0x170>)
 8000da8:	f000 fa6c 	bl	8001284 <HAL_DMA_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000db2:	f7ff ff39 	bl	8000c28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dec <HAL_UART_MspInit+0x170>)
 8000dba:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <HAL_UART_MspInit+0x170>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	205b      	movs	r0, #91	@ 0x5b
 8000dc8:	f000 fa27 	bl	800121a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000dcc:	205b      	movs	r0, #91	@ 0x5b
 8000dce:	f000 fa3e 	bl	800124e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3778      	adds	r7, #120	@ 0x78
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40008000 	.word	0x40008000
 8000de0:	40021000 	.word	0x40021000
 8000de4:	20000114 	.word	0x20000114
 8000de8:	40020008 	.word	0x40020008
 8000dec:	20000174 	.word	0x20000174
 8000df0:	4002001c 	.word	0x4002001c

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <NMI_Handler+0x4>

08000dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4a:	f000 f8ed 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <DMA1_Channel1_IRQHandler+0x10>)
 8000e5a:	f000 fbf6 	bl	800164a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000114 	.word	0x20000114

08000e68 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <DMA1_Channel2_IRQHandler+0x10>)
 8000e6e:	f000 fbec 	bl	800164a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000174 	.word	0x20000174

08000e7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e84:	f000 feca 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <LPUART1_IRQHandler+0x10>)
 8000e92:	f002 f9e9 	bl	8003268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000080 	.word	0x20000080

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f004 fd7c 	bl	80059cc <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20020000 	.word	0x20020000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	20000230 	.word	0x20000230
 8000f08:	20000380 	.word	0x20000380

08000f0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f30:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f34:	f7ff ffea 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <LoopForever+0xe>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	@ (8000f7c <LoopForever+0x16>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f004 fd3b 	bl	80059d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f62:	f7ff fb2d 	bl	80005c0 <main>

08000f66 <LoopForever>:

LoopForever:
    b LoopForever
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
  ldr   r0, =_estack
 8000f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000f74:	08006504 	.word	0x08006504
  ldr r2, =_sbss
 8000f78:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000f7c:	20000380 	.word	0x20000380

08000f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC1_2_IRQHandler>

08000f82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f939 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 f80e 	bl	8000fb4 <HAL_InitTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	e001      	b.n	8000fa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa4:	f7ff fe46 	bl	8000c34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]

}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fc0:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_InitTick+0x68>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d022      	beq.n	800100e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <HAL_InitTick+0x6c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <HAL_InitTick+0x68>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f944 	bl	800126a <HAL_SYSTICK_Config>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10f      	bne.n	8001008 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	d809      	bhi.n	8001002 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff6:	f000 f910 	bl	800121a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <HAL_InitTick+0x70>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e007      	b.n	8001012 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e004      	b.n	8001012 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e001      	b.n	8001012 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000010 	.word	0x20000010
 8001020:	20000008 	.word	0x20000008
 8001024:	2000000c 	.word	0x2000000c

08001028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HAL_IncTick+0x1c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <HAL_IncTick+0x20>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4413      	add	r3, r2
 8001036:	4a03      	ldr	r2, [pc, #12]	@ (8001044 <HAL_IncTick+0x1c>)
 8001038:	6013      	str	r3, [r2, #0]
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000234 	.word	0x20000234
 8001048:	20000010 	.word	0x20000010

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000234 	.word	0x20000234

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db0b      	blt.n	80010f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f003 021f 	and.w	r2, r3, #31
 80010e0:	4907      	ldr	r1, [pc, #28]	@ (8001100 <__NVIC_EnableIRQ+0x38>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	2001      	movs	r0, #1
 80010ea:	fa00 f202 	lsl.w	r2, r0, r2
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	@ (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	@ (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	@ 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
         );
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	@ 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff8e 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff29 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001228:	f7ff ff40 	bl	80010ac <__NVIC_GetPriorityGrouping>
 800122c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f7ff ff90 	bl	8001158 <NVIC_EncodePriority>
 8001238:	4602      	mov	r2, r0
 800123a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5f 	bl	8001104 <__NVIC_SetPriority>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff33 	bl	80010c8 <__NVIC_EnableIRQ>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffa4 	bl	80011c0 <SysTick_Config>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e08d      	b.n	80013b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	4b47      	ldr	r3, [pc, #284]	@ (80013bc <HAL_DMA_Init+0x138>)
 800129e:	429a      	cmp	r2, r3
 80012a0:	d80f      	bhi.n	80012c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b45      	ldr	r3, [pc, #276]	@ (80013c0 <HAL_DMA_Init+0x13c>)
 80012aa:	4413      	add	r3, r2
 80012ac:	4a45      	ldr	r2, [pc, #276]	@ (80013c4 <HAL_DMA_Init+0x140>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	009a      	lsls	r2, r3, #2
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a42      	ldr	r2, [pc, #264]	@ (80013c8 <HAL_DMA_Init+0x144>)
 80012be:	641a      	str	r2, [r3, #64]	@ 0x40
 80012c0:	e00e      	b.n	80012e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b40      	ldr	r3, [pc, #256]	@ (80013cc <HAL_DMA_Init+0x148>)
 80012ca:	4413      	add	r3, r2
 80012cc:	4a3d      	ldr	r2, [pc, #244]	@ (80013c4 <HAL_DMA_Init+0x140>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	009a      	lsls	r2, r3, #2
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a3c      	ldr	r2, [pc, #240]	@ (80013d0 <HAL_DMA_Init+0x14c>)
 80012de:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2202      	movs	r2, #2
 80012e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80012f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80012fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fa76 	bl	8001824 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001340:	d102      	bne.n	8001348 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800135c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d010      	beq.n	8001388 <HAL_DMA_Init+0x104>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b04      	cmp	r3, #4
 800136c:	d80c      	bhi.n	8001388 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fa96 	bl	80018a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	e008      	b.n	800139a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40020407 	.word	0x40020407
 80013c0:	bffdfff8 	.word	0xbffdfff8
 80013c4:	cccccccd 	.word	0xcccccccd
 80013c8:	40020000 	.word	0x40020000
 80013cc:	bffdfbf8 	.word	0xbffdfbf8
 80013d0:	40020400 	.word	0x40020400

080013d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_DMA_Start_IT+0x20>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e066      	b.n	80014c2 <HAL_DMA_Start_IT+0xee>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d155      	bne.n	80014b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2202      	movs	r2, #2
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0201 	bic.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 f9bb 	bl	80017a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f042 020e 	orr.w	r2, r2, #14
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e00f      	b.n	800146c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0204 	bic.w	r2, r2, #4
 800145a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 020a 	orr.w	r2, r2, #10
 800146a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001484:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001488:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0201 	orr.w	r2, r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	e005      	b.n	80014c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80014bc:	2302      	movs	r3, #2
 80014be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b085      	sub	sp, #20
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d005      	beq.n	80014ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2204      	movs	r2, #4
 80014e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e037      	b.n	800155e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 020e 	bic.w	r2, r2, #14
 80014fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800150c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f003 021f 	and.w	r2, r3, #31
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f202 	lsl.w	r2, r1, r2
 8001530:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800153a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00c      	beq.n	800155e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800154e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001552:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800155c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d00d      	beq.n	80015b0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2204      	movs	r2, #4
 8001598:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	e047      	b.n	8001640 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 020e 	bic.w	r2, r2, #14
 80015be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00c      	beq.n	8001620 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001614:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800161e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	4798      	blx	r3
    }
  }
  return status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	2204      	movs	r2, #4
 800166c:	409a      	lsls	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d026      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x7a>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d021      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	2b00      	cmp	r3, #0
 800168c:	d107      	bne.n	800169e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0204 	bic.w	r2, r2, #4
 800169c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	f003 021f 	and.w	r2, r3, #31
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	2104      	movs	r1, #4
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d071      	beq.n	800179e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80016c2:	e06c      	b.n	800179e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	2202      	movs	r2, #2
 80016ce:	409a      	lsls	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d02e      	beq.n	8001736 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d029      	beq.n	8001736 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0320 	and.w	r3, r3, #32
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10b      	bne.n	8001708 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 020a 	bic.w	r2, r2, #10
 80016fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	2102      	movs	r1, #2
 8001716:	fa01 f202 	lsl.w	r2, r1, r2
 800171a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001728:	2b00      	cmp	r3, #0
 800172a:	d038      	beq.n	800179e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001734:	e033      	b.n	800179e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	2208      	movs	r2, #8
 8001740:	409a      	lsls	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d02a      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d025      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 020e 	bic.w	r2, r2, #14
 8001762:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001770:	2101      	movs	r1, #1
 8001772:	fa01 f202 	lsl.w	r2, r1, r2
 8001776:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
}
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	f003 021f 	and.w	r2, r3, #31
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	2101      	movs	r1, #1
 80017e0:	fa01 f202 	lsl.w	r2, r1, r2
 80017e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d108      	bne.n	8001808 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001806:	e007      	b.n	8001818 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	60da      	str	r2, [r3, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b16      	ldr	r3, [pc, #88]	@ (800188c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001834:	429a      	cmp	r2, r3
 8001836:	d802      	bhi.n	800183e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001838:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e001      	b.n	8001842 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001840:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	3b08      	subs	r3, #8
 800184e:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	009a      	lsls	r2, r3, #2
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4413      	add	r3, r2
 8001864:	461a      	mov	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a0b      	ldr	r2, [pc, #44]	@ (800189c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800186e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	2201      	movs	r2, #1
 8001878:	409a      	lsls	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40020407 	.word	0x40020407
 8001890:	40020800 	.word	0x40020800
 8001894:	40020820 	.word	0x40020820
 8001898:	cccccccd 	.word	0xcccccccd
 800189c:	40020880 	.word	0x40020880

080018a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	461a      	mov	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a08      	ldr	r2, [pc, #32]	@ (80018e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80018c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2201      	movs	r2, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	1000823f 	.word	0x1000823f
 80018e4:	40020940 	.word	0x40020940

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018f6:	e15a      	b.n	8001bae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 814c 	beq.w	8001ba8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d005      	beq.n	8001928 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001924:	2b02      	cmp	r3, #2
 8001926:	d130      	bne.n	800198a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800195e:	2201      	movs	r2, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	f003 0201 	and.w	r2, r3, #1
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b03      	cmp	r3, #3
 8001994:	d017      	beq.n	80019c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d123      	bne.n	8001a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	6939      	ldr	r1, [r7, #16]
 8001a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0203 	and.w	r2, r3, #3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80a6 	beq.w	8001ba8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a60:	4a5a      	ldr	r2, [pc, #360]	@ (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a68:	4b58      	ldr	r3, [pc, #352]	@ (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a74:	4a56      	ldr	r2, [pc, #344]	@ (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a9e:	d01f      	beq.n	8001ae0 <HAL_GPIO_Init+0x1f8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a4c      	ldr	r2, [pc, #304]	@ (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d019      	beq.n	8001adc <HAL_GPIO_Init+0x1f4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a4b      	ldr	r2, [pc, #300]	@ (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d013      	beq.n	8001ad8 <HAL_GPIO_Init+0x1f0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a4a      	ldr	r2, [pc, #296]	@ (8001bdc <HAL_GPIO_Init+0x2f4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d00d      	beq.n	8001ad4 <HAL_GPIO_Init+0x1ec>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a49      	ldr	r2, [pc, #292]	@ (8001be0 <HAL_GPIO_Init+0x2f8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d007      	beq.n	8001ad0 <HAL_GPIO_Init+0x1e8>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a48      	ldr	r2, [pc, #288]	@ (8001be4 <HAL_GPIO_Init+0x2fc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_GPIO_Init+0x1e4>
 8001ac8:	2305      	movs	r3, #5
 8001aca:	e00a      	b.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001acc:	2306      	movs	r3, #6
 8001ace:	e008      	b.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	e006      	b.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e004      	b.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e002      	b.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	f002 0203 	and.w	r2, r2, #3
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	4093      	lsls	r3, r2
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af2:	4937      	ldr	r1, [pc, #220]	@ (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b00:	4b39      	ldr	r3, [pc, #228]	@ (8001be8 <HAL_GPIO_Init+0x300>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b24:	4a30      	ldr	r2, [pc, #192]	@ (8001be8 <HAL_GPIO_Init+0x300>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001be8 <HAL_GPIO_Init+0x300>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b4e:	4a26      	ldr	r2, [pc, #152]	@ (8001be8 <HAL_GPIO_Init+0x300>)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b54:	4b24      	ldr	r3, [pc, #144]	@ (8001be8 <HAL_GPIO_Init+0x300>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b78:	4a1b      	ldr	r2, [pc, #108]	@ (8001be8 <HAL_GPIO_Init+0x300>)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <HAL_GPIO_Init+0x300>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ba2:	4a11      	ldr	r2, [pc, #68]	@ (8001be8 <HAL_GPIO_Init+0x300>)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f47f ae9d 	bne.w	80018f8 <HAL_GPIO_Init+0x10>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	48000400 	.word	0x48000400
 8001bd8:	48000800 	.word	0x48000800
 8001bdc:	48000c00 	.word	0x48000c00
 8001be0:	48001000 	.word	0x48001000
 8001be4:	48001400 	.word	0x48001400
 8001be8:	40010400 	.word	0x40010400

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c26:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c32:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f806 	bl	8001c4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40010400 	.word	0x40010400

08001c4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d141      	bne.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c72:	4b4b      	ldr	r3, [pc, #300]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7e:	d131      	bne.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c80:	4b47      	ldr	r3, [pc, #284]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c86:	4a46      	ldr	r2, [pc, #280]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c90:	4b43      	ldr	r3, [pc, #268]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c98:	4a41      	ldr	r2, [pc, #260]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ca0:	4b40      	ldr	r3, [pc, #256]	@ (8001da4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2232      	movs	r2, #50	@ 0x32
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	4a3f      	ldr	r2, [pc, #252]	@ (8001da8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	0c9b      	lsrs	r3, r3, #18
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb6:	e002      	b.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cbe:	4b38      	ldr	r3, [pc, #224]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cca:	d102      	bne.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f2      	bne.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cd2:	4b33      	ldr	r3, [pc, #204]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cde:	d158      	bne.n	8001d92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e057      	b.n	8001d94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cea:	4a2d      	ldr	r2, [pc, #180]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cf4:	e04d      	b.n	8001d92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cfc:	d141      	bne.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cfe:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d0a:	d131      	bne.n	8001d70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d0c:	4b24      	ldr	r3, [pc, #144]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d12:	4a23      	ldr	r2, [pc, #140]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d1c:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d24:	4a1e      	ldr	r2, [pc, #120]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2232      	movs	r2, #50	@ 0x32
 8001d32:	fb02 f303 	mul.w	r3, r2, r3
 8001d36:	4a1c      	ldr	r2, [pc, #112]	@ (8001da8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d38:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3c:	0c9b      	lsrs	r3, r3, #18
 8001d3e:	3301      	adds	r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d42:	e002      	b.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d56:	d102      	bne.n	8001d5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f2      	bne.n	8001d44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d5e:	4b10      	ldr	r3, [pc, #64]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d6a:	d112      	bne.n	8001d92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e011      	b.n	8001d94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d80:	e007      	b.n	8001d92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d82:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40007000 	.word	0x40007000
 8001da4:	20000008 	.word	0x20000008
 8001da8:	431bde83 	.word	0x431bde83

08001dac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001db6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dba:	6093      	str	r3, [r2, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40007000 	.word	0x40007000

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e2fe      	b.n	80023dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d075      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dea:	4b97      	ldr	r3, [pc, #604]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df4:	4b94      	ldr	r3, [pc, #592]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	d102      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3e>
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_OscConfig+0x44>
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d10b      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	4b8d      	ldr	r3, [pc, #564]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d05b      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x108>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d157      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e2d9      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e30:	d106      	bne.n	8001e40 <HAL_RCC_OscConfig+0x74>
 8001e32:	4b85      	ldr	r3, [pc, #532]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a84      	ldr	r2, [pc, #528]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e01d      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x98>
 8001e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b7c      	ldr	r3, [pc, #496]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a7b      	ldr	r2, [pc, #492]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e64:	4b78      	ldr	r3, [pc, #480]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a77      	ldr	r2, [pc, #476]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b75      	ldr	r3, [pc, #468]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a74      	ldr	r2, [pc, #464]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f8e2 	bl	800104c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff f8de 	bl	800104c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	@ 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e29e      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0xc0>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff f8ce 	bl	800104c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff f8ca 	bl	800104c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	@ 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e28a      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec6:	4b60      	ldr	r3, [pc, #384]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xe8>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d075      	beq.n	8001fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee2:	4b59      	ldr	r3, [pc, #356]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eec:	4b56      	ldr	r3, [pc, #344]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_OscConfig+0x136>
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_OscConfig+0x13c>
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d11f      	bne.n	8001f48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f08:	4b4f      	ldr	r3, [pc, #316]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_OscConfig+0x154>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e25d      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	4b49      	ldr	r3, [pc, #292]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	4946      	ldr	r1, [pc, #280]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f34:	4b45      	ldr	r3, [pc, #276]	@ (800204c <HAL_RCC_OscConfig+0x280>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff f83b 	bl	8000fb4 <HAL_InitTick>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d043      	beq.n	8001fcc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e249      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d023      	beq.n	8001f98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f50:	4b3d      	ldr	r3, [pc, #244]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a3c      	ldr	r2, [pc, #240]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7ff f876 	bl	800104c <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f64:	f7ff f872 	bl	800104c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e232      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f76:	4b34      	ldr	r3, [pc, #208]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f82:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	061b      	lsls	r3, r3, #24
 8001f90:	492d      	ldr	r1, [pc, #180]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
 8001f96:	e01a      	b.n	8001fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f98:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001f9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f852 	bl	800104c <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fac:	f7ff f84e 	bl	800104c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e20e      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fbe:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x1e0>
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d041      	beq.n	800205e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01c      	beq.n	800201c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fe8:	4a17      	ldr	r2, [pc, #92]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f82b 	bl	800104c <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff f827 	bl	800104c <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1e7      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 800200e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0ef      	beq.n	8001ffa <HAL_RCC_OscConfig+0x22e>
 800201a:	e020      	b.n	800205e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201c:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 800201e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002022:	4a09      	ldr	r2, [pc, #36]	@ (8002048 <HAL_RCC_OscConfig+0x27c>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7ff f80e 	bl	800104c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002032:	e00d      	b.n	8002050 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7ff f80a 	bl	800104c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d906      	bls.n	8002050 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1ca      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002050:	4b8c      	ldr	r3, [pc, #560]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 8002052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1ea      	bne.n	8002034 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80a6 	beq.w	80021b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002070:	4b84      	ldr	r3, [pc, #528]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x2b4>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x2b6>
 8002080:	2300      	movs	r3, #0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00d      	beq.n	80020a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4b7f      	ldr	r3, [pc, #508]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208a:	4a7e      	ldr	r2, [pc, #504]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002090:	6593      	str	r3, [r2, #88]	@ 0x58
 8002092:	4b7c      	ldr	r3, [pc, #496]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a2:	4b79      	ldr	r3, [pc, #484]	@ (8002288 <HAL_RCC_OscConfig+0x4bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d118      	bne.n	80020e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ae:	4b76      	ldr	r3, [pc, #472]	@ (8002288 <HAL_RCC_OscConfig+0x4bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a75      	ldr	r2, [pc, #468]	@ (8002288 <HAL_RCC_OscConfig+0x4bc>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7fe ffc7 	bl	800104c <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c2:	f7fe ffc3 	bl	800104c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e183      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002288 <HAL_RCC_OscConfig+0x4bc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d108      	bne.n	80020fa <HAL_RCC_OscConfig+0x32e>
 80020e8:	4b66      	ldr	r3, [pc, #408]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ee:	4a65      	ldr	r2, [pc, #404]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020f8:	e024      	b.n	8002144 <HAL_RCC_OscConfig+0x378>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d110      	bne.n	8002124 <HAL_RCC_OscConfig+0x358>
 8002102:	4b60      	ldr	r3, [pc, #384]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002108:	4a5e      	ldr	r2, [pc, #376]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002112:	4b5c      	ldr	r3, [pc, #368]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002118:	4a5a      	ldr	r2, [pc, #360]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002122:	e00f      	b.n	8002144 <HAL_RCC_OscConfig+0x378>
 8002124:	4b57      	ldr	r3, [pc, #348]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212a:	4a56      	ldr	r2, [pc, #344]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002134:	4b53      	ldr	r3, [pc, #332]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213a:	4a52      	ldr	r2, [pc, #328]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d016      	beq.n	800217a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7fe ff7e 	bl	800104c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002152:	e00a      	b.n	800216a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7fe ff7a 	bl	800104c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e138      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216a:	4b46      	ldr	r3, [pc, #280]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ed      	beq.n	8002154 <HAL_RCC_OscConfig+0x388>
 8002178:	e015      	b.n	80021a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217a:	f7fe ff67 	bl	800104c <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7fe ff63 	bl	800104c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e121      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002198:	4b3a      	ldr	r3, [pc, #232]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ed      	bne.n	8002182 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021a6:	7ffb      	ldrb	r3, [r7, #31]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d105      	bne.n	80021b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ac:	4b35      	ldr	r3, [pc, #212]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b0:	4a34      	ldr	r2, [pc, #208]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 80021b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d03c      	beq.n	800223e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01c      	beq.n	8002206 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 80021ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7fe ff36 	bl	800104c <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e4:	f7fe ff32 	bl	800104c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0f2      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021f6:	4b23      	ldr	r3, [pc, #140]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 80021f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ef      	beq.n	80021e4 <HAL_RCC_OscConfig+0x418>
 8002204:	e01b      	b.n	800223e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002206:	4b1f      	ldr	r3, [pc, #124]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 8002208:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800220c:	4a1d      	ldr	r2, [pc, #116]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002216:	f7fe ff19 	bl	800104c <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800221e:	f7fe ff15 	bl	800104c <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0d5      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 8002232:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1ef      	bne.n	800221e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80c9 	beq.w	80023da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002248:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b0c      	cmp	r3, #12
 8002252:	f000 8083 	beq.w	800235c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d15e      	bne.n	800231c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a08      	ldr	r2, [pc, #32]	@ (8002284 <HAL_RCC_OscConfig+0x4b8>)
 8002264:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7fe feef 	bl	800104c <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002270:	e00c      	b.n	800228c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002272:	f7fe feeb 	bl	800104c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d905      	bls.n	800228c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e0ab      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
 8002284:	40021000 	.word	0x40021000
 8002288:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228c:	4b55      	ldr	r3, [pc, #340]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1ec      	bne.n	8002272 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002298:	4b52      	ldr	r3, [pc, #328]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	4b52      	ldr	r3, [pc, #328]	@ (80023e8 <HAL_RCC_OscConfig+0x61c>)
 800229e:	4013      	ands	r3, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6a11      	ldr	r1, [r2, #32]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022a8:	3a01      	subs	r2, #1
 80022aa:	0112      	lsls	r2, r2, #4
 80022ac:	4311      	orrs	r1, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80022b2:	0212      	lsls	r2, r2, #8
 80022b4:	4311      	orrs	r1, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022ba:	0852      	lsrs	r2, r2, #1
 80022bc:	3a01      	subs	r2, #1
 80022be:	0552      	lsls	r2, r2, #21
 80022c0:	4311      	orrs	r1, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022c6:	0852      	lsrs	r2, r2, #1
 80022c8:	3a01      	subs	r2, #1
 80022ca:	0652      	lsls	r2, r2, #25
 80022cc:	4311      	orrs	r1, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80022d2:	06d2      	lsls	r2, r2, #27
 80022d4:	430a      	orrs	r2, r1
 80022d6:	4943      	ldr	r1, [pc, #268]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022dc:	4b41      	ldr	r3, [pc, #260]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a40      	ldr	r2, [pc, #256]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 80022e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e8:	4b3e      	ldr	r3, [pc, #248]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a3d      	ldr	r2, [pc, #244]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 80022ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe feaa 	bl	800104c <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fc:	f7fe fea6 	bl	800104c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e066      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230e:	4b35      	ldr	r3, [pc, #212]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x530>
 800231a:	e05e      	b.n	80023da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231c:	4b31      	ldr	r3, [pc, #196]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a30      	ldr	r2, [pc, #192]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 8002322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fe90 	bl	800104c <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fe8c 	bl	800104c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e04c      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002342:	4b28      	ldr	r3, [pc, #160]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800234e:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	4924      	ldr	r1, [pc, #144]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 8002354:	4b25      	ldr	r3, [pc, #148]	@ (80023ec <HAL_RCC_OscConfig+0x620>)
 8002356:	4013      	ands	r3, r2
 8002358:	60cb      	str	r3, [r1, #12]
 800235a:	e03e      	b.n	80023da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e039      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002368:	4b1e      	ldr	r3, [pc, #120]	@ (80023e4 <HAL_RCC_OscConfig+0x618>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f003 0203 	and.w	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	429a      	cmp	r2, r3
 800237a:	d12c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	3b01      	subs	r3, #1
 8002388:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d123      	bne.n	80023d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d11b      	bne.n	80023d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d113      	bne.n	80023d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	3b01      	subs	r3, #1
 80023bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023cc:	085b      	lsrs	r3, r3, #1
 80023ce:	3b01      	subs	r3, #1
 80023d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	019f800c 	.word	0x019f800c
 80023ec:	feeefffc 	.word	0xfeeefffc

080023f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e11e      	b.n	8002646 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002408:	4b91      	ldr	r3, [pc, #580]	@ (8002650 <HAL_RCC_ClockConfig+0x260>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d910      	bls.n	8002438 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b8e      	ldr	r3, [pc, #568]	@ (8002650 <HAL_RCC_ClockConfig+0x260>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 020f 	bic.w	r2, r3, #15
 800241e:	498c      	ldr	r1, [pc, #560]	@ (8002650 <HAL_RCC_ClockConfig+0x260>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b8a      	ldr	r3, [pc, #552]	@ (8002650 <HAL_RCC_ClockConfig+0x260>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e106      	b.n	8002646 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d073      	beq.n	800252c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d129      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244c:	4b81      	ldr	r3, [pc, #516]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0f4      	b.n	8002646 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800245c:	f000 f99e 	bl	800279c <RCC_GetSysClockFreqFromPLLSource>
 8002460:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4a7c      	ldr	r2, [pc, #496]	@ (8002658 <HAL_RCC_ClockConfig+0x268>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d93f      	bls.n	80024ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800246a:	4b7a      	ldr	r3, [pc, #488]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800247e:	2b00      	cmp	r3, #0
 8002480:	d033      	beq.n	80024ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002486:	2b00      	cmp	r3, #0
 8002488:	d12f      	bne.n	80024ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800248a:	4b72      	ldr	r3, [pc, #456]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002492:	4a70      	ldr	r2, [pc, #448]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 8002494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002498:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	e024      	b.n	80024ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0c6      	b.n	8002646 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b8:	4b66      	ldr	r3, [pc, #408]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0be      	b.n	8002646 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80024c8:	f000 f8ce 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4a61      	ldr	r2, [pc, #388]	@ (8002658 <HAL_RCC_ClockConfig+0x268>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d909      	bls.n	80024ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024de:	4a5d      	ldr	r2, [pc, #372]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 80024e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024e6:	2380      	movs	r3, #128	@ 0x80
 80024e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f023 0203 	bic.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4957      	ldr	r1, [pc, #348]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fc:	f7fe fda6 	bl	800104c <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	e00a      	b.n	800251a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002504:	f7fe fda2 	bl	800104c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e095      	b.n	8002646 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	4b4e      	ldr	r3, [pc, #312]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 020c 	and.w	r2, r3, #12
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d1eb      	bne.n	8002504 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d023      	beq.n	8002580 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002544:	4b43      	ldr	r3, [pc, #268]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a42      	ldr	r2, [pc, #264]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 800254a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800254e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800255c:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002564:	4a3b      	ldr	r2, [pc, #236]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 8002566:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800256a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800256c:	4b39      	ldr	r3, [pc, #228]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4936      	ldr	r1, [pc, #216]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
 800257e:	e008      	b.n	8002592 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b80      	cmp	r3, #128	@ 0x80
 8002584:	d105      	bne.n	8002592 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002586:	4b33      	ldr	r3, [pc, #204]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	4a32      	ldr	r2, [pc, #200]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 800258c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002590:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002592:	4b2f      	ldr	r3, [pc, #188]	@ (8002650 <HAL_RCC_ClockConfig+0x260>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d21d      	bcs.n	80025dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <HAL_RCC_ClockConfig+0x260>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 020f 	bic.w	r2, r3, #15
 80025a8:	4929      	ldr	r1, [pc, #164]	@ (8002650 <HAL_RCC_ClockConfig+0x260>)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025b0:	f7fe fd4c 	bl	800104c <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b8:	f7fe fd48 	bl	800104c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e03b      	b.n	8002646 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b20      	ldr	r3, [pc, #128]	@ (8002650 <HAL_RCC_ClockConfig+0x260>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1ed      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4917      	ldr	r1, [pc, #92]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002606:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	490f      	ldr	r1, [pc, #60]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800261a:	f000 f825 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 800261e:	4602      	mov	r2, r0
 8002620:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <HAL_RCC_ClockConfig+0x264>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	490c      	ldr	r1, [pc, #48]	@ (800265c <HAL_RCC_ClockConfig+0x26c>)
 800262c:	5ccb      	ldrb	r3, [r1, r3]
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	fa22 f303 	lsr.w	r3, r2, r3
 8002636:	4a0a      	ldr	r2, [pc, #40]	@ (8002660 <HAL_RCC_ClockConfig+0x270>)
 8002638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800263a:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <HAL_RCC_ClockConfig+0x274>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe fcb8 	bl	8000fb4 <HAL_InitTick>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40022000 	.word	0x40022000
 8002654:	40021000 	.word	0x40021000
 8002658:	04c4b400 	.word	0x04c4b400
 800265c:	08006480 	.word	0x08006480
 8002660:	20000008 	.word	0x20000008
 8002664:	2000000c 	.word	0x2000000c

08002668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800266e:	4b2c      	ldr	r3, [pc, #176]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b04      	cmp	r3, #4
 8002678:	d102      	bne.n	8002680 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800267a:	4b2a      	ldr	r3, [pc, #168]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xbc>)
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	e047      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002680:	4b27      	ldr	r3, [pc, #156]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d102      	bne.n	8002692 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800268c:	4b26      	ldr	r3, [pc, #152]	@ (8002728 <HAL_RCC_GetSysClockFreq+0xc0>)
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	e03e      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002692:	4b23      	ldr	r3, [pc, #140]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b0c      	cmp	r3, #12
 800269c:	d136      	bne.n	800270c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269e:	4b20      	ldr	r3, [pc, #128]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	3301      	adds	r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d10c      	bne.n	80026d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002728 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c4:	4a16      	ldr	r2, [pc, #88]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026c6:	68d2      	ldr	r2, [r2, #12]
 80026c8:	0a12      	lsrs	r2, r2, #8
 80026ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	617b      	str	r3, [r7, #20]
      break;
 80026d4:	e00c      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d6:	4a13      	ldr	r2, [pc, #76]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	4a10      	ldr	r2, [pc, #64]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e0:	68d2      	ldr	r2, [r2, #12]
 80026e2:	0a12      	lsrs	r2, r2, #8
 80026e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
      break;
 80026ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0e5b      	lsrs	r3, r3, #25
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	3301      	adds	r3, #1
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	e001      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002710:	693b      	ldr	r3, [r7, #16]
}
 8002712:	4618      	mov	r0, r3
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	00f42400 	.word	0x00f42400
 8002728:	016e3600 	.word	0x016e3600

0800272c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b03      	ldr	r3, [pc, #12]	@ (8002740 <HAL_RCC_GetHCLKFreq+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000008 	.word	0x20000008

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002748:	f7ff fff0 	bl	800272c <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4904      	ldr	r1, [pc, #16]	@ (800276c <HAL_RCC_GetPCLK1Freq+0x28>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	08006490 	.word	0x08006490

08002770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002774:	f7ff ffda 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_RCC_GetPCLK2Freq+0x24>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0adb      	lsrs	r3, r3, #11
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4904      	ldr	r1, [pc, #16]	@ (8002798 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000
 8002798:	08006490 	.word	0x08006490

0800279c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027a2:	4b1e      	ldr	r3, [pc, #120]	@ (800281c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	@ (800281c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3301      	adds	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d10c      	bne.n	80027da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027c0:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	4a14      	ldr	r2, [pc, #80]	@ (800281c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ca:	68d2      	ldr	r2, [r2, #12]
 80027cc:	0a12      	lsrs	r2, r2, #8
 80027ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
    break;
 80027d8:	e00c      	b.n	80027f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027da:	4a12      	ldr	r2, [pc, #72]	@ (8002824 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	4a0e      	ldr	r2, [pc, #56]	@ (800281c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027e4:	68d2      	ldr	r2, [r2, #12]
 80027e6:	0a12      	lsrs	r2, r2, #8
 80027e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
    break;
 80027f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027f4:	4b09      	ldr	r3, [pc, #36]	@ (800281c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	0e5b      	lsrs	r3, r3, #25
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800280e:	687b      	ldr	r3, [r7, #4]
}
 8002810:	4618      	mov	r0, r3
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	40021000 	.word	0x40021000
 8002820:	016e3600 	.word	0x016e3600
 8002824:	00f42400 	.word	0x00f42400

08002828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002830:	2300      	movs	r3, #0
 8002832:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002834:	2300      	movs	r3, #0
 8002836:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8098 	beq.w	8002976 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284a:	4b43      	ldr	r3, [pc, #268]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10d      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	4b40      	ldr	r3, [pc, #256]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285a:	4a3f      	ldr	r2, [pc, #252]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002860:	6593      	str	r3, [r2, #88]	@ 0x58
 8002862:	4b3d      	ldr	r3, [pc, #244]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286e:	2301      	movs	r3, #1
 8002870:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002872:	4b3a      	ldr	r3, [pc, #232]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a39      	ldr	r2, [pc, #228]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800287c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800287e:	f7fe fbe5 	bl	800104c <HAL_GetTick>
 8002882:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002884:	e009      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7fe fbe1 	bl	800104c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d902      	bls.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	74fb      	strb	r3, [r7, #19]
        break;
 8002898:	e005      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800289a:	4b30      	ldr	r3, [pc, #192]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0ef      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80028a6:	7cfb      	ldrb	r3, [r7, #19]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d159      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d01e      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d019      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028c8:	4b23      	ldr	r3, [pc, #140]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028d4:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028da:	4a1f      	ldr	r2, [pc, #124]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028f4:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002906:	f7fe fba1 	bl	800104c <HAL_GetTick>
 800290a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800290c:	e00b      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7fe fb9d 	bl	800104c <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d902      	bls.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	74fb      	strb	r3, [r7, #19]
            break;
 8002924:	e006      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002926:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ec      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10b      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800293a:	4b07      	ldr	r3, [pc, #28]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002948:	4903      	ldr	r1, [pc, #12]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002950:	e008      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002952:	7cfb      	ldrb	r3, [r7, #19]
 8002954:	74bb      	strb	r3, [r7, #18]
 8002956:	e005      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002958:	40021000 	.word	0x40021000
 800295c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002964:	7c7b      	ldrb	r3, [r7, #17]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d105      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296a:	4ba7      	ldr	r3, [pc, #668]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296e:	4aa6      	ldr	r2, [pc, #664]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002974:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002982:	4ba1      	ldr	r3, [pc, #644]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002988:	f023 0203 	bic.w	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	499d      	ldr	r1, [pc, #628]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029a4:	4b98      	ldr	r3, [pc, #608]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029aa:	f023 020c 	bic.w	r2, r3, #12
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4995      	ldr	r1, [pc, #596]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029c6:	4b90      	ldr	r3, [pc, #576]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	498c      	ldr	r1, [pc, #560]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029e8:	4b87      	ldr	r3, [pc, #540]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	4984      	ldr	r1, [pc, #528]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	497b      	ldr	r1, [pc, #492]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a2c:	4b76      	ldr	r3, [pc, #472]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	4973      	ldr	r1, [pc, #460]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a4e:	4b6e      	ldr	r3, [pc, #440]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	496a      	ldr	r1, [pc, #424]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a70:	4b65      	ldr	r3, [pc, #404]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4962      	ldr	r1, [pc, #392]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a92:	4b5d      	ldr	r3, [pc, #372]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	4959      	ldr	r1, [pc, #356]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ab4:	4b54      	ldr	r3, [pc, #336]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	4951      	ldr	r1, [pc, #324]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ad6:	4b4c      	ldr	r3, [pc, #304]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002adc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	4948      	ldr	r1, [pc, #288]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d015      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002af8:	4b43      	ldr	r3, [pc, #268]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	4940      	ldr	r1, [pc, #256]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b16:	d105      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b18:	4b3b      	ldr	r3, [pc, #236]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b30:	4b35      	ldr	r3, [pc, #212]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3e:	4932      	ldr	r1, [pc, #200]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b50:	4b2d      	ldr	r3, [pc, #180]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a2c      	ldr	r2, [pc, #176]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b5a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b68:	4b27      	ldr	r3, [pc, #156]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b76:	4924      	ldr	r1, [pc, #144]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b86:	d105      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b88:	4b1f      	ldr	r3, [pc, #124]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bae:	4916      	ldr	r1, [pc, #88]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bbe:	d105      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc0:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4a10      	ldr	r2, [pc, #64]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d019      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	4908      	ldr	r1, [pc, #32]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bf6:	d109      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf8:	4b03      	ldr	r3, [pc, #12]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4a02      	ldr	r2, [pc, #8]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c02:	60d3      	str	r3, [r2, #12]
 8002c04:	e002      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d015      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c18:	4b29      	ldr	r3, [pc, #164]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	4926      	ldr	r1, [pc, #152]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c36:	d105      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c38:	4b21      	ldr	r3, [pc, #132]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a20      	ldr	r2, [pc, #128]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c42:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d015      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c56:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5e:	4918      	ldr	r1, [pc, #96]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c70:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d015      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c88:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c96:	490a      	ldr	r1, [pc, #40]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca8:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a04      	ldr	r2, [pc, #16]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002cb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e042      	b.n	8002d5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7fd ffc7 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2224      	movs	r2, #36	@ 0x24
 8002cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f001 f8f4 	bl	8003efc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fdf5 	bl	8003904 <UART_SetConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e01b      	b.n	8002d5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f001 f973 	bl	8004040 <UART_CheckIdleState>
 8002d5a:	4603      	mov	r3, r0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	@ 0x28
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d17b      	bne.n	8002e76 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_UART_Transmit+0x26>
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e074      	b.n	8002e78 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2221      	movs	r2, #33	@ 0x21
 8002d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d9e:	f7fe f955 	bl	800104c <HAL_GetTick>
 8002da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	88fa      	ldrh	r2, [r7, #6]
 8002da8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	88fa      	ldrh	r2, [r7, #6]
 8002db0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dbc:	d108      	bne.n	8002dd0 <HAL_UART_Transmit+0x6c>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d104      	bne.n	8002dd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	e003      	b.n	8002dd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dd8:	e030      	b.n	8002e3c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2200      	movs	r2, #0
 8002de2:	2180      	movs	r1, #128	@ 0x80
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f001 f9d5 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e03d      	b.n	8002e78 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10b      	bne.n	8002e1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	3302      	adds	r3, #2
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	e007      	b.n	8002e2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	781a      	ldrb	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	3301      	adds	r3, #1
 8002e28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1c8      	bne.n	8002dda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2140      	movs	r1, #64	@ 0x40
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f001 f99e 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e006      	b.n	8002e78 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
  }
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3720      	adds	r7, #32
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	@ 0x28
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	f040 80b5 	bne.w	8003006 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_UART_Receive+0x28>
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0ad      	b.n	8003008 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2222      	movs	r2, #34	@ 0x22
 8002eb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ec2:	f7fe f8c3 	bl	800104c <HAL_GetTick>
 8002ec6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	88fa      	ldrh	r2, [r7, #6]
 8002ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ee0:	d10e      	bne.n	8002f00 <HAL_UART_Receive+0x80>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <HAL_UART_Receive+0x76>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002ef0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002ef4:	e02d      	b.n	8002f52 <HAL_UART_Receive+0xd2>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	22ff      	movs	r2, #255	@ 0xff
 8002efa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002efe:	e028      	b.n	8002f52 <HAL_UART_Receive+0xd2>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10d      	bne.n	8002f24 <HAL_UART_Receive+0xa4>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d104      	bne.n	8002f1a <HAL_UART_Receive+0x9a>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	22ff      	movs	r2, #255	@ 0xff
 8002f14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002f18:	e01b      	b.n	8002f52 <HAL_UART_Receive+0xd2>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	227f      	movs	r2, #127	@ 0x7f
 8002f1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002f22:	e016      	b.n	8002f52 <HAL_UART_Receive+0xd2>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f2c:	d10d      	bne.n	8002f4a <HAL_UART_Receive+0xca>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d104      	bne.n	8002f40 <HAL_UART_Receive+0xc0>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	227f      	movs	r2, #127	@ 0x7f
 8002f3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002f3e:	e008      	b.n	8002f52 <HAL_UART_Receive+0xd2>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	223f      	movs	r2, #63	@ 0x3f
 8002f44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002f48:	e003      	b.n	8002f52 <HAL_UART_Receive+0xd2>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002f58:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f62:	d108      	bne.n	8002f76 <HAL_UART_Receive+0xf6>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d104      	bne.n	8002f76 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	e003      	b.n	8002f7e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f7e:	e036      	b.n	8002fee <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2200      	movs	r2, #0
 8002f88:	2120      	movs	r1, #32
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f001 f902 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e032      	b.n	8003008 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	8a7b      	ldrh	r3, [r7, #18]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	e00c      	b.n	8002fdc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	8a7b      	ldrh	r3, [r7, #18]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	4013      	ands	r3, r2
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1c2      	bne.n	8002f80 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	3720      	adds	r7, #32
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003010:	b480      	push	{r7}
 8003012:	b091      	sub	sp, #68	@ 0x44
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003024:	2b20      	cmp	r3, #32
 8003026:	d178      	bne.n	800311a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_UART_Transmit_IT+0x24>
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e071      	b.n	800311c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	88fa      	ldrh	r2, [r7, #6]
 8003042:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	88fa      	ldrh	r2, [r7, #6]
 800304a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2221      	movs	r2, #33	@ 0x21
 8003060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800306c:	d12a      	bne.n	80030c4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003076:	d107      	bne.n	8003088 <HAL_UART_Transmit_IT+0x78>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d103      	bne.n	8003088 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a29      	ldr	r2, [pc, #164]	@ (8003128 <HAL_UART_Transmit_IT+0x118>)
 8003084:	679a      	str	r2, [r3, #120]	@ 0x78
 8003086:	e002      	b.n	800308e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a28      	ldr	r2, [pc, #160]	@ (800312c <HAL_UART_Transmit_IT+0x11c>)
 800308c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3308      	adds	r3, #8
 8003094:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3308      	adds	r3, #8
 80030ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030ae:	637a      	str	r2, [r7, #52]	@ 0x34
 80030b0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80030bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e5      	bne.n	800308e <HAL_UART_Transmit_IT+0x7e>
 80030c2:	e028      	b.n	8003116 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030cc:	d107      	bne.n	80030de <HAL_UART_Transmit_IT+0xce>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a15      	ldr	r2, [pc, #84]	@ (8003130 <HAL_UART_Transmit_IT+0x120>)
 80030da:	679a      	str	r2, [r3, #120]	@ 0x78
 80030dc:	e002      	b.n	80030e4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a14      	ldr	r2, [pc, #80]	@ (8003134 <HAL_UART_Transmit_IT+0x124>)
 80030e2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	613b      	str	r3, [r7, #16]
   return(result);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003102:	623b      	str	r3, [r7, #32]
 8003104:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	69f9      	ldr	r1, [r7, #28]
 8003108:	6a3a      	ldr	r2, [r7, #32]
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e6      	bne.n	80030e4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800311a:	2302      	movs	r3, #2
  }
}
 800311c:	4618      	mov	r0, r3
 800311e:	3744      	adds	r7, #68	@ 0x44
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	08004bbf 	.word	0x08004bbf
 800312c:	08004adf 	.word	0x08004adf
 8003130:	08004a1d 	.word	0x08004a1d
 8003134:	08004965 	.word	0x08004965

08003138 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	@ 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	4613      	mov	r3, r2
 8003144:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800314c:	2b20      	cmp	r3, #32
 800314e:	d137      	bne.n	80031c0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_UART_Receive_IT+0x24>
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e030      	b.n	80031c2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a18      	ldr	r2, [pc, #96]	@ (80031cc <HAL_UART_Receive_IT+0x94>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d01f      	beq.n	80031b0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d018      	beq.n	80031b0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	e853 3f00 	ldrex	r3, [r3]
 800318a:	613b      	str	r3, [r7, #16]
   return(result);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a0:	69f9      	ldr	r1, [r7, #28]
 80031a2:	6a3a      	ldr	r2, [r7, #32]
 80031a4:	e841 2300 	strex	r3, r2, [r1]
 80031a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e6      	bne.n	800317e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	461a      	mov	r2, r3
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f001 f85a 	bl	8004270 <UART_Start_Receive_IT>
 80031bc:	4603      	mov	r3, r0
 80031be:	e000      	b.n	80031c2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3728      	adds	r7, #40	@ 0x28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40008000 	.word	0x40008000

080031d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	@ 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d137      	bne.n	8003258 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_UART_Receive_DMA+0x24>
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e030      	b.n	800325a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a18      	ldr	r2, [pc, #96]	@ (8003264 <HAL_UART_Receive_DMA+0x94>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d01f      	beq.n	8003248 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d018      	beq.n	8003248 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	613b      	str	r3, [r7, #16]
   return(result);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	623b      	str	r3, [r7, #32]
 8003236:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	69f9      	ldr	r1, [r7, #28]
 800323a:	6a3a      	ldr	r2, [r7, #32]
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	61bb      	str	r3, [r7, #24]
   return(result);
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e6      	bne.n	8003216 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	461a      	mov	r2, r3
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f001 f930 	bl	80044b4 <UART_Start_Receive_DMA>
 8003254:	4603      	mov	r3, r0
 8003256:	e000      	b.n	800325a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3728      	adds	r7, #40	@ 0x28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40008000 	.word	0x40008000

08003268 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b0ba      	sub	sp, #232	@ 0xe8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800328e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003292:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003296:	4013      	ands	r3, r2
 8003298:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800329c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d11b      	bne.n	80032dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80032a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d015      	beq.n	80032dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80032b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80032bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d009      	beq.n	80032dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 82e3 	beq.w	8003898 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
      }
      return;
 80032da:	e2dd      	b.n	8003898 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8123 	beq.w	800352c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80032e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80032ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003520 <HAL_UART_IRQHandler+0x2b8>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80032f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80032f6:	4b8b      	ldr	r3, [pc, #556]	@ (8003524 <HAL_UART_IRQHandler+0x2bc>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8116 	beq.w	800352c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d011      	beq.n	8003330 <HAL_UART_IRQHandler+0xc8>
 800330c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003326:	f043 0201 	orr.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d011      	beq.n	8003360 <HAL_UART_IRQHandler+0xf8>
 800333c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2202      	movs	r2, #2
 800334e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003356:	f043 0204 	orr.w	r2, r3, #4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d011      	beq.n	8003390 <HAL_UART_IRQHandler+0x128>
 800336c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2204      	movs	r2, #4
 800337e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003386:	f043 0202 	orr.w	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d017      	beq.n	80033cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800339c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80033a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80033ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003520 <HAL_UART_IRQHandler+0x2b8>)
 80033ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2208      	movs	r2, #8
 80033ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c2:	f043 0208 	orr.w	r2, r3, #8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d012      	beq.n	80033fe <HAL_UART_IRQHandler+0x196>
 80033d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00c      	beq.n	80033fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8249 	beq.w	800389c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800340a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d013      	beq.n	800343e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d007      	beq.n	800343e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003444:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003452:	2b40      	cmp	r3, #64	@ 0x40
 8003454:	d005      	beq.n	8003462 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800345a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800345e:	2b00      	cmp	r3, #0
 8003460:	d054      	beq.n	800350c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f001 f90d 	bl	8004682 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003472:	2b40      	cmp	r3, #64	@ 0x40
 8003474:	d146      	bne.n	8003504 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3308      	adds	r3, #8
 800347c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800348c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003494:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3308      	adds	r3, #8
 800349e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1d9      	bne.n	8003476 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d017      	beq.n	80034fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034d2:	4a15      	ldr	r2, [pc, #84]	@ (8003528 <HAL_UART_IRQHandler+0x2c0>)
 80034d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fe f84d 	bl	800157c <HAL_DMA_Abort_IT>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d019      	beq.n	800351c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80034f6:	4610      	mov	r0, r2
 80034f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fa:	e00f      	b.n	800351c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f9eb 	bl	80038d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003502:	e00b      	b.n	800351c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f9e7 	bl	80038d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350a:	e007      	b.n	800351c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f9e3 	bl	80038d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800351a:	e1bf      	b.n	800389c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	bf00      	nop
    return;
 800351e:	e1bd      	b.n	800389c <HAL_UART_IRQHandler+0x634>
 8003520:	10000001 	.word	0x10000001
 8003524:	04000120 	.word	0x04000120
 8003528:	08004939 	.word	0x08004939

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003530:	2b01      	cmp	r3, #1
 8003532:	f040 8153 	bne.w	80037dc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 814c 	beq.w	80037dc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8145 	beq.w	80037dc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2210      	movs	r2, #16
 8003558:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	f040 80bb 	bne.w	80036e0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003578:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 818f 	beq.w	80038a0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003588:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800358c:	429a      	cmp	r2, r3
 800358e:	f080 8187 	bcs.w	80038a0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003598:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f040 8087 	bne.w	80036be <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80035da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80035f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1da      	bne.n	80035b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3308      	adds	r3, #8
 8003600:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003602:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800360a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800360c:	f023 0301 	bic.w	r3, r3, #1
 8003610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3308      	adds	r3, #8
 800361a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800361e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003622:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003626:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e1      	bne.n	80035fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3308      	adds	r3, #8
 800363c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800364c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3308      	adds	r3, #8
 8003656:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800365a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800365c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003660:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e3      	bne.n	8003636 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800368a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800368c:	f023 0310 	bic.w	r3, r3, #16
 8003690:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800369e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1e4      	bne.n	800367c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fd ff06 	bl	80014ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	4619      	mov	r1, r3
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f907 	bl	80038ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036de:	e0df      	b.n	80038a0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80d1 	beq.w	80038a4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003702:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80cc 	beq.w	80038a4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800371a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003720:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800372e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003730:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800373c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e4      	bne.n	800370c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3308      	adds	r3, #8
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	623b      	str	r3, [r7, #32]
   return(result);
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3308      	adds	r3, #8
 8003766:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800376a:	633a      	str	r2, [r7, #48]	@ 0x30
 800376c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e1      	bne.n	8003742 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	60fb      	str	r3, [r7, #12]
   return(result);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0310 	bic.w	r3, r3, #16
 80037a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	69b9      	ldr	r1, [r7, #24]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	617b      	str	r3, [r7, #20]
   return(result);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e4      	bne.n	8003792 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f889 	bl	80038ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037da:	e063      	b.n	80038a4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <HAL_UART_IRQHandler+0x59e>
 80037e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80037fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f001 ff9a 	bl	8005738 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003804:	e051      	b.n	80038aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380e:	2b00      	cmp	r3, #0
 8003810:	d014      	beq.n	800383c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381a:	2b00      	cmp	r3, #0
 800381c:	d105      	bne.n	800382a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800381e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003822:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800382e:	2b00      	cmp	r3, #0
 8003830:	d03a      	beq.n	80038a8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
    }
    return;
 800383a:	e035      	b.n	80038a8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800383c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <HAL_UART_IRQHandler+0x5f4>
 8003848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f001 fa27 	bl	8004ca8 <UART_EndTransmit_IT>
    return;
 800385a:	e026      	b.n	80038aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800385c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003860:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d009      	beq.n	800387c <HAL_UART_IRQHandler+0x614>
 8003868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800386c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f001 ff73 	bl	8005760 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800387a:	e016      	b.n	80038aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800387c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d010      	beq.n	80038aa <HAL_UART_IRQHandler+0x642>
 8003888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800388c:	2b00      	cmp	r3, #0
 800388e:	da0c      	bge.n	80038aa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f001 ff5b 	bl	800574c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003896:	e008      	b.n	80038aa <HAL_UART_IRQHandler+0x642>
      return;
 8003898:	bf00      	nop
 800389a:	e006      	b.n	80038aa <HAL_UART_IRQHandler+0x642>
    return;
 800389c:	bf00      	nop
 800389e:	e004      	b.n	80038aa <HAL_UART_IRQHandler+0x642>
      return;
 80038a0:	bf00      	nop
 80038a2:	e002      	b.n	80038aa <HAL_UART_IRQHandler+0x642>
      return;
 80038a4:	bf00      	nop
 80038a6:	e000      	b.n	80038aa <HAL_UART_IRQHandler+0x642>
    return;
 80038a8:	bf00      	nop
  }
}
 80038aa:	37e8      	adds	r7, #232	@ 0xe8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003908:	b08c      	sub	sp, #48	@ 0x30
 800390a:	af00      	add	r7, sp, #0
 800390c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	431a      	orrs	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	431a      	orrs	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	4313      	orrs	r3, r2
 800392a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4baa      	ldr	r3, [pc, #680]	@ (8003bdc <UART_SetConfig+0x2d8>)
 8003934:	4013      	ands	r3, r2
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800393c:	430b      	orrs	r3, r1
 800393e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a9f      	ldr	r2, [pc, #636]	@ (8003be0 <UART_SetConfig+0x2dc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800396c:	4313      	orrs	r3, r2
 800396e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800397a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003984:	430b      	orrs	r3, r1
 8003986:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	f023 010f 	bic.w	r1, r3, #15
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a90      	ldr	r2, [pc, #576]	@ (8003be4 <UART_SetConfig+0x2e0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d125      	bne.n	80039f4 <UART_SetConfig+0xf0>
 80039a8:	4b8f      	ldr	r3, [pc, #572]	@ (8003be8 <UART_SetConfig+0x2e4>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d81a      	bhi.n	80039ec <UART_SetConfig+0xe8>
 80039b6:	a201      	add	r2, pc, #4	@ (adr r2, 80039bc <UART_SetConfig+0xb8>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	080039cd 	.word	0x080039cd
 80039c0:	080039dd 	.word	0x080039dd
 80039c4:	080039d5 	.word	0x080039d5
 80039c8:	080039e5 	.word	0x080039e5
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039d2:	e116      	b.n	8003c02 <UART_SetConfig+0x2fe>
 80039d4:	2302      	movs	r3, #2
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039da:	e112      	b.n	8003c02 <UART_SetConfig+0x2fe>
 80039dc:	2304      	movs	r3, #4
 80039de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039e2:	e10e      	b.n	8003c02 <UART_SetConfig+0x2fe>
 80039e4:	2308      	movs	r3, #8
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ea:	e10a      	b.n	8003c02 <UART_SetConfig+0x2fe>
 80039ec:	2310      	movs	r3, #16
 80039ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039f2:	e106      	b.n	8003c02 <UART_SetConfig+0x2fe>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a7c      	ldr	r2, [pc, #496]	@ (8003bec <UART_SetConfig+0x2e8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d138      	bne.n	8003a70 <UART_SetConfig+0x16c>
 80039fe:	4b7a      	ldr	r3, [pc, #488]	@ (8003be8 <UART_SetConfig+0x2e4>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d82d      	bhi.n	8003a68 <UART_SetConfig+0x164>
 8003a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <UART_SetConfig+0x110>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003a69 	.word	0x08003a69
 8003a1c:	08003a69 	.word	0x08003a69
 8003a20:	08003a69 	.word	0x08003a69
 8003a24:	08003a59 	.word	0x08003a59
 8003a28:	08003a69 	.word	0x08003a69
 8003a2c:	08003a69 	.word	0x08003a69
 8003a30:	08003a69 	.word	0x08003a69
 8003a34:	08003a51 	.word	0x08003a51
 8003a38:	08003a69 	.word	0x08003a69
 8003a3c:	08003a69 	.word	0x08003a69
 8003a40:	08003a69 	.word	0x08003a69
 8003a44:	08003a61 	.word	0x08003a61
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a4e:	e0d8      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003a50:	2302      	movs	r3, #2
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a56:	e0d4      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5e:	e0d0      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003a60:	2308      	movs	r3, #8
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a66:	e0cc      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6e:	e0c8      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf0 <UART_SetConfig+0x2ec>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d125      	bne.n	8003ac6 <UART_SetConfig+0x1c2>
 8003a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003be8 <UART_SetConfig+0x2e4>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a84:	2b30      	cmp	r3, #48	@ 0x30
 8003a86:	d016      	beq.n	8003ab6 <UART_SetConfig+0x1b2>
 8003a88:	2b30      	cmp	r3, #48	@ 0x30
 8003a8a:	d818      	bhi.n	8003abe <UART_SetConfig+0x1ba>
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d00a      	beq.n	8003aa6 <UART_SetConfig+0x1a2>
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d814      	bhi.n	8003abe <UART_SetConfig+0x1ba>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <UART_SetConfig+0x19a>
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d008      	beq.n	8003aae <UART_SetConfig+0x1aa>
 8003a9c:	e00f      	b.n	8003abe <UART_SetConfig+0x1ba>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aa4:	e0ad      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aac:	e0a9      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003aae:	2304      	movs	r3, #4
 8003ab0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ab4:	e0a5      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003abc:	e0a1      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003abe:	2310      	movs	r3, #16
 8003ac0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac4:	e09d      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a4a      	ldr	r2, [pc, #296]	@ (8003bf4 <UART_SetConfig+0x2f0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d125      	bne.n	8003b1c <UART_SetConfig+0x218>
 8003ad0:	4b45      	ldr	r3, [pc, #276]	@ (8003be8 <UART_SetConfig+0x2e4>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8003adc:	d016      	beq.n	8003b0c <UART_SetConfig+0x208>
 8003ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ae0:	d818      	bhi.n	8003b14 <UART_SetConfig+0x210>
 8003ae2:	2b80      	cmp	r3, #128	@ 0x80
 8003ae4:	d00a      	beq.n	8003afc <UART_SetConfig+0x1f8>
 8003ae6:	2b80      	cmp	r3, #128	@ 0x80
 8003ae8:	d814      	bhi.n	8003b14 <UART_SetConfig+0x210>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <UART_SetConfig+0x1f0>
 8003aee:	2b40      	cmp	r3, #64	@ 0x40
 8003af0:	d008      	beq.n	8003b04 <UART_SetConfig+0x200>
 8003af2:	e00f      	b.n	8003b14 <UART_SetConfig+0x210>
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003afa:	e082      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003afc:	2302      	movs	r3, #2
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b02:	e07e      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b04:	2304      	movs	r3, #4
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b0a:	e07a      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b12:	e076      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b14:	2310      	movs	r3, #16
 8003b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1a:	e072      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a35      	ldr	r2, [pc, #212]	@ (8003bf8 <UART_SetConfig+0x2f4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d12a      	bne.n	8003b7c <UART_SetConfig+0x278>
 8003b26:	4b30      	ldr	r3, [pc, #192]	@ (8003be8 <UART_SetConfig+0x2e4>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b34:	d01a      	beq.n	8003b6c <UART_SetConfig+0x268>
 8003b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b3a:	d81b      	bhi.n	8003b74 <UART_SetConfig+0x270>
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b40:	d00c      	beq.n	8003b5c <UART_SetConfig+0x258>
 8003b42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b46:	d815      	bhi.n	8003b74 <UART_SetConfig+0x270>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <UART_SetConfig+0x250>
 8003b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b50:	d008      	beq.n	8003b64 <UART_SetConfig+0x260>
 8003b52:	e00f      	b.n	8003b74 <UART_SetConfig+0x270>
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b5a:	e052      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b62:	e04e      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b64:	2304      	movs	r3, #4
 8003b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b6a:	e04a      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b72:	e046      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b74:	2310      	movs	r3, #16
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7a:	e042      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a17      	ldr	r2, [pc, #92]	@ (8003be0 <UART_SetConfig+0x2dc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d13a      	bne.n	8003bfc <UART_SetConfig+0x2f8>
 8003b86:	4b18      	ldr	r3, [pc, #96]	@ (8003be8 <UART_SetConfig+0x2e4>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b94:	d01a      	beq.n	8003bcc <UART_SetConfig+0x2c8>
 8003b96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b9a:	d81b      	bhi.n	8003bd4 <UART_SetConfig+0x2d0>
 8003b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba0:	d00c      	beq.n	8003bbc <UART_SetConfig+0x2b8>
 8003ba2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba6:	d815      	bhi.n	8003bd4 <UART_SetConfig+0x2d0>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <UART_SetConfig+0x2b0>
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb0:	d008      	beq.n	8003bc4 <UART_SetConfig+0x2c0>
 8003bb2:	e00f      	b.n	8003bd4 <UART_SetConfig+0x2d0>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bba:	e022      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bc2:	e01e      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bca:	e01a      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003bcc:	2308      	movs	r3, #8
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bd2:	e016      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bda:	e012      	b.n	8003c02 <UART_SetConfig+0x2fe>
 8003bdc:	cfff69f3 	.word	0xcfff69f3
 8003be0:	40008000 	.word	0x40008000
 8003be4:	40013800 	.word	0x40013800
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40004400 	.word	0x40004400
 8003bf0:	40004800 	.word	0x40004800
 8003bf4:	40004c00 	.word	0x40004c00
 8003bf8:	40005000 	.word	0x40005000
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4aae      	ldr	r2, [pc, #696]	@ (8003ec0 <UART_SetConfig+0x5bc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	f040 8097 	bne.w	8003d3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d823      	bhi.n	8003c5e <UART_SetConfig+0x35a>
 8003c16:	a201      	add	r2, pc, #4	@ (adr r2, 8003c1c <UART_SetConfig+0x318>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003c41 	.word	0x08003c41
 8003c20:	08003c5f 	.word	0x08003c5f
 8003c24:	08003c49 	.word	0x08003c49
 8003c28:	08003c5f 	.word	0x08003c5f
 8003c2c:	08003c4f 	.word	0x08003c4f
 8003c30:	08003c5f 	.word	0x08003c5f
 8003c34:	08003c5f 	.word	0x08003c5f
 8003c38:	08003c5f 	.word	0x08003c5f
 8003c3c:	08003c57 	.word	0x08003c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c40:	f7fe fd80 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8003c44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c46:	e010      	b.n	8003c6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c48:	4b9e      	ldr	r3, [pc, #632]	@ (8003ec4 <UART_SetConfig+0x5c0>)
 8003c4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c4c:	e00d      	b.n	8003c6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7fe fd0b 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8003c52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c54:	e009      	b.n	8003c6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c5c:	e005      	b.n	8003c6a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8130 	beq.w	8003ed2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	4a94      	ldr	r2, [pc, #592]	@ (8003ec8 <UART_SetConfig+0x5c4>)
 8003c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d305      	bcc.n	8003ca2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d903      	bls.n	8003caa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ca8:	e113      	b.n	8003ed2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	2200      	movs	r2, #0
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	60fa      	str	r2, [r7, #12]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	4a84      	ldr	r2, [pc, #528]	@ (8003ec8 <UART_SetConfig+0x5c4>)
 8003cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ccc:	f7fc fb00 	bl	80002d0 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	020b      	lsls	r3, r1, #8
 8003ce2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ce6:	0202      	lsls	r2, r0, #8
 8003ce8:	6979      	ldr	r1, [r7, #20]
 8003cea:	6849      	ldr	r1, [r1, #4]
 8003cec:	0849      	lsrs	r1, r1, #1
 8003cee:	2000      	movs	r0, #0
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	4605      	mov	r5, r0
 8003cf4:	eb12 0804 	adds.w	r8, r2, r4
 8003cf8:	eb43 0905 	adc.w	r9, r3, r5
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	469a      	mov	sl, r3
 8003d04:	4693      	mov	fp, r2
 8003d06:	4652      	mov	r2, sl
 8003d08:	465b      	mov	r3, fp
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	f7fc fadf 	bl	80002d0 <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4613      	mov	r3, r2
 8003d18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d20:	d308      	bcc.n	8003d34 <UART_SetConfig+0x430>
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d28:	d204      	bcs.n	8003d34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a3a      	ldr	r2, [r7, #32]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	e0ce      	b.n	8003ed2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d3a:	e0ca      	b.n	8003ed2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d44:	d166      	bne.n	8003e14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003d46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d827      	bhi.n	8003d9e <UART_SetConfig+0x49a>
 8003d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <UART_SetConfig+0x450>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08003d81 	.word	0x08003d81
 8003d5c:	08003d89 	.word	0x08003d89
 8003d60:	08003d9f 	.word	0x08003d9f
 8003d64:	08003d8f 	.word	0x08003d8f
 8003d68:	08003d9f 	.word	0x08003d9f
 8003d6c:	08003d9f 	.word	0x08003d9f
 8003d70:	08003d9f 	.word	0x08003d9f
 8003d74:	08003d97 	.word	0x08003d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d78:	f7fe fce4 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8003d7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d7e:	e014      	b.n	8003daa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d80:	f7fe fcf6 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 8003d84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d86:	e010      	b.n	8003daa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d88:	4b4e      	ldr	r3, [pc, #312]	@ (8003ec4 <UART_SetConfig+0x5c0>)
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d8c:	e00d      	b.n	8003daa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d8e:	f7fe fc6b 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8003d92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d94:	e009      	b.n	8003daa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d9c:	e005      	b.n	8003daa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003da8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8090 	beq.w	8003ed2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	4a44      	ldr	r2, [pc, #272]	@ (8003ec8 <UART_SetConfig+0x5c4>)
 8003db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dc4:	005a      	lsls	r2, r3, #1
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	441a      	add	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	2b0f      	cmp	r3, #15
 8003ddc:	d916      	bls.n	8003e0c <UART_SetConfig+0x508>
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de4:	d212      	bcs.n	8003e0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f023 030f 	bic.w	r3, r3, #15
 8003dee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	8bfb      	ldrh	r3, [r7, #30]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	8bfa      	ldrh	r2, [r7, #30]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	e062      	b.n	8003ed2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e12:	e05e      	b.n	8003ed2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d828      	bhi.n	8003e6e <UART_SetConfig+0x56a>
 8003e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e24 <UART_SetConfig+0x520>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e51 	.word	0x08003e51
 8003e2c:	08003e59 	.word	0x08003e59
 8003e30:	08003e6f 	.word	0x08003e6f
 8003e34:	08003e5f 	.word	0x08003e5f
 8003e38:	08003e6f 	.word	0x08003e6f
 8003e3c:	08003e6f 	.word	0x08003e6f
 8003e40:	08003e6f 	.word	0x08003e6f
 8003e44:	08003e67 	.word	0x08003e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e48:	f7fe fc7c 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8003e4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e4e:	e014      	b.n	8003e7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e50:	f7fe fc8e 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 8003e54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e56:	e010      	b.n	8003e7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec4 <UART_SetConfig+0x5c0>)
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e5c:	e00d      	b.n	8003e7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e5e:	f7fe fc03 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8003e62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e64:	e009      	b.n	8003e7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e6c:	e005      	b.n	8003e7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e78:	bf00      	nop
    }

    if (pclk != 0U)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d028      	beq.n	8003ed2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	4a10      	ldr	r2, [pc, #64]	@ (8003ec8 <UART_SetConfig+0x5c4>)
 8003e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	441a      	add	r2, r3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d910      	bls.n	8003ecc <UART_SetConfig+0x5c8>
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb0:	d20c      	bcs.n	8003ecc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	e009      	b.n	8003ed2 <UART_SetConfig+0x5ce>
 8003ebe:	bf00      	nop
 8003ec0:	40008000 	.word	0x40008000
 8003ec4:	00f42400 	.word	0x00f42400
 8003ec8:	08006498 	.word	0x08006498
      }
      else
      {
        ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2200      	movs	r2, #0
 8003eec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003eee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3730      	adds	r7, #48	@ 0x30
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01a      	beq.n	8004012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffa:	d10a      	bne.n	8004012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]
  }
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b098      	sub	sp, #96	@ 0x60
 8004044:	af02      	add	r7, sp, #8
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004050:	f7fc fffc 	bl	800104c <HAL_GetTick>
 8004054:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b08      	cmp	r3, #8
 8004062:	d12f      	bne.n	80040c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004064:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406c:	2200      	movs	r2, #0
 800406e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f88e 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d022      	beq.n	80040c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800408c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004092:	653b      	str	r3, [r7, #80]	@ 0x50
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800409c:	647b      	str	r3, [r7, #68]	@ 0x44
 800409e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e6      	bne.n	800407e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e063      	b.n	800418c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d149      	bne.n	8004166 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040da:	2200      	movs	r2, #0
 80040dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f857 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d03c      	beq.n	8004166 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	623b      	str	r3, [r7, #32]
   return(result);
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800410a:	633b      	str	r3, [r7, #48]	@ 0x30
 800410c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e6      	bne.n	80040ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3308      	adds	r3, #8
 8004124:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	60fb      	str	r3, [r7, #12]
   return(result);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f023 0301 	bic.w	r3, r3, #1
 8004134:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3308      	adds	r3, #8
 800413c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800413e:	61fa      	str	r2, [r7, #28]
 8004140:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	69b9      	ldr	r1, [r7, #24]
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	617b      	str	r3, [r7, #20]
   return(result);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e5      	bne.n	800411e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e012      	b.n	800418c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3758      	adds	r7, #88	@ 0x58
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a4:	e04f      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d04b      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fc ff4d 	bl	800104c <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e04e      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d037      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b80      	cmp	r3, #128	@ 0x80
 80041da:	d034      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b40      	cmp	r3, #64	@ 0x40
 80041e0:	d031      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d110      	bne.n	8004212 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2208      	movs	r2, #8
 80041f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fa42 	bl	8004682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2208      	movs	r2, #8
 8004202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e029      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800421c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004220:	d111      	bne.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800422a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 fa28 	bl	8004682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e00f      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	bf0c      	ite	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	2300      	movne	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	429a      	cmp	r2, r3
 8004262:	d0a0      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004270:	b480      	push	{r7}
 8004272:	b0a3      	sub	sp, #140	@ 0x8c
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	88fa      	ldrh	r2, [r7, #6]
 8004288:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	88fa      	ldrh	r2, [r7, #6]
 8004290:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042a2:	d10e      	bne.n	80042c2 <UART_Start_Receive_IT+0x52>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <UART_Start_Receive_IT+0x48>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80042b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042b6:	e02d      	b.n	8004314 <UART_Start_Receive_IT+0xa4>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	22ff      	movs	r2, #255	@ 0xff
 80042bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042c0:	e028      	b.n	8004314 <UART_Start_Receive_IT+0xa4>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10d      	bne.n	80042e6 <UART_Start_Receive_IT+0x76>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <UART_Start_Receive_IT+0x6c>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	22ff      	movs	r2, #255	@ 0xff
 80042d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042da:	e01b      	b.n	8004314 <UART_Start_Receive_IT+0xa4>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	227f      	movs	r2, #127	@ 0x7f
 80042e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042e4:	e016      	b.n	8004314 <UART_Start_Receive_IT+0xa4>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042ee:	d10d      	bne.n	800430c <UART_Start_Receive_IT+0x9c>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d104      	bne.n	8004302 <UART_Start_Receive_IT+0x92>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	227f      	movs	r2, #127	@ 0x7f
 80042fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004300:	e008      	b.n	8004314 <UART_Start_Receive_IT+0xa4>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	223f      	movs	r2, #63	@ 0x3f
 8004306:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800430a:	e003      	b.n	8004314 <UART_Start_Receive_IT+0xa4>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2222      	movs	r2, #34	@ 0x22
 8004320:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3308      	adds	r3, #8
 800432a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004334:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3308      	adds	r3, #8
 8004344:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004348:	673a      	str	r2, [r7, #112]	@ 0x70
 800434a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800434e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004356:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e3      	bne.n	8004324 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004364:	d14f      	bne.n	8004406 <UART_Start_Receive_IT+0x196>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800436c:	88fa      	ldrh	r2, [r7, #6]
 800436e:	429a      	cmp	r2, r3
 8004370:	d349      	bcc.n	8004406 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800437a:	d107      	bne.n	800438c <UART_Start_Receive_IT+0x11c>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d103      	bne.n	800438c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a47      	ldr	r2, [pc, #284]	@ (80044a4 <UART_Start_Receive_IT+0x234>)
 8004388:	675a      	str	r2, [r3, #116]	@ 0x74
 800438a:	e002      	b.n	8004392 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a46      	ldr	r2, [pc, #280]	@ (80044a8 <UART_Start_Receive_IT+0x238>)
 8004390:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01a      	beq.n	80043d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80043a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043be:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80043c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80043ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e4      	bne.n	800439a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3308      	adds	r3, #8
 80043d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80043f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80043f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80043f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80043fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e5      	bne.n	80043d0 <UART_Start_Receive_IT+0x160>
 8004404:	e046      	b.n	8004494 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800440e:	d107      	bne.n	8004420 <UART_Start_Receive_IT+0x1b0>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4a24      	ldr	r2, [pc, #144]	@ (80044ac <UART_Start_Receive_IT+0x23c>)
 800441c:	675a      	str	r2, [r3, #116]	@ 0x74
 800441e:	e002      	b.n	8004426 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a23      	ldr	r2, [pc, #140]	@ (80044b0 <UART_Start_Receive_IT+0x240>)
 8004424:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d019      	beq.n	8004462 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004442:	677b      	str	r3, [r7, #116]	@ 0x74
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800444c:	637b      	str	r3, [r7, #52]	@ 0x34
 800444e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800445a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e6      	bne.n	800442e <UART_Start_Receive_IT+0x1be>
 8004460:	e018      	b.n	8004494 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	613b      	str	r3, [r7, #16]
   return(result);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f043 0320 	orr.w	r3, r3, #32
 8004476:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004480:	623b      	str	r3, [r7, #32]
 8004482:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	69f9      	ldr	r1, [r7, #28]
 8004486:	6a3a      	ldr	r2, [r7, #32]
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	61bb      	str	r3, [r7, #24]
   return(result);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e6      	bne.n	8004462 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	378c      	adds	r7, #140	@ 0x8c
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	080053d1 	.word	0x080053d1
 80044a8:	08005071 	.word	0x08005071
 80044ac:	08004eb9 	.word	0x08004eb9
 80044b0:	08004d01 	.word	0x08004d01

080044b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b096      	sub	sp, #88	@ 0x58
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	88fa      	ldrh	r2, [r7, #6]
 80044cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2222      	movs	r2, #34	@ 0x22
 80044dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d02d      	beq.n	8004546 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044f0:	4a40      	ldr	r2, [pc, #256]	@ (80045f4 <UART_Start_Receive_DMA+0x140>)
 80044f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044fa:	4a3f      	ldr	r2, [pc, #252]	@ (80045f8 <UART_Start_Receive_DMA+0x144>)
 80044fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004504:	4a3d      	ldr	r2, [pc, #244]	@ (80045fc <UART_Start_Receive_DMA+0x148>)
 8004506:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800450e:	2200      	movs	r2, #0
 8004510:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3324      	adds	r3, #36	@ 0x24
 800451e:	4619      	mov	r1, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004524:	461a      	mov	r2, r3
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	f7fc ff54 	bl	80013d4 <HAL_DMA_Start_IT>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2210      	movs	r2, #16
 8004536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e051      	b.n	80045ea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d018      	beq.n	8004580 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800455c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004562:	657b      	str	r3, [r7, #84]	@ 0x54
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800456c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800456e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004572:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800457a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e6      	bne.n	800454e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3308      	adds	r3, #8
 8004586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	653b      	str	r3, [r7, #80]	@ 0x50
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3308      	adds	r3, #8
 800459e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80045a0:	637a      	str	r2, [r7, #52]	@ 0x34
 80045a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80045ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e5      	bne.n	8004580 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3308      	adds	r3, #8
 80045ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	613b      	str	r3, [r7, #16]
   return(result);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3308      	adds	r3, #8
 80045d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045d4:	623a      	str	r2, [r7, #32]
 80045d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	69f9      	ldr	r1, [r7, #28]
 80045da:	6a3a      	ldr	r2, [r7, #32]
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e5      	bne.n	80045b4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3758      	adds	r7, #88	@ 0x58
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	0800474f 	.word	0x0800474f
 80045f8:	0800487b 	.word	0x0800487b
 80045fc:	080048b9 	.word	0x080048b9

08004600 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004600:	b480      	push	{r7}
 8004602:	b08f      	sub	sp, #60	@ 0x3c
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	61fb      	str	r3, [r7, #28]
   return(result);
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800461c:	637b      	str	r3, [r7, #52]	@ 0x34
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004628:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800462c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e6      	bne.n	8004608 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3308      	adds	r3, #8
 8004640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	60bb      	str	r3, [r7, #8]
   return(result);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004650:	633b      	str	r3, [r7, #48]	@ 0x30
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465a:	61ba      	str	r2, [r7, #24]
 800465c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	6979      	ldr	r1, [r7, #20]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	613b      	str	r3, [r7, #16]
   return(result);
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e5      	bne.n	800463a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004676:	bf00      	nop
 8004678:	373c      	adds	r7, #60	@ 0x3c
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004682:	b480      	push	{r7}
 8004684:	b095      	sub	sp, #84	@ 0x54
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800469e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80046aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e6      	bne.n	800468a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3308      	adds	r3, #8
 80046c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e3      	bne.n	80046bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d118      	bne.n	800472e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	60bb      	str	r3, [r7, #8]
   return(result);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f023 0310 	bic.w	r3, r3, #16
 8004710:	647b      	str	r3, [r7, #68]	@ 0x44
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6979      	ldr	r1, [r7, #20]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	613b      	str	r3, [r7, #16]
   return(result);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e6      	bne.n	80046fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004742:	bf00      	nop
 8004744:	3754      	adds	r7, #84	@ 0x54
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b09c      	sub	sp, #112	@ 0x70
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d171      	bne.n	800484e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800476a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800476c:	2200      	movs	r2, #0
 800476e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004782:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004786:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004790:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004792:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004796:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800479e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e6      	bne.n	8004772 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3308      	adds	r3, #8
 80047aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80047bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3308      	adds	r3, #8
 80047c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80047c4:	647a      	str	r2, [r7, #68]	@ 0x44
 80047c6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e5      	bne.n	80047a4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3308      	adds	r3, #8
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	623b      	str	r3, [r7, #32]
   return(result);
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80047f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3308      	adds	r3, #8
 80047f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80047fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800480c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800480e:	2220      	movs	r2, #32
 8004810:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d118      	bne.n	800484e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	60fb      	str	r3, [r7, #12]
   return(result);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f023 0310 	bic.w	r3, r3, #16
 8004830:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	69b9      	ldr	r1, [r7, #24]
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	617b      	str	r3, [r7, #20]
   return(result);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e6      	bne.n	800481c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800484e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004850:	2200      	movs	r2, #0
 8004852:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d107      	bne.n	800486c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800485c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800485e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004862:	4619      	mov	r1, r3
 8004864:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004866:	f7ff f841 	bl	80038ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800486a:	e002      	b.n	8004872 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800486c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800486e:	f7fc f9af 	bl	8000bd0 <HAL_UART_RxCpltCallback>
}
 8004872:	bf00      	nop
 8004874:	3770      	adds	r7, #112	@ 0x70
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004886:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004892:	2b01      	cmp	r3, #1
 8004894:	d109      	bne.n	80048aa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	b29b      	uxth	r3, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f7ff f822 	bl	80038ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048a8:	e002      	b.n	80048b0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7ff f80a 	bl	80038c4 <HAL_UART_RxHalfCpltCallback>
}
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048cc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e0:	2b80      	cmp	r3, #128	@ 0x80
 80048e2:	d109      	bne.n	80048f8 <UART_DMAError+0x40>
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b21      	cmp	r3, #33	@ 0x21
 80048e8:	d106      	bne.n	80048f8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80048f2:	6978      	ldr	r0, [r7, #20]
 80048f4:	f7ff fe84 	bl	8004600 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004902:	2b40      	cmp	r3, #64	@ 0x40
 8004904:	d109      	bne.n	800491a <UART_DMAError+0x62>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b22      	cmp	r3, #34	@ 0x22
 800490a:	d106      	bne.n	800491a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2200      	movs	r2, #0
 8004910:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8004914:	6978      	ldr	r0, [r7, #20]
 8004916:	f7ff feb4 	bl	8004682 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004920:	f043 0210 	orr.w	r2, r3, #16
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800492a:	6978      	ldr	r0, [r7, #20]
 800492c:	f7fe ffd4 	bl	80038d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004930:	bf00      	nop
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004944:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7fe ffbe 	bl	80038d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004964:	b480      	push	{r7}
 8004966:	b08f      	sub	sp, #60	@ 0x3c
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	2b21      	cmp	r3, #33	@ 0x21
 8004974:	d14c      	bne.n	8004a10 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d132      	bne.n	80049e8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049a2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049a8:	e841 2300 	strex	r3, r2, [r1]
 80049ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e6      	bne.n	8004982 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6979      	ldr	r1, [r7, #20]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	613b      	str	r3, [r7, #16]
   return(result);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e6      	bne.n	80049b4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80049e6:	e013      	b.n	8004a10 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ec:	781a      	ldrb	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8004a10:	bf00      	nop
 8004a12:	373c      	adds	r7, #60	@ 0x3c
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b091      	sub	sp, #68	@ 0x44
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2a:	2b21      	cmp	r3, #33	@ 0x21
 8004a2c:	d151      	bne.n	8004ad2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d132      	bne.n	8004aa0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	623b      	str	r3, [r7, #32]
   return(result);
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e6      	bne.n	8004a3a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	69b9      	ldr	r1, [r7, #24]
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	617b      	str	r3, [r7, #20]
   return(result);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e6      	bne.n	8004a6c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004a9e:	e018      	b.n	8004ad2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aba:	1c9a      	adds	r2, r3, #2
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8004ad2:	bf00      	nop
 8004ad4:	3744      	adds	r7, #68	@ 0x44
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b091      	sub	sp, #68	@ 0x44
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aec:	2b21      	cmp	r3, #33	@ 0x21
 8004aee:	d160      	bne.n	8004bb2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004af6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004af8:	e057      	b.n	8004baa <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d133      	bne.n	8004b6e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	623b      	str	r3, [r7, #32]
   return(result);
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3308      	adds	r3, #8
 8004b24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b26:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e5      	bne.n	8004b06 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	69b9      	ldr	r1, [r7, #24]
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	617b      	str	r3, [r7, #20]
   return(result);
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e6      	bne.n	8004b3a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004b6c:	e021      	b.n	8004bb2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004ba4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004baa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1a4      	bne.n	8004afa <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004bb0:	e7ff      	b.n	8004bb2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004bb2:	bf00      	nop
 8004bb4:	3744      	adds	r7, #68	@ 0x44
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b091      	sub	sp, #68	@ 0x44
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bcc:	2b21      	cmp	r3, #33	@ 0x21
 8004bce:	d165      	bne.n	8004c9c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004bd6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004bd8:	e05c      	b.n	8004c94 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d133      	bne.n	8004c4e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3308      	adds	r3, #8
 8004bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3308      	adds	r3, #8
 8004c04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e5      	bne.n	8004be6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6979      	ldr	r1, [r7, #20]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	613b      	str	r3, [r7, #16]
   return(result);
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e6      	bne.n	8004c1a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004c4c:	e026      	b.n	8004c9c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d018      	beq.n	8004c8e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c60:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c70:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c76:	1c9a      	adds	r2, r3, #2
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004c8e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004c90:	3b01      	subs	r3, #1
 8004c92:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004c94:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d19f      	bne.n	8004bda <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004c9a:	e7ff      	b.n	8004c9c <UART_TxISR_16BIT_FIFOEN+0xde>
 8004c9c:	bf00      	nop
 8004c9e:	3744      	adds	r7, #68	@ 0x44
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6979      	ldr	r1, [r7, #20]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	613b      	str	r3, [r7, #16]
   return(result);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e6      	bne.n	8004cb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fe fddd 	bl	80038b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf6:	bf00      	nop
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b09c      	sub	sp, #112	@ 0x70
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004d0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d18:	2b22      	cmp	r3, #34	@ 0x22
 8004d1a:	f040 80be 	bne.w	8004e9a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d2c:	b2d9      	uxtb	r1, r3
 8004d2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d38:	400a      	ands	r2, r1
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f040 80a1 	bne.w	8004eaa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e6      	bne.n	8004d68 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3308      	adds	r3, #8
 8004da0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004dba:	647a      	str	r2, [r7, #68]	@ 0x44
 8004dbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e5      	bne.n	8004d9a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a33      	ldr	r2, [pc, #204]	@ (8004eb4 <UART_RxISR_8BIT+0x1b4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d01f      	beq.n	8004e2c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d018      	beq.n	8004e2c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	623b      	str	r3, [r7, #32]
   return(result);
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e6      	bne.n	8004dfa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d12e      	bne.n	8004e92 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0310 	bic.w	r3, r3, #16
 8004e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	69b9      	ldr	r1, [r7, #24]
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	617b      	str	r3, [r7, #20]
   return(result);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e6      	bne.n	8004e3a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b10      	cmp	r3, #16
 8004e78:	d103      	bne.n	8004e82 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2210      	movs	r2, #16
 8004e80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fe fd2e 	bl	80038ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e90:	e00b      	b.n	8004eaa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fb fe9c 	bl	8000bd0 <HAL_UART_RxCpltCallback>
}
 8004e98:	e007      	b.n	8004eaa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699a      	ldr	r2, [r3, #24]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0208 	orr.w	r2, r2, #8
 8004ea8:	619a      	str	r2, [r3, #24]
}
 8004eaa:	bf00      	nop
 8004eac:	3770      	adds	r7, #112	@ 0x70
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40008000 	.word	0x40008000

08004eb8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b09c      	sub	sp, #112	@ 0x70
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004ec6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ed0:	2b22      	cmp	r3, #34	@ 0x22
 8004ed2:	f040 80be 	bne.w	8005052 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ee6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004eea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004eee:	4013      	ands	r3, r2
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ef4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004efa:	1c9a      	adds	r2, r3, #2
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f040 80a1 	bne.w	8005062 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f34:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f40:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e6      	bne.n	8004f20 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	f023 0301 	bic.w	r3, r3, #1
 8004f68:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f72:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e5      	bne.n	8004f52 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a33      	ldr	r2, [pc, #204]	@ (800506c <UART_RxISR_16BIT+0x1b4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d01f      	beq.n	8004fe4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d018      	beq.n	8004fe4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fd2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e6      	bne.n	8004fb2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d12e      	bne.n	800504a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	e853 3f00 	ldrex	r3, [r3]
 8004ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f023 0310 	bic.w	r3, r3, #16
 8005006:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	6979      	ldr	r1, [r7, #20]
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	613b      	str	r3, [r7, #16]
   return(result);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e6      	bne.n	8004ff2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b10      	cmp	r3, #16
 8005030:	d103      	bne.n	800503a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2210      	movs	r2, #16
 8005038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fe fc52 	bl	80038ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005048:	e00b      	b.n	8005062 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fb fdc0 	bl	8000bd0 <HAL_UART_RxCpltCallback>
}
 8005050:	e007      	b.n	8005062 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0208 	orr.w	r2, r2, #8
 8005060:	619a      	str	r2, [r3, #24]
}
 8005062:	bf00      	nop
 8005064:	3770      	adds	r7, #112	@ 0x70
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40008000 	.word	0x40008000

08005070 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b0ac      	sub	sp, #176	@ 0xb0
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800507e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050a6:	2b22      	cmp	r3, #34	@ 0x22
 80050a8:	f040 8182 	bne.w	80053b0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80050b2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80050b6:	e125      	b.n	8005304 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050be:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80050c6:	b2d9      	uxtb	r1, r3
 80050c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d2:	400a      	ands	r2, r1
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80050fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d053      	beq.n	80051b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800510a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d011      	beq.n	800513a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800511a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2201      	movs	r2, #1
 8005128:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005130:	f043 0201 	orr.w	r2, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800513a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d011      	beq.n	800516a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2202      	movs	r2, #2
 8005158:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005160:	f043 0204 	orr.w	r2, r3, #4
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800516a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d011      	beq.n	800519a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2204      	movs	r2, #4
 8005188:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005190:	f043 0202 	orr.w	r2, r3, #2
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d006      	beq.n	80051b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7fe fb97 	bl	80038d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f040 80a2 	bne.w	8005304 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80051ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	461a      	mov	r2, r3
 80051de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80051e4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80051e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80051f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e4      	bne.n	80051c0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005206:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3308      	adds	r3, #8
 800521a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800521e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005220:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005224:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800522c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e1      	bne.n	80051f6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a5f      	ldr	r2, [pc, #380]	@ (80053c8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d021      	beq.n	8005294 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01a      	beq.n	8005294 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800526c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800526e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005280:	657b      	str	r3, [r7, #84]	@ 0x54
 8005282:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005286:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800528e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e4      	bne.n	800525e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005298:	2b01      	cmp	r3, #1
 800529a:	d130      	bne.n	80052fe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b2:	f023 0310 	bic.w	r3, r3, #16
 80052b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80052c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e4      	bne.n	80052a2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d103      	bne.n	80052ee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2210      	movs	r2, #16
 80052ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fe faf8 	bl	80038ec <HAL_UARTEx_RxEventCallback>
 80052fc:	e002      	b.n	8005304 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fb fc66 	bl	8000bd0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005304:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005308:	2b00      	cmp	r3, #0
 800530a:	d006      	beq.n	800531a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800530c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	f47f aecf 	bne.w	80050b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005320:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005324:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005328:	2b00      	cmp	r3, #0
 800532a:	d049      	beq.n	80053c0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005332:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005336:	429a      	cmp	r2, r3
 8005338:	d242      	bcs.n	80053c0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3308      	adds	r3, #8
 8005340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	61fb      	str	r3, [r7, #28]
   return(result);
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3308      	adds	r3, #8
 800535a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800535e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005360:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e3      	bne.n	800533a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a15      	ldr	r2, [pc, #84]	@ (80053cc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005376:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	60bb      	str	r3, [r7, #8]
   return(result);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f043 0320 	orr.w	r3, r3, #32
 800538c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6979      	ldr	r1, [r7, #20]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	613b      	str	r3, [r7, #16]
   return(result);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e4      	bne.n	8005378 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053ae:	e007      	b.n	80053c0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0208 	orr.w	r2, r2, #8
 80053be:	619a      	str	r2, [r3, #24]
}
 80053c0:	bf00      	nop
 80053c2:	37b0      	adds	r7, #176	@ 0xb0
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40008000 	.word	0x40008000
 80053cc:	08004d01 	.word	0x08004d01

080053d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b0ae      	sub	sp, #184	@ 0xb8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80053de:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005406:	2b22      	cmp	r3, #34	@ 0x22
 8005408:	f040 8186 	bne.w	8005718 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005412:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005416:	e129      	b.n	800566c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800542a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800542e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005432:	4013      	ands	r3, r2
 8005434:	b29a      	uxth	r2, r3
 8005436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800543a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005440:	1c9a      	adds	r2, r3, #2
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	2b00      	cmp	r3, #0
 800546c:	d053      	beq.n	8005516 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800546e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d011      	beq.n	800549e <UART_RxISR_16BIT_FIFOEN+0xce>
 800547a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800547e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2201      	movs	r2, #1
 800548c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005494:	f043 0201 	orr.w	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800549e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d011      	beq.n	80054ce <UART_RxISR_16BIT_FIFOEN+0xfe>
 80054aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2202      	movs	r2, #2
 80054bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c4:	f043 0204 	orr.w	r2, r3, #4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d011      	beq.n	80054fe <UART_RxISR_16BIT_FIFOEN+0x12e>
 80054da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2204      	movs	r2, #4
 80054ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f4:	f043 0202 	orr.w	r2, r3, #2
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005504:	2b00      	cmp	r3, #0
 8005506:	d006      	beq.n	8005516 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7fe f9e5 	bl	80038d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	f040 80a4 	bne.w	800566c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005538:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005546:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800554a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800554e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e2      	bne.n	8005524 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3308      	adds	r3, #8
 8005564:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800556e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3308      	adds	r3, #8
 8005582:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005586:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005588:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800558c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e1      	bne.n	800555e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a5f      	ldr	r2, [pc, #380]	@ (8005730 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d021      	beq.n	80055fc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01a      	beq.n	80055fc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055ea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e4      	bne.n	80055c6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005600:	2b01      	cmp	r3, #1
 8005602:	d130      	bne.n	8005666 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561a:	f023 0310 	bic.w	r3, r3, #16
 800561e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800562c:	647b      	str	r3, [r7, #68]	@ 0x44
 800562e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800563a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e4      	bne.n	800560a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b10      	cmp	r3, #16
 800564c:	d103      	bne.n	8005656 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2210      	movs	r2, #16
 8005654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fe f944 	bl	80038ec <HAL_UARTEx_RxEventCallback>
 8005664:	e002      	b.n	800566c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fb fab2 	bl	8000bd0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800566c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005670:	2b00      	cmp	r3, #0
 8005672:	d006      	beq.n	8005682 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005674:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b00      	cmp	r3, #0
 800567e:	f47f aecb 	bne.w	8005418 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005688:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800568c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005690:	2b00      	cmp	r3, #0
 8005692:	d049      	beq.n	8005728 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800569a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800569e:	429a      	cmp	r2, r3
 80056a0:	d242      	bcs.n	8005728 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	623b      	str	r3, [r7, #32]
   return(result);
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3308      	adds	r3, #8
 80056c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80056c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80056c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e3      	bne.n	80056a2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a15      	ldr	r2, [pc, #84]	@ (8005734 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80056de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f043 0320 	orr.w	r3, r3, #32
 80056f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	69b9      	ldr	r1, [r7, #24]
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	617b      	str	r3, [r7, #20]
   return(result);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e4      	bne.n	80056e0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005716:	e007      	b.n	8005728 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0208 	orr.w	r2, r2, #8
 8005726:	619a      	str	r2, [r3, #24]
}
 8005728:	bf00      	nop
 800572a:	37b8      	adds	r7, #184	@ 0xb8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40008000 	.word	0x40008000
 8005734:	08004eb9 	.word	0x08004eb9

08005738 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_UARTEx_DisableFifoMode+0x16>
 8005786:	2302      	movs	r3, #2
 8005788:	e027      	b.n	80057da <HAL_UARTEx_DisableFifoMode+0x66>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2224      	movs	r2, #36	@ 0x24
 8005796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0201 	bic.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80057b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e02d      	b.n	800585a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2224      	movs	r2, #36	@ 0x24
 800580a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f850 	bl	80058e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005876:	2302      	movs	r3, #2
 8005878:	e02d      	b.n	80058d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2224      	movs	r2, #36	@ 0x24
 8005886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0201 	bic.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f812 	bl	80058e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d108      	bne.n	8005902 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005900:	e031      	b.n	8005966 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005902:	2308      	movs	r3, #8
 8005904:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005906:	2308      	movs	r3, #8
 8005908:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	0e5b      	lsrs	r3, r3, #25
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	0f5b      	lsrs	r3, r3, #29
 8005922:	b2db      	uxtb	r3, r3
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800592a:	7bbb      	ldrb	r3, [r7, #14]
 800592c:	7b3a      	ldrb	r2, [r7, #12]
 800592e:	4911      	ldr	r1, [pc, #68]	@ (8005974 <UARTEx_SetNbDataToProcess+0x94>)
 8005930:	5c8a      	ldrb	r2, [r1, r2]
 8005932:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005936:	7b3a      	ldrb	r2, [r7, #12]
 8005938:	490f      	ldr	r1, [pc, #60]	@ (8005978 <UARTEx_SetNbDataToProcess+0x98>)
 800593a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800593c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005940:	b29a      	uxth	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	7b7a      	ldrb	r2, [r7, #13]
 800594c:	4909      	ldr	r1, [pc, #36]	@ (8005974 <UARTEx_SetNbDataToProcess+0x94>)
 800594e:	5c8a      	ldrb	r2, [r1, r2]
 8005950:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005954:	7b7a      	ldrb	r2, [r7, #13]
 8005956:	4908      	ldr	r1, [pc, #32]	@ (8005978 <UARTEx_SetNbDataToProcess+0x98>)
 8005958:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800595a:	fb93 f3f2 	sdiv	r3, r3, r2
 800595e:	b29a      	uxth	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005966:	bf00      	nop
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	080064b0 	.word	0x080064b0
 8005978:	080064b8 	.word	0x080064b8

0800597c <siprintf>:
 800597c:	b40e      	push	{r1, r2, r3}
 800597e:	b500      	push	{lr}
 8005980:	b09c      	sub	sp, #112	@ 0x70
 8005982:	ab1d      	add	r3, sp, #116	@ 0x74
 8005984:	9002      	str	r0, [sp, #8]
 8005986:	9006      	str	r0, [sp, #24]
 8005988:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800598c:	4809      	ldr	r0, [pc, #36]	@ (80059b4 <siprintf+0x38>)
 800598e:	9107      	str	r1, [sp, #28]
 8005990:	9104      	str	r1, [sp, #16]
 8005992:	4909      	ldr	r1, [pc, #36]	@ (80059b8 <siprintf+0x3c>)
 8005994:	f853 2b04 	ldr.w	r2, [r3], #4
 8005998:	9105      	str	r1, [sp, #20]
 800599a:	6800      	ldr	r0, [r0, #0]
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	a902      	add	r1, sp, #8
 80059a0:	f000 f994 	bl	8005ccc <_svfiprintf_r>
 80059a4:	9b02      	ldr	r3, [sp, #8]
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	b01c      	add	sp, #112	@ 0x70
 80059ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b0:	b003      	add	sp, #12
 80059b2:	4770      	bx	lr
 80059b4:	20000014 	.word	0x20000014
 80059b8:	ffff0208 	.word	0xffff0208

080059bc <memset>:
 80059bc:	4402      	add	r2, r0
 80059be:	4603      	mov	r3, r0
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d100      	bne.n	80059c6 <memset+0xa>
 80059c4:	4770      	bx	lr
 80059c6:	f803 1b01 	strb.w	r1, [r3], #1
 80059ca:	e7f9      	b.n	80059c0 <memset+0x4>

080059cc <__errno>:
 80059cc:	4b01      	ldr	r3, [pc, #4]	@ (80059d4 <__errno+0x8>)
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000014 	.word	0x20000014

080059d8 <__libc_init_array>:
 80059d8:	b570      	push	{r4, r5, r6, lr}
 80059da:	4d0d      	ldr	r5, [pc, #52]	@ (8005a10 <__libc_init_array+0x38>)
 80059dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005a14 <__libc_init_array+0x3c>)
 80059de:	1b64      	subs	r4, r4, r5
 80059e0:	10a4      	asrs	r4, r4, #2
 80059e2:	2600      	movs	r6, #0
 80059e4:	42a6      	cmp	r6, r4
 80059e6:	d109      	bne.n	80059fc <__libc_init_array+0x24>
 80059e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005a18 <__libc_init_array+0x40>)
 80059ea:	4c0c      	ldr	r4, [pc, #48]	@ (8005a1c <__libc_init_array+0x44>)
 80059ec:	f000 fc66 	bl	80062bc <_init>
 80059f0:	1b64      	subs	r4, r4, r5
 80059f2:	10a4      	asrs	r4, r4, #2
 80059f4:	2600      	movs	r6, #0
 80059f6:	42a6      	cmp	r6, r4
 80059f8:	d105      	bne.n	8005a06 <__libc_init_array+0x2e>
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a00:	4798      	blx	r3
 8005a02:	3601      	adds	r6, #1
 8005a04:	e7ee      	b.n	80059e4 <__libc_init_array+0xc>
 8005a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a0a:	4798      	blx	r3
 8005a0c:	3601      	adds	r6, #1
 8005a0e:	e7f2      	b.n	80059f6 <__libc_init_array+0x1e>
 8005a10:	080064fc 	.word	0x080064fc
 8005a14:	080064fc 	.word	0x080064fc
 8005a18:	080064fc 	.word	0x080064fc
 8005a1c:	08006500 	.word	0x08006500

08005a20 <__retarget_lock_acquire_recursive>:
 8005a20:	4770      	bx	lr

08005a22 <__retarget_lock_release_recursive>:
 8005a22:	4770      	bx	lr

08005a24 <_free_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4605      	mov	r5, r0
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	d041      	beq.n	8005ab0 <_free_r+0x8c>
 8005a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a30:	1f0c      	subs	r4, r1, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bfb8      	it	lt
 8005a36:	18e4      	addlt	r4, r4, r3
 8005a38:	f000 f8e0 	bl	8005bfc <__malloc_lock>
 8005a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab4 <_free_r+0x90>)
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	b933      	cbnz	r3, 8005a50 <_free_r+0x2c>
 8005a42:	6063      	str	r3, [r4, #4]
 8005a44:	6014      	str	r4, [r2, #0]
 8005a46:	4628      	mov	r0, r5
 8005a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a4c:	f000 b8dc 	b.w	8005c08 <__malloc_unlock>
 8005a50:	42a3      	cmp	r3, r4
 8005a52:	d908      	bls.n	8005a66 <_free_r+0x42>
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	1821      	adds	r1, r4, r0
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf01      	itttt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	1809      	addeq	r1, r1, r0
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	e7ed      	b.n	8005a42 <_free_r+0x1e>
 8005a66:	461a      	mov	r2, r3
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	b10b      	cbz	r3, 8005a70 <_free_r+0x4c>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d9fa      	bls.n	8005a66 <_free_r+0x42>
 8005a70:	6811      	ldr	r1, [r2, #0]
 8005a72:	1850      	adds	r0, r2, r1
 8005a74:	42a0      	cmp	r0, r4
 8005a76:	d10b      	bne.n	8005a90 <_free_r+0x6c>
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	4401      	add	r1, r0
 8005a7c:	1850      	adds	r0, r2, r1
 8005a7e:	4283      	cmp	r3, r0
 8005a80:	6011      	str	r1, [r2, #0]
 8005a82:	d1e0      	bne.n	8005a46 <_free_r+0x22>
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	6053      	str	r3, [r2, #4]
 8005a8a:	4408      	add	r0, r1
 8005a8c:	6010      	str	r0, [r2, #0]
 8005a8e:	e7da      	b.n	8005a46 <_free_r+0x22>
 8005a90:	d902      	bls.n	8005a98 <_free_r+0x74>
 8005a92:	230c      	movs	r3, #12
 8005a94:	602b      	str	r3, [r5, #0]
 8005a96:	e7d6      	b.n	8005a46 <_free_r+0x22>
 8005a98:	6820      	ldr	r0, [r4, #0]
 8005a9a:	1821      	adds	r1, r4, r0
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	bf04      	itt	eq
 8005aa0:	6819      	ldreq	r1, [r3, #0]
 8005aa2:	685b      	ldreq	r3, [r3, #4]
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	bf04      	itt	eq
 8005aa8:	1809      	addeq	r1, r1, r0
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	6054      	str	r4, [r2, #4]
 8005aae:	e7ca      	b.n	8005a46 <_free_r+0x22>
 8005ab0:	bd38      	pop	{r3, r4, r5, pc}
 8005ab2:	bf00      	nop
 8005ab4:	2000037c 	.word	0x2000037c

08005ab8 <sbrk_aligned>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	4e0f      	ldr	r6, [pc, #60]	@ (8005af8 <sbrk_aligned+0x40>)
 8005abc:	460c      	mov	r4, r1
 8005abe:	6831      	ldr	r1, [r6, #0]
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	b911      	cbnz	r1, 8005aca <sbrk_aligned+0x12>
 8005ac4:	f000 fba6 	bl	8006214 <_sbrk_r>
 8005ac8:	6030      	str	r0, [r6, #0]
 8005aca:	4621      	mov	r1, r4
 8005acc:	4628      	mov	r0, r5
 8005ace:	f000 fba1 	bl	8006214 <_sbrk_r>
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	d103      	bne.n	8005ade <sbrk_aligned+0x26>
 8005ad6:	f04f 34ff 	mov.w	r4, #4294967295
 8005ada:	4620      	mov	r0, r4
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	1cc4      	adds	r4, r0, #3
 8005ae0:	f024 0403 	bic.w	r4, r4, #3
 8005ae4:	42a0      	cmp	r0, r4
 8005ae6:	d0f8      	beq.n	8005ada <sbrk_aligned+0x22>
 8005ae8:	1a21      	subs	r1, r4, r0
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 fb92 	bl	8006214 <_sbrk_r>
 8005af0:	3001      	adds	r0, #1
 8005af2:	d1f2      	bne.n	8005ada <sbrk_aligned+0x22>
 8005af4:	e7ef      	b.n	8005ad6 <sbrk_aligned+0x1e>
 8005af6:	bf00      	nop
 8005af8:	20000378 	.word	0x20000378

08005afc <_malloc_r>:
 8005afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b00:	1ccd      	adds	r5, r1, #3
 8005b02:	f025 0503 	bic.w	r5, r5, #3
 8005b06:	3508      	adds	r5, #8
 8005b08:	2d0c      	cmp	r5, #12
 8005b0a:	bf38      	it	cc
 8005b0c:	250c      	movcc	r5, #12
 8005b0e:	2d00      	cmp	r5, #0
 8005b10:	4606      	mov	r6, r0
 8005b12:	db01      	blt.n	8005b18 <_malloc_r+0x1c>
 8005b14:	42a9      	cmp	r1, r5
 8005b16:	d904      	bls.n	8005b22 <_malloc_r+0x26>
 8005b18:	230c      	movs	r3, #12
 8005b1a:	6033      	str	r3, [r6, #0]
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bf8 <_malloc_r+0xfc>
 8005b26:	f000 f869 	bl	8005bfc <__malloc_lock>
 8005b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b2e:	461c      	mov	r4, r3
 8005b30:	bb44      	cbnz	r4, 8005b84 <_malloc_r+0x88>
 8005b32:	4629      	mov	r1, r5
 8005b34:	4630      	mov	r0, r6
 8005b36:	f7ff ffbf 	bl	8005ab8 <sbrk_aligned>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	d158      	bne.n	8005bf2 <_malloc_r+0xf6>
 8005b40:	f8d8 4000 	ldr.w	r4, [r8]
 8005b44:	4627      	mov	r7, r4
 8005b46:	2f00      	cmp	r7, #0
 8005b48:	d143      	bne.n	8005bd2 <_malloc_r+0xd6>
 8005b4a:	2c00      	cmp	r4, #0
 8005b4c:	d04b      	beq.n	8005be6 <_malloc_r+0xea>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	4639      	mov	r1, r7
 8005b52:	4630      	mov	r0, r6
 8005b54:	eb04 0903 	add.w	r9, r4, r3
 8005b58:	f000 fb5c 	bl	8006214 <_sbrk_r>
 8005b5c:	4581      	cmp	r9, r0
 8005b5e:	d142      	bne.n	8005be6 <_malloc_r+0xea>
 8005b60:	6821      	ldr	r1, [r4, #0]
 8005b62:	1a6d      	subs	r5, r5, r1
 8005b64:	4629      	mov	r1, r5
 8005b66:	4630      	mov	r0, r6
 8005b68:	f7ff ffa6 	bl	8005ab8 <sbrk_aligned>
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d03a      	beq.n	8005be6 <_malloc_r+0xea>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	442b      	add	r3, r5
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	f8d8 3000 	ldr.w	r3, [r8]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	bb62      	cbnz	r2, 8005bd8 <_malloc_r+0xdc>
 8005b7e:	f8c8 7000 	str.w	r7, [r8]
 8005b82:	e00f      	b.n	8005ba4 <_malloc_r+0xa8>
 8005b84:	6822      	ldr	r2, [r4, #0]
 8005b86:	1b52      	subs	r2, r2, r5
 8005b88:	d420      	bmi.n	8005bcc <_malloc_r+0xd0>
 8005b8a:	2a0b      	cmp	r2, #11
 8005b8c:	d917      	bls.n	8005bbe <_malloc_r+0xc2>
 8005b8e:	1961      	adds	r1, r4, r5
 8005b90:	42a3      	cmp	r3, r4
 8005b92:	6025      	str	r5, [r4, #0]
 8005b94:	bf18      	it	ne
 8005b96:	6059      	strne	r1, [r3, #4]
 8005b98:	6863      	ldr	r3, [r4, #4]
 8005b9a:	bf08      	it	eq
 8005b9c:	f8c8 1000 	streq.w	r1, [r8]
 8005ba0:	5162      	str	r2, [r4, r5]
 8005ba2:	604b      	str	r3, [r1, #4]
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	f000 f82f 	bl	8005c08 <__malloc_unlock>
 8005baa:	f104 000b 	add.w	r0, r4, #11
 8005bae:	1d23      	adds	r3, r4, #4
 8005bb0:	f020 0007 	bic.w	r0, r0, #7
 8005bb4:	1ac2      	subs	r2, r0, r3
 8005bb6:	bf1c      	itt	ne
 8005bb8:	1a1b      	subne	r3, r3, r0
 8005bba:	50a3      	strne	r3, [r4, r2]
 8005bbc:	e7af      	b.n	8005b1e <_malloc_r+0x22>
 8005bbe:	6862      	ldr	r2, [r4, #4]
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	bf0c      	ite	eq
 8005bc4:	f8c8 2000 	streq.w	r2, [r8]
 8005bc8:	605a      	strne	r2, [r3, #4]
 8005bca:	e7eb      	b.n	8005ba4 <_malloc_r+0xa8>
 8005bcc:	4623      	mov	r3, r4
 8005bce:	6864      	ldr	r4, [r4, #4]
 8005bd0:	e7ae      	b.n	8005b30 <_malloc_r+0x34>
 8005bd2:	463c      	mov	r4, r7
 8005bd4:	687f      	ldr	r7, [r7, #4]
 8005bd6:	e7b6      	b.n	8005b46 <_malloc_r+0x4a>
 8005bd8:	461a      	mov	r2, r3
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d1fb      	bne.n	8005bd8 <_malloc_r+0xdc>
 8005be0:	2300      	movs	r3, #0
 8005be2:	6053      	str	r3, [r2, #4]
 8005be4:	e7de      	b.n	8005ba4 <_malloc_r+0xa8>
 8005be6:	230c      	movs	r3, #12
 8005be8:	6033      	str	r3, [r6, #0]
 8005bea:	4630      	mov	r0, r6
 8005bec:	f000 f80c 	bl	8005c08 <__malloc_unlock>
 8005bf0:	e794      	b.n	8005b1c <_malloc_r+0x20>
 8005bf2:	6005      	str	r5, [r0, #0]
 8005bf4:	e7d6      	b.n	8005ba4 <_malloc_r+0xa8>
 8005bf6:	bf00      	nop
 8005bf8:	2000037c 	.word	0x2000037c

08005bfc <__malloc_lock>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	@ (8005c04 <__malloc_lock+0x8>)
 8005bfe:	f7ff bf0f 	b.w	8005a20 <__retarget_lock_acquire_recursive>
 8005c02:	bf00      	nop
 8005c04:	20000374 	.word	0x20000374

08005c08 <__malloc_unlock>:
 8005c08:	4801      	ldr	r0, [pc, #4]	@ (8005c10 <__malloc_unlock+0x8>)
 8005c0a:	f7ff bf0a 	b.w	8005a22 <__retarget_lock_release_recursive>
 8005c0e:	bf00      	nop
 8005c10:	20000374 	.word	0x20000374

08005c14 <__ssputs_r>:
 8005c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	688e      	ldr	r6, [r1, #8]
 8005c1a:	461f      	mov	r7, r3
 8005c1c:	42be      	cmp	r6, r7
 8005c1e:	680b      	ldr	r3, [r1, #0]
 8005c20:	4682      	mov	sl, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	4690      	mov	r8, r2
 8005c26:	d82d      	bhi.n	8005c84 <__ssputs_r+0x70>
 8005c28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c30:	d026      	beq.n	8005c80 <__ssputs_r+0x6c>
 8005c32:	6965      	ldr	r5, [r4, #20]
 8005c34:	6909      	ldr	r1, [r1, #16]
 8005c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c3a:	eba3 0901 	sub.w	r9, r3, r1
 8005c3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c42:	1c7b      	adds	r3, r7, #1
 8005c44:	444b      	add	r3, r9
 8005c46:	106d      	asrs	r5, r5, #1
 8005c48:	429d      	cmp	r5, r3
 8005c4a:	bf38      	it	cc
 8005c4c:	461d      	movcc	r5, r3
 8005c4e:	0553      	lsls	r3, r2, #21
 8005c50:	d527      	bpl.n	8005ca2 <__ssputs_r+0x8e>
 8005c52:	4629      	mov	r1, r5
 8005c54:	f7ff ff52 	bl	8005afc <_malloc_r>
 8005c58:	4606      	mov	r6, r0
 8005c5a:	b360      	cbz	r0, 8005cb6 <__ssputs_r+0xa2>
 8005c5c:	6921      	ldr	r1, [r4, #16]
 8005c5e:	464a      	mov	r2, r9
 8005c60:	f000 fae8 	bl	8006234 <memcpy>
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	6126      	str	r6, [r4, #16]
 8005c72:	6165      	str	r5, [r4, #20]
 8005c74:	444e      	add	r6, r9
 8005c76:	eba5 0509 	sub.w	r5, r5, r9
 8005c7a:	6026      	str	r6, [r4, #0]
 8005c7c:	60a5      	str	r5, [r4, #8]
 8005c7e:	463e      	mov	r6, r7
 8005c80:	42be      	cmp	r6, r7
 8005c82:	d900      	bls.n	8005c86 <__ssputs_r+0x72>
 8005c84:	463e      	mov	r6, r7
 8005c86:	6820      	ldr	r0, [r4, #0]
 8005c88:	4632      	mov	r2, r6
 8005c8a:	4641      	mov	r1, r8
 8005c8c:	f000 faa8 	bl	80061e0 <memmove>
 8005c90:	68a3      	ldr	r3, [r4, #8]
 8005c92:	1b9b      	subs	r3, r3, r6
 8005c94:	60a3      	str	r3, [r4, #8]
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	4433      	add	r3, r6
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca2:	462a      	mov	r2, r5
 8005ca4:	f000 fad4 	bl	8006250 <_realloc_r>
 8005ca8:	4606      	mov	r6, r0
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d1e0      	bne.n	8005c70 <__ssputs_r+0x5c>
 8005cae:	6921      	ldr	r1, [r4, #16]
 8005cb0:	4650      	mov	r0, sl
 8005cb2:	f7ff feb7 	bl	8005a24 <_free_r>
 8005cb6:	230c      	movs	r3, #12
 8005cb8:	f8ca 3000 	str.w	r3, [sl]
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cc2:	81a3      	strh	r3, [r4, #12]
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	e7e9      	b.n	8005c9e <__ssputs_r+0x8a>
	...

08005ccc <_svfiprintf_r>:
 8005ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd0:	4698      	mov	r8, r3
 8005cd2:	898b      	ldrh	r3, [r1, #12]
 8005cd4:	061b      	lsls	r3, r3, #24
 8005cd6:	b09d      	sub	sp, #116	@ 0x74
 8005cd8:	4607      	mov	r7, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	4614      	mov	r4, r2
 8005cde:	d510      	bpl.n	8005d02 <_svfiprintf_r+0x36>
 8005ce0:	690b      	ldr	r3, [r1, #16]
 8005ce2:	b973      	cbnz	r3, 8005d02 <_svfiprintf_r+0x36>
 8005ce4:	2140      	movs	r1, #64	@ 0x40
 8005ce6:	f7ff ff09 	bl	8005afc <_malloc_r>
 8005cea:	6028      	str	r0, [r5, #0]
 8005cec:	6128      	str	r0, [r5, #16]
 8005cee:	b930      	cbnz	r0, 8005cfe <_svfiprintf_r+0x32>
 8005cf0:	230c      	movs	r3, #12
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	b01d      	add	sp, #116	@ 0x74
 8005cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfe:	2340      	movs	r3, #64	@ 0x40
 8005d00:	616b      	str	r3, [r5, #20]
 8005d02:	2300      	movs	r3, #0
 8005d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d06:	2320      	movs	r3, #32
 8005d08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d10:	2330      	movs	r3, #48	@ 0x30
 8005d12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005eb0 <_svfiprintf_r+0x1e4>
 8005d16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d1a:	f04f 0901 	mov.w	r9, #1
 8005d1e:	4623      	mov	r3, r4
 8005d20:	469a      	mov	sl, r3
 8005d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d26:	b10a      	cbz	r2, 8005d2c <_svfiprintf_r+0x60>
 8005d28:	2a25      	cmp	r2, #37	@ 0x25
 8005d2a:	d1f9      	bne.n	8005d20 <_svfiprintf_r+0x54>
 8005d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005d30:	d00b      	beq.n	8005d4a <_svfiprintf_r+0x7e>
 8005d32:	465b      	mov	r3, fp
 8005d34:	4622      	mov	r2, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f7ff ff6b 	bl	8005c14 <__ssputs_r>
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f000 80a7 	beq.w	8005e92 <_svfiprintf_r+0x1c6>
 8005d44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d46:	445a      	add	r2, fp
 8005d48:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 809f 	beq.w	8005e92 <_svfiprintf_r+0x1c6>
 8005d54:	2300      	movs	r3, #0
 8005d56:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d5e:	f10a 0a01 	add.w	sl, sl, #1
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	9307      	str	r3, [sp, #28]
 8005d66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d6c:	4654      	mov	r4, sl
 8005d6e:	2205      	movs	r2, #5
 8005d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d74:	484e      	ldr	r0, [pc, #312]	@ (8005eb0 <_svfiprintf_r+0x1e4>)
 8005d76:	f7fa fa5b 	bl	8000230 <memchr>
 8005d7a:	9a04      	ldr	r2, [sp, #16]
 8005d7c:	b9d8      	cbnz	r0, 8005db6 <_svfiprintf_r+0xea>
 8005d7e:	06d0      	lsls	r0, r2, #27
 8005d80:	bf44      	itt	mi
 8005d82:	2320      	movmi	r3, #32
 8005d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d88:	0711      	lsls	r1, r2, #28
 8005d8a:	bf44      	itt	mi
 8005d8c:	232b      	movmi	r3, #43	@ 0x2b
 8005d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d92:	f89a 3000 	ldrb.w	r3, [sl]
 8005d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d98:	d015      	beq.n	8005dc6 <_svfiprintf_r+0xfa>
 8005d9a:	9a07      	ldr	r2, [sp, #28]
 8005d9c:	4654      	mov	r4, sl
 8005d9e:	2000      	movs	r0, #0
 8005da0:	f04f 0c0a 	mov.w	ip, #10
 8005da4:	4621      	mov	r1, r4
 8005da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005daa:	3b30      	subs	r3, #48	@ 0x30
 8005dac:	2b09      	cmp	r3, #9
 8005dae:	d94b      	bls.n	8005e48 <_svfiprintf_r+0x17c>
 8005db0:	b1b0      	cbz	r0, 8005de0 <_svfiprintf_r+0x114>
 8005db2:	9207      	str	r2, [sp, #28]
 8005db4:	e014      	b.n	8005de0 <_svfiprintf_r+0x114>
 8005db6:	eba0 0308 	sub.w	r3, r0, r8
 8005dba:	fa09 f303 	lsl.w	r3, r9, r3
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	9304      	str	r3, [sp, #16]
 8005dc2:	46a2      	mov	sl, r4
 8005dc4:	e7d2      	b.n	8005d6c <_svfiprintf_r+0xa0>
 8005dc6:	9b03      	ldr	r3, [sp, #12]
 8005dc8:	1d19      	adds	r1, r3, #4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	9103      	str	r1, [sp, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bfbb      	ittet	lt
 8005dd2:	425b      	neglt	r3, r3
 8005dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8005dd8:	9307      	strge	r3, [sp, #28]
 8005dda:	9307      	strlt	r3, [sp, #28]
 8005ddc:	bfb8      	it	lt
 8005dde:	9204      	strlt	r2, [sp, #16]
 8005de0:	7823      	ldrb	r3, [r4, #0]
 8005de2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005de4:	d10a      	bne.n	8005dfc <_svfiprintf_r+0x130>
 8005de6:	7863      	ldrb	r3, [r4, #1]
 8005de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dea:	d132      	bne.n	8005e52 <_svfiprintf_r+0x186>
 8005dec:	9b03      	ldr	r3, [sp, #12]
 8005dee:	1d1a      	adds	r2, r3, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	9203      	str	r2, [sp, #12]
 8005df4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005df8:	3402      	adds	r4, #2
 8005dfa:	9305      	str	r3, [sp, #20]
 8005dfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ec0 <_svfiprintf_r+0x1f4>
 8005e00:	7821      	ldrb	r1, [r4, #0]
 8005e02:	2203      	movs	r2, #3
 8005e04:	4650      	mov	r0, sl
 8005e06:	f7fa fa13 	bl	8000230 <memchr>
 8005e0a:	b138      	cbz	r0, 8005e1c <_svfiprintf_r+0x150>
 8005e0c:	9b04      	ldr	r3, [sp, #16]
 8005e0e:	eba0 000a 	sub.w	r0, r0, sl
 8005e12:	2240      	movs	r2, #64	@ 0x40
 8005e14:	4082      	lsls	r2, r0
 8005e16:	4313      	orrs	r3, r2
 8005e18:	3401      	adds	r4, #1
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e20:	4824      	ldr	r0, [pc, #144]	@ (8005eb4 <_svfiprintf_r+0x1e8>)
 8005e22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e26:	2206      	movs	r2, #6
 8005e28:	f7fa fa02 	bl	8000230 <memchr>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d036      	beq.n	8005e9e <_svfiprintf_r+0x1d2>
 8005e30:	4b21      	ldr	r3, [pc, #132]	@ (8005eb8 <_svfiprintf_r+0x1ec>)
 8005e32:	bb1b      	cbnz	r3, 8005e7c <_svfiprintf_r+0x1b0>
 8005e34:	9b03      	ldr	r3, [sp, #12]
 8005e36:	3307      	adds	r3, #7
 8005e38:	f023 0307 	bic.w	r3, r3, #7
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	9303      	str	r3, [sp, #12]
 8005e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e42:	4433      	add	r3, r6
 8005e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e46:	e76a      	b.n	8005d1e <_svfiprintf_r+0x52>
 8005e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	2001      	movs	r0, #1
 8005e50:	e7a8      	b.n	8005da4 <_svfiprintf_r+0xd8>
 8005e52:	2300      	movs	r3, #0
 8005e54:	3401      	adds	r4, #1
 8005e56:	9305      	str	r3, [sp, #20]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	f04f 0c0a 	mov.w	ip, #10
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e64:	3a30      	subs	r2, #48	@ 0x30
 8005e66:	2a09      	cmp	r2, #9
 8005e68:	d903      	bls.n	8005e72 <_svfiprintf_r+0x1a6>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0c6      	beq.n	8005dfc <_svfiprintf_r+0x130>
 8005e6e:	9105      	str	r1, [sp, #20]
 8005e70:	e7c4      	b.n	8005dfc <_svfiprintf_r+0x130>
 8005e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e76:	4604      	mov	r4, r0
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e7f0      	b.n	8005e5e <_svfiprintf_r+0x192>
 8005e7c:	ab03      	add	r3, sp, #12
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	462a      	mov	r2, r5
 8005e82:	4b0e      	ldr	r3, [pc, #56]	@ (8005ebc <_svfiprintf_r+0x1f0>)
 8005e84:	a904      	add	r1, sp, #16
 8005e86:	4638      	mov	r0, r7
 8005e88:	f3af 8000 	nop.w
 8005e8c:	1c42      	adds	r2, r0, #1
 8005e8e:	4606      	mov	r6, r0
 8005e90:	d1d6      	bne.n	8005e40 <_svfiprintf_r+0x174>
 8005e92:	89ab      	ldrh	r3, [r5, #12]
 8005e94:	065b      	lsls	r3, r3, #25
 8005e96:	f53f af2d 	bmi.w	8005cf4 <_svfiprintf_r+0x28>
 8005e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e9c:	e72c      	b.n	8005cf8 <_svfiprintf_r+0x2c>
 8005e9e:	ab03      	add	r3, sp, #12
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	4b05      	ldr	r3, [pc, #20]	@ (8005ebc <_svfiprintf_r+0x1f0>)
 8005ea6:	a904      	add	r1, sp, #16
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f000 f879 	bl	8005fa0 <_printf_i>
 8005eae:	e7ed      	b.n	8005e8c <_svfiprintf_r+0x1c0>
 8005eb0:	080064c0 	.word	0x080064c0
 8005eb4:	080064ca 	.word	0x080064ca
 8005eb8:	00000000 	.word	0x00000000
 8005ebc:	08005c15 	.word	0x08005c15
 8005ec0:	080064c6 	.word	0x080064c6

08005ec4 <_printf_common>:
 8005ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec8:	4616      	mov	r6, r2
 8005eca:	4698      	mov	r8, r3
 8005ecc:	688a      	ldr	r2, [r1, #8]
 8005ece:	690b      	ldr	r3, [r1, #16]
 8005ed0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	bfb8      	it	lt
 8005ed8:	4613      	movlt	r3, r2
 8005eda:	6033      	str	r3, [r6, #0]
 8005edc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ee0:	4607      	mov	r7, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	b10a      	cbz	r2, 8005eea <_printf_common+0x26>
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	6033      	str	r3, [r6, #0]
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	0699      	lsls	r1, r3, #26
 8005eee:	bf42      	ittt	mi
 8005ef0:	6833      	ldrmi	r3, [r6, #0]
 8005ef2:	3302      	addmi	r3, #2
 8005ef4:	6033      	strmi	r3, [r6, #0]
 8005ef6:	6825      	ldr	r5, [r4, #0]
 8005ef8:	f015 0506 	ands.w	r5, r5, #6
 8005efc:	d106      	bne.n	8005f0c <_printf_common+0x48>
 8005efe:	f104 0a19 	add.w	sl, r4, #25
 8005f02:	68e3      	ldr	r3, [r4, #12]
 8005f04:	6832      	ldr	r2, [r6, #0]
 8005f06:	1a9b      	subs	r3, r3, r2
 8005f08:	42ab      	cmp	r3, r5
 8005f0a:	dc26      	bgt.n	8005f5a <_printf_common+0x96>
 8005f0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	3b00      	subs	r3, #0
 8005f14:	bf18      	it	ne
 8005f16:	2301      	movne	r3, #1
 8005f18:	0692      	lsls	r2, r2, #26
 8005f1a:	d42b      	bmi.n	8005f74 <_printf_common+0xb0>
 8005f1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f20:	4641      	mov	r1, r8
 8005f22:	4638      	mov	r0, r7
 8005f24:	47c8      	blx	r9
 8005f26:	3001      	adds	r0, #1
 8005f28:	d01e      	beq.n	8005f68 <_printf_common+0xa4>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	6922      	ldr	r2, [r4, #16]
 8005f2e:	f003 0306 	and.w	r3, r3, #6
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	bf02      	ittt	eq
 8005f36:	68e5      	ldreq	r5, [r4, #12]
 8005f38:	6833      	ldreq	r3, [r6, #0]
 8005f3a:	1aed      	subeq	r5, r5, r3
 8005f3c:	68a3      	ldr	r3, [r4, #8]
 8005f3e:	bf0c      	ite	eq
 8005f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f44:	2500      	movne	r5, #0
 8005f46:	4293      	cmp	r3, r2
 8005f48:	bfc4      	itt	gt
 8005f4a:	1a9b      	subgt	r3, r3, r2
 8005f4c:	18ed      	addgt	r5, r5, r3
 8005f4e:	2600      	movs	r6, #0
 8005f50:	341a      	adds	r4, #26
 8005f52:	42b5      	cmp	r5, r6
 8005f54:	d11a      	bne.n	8005f8c <_printf_common+0xc8>
 8005f56:	2000      	movs	r0, #0
 8005f58:	e008      	b.n	8005f6c <_printf_common+0xa8>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4652      	mov	r2, sl
 8005f5e:	4641      	mov	r1, r8
 8005f60:	4638      	mov	r0, r7
 8005f62:	47c8      	blx	r9
 8005f64:	3001      	adds	r0, #1
 8005f66:	d103      	bne.n	8005f70 <_printf_common+0xac>
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f70:	3501      	adds	r5, #1
 8005f72:	e7c6      	b.n	8005f02 <_printf_common+0x3e>
 8005f74:	18e1      	adds	r1, r4, r3
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	2030      	movs	r0, #48	@ 0x30
 8005f7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f7e:	4422      	add	r2, r4
 8005f80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f88:	3302      	adds	r3, #2
 8005f8a:	e7c7      	b.n	8005f1c <_printf_common+0x58>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	4622      	mov	r2, r4
 8005f90:	4641      	mov	r1, r8
 8005f92:	4638      	mov	r0, r7
 8005f94:	47c8      	blx	r9
 8005f96:	3001      	adds	r0, #1
 8005f98:	d0e6      	beq.n	8005f68 <_printf_common+0xa4>
 8005f9a:	3601      	adds	r6, #1
 8005f9c:	e7d9      	b.n	8005f52 <_printf_common+0x8e>
	...

08005fa0 <_printf_i>:
 8005fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa4:	7e0f      	ldrb	r7, [r1, #24]
 8005fa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fa8:	2f78      	cmp	r7, #120	@ 0x78
 8005faa:	4691      	mov	r9, r2
 8005fac:	4680      	mov	r8, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	469a      	mov	sl, r3
 8005fb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fb6:	d807      	bhi.n	8005fc8 <_printf_i+0x28>
 8005fb8:	2f62      	cmp	r7, #98	@ 0x62
 8005fba:	d80a      	bhi.n	8005fd2 <_printf_i+0x32>
 8005fbc:	2f00      	cmp	r7, #0
 8005fbe:	f000 80d2 	beq.w	8006166 <_printf_i+0x1c6>
 8005fc2:	2f58      	cmp	r7, #88	@ 0x58
 8005fc4:	f000 80b9 	beq.w	800613a <_printf_i+0x19a>
 8005fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fd0:	e03a      	b.n	8006048 <_printf_i+0xa8>
 8005fd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fd6:	2b15      	cmp	r3, #21
 8005fd8:	d8f6      	bhi.n	8005fc8 <_printf_i+0x28>
 8005fda:	a101      	add	r1, pc, #4	@ (adr r1, 8005fe0 <_printf_i+0x40>)
 8005fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fe0:	08006039 	.word	0x08006039
 8005fe4:	0800604d 	.word	0x0800604d
 8005fe8:	08005fc9 	.word	0x08005fc9
 8005fec:	08005fc9 	.word	0x08005fc9
 8005ff0:	08005fc9 	.word	0x08005fc9
 8005ff4:	08005fc9 	.word	0x08005fc9
 8005ff8:	0800604d 	.word	0x0800604d
 8005ffc:	08005fc9 	.word	0x08005fc9
 8006000:	08005fc9 	.word	0x08005fc9
 8006004:	08005fc9 	.word	0x08005fc9
 8006008:	08005fc9 	.word	0x08005fc9
 800600c:	0800614d 	.word	0x0800614d
 8006010:	08006077 	.word	0x08006077
 8006014:	08006107 	.word	0x08006107
 8006018:	08005fc9 	.word	0x08005fc9
 800601c:	08005fc9 	.word	0x08005fc9
 8006020:	0800616f 	.word	0x0800616f
 8006024:	08005fc9 	.word	0x08005fc9
 8006028:	08006077 	.word	0x08006077
 800602c:	08005fc9 	.word	0x08005fc9
 8006030:	08005fc9 	.word	0x08005fc9
 8006034:	0800610f 	.word	0x0800610f
 8006038:	6833      	ldr	r3, [r6, #0]
 800603a:	1d1a      	adds	r2, r3, #4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6032      	str	r2, [r6, #0]
 8006040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006044:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006048:	2301      	movs	r3, #1
 800604a:	e09d      	b.n	8006188 <_printf_i+0x1e8>
 800604c:	6833      	ldr	r3, [r6, #0]
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	1d19      	adds	r1, r3, #4
 8006052:	6031      	str	r1, [r6, #0]
 8006054:	0606      	lsls	r6, r0, #24
 8006056:	d501      	bpl.n	800605c <_printf_i+0xbc>
 8006058:	681d      	ldr	r5, [r3, #0]
 800605a:	e003      	b.n	8006064 <_printf_i+0xc4>
 800605c:	0645      	lsls	r5, r0, #25
 800605e:	d5fb      	bpl.n	8006058 <_printf_i+0xb8>
 8006060:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006064:	2d00      	cmp	r5, #0
 8006066:	da03      	bge.n	8006070 <_printf_i+0xd0>
 8006068:	232d      	movs	r3, #45	@ 0x2d
 800606a:	426d      	negs	r5, r5
 800606c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006070:	4859      	ldr	r0, [pc, #356]	@ (80061d8 <_printf_i+0x238>)
 8006072:	230a      	movs	r3, #10
 8006074:	e011      	b.n	800609a <_printf_i+0xfa>
 8006076:	6821      	ldr	r1, [r4, #0]
 8006078:	6833      	ldr	r3, [r6, #0]
 800607a:	0608      	lsls	r0, r1, #24
 800607c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006080:	d402      	bmi.n	8006088 <_printf_i+0xe8>
 8006082:	0649      	lsls	r1, r1, #25
 8006084:	bf48      	it	mi
 8006086:	b2ad      	uxthmi	r5, r5
 8006088:	2f6f      	cmp	r7, #111	@ 0x6f
 800608a:	4853      	ldr	r0, [pc, #332]	@ (80061d8 <_printf_i+0x238>)
 800608c:	6033      	str	r3, [r6, #0]
 800608e:	bf14      	ite	ne
 8006090:	230a      	movne	r3, #10
 8006092:	2308      	moveq	r3, #8
 8006094:	2100      	movs	r1, #0
 8006096:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800609a:	6866      	ldr	r6, [r4, #4]
 800609c:	60a6      	str	r6, [r4, #8]
 800609e:	2e00      	cmp	r6, #0
 80060a0:	bfa2      	ittt	ge
 80060a2:	6821      	ldrge	r1, [r4, #0]
 80060a4:	f021 0104 	bicge.w	r1, r1, #4
 80060a8:	6021      	strge	r1, [r4, #0]
 80060aa:	b90d      	cbnz	r5, 80060b0 <_printf_i+0x110>
 80060ac:	2e00      	cmp	r6, #0
 80060ae:	d04b      	beq.n	8006148 <_printf_i+0x1a8>
 80060b0:	4616      	mov	r6, r2
 80060b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80060b6:	fb03 5711 	mls	r7, r3, r1, r5
 80060ba:	5dc7      	ldrb	r7, [r0, r7]
 80060bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060c0:	462f      	mov	r7, r5
 80060c2:	42bb      	cmp	r3, r7
 80060c4:	460d      	mov	r5, r1
 80060c6:	d9f4      	bls.n	80060b2 <_printf_i+0x112>
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d10b      	bne.n	80060e4 <_printf_i+0x144>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	07df      	lsls	r7, r3, #31
 80060d0:	d508      	bpl.n	80060e4 <_printf_i+0x144>
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	6861      	ldr	r1, [r4, #4]
 80060d6:	4299      	cmp	r1, r3
 80060d8:	bfde      	ittt	le
 80060da:	2330      	movle	r3, #48	@ 0x30
 80060dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060e4:	1b92      	subs	r2, r2, r6
 80060e6:	6122      	str	r2, [r4, #16]
 80060e8:	f8cd a000 	str.w	sl, [sp]
 80060ec:	464b      	mov	r3, r9
 80060ee:	aa03      	add	r2, sp, #12
 80060f0:	4621      	mov	r1, r4
 80060f2:	4640      	mov	r0, r8
 80060f4:	f7ff fee6 	bl	8005ec4 <_printf_common>
 80060f8:	3001      	adds	r0, #1
 80060fa:	d14a      	bne.n	8006192 <_printf_i+0x1f2>
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	b004      	add	sp, #16
 8006102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	f043 0320 	orr.w	r3, r3, #32
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	4833      	ldr	r0, [pc, #204]	@ (80061dc <_printf_i+0x23c>)
 8006110:	2778      	movs	r7, #120	@ 0x78
 8006112:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	6831      	ldr	r1, [r6, #0]
 800611a:	061f      	lsls	r7, r3, #24
 800611c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006120:	d402      	bmi.n	8006128 <_printf_i+0x188>
 8006122:	065f      	lsls	r7, r3, #25
 8006124:	bf48      	it	mi
 8006126:	b2ad      	uxthmi	r5, r5
 8006128:	6031      	str	r1, [r6, #0]
 800612a:	07d9      	lsls	r1, r3, #31
 800612c:	bf44      	itt	mi
 800612e:	f043 0320 	orrmi.w	r3, r3, #32
 8006132:	6023      	strmi	r3, [r4, #0]
 8006134:	b11d      	cbz	r5, 800613e <_printf_i+0x19e>
 8006136:	2310      	movs	r3, #16
 8006138:	e7ac      	b.n	8006094 <_printf_i+0xf4>
 800613a:	4827      	ldr	r0, [pc, #156]	@ (80061d8 <_printf_i+0x238>)
 800613c:	e7e9      	b.n	8006112 <_printf_i+0x172>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	f023 0320 	bic.w	r3, r3, #32
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	e7f6      	b.n	8006136 <_printf_i+0x196>
 8006148:	4616      	mov	r6, r2
 800614a:	e7bd      	b.n	80060c8 <_printf_i+0x128>
 800614c:	6833      	ldr	r3, [r6, #0]
 800614e:	6825      	ldr	r5, [r4, #0]
 8006150:	6961      	ldr	r1, [r4, #20]
 8006152:	1d18      	adds	r0, r3, #4
 8006154:	6030      	str	r0, [r6, #0]
 8006156:	062e      	lsls	r6, r5, #24
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	d501      	bpl.n	8006160 <_printf_i+0x1c0>
 800615c:	6019      	str	r1, [r3, #0]
 800615e:	e002      	b.n	8006166 <_printf_i+0x1c6>
 8006160:	0668      	lsls	r0, r5, #25
 8006162:	d5fb      	bpl.n	800615c <_printf_i+0x1bc>
 8006164:	8019      	strh	r1, [r3, #0]
 8006166:	2300      	movs	r3, #0
 8006168:	6123      	str	r3, [r4, #16]
 800616a:	4616      	mov	r6, r2
 800616c:	e7bc      	b.n	80060e8 <_printf_i+0x148>
 800616e:	6833      	ldr	r3, [r6, #0]
 8006170:	1d1a      	adds	r2, r3, #4
 8006172:	6032      	str	r2, [r6, #0]
 8006174:	681e      	ldr	r6, [r3, #0]
 8006176:	6862      	ldr	r2, [r4, #4]
 8006178:	2100      	movs	r1, #0
 800617a:	4630      	mov	r0, r6
 800617c:	f7fa f858 	bl	8000230 <memchr>
 8006180:	b108      	cbz	r0, 8006186 <_printf_i+0x1e6>
 8006182:	1b80      	subs	r0, r0, r6
 8006184:	6060      	str	r0, [r4, #4]
 8006186:	6863      	ldr	r3, [r4, #4]
 8006188:	6123      	str	r3, [r4, #16]
 800618a:	2300      	movs	r3, #0
 800618c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006190:	e7aa      	b.n	80060e8 <_printf_i+0x148>
 8006192:	6923      	ldr	r3, [r4, #16]
 8006194:	4632      	mov	r2, r6
 8006196:	4649      	mov	r1, r9
 8006198:	4640      	mov	r0, r8
 800619a:	47d0      	blx	sl
 800619c:	3001      	adds	r0, #1
 800619e:	d0ad      	beq.n	80060fc <_printf_i+0x15c>
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	079b      	lsls	r3, r3, #30
 80061a4:	d413      	bmi.n	80061ce <_printf_i+0x22e>
 80061a6:	68e0      	ldr	r0, [r4, #12]
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	4298      	cmp	r0, r3
 80061ac:	bfb8      	it	lt
 80061ae:	4618      	movlt	r0, r3
 80061b0:	e7a6      	b.n	8006100 <_printf_i+0x160>
 80061b2:	2301      	movs	r3, #1
 80061b4:	4632      	mov	r2, r6
 80061b6:	4649      	mov	r1, r9
 80061b8:	4640      	mov	r0, r8
 80061ba:	47d0      	blx	sl
 80061bc:	3001      	adds	r0, #1
 80061be:	d09d      	beq.n	80060fc <_printf_i+0x15c>
 80061c0:	3501      	adds	r5, #1
 80061c2:	68e3      	ldr	r3, [r4, #12]
 80061c4:	9903      	ldr	r1, [sp, #12]
 80061c6:	1a5b      	subs	r3, r3, r1
 80061c8:	42ab      	cmp	r3, r5
 80061ca:	dcf2      	bgt.n	80061b2 <_printf_i+0x212>
 80061cc:	e7eb      	b.n	80061a6 <_printf_i+0x206>
 80061ce:	2500      	movs	r5, #0
 80061d0:	f104 0619 	add.w	r6, r4, #25
 80061d4:	e7f5      	b.n	80061c2 <_printf_i+0x222>
 80061d6:	bf00      	nop
 80061d8:	080064d1 	.word	0x080064d1
 80061dc:	080064e2 	.word	0x080064e2

080061e0 <memmove>:
 80061e0:	4288      	cmp	r0, r1
 80061e2:	b510      	push	{r4, lr}
 80061e4:	eb01 0402 	add.w	r4, r1, r2
 80061e8:	d902      	bls.n	80061f0 <memmove+0x10>
 80061ea:	4284      	cmp	r4, r0
 80061ec:	4623      	mov	r3, r4
 80061ee:	d807      	bhi.n	8006200 <memmove+0x20>
 80061f0:	1e43      	subs	r3, r0, #1
 80061f2:	42a1      	cmp	r1, r4
 80061f4:	d008      	beq.n	8006208 <memmove+0x28>
 80061f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061fe:	e7f8      	b.n	80061f2 <memmove+0x12>
 8006200:	4402      	add	r2, r0
 8006202:	4601      	mov	r1, r0
 8006204:	428a      	cmp	r2, r1
 8006206:	d100      	bne.n	800620a <memmove+0x2a>
 8006208:	bd10      	pop	{r4, pc}
 800620a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800620e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006212:	e7f7      	b.n	8006204 <memmove+0x24>

08006214 <_sbrk_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d06      	ldr	r5, [pc, #24]	@ (8006230 <_sbrk_r+0x1c>)
 8006218:	2300      	movs	r3, #0
 800621a:	4604      	mov	r4, r0
 800621c:	4608      	mov	r0, r1
 800621e:	602b      	str	r3, [r5, #0]
 8006220:	f7fa fe3e 	bl	8000ea0 <_sbrk>
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	d102      	bne.n	800622e <_sbrk_r+0x1a>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	b103      	cbz	r3, 800622e <_sbrk_r+0x1a>
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	bd38      	pop	{r3, r4, r5, pc}
 8006230:	20000370 	.word	0x20000370

08006234 <memcpy>:
 8006234:	440a      	add	r2, r1
 8006236:	4291      	cmp	r1, r2
 8006238:	f100 33ff 	add.w	r3, r0, #4294967295
 800623c:	d100      	bne.n	8006240 <memcpy+0xc>
 800623e:	4770      	bx	lr
 8006240:	b510      	push	{r4, lr}
 8006242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800624a:	4291      	cmp	r1, r2
 800624c:	d1f9      	bne.n	8006242 <memcpy+0xe>
 800624e:	bd10      	pop	{r4, pc}

08006250 <_realloc_r>:
 8006250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006254:	4680      	mov	r8, r0
 8006256:	4615      	mov	r5, r2
 8006258:	460c      	mov	r4, r1
 800625a:	b921      	cbnz	r1, 8006266 <_realloc_r+0x16>
 800625c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006260:	4611      	mov	r1, r2
 8006262:	f7ff bc4b 	b.w	8005afc <_malloc_r>
 8006266:	b92a      	cbnz	r2, 8006274 <_realloc_r+0x24>
 8006268:	f7ff fbdc 	bl	8005a24 <_free_r>
 800626c:	2400      	movs	r4, #0
 800626e:	4620      	mov	r0, r4
 8006270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006274:	f000 f81a 	bl	80062ac <_malloc_usable_size_r>
 8006278:	4285      	cmp	r5, r0
 800627a:	4606      	mov	r6, r0
 800627c:	d802      	bhi.n	8006284 <_realloc_r+0x34>
 800627e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006282:	d8f4      	bhi.n	800626e <_realloc_r+0x1e>
 8006284:	4629      	mov	r1, r5
 8006286:	4640      	mov	r0, r8
 8006288:	f7ff fc38 	bl	8005afc <_malloc_r>
 800628c:	4607      	mov	r7, r0
 800628e:	2800      	cmp	r0, #0
 8006290:	d0ec      	beq.n	800626c <_realloc_r+0x1c>
 8006292:	42b5      	cmp	r5, r6
 8006294:	462a      	mov	r2, r5
 8006296:	4621      	mov	r1, r4
 8006298:	bf28      	it	cs
 800629a:	4632      	movcs	r2, r6
 800629c:	f7ff ffca 	bl	8006234 <memcpy>
 80062a0:	4621      	mov	r1, r4
 80062a2:	4640      	mov	r0, r8
 80062a4:	f7ff fbbe 	bl	8005a24 <_free_r>
 80062a8:	463c      	mov	r4, r7
 80062aa:	e7e0      	b.n	800626e <_realloc_r+0x1e>

080062ac <_malloc_usable_size_r>:
 80062ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062b0:	1f18      	subs	r0, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bfbc      	itt	lt
 80062b6:	580b      	ldrlt	r3, [r1, r0]
 80062b8:	18c0      	addlt	r0, r0, r3
 80062ba:	4770      	bx	lr

080062bc <_init>:
 80062bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062be:	bf00      	nop
 80062c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c2:	bc08      	pop	{r3}
 80062c4:	469e      	mov	lr, r3
 80062c6:	4770      	bx	lr

080062c8 <_fini>:
 80062c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ca:	bf00      	nop
 80062cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ce:	bc08      	pop	{r3}
 80062d0:	469e      	mov	lr, r3
 80062d2:	4770      	bx	lr
