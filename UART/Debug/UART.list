
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080064a0  080064a0  000074a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f0  080066f0  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  080066f0  080066f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f8  080066f8  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f8  080066f8  000076f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066fc  080066fc  000076fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006700  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000064  08006764  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08006764  0000845c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f67  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002821  00000000  00000000  0001cffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0001f820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e95  00000000  00000000  00020ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c5d  00000000  00000000  0002194d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d10  00000000  00000000  000485aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdea8  00000000  00000000  0005e2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005478  00000000  00000000  0015c1a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00161620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006488 	.word	0x08006488

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08006488 	.word	0x08006488

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fea5 	bl	8001312 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f87a 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f9cc 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 f998 	bl	8000904 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d4:	f000 f8c0 	bl	8000758 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 80005d8:	f000 f908 	bl	80007ec <MX_SPI3_Init>
  MX_TIM2_Init();
 80005dc:	f000 f944 	bl	8000868 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // UART CODE //
  //UARTDMAConfig();
  //HAL_UART_Transmit(ส่งด้วย , สิ่งที่ส่ง ,
  sprintf((char*)TxBuffer,"Welcome to WORDLE, You have 5 chances to guess the word\r\n\n");
 80005e0:	492c      	ldr	r1, [pc, #176]	@ (8000694 <main+0xd4>)
 80005e2:	482d      	ldr	r0, [pc, #180]	@ (8000698 <main+0xd8>)
 80005e4:	f005 fab0 	bl	8005b48 <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 80005e8:	482b      	ldr	r0, [pc, #172]	@ (8000698 <main+0xd8>)
 80005ea:	f7ff fe19 	bl	8000220 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	2305      	movs	r3, #5
 80005f4:	4928      	ldr	r1, [pc, #160]	@ (8000698 <main+0xd8>)
 80005f6:	4829      	ldr	r0, [pc, #164]	@ (800069c <main+0xdc>)
 80005f8:	f003 ff8e 	bl	8004518 <HAL_UART_Transmit>
  sprintf((char*)TxBuffer,"PRESS [Button 1] to clear your word\r\n");
 80005fc:	4928      	ldr	r1, [pc, #160]	@ (80006a0 <main+0xe0>)
 80005fe:	4826      	ldr	r0, [pc, #152]	@ (8000698 <main+0xd8>)
 8000600:	f005 faa2 	bl	8005b48 <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000604:	4824      	ldr	r0, [pc, #144]	@ (8000698 <main+0xd8>)
 8000606:	f7ff fe0b 	bl	8000220 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	2305      	movs	r3, #5
 8000610:	4921      	ldr	r1, [pc, #132]	@ (8000698 <main+0xd8>)
 8000612:	4822      	ldr	r0, [pc, #136]	@ (800069c <main+0xdc>)
 8000614:	f003 ff80 	bl	8004518 <HAL_UART_Transmit>
  sprintf((char*)TxBuffer,"PRESS [Button 2] to Restart \n\n");
 8000618:	4922      	ldr	r1, [pc, #136]	@ (80006a4 <main+0xe4>)
 800061a:	481f      	ldr	r0, [pc, #124]	@ (8000698 <main+0xd8>)
 800061c:	f005 fa94 	bl	8005b48 <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000620:	481d      	ldr	r0, [pc, #116]	@ (8000698 <main+0xd8>)
 8000622:	f7ff fdfd 	bl	8000220 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	2305      	movs	r3, #5
 800062c:	491a      	ldr	r1, [pc, #104]	@ (8000698 <main+0xd8>)
 800062e:	481b      	ldr	r0, [pc, #108]	@ (800069c <main+0xdc>)
 8000630:	f003 ff72 	bl	8004518 <HAL_UART_Transmit>
  sprintf((char*)TxBuffer,"Turn CAPLOCK on and begin typing\r\n");
 8000634:	491c      	ldr	r1, [pc, #112]	@ (80006a8 <main+0xe8>)
 8000636:	4818      	ldr	r0, [pc, #96]	@ (8000698 <main+0xd8>)
 8000638:	f005 fa86 	bl	8005b48 <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 800063c:	4816      	ldr	r0, [pc, #88]	@ (8000698 <main+0xd8>)
 800063e:	f7ff fdef 	bl	8000220 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	2305      	movs	r3, #5
 8000648:	4913      	ldr	r1, [pc, #76]	@ (8000698 <main+0xd8>)
 800064a:	4814      	ldr	r0, [pc, #80]	@ (800069c <main+0xdc>)
 800064c:	f003 ff64 	bl	8004518 <HAL_UART_Transmit>
  // UART END //
  // SPI CODE //
  SPI_FirstSetup();
 8000650:	f000 fa1a 	bl	8000a88 <SPI_FirstSetup>
  HAL_TIM_Base_Start_IT(&htim2);
 8000654:	4815      	ldr	r0, [pc, #84]	@ (80006ac <main+0xec>)
 8000656:	f003 f9dd 	bl	8003a14 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UARTPollingMethod();
 800065a:	f000 fb5d 	bl	8000d18 <UARTPollingMethod>
	  //UARTInterruptConfig();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(readFlag && attempt < 5 && point != 5 && RxBuffer[0] != '1' && RxBuffer[4] != '1'){
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <main+0xf0>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f9      	beq.n	800065a <main+0x9a>
 8000666:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <main+0xf4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b04      	cmp	r3, #4
 800066c:	d8f5      	bhi.n	800065a <main+0x9a>
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <main+0xf8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b05      	cmp	r3, #5
 8000674:	d0f1      	beq.n	800065a <main+0x9a>
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <main+0xfc>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b31      	cmp	r3, #49	@ 0x31
 800067c:	d0ed      	beq.n	800065a <main+0x9a>
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <main+0xfc>)
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	2b31      	cmp	r3, #49	@ 0x31
 8000684:	d0e9      	beq.n	800065a <main+0x9a>
		  readFlag = 0;
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <main+0xf0>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
		  Wordle();
 800068c:	f000 fa7e 	bl	8000b8c <Wordle>
	  UARTPollingMethod();
 8000690:	e7e3      	b.n	800065a <main+0x9a>
 8000692:	bf00      	nop
 8000694:	080064a0 	.word	0x080064a0
 8000698:	20000298 	.word	0x20000298
 800069c:	20000080 	.word	0x20000080
 80006a0:	080064dc 	.word	0x080064dc
 80006a4:	08006504 	.word	0x08006504
 80006a8:	08006524 	.word	0x08006524
 80006ac:	20000238 	.word	0x20000238
 80006b0:	200002f0 	.word	0x200002f0
 80006b4:	200002ef 	.word	0x200002ef
 80006b8:	200002ee 	.word	0x200002ee
 80006bc:	20000284 	.word	0x20000284

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	2238      	movs	r2, #56	@ 0x38
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 fa5a 	bl	8005b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f001 fbe6 	bl	8001eb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2340      	movs	r3, #64	@ 0x40
 80006f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006fe:	2304      	movs	r3, #4
 8000700:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000702:	2355      	movs	r3, #85	@ 0x55
 8000704:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fc80 	bl	800201c <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000722:	f000 fbc5 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2303      	movs	r3, #3
 800072c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2104      	movs	r1, #4
 800073e:	4618      	mov	r0, r3
 8000740:	f001 ff7e 	bl	8002640 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800074a:	f000 fbb1 	bl	8000eb0 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800075c:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 800075e:	4a22      	ldr	r2, [pc, #136]	@ (80007e8 <MX_LPUART1_UART_Init+0x90>)
 8000760:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8000762:	4b20      	ldr	r3, [pc, #128]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000768:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b1e      	ldr	r3, [pc, #120]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000776:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800079a:	4812      	ldr	r0, [pc, #72]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 800079c:	f003 fe6c 	bl	8004478 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 fb83 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007aa:	2100      	movs	r1, #0
 80007ac:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 80007ae:	f005 f900 	bl	80059b2 <HAL_UARTEx_SetTxFifoThreshold>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007b8:	f000 fb7a 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4809      	ldr	r0, [pc, #36]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 80007c0:	f005 f935 	bl	8005a2e <HAL_UARTEx_SetRxFifoThreshold>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007ca:	f000 fb71 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_LPUART1_UART_Init+0x8c>)
 80007d0:	f005 f8b6 	bl	8005940 <HAL_UARTEx_DisableFifoMode>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007da:	f000 fb69 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000080 	.word	0x20000080
 80007e8:	40008000 	.word	0x40008000

080007ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <MX_SPI3_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <MX_SPI3_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_SPI3_Init+0x74>)
 80007f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000806:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800080a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_SPI3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_SPI3_Init+0x74>)
 800081a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800081e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000822:	2238      	movs	r2, #56	@ 0x38
 8000824:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_SPI3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_SPI3_Init+0x74>)
 800083a:	2207      	movs	r2, #7
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000846:	2208      	movs	r2, #8
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_SPI3_Init+0x74>)
 800084c:	f002 fb62 	bl	8002f14 <HAL_SPI_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 fb2b 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200001d4 	.word	0x200001d4
 8000864:	40003c00 	.word	0x40003c00

08000868 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000886:	4b1e      	ldr	r3, [pc, #120]	@ (8000900 <MX_TIM2_Init+0x98>)
 8000888:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800088c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <MX_TIM2_Init+0x98>)
 8000890:	f244 2267 	movw	r2, #16999	@ 0x4267
 8000894:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_TIM2_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <MX_TIM2_Init+0x98>)
 800089e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a4:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_TIM2_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <MX_TIM2_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b0:	4813      	ldr	r0, [pc, #76]	@ (8000900 <MX_TIM2_Init+0x98>)
 80008b2:	f003 f857 	bl	8003964 <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008bc:	f000 faf8 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	4619      	mov	r1, r3
 80008cc:	480c      	ldr	r0, [pc, #48]	@ (8000900 <MX_TIM2_Init+0x98>)
 80008ce:	f003 fa69 	bl	8003da4 <HAL_TIM_ConfigClockSource>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008d8:	f000 faea 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_TIM2_Init+0x98>)
 80008ea:	f003 fce9 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80008f4:	f000 fadc 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000238 	.word	0x20000238

08000904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_DMA_Init+0x60>)
 800090c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800090e:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <MX_DMA_Init+0x60>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6493      	str	r3, [r2, #72]	@ 0x48
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <MX_DMA_Init+0x60>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000922:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <MX_DMA_Init+0x60>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000926:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <MX_DMA_Init+0x60>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6493      	str	r3, [r2, #72]	@ 0x48
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <MX_DMA_Init+0x60>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	200b      	movs	r0, #11
 8000940:	f000 fe33 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000944:	200b      	movs	r0, #11
 8000946:	f000 fe4a 	bl	80015de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	200c      	movs	r0, #12
 8000950:	f000 fe2b 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000954:	200c      	movs	r0, #12
 8000956:	f000 fe42 	bl	80015de <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a7c <MX_GPIO_Init+0x114>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4a3e      	ldr	r2, [pc, #248]	@ (8000a7c <MX_GPIO_Init+0x114>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a7c <MX_GPIO_Init+0x114>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000996:	4b39      	ldr	r3, [pc, #228]	@ (8000a7c <MX_GPIO_Init+0x114>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a38      	ldr	r2, [pc, #224]	@ (8000a7c <MX_GPIO_Init+0x114>)
 800099c:	f043 0320 	orr.w	r3, r3, #32
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <MX_GPIO_Init+0x114>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0320 	and.w	r3, r3, #32
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <MX_GPIO_Init+0x114>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a32      	ldr	r2, [pc, #200]	@ (8000a7c <MX_GPIO_Init+0x114>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b30      	ldr	r3, [pc, #192]	@ (8000a7c <MX_GPIO_Init+0x114>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a7c <MX_GPIO_Init+0x114>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a2c      	ldr	r2, [pc, #176]	@ (8000a7c <MX_GPIO_Init+0x114>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a7c <MX_GPIO_Init+0x114>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b27      	ldr	r3, [pc, #156]	@ (8000a7c <MX_GPIO_Init+0x114>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a26      	ldr	r2, [pc, #152]	@ (8000a7c <MX_GPIO_Init+0x114>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b24      	ldr	r3, [pc, #144]	@ (8000a7c <MX_GPIO_Init+0x114>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2120      	movs	r1, #32
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fe:	f001 fa1d 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2104      	movs	r1, #4
 8000a06:	481e      	ldr	r0, [pc, #120]	@ (8000a80 <MX_GPIO_Init+0x118>)
 8000a08:	f001 fa18 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4818      	ldr	r0, [pc, #96]	@ (8000a84 <MX_GPIO_Init+0x11c>)
 8000a24:	f001 f870 	bl	8001b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a28:	2320      	movs	r3, #32
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a42:	f001 f861 	bl	8001b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a46:	2304      	movs	r3, #4
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4808      	ldr	r0, [pc, #32]	@ (8000a80 <MX_GPIO_Init+0x118>)
 8000a5e:	f001 f853 	bl	8001b08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2028      	movs	r0, #40	@ 0x28
 8000a68:	f000 fd9f 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a6c:	2028      	movs	r0, #40	@ 0x28
 8000a6e:	f000 fdb6 	bl	80015de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	@ 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	48000c00 	.word	0x48000c00
 8000a84:	48000800 	.word	0x48000800

08000a88 <SPI_FirstSetup>:

/* USER CODE BEGIN 4 */

/*/ SPI Function begin /*/
void SPI_FirstSetup()//at BEGIN 2
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2104      	movs	r1, #4
 8000a90:	4809      	ldr	r0, [pc, #36]	@ (8000ab8 <SPI_FirstSetup+0x30>)
 8000a92:	f001 f9d3 	bl	8001e3c <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;//write
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <SPI_FirstSetup+0x34>)
 8000a98:	2240      	movs	r2, #64	@ 0x40
 8000a9a:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;//IODIRB
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <SPI_FirstSetup+0x34>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b00000000;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <SPI_FirstSetup+0x34>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ac0 <SPI_FirstSetup+0x38>)
 8000aac:	4903      	ldr	r1, [pc, #12]	@ (8000abc <SPI_FirstSetup+0x34>)
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <SPI_FirstSetup+0x3c>)
 8000ab0:	f002 fadc 	bl	800306c <HAL_SPI_TransmitReceive_IT>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	48000c00 	.word	0x48000c00
 8000abc:	20000300 	.word	0x20000300
 8000ac0:	200002f4 	.word	0x200002f4
 8000ac4:	200001d4 	.word	0x200001d4

08000ac8 <SPI_Worker>:

void SPI_Worker()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000acc:	2104      	movs	r1, #4
 8000ace:	480e      	ldr	r0, [pc, #56]	@ (8000b08 <SPI_Worker+0x40>)
 8000ad0:	f001 f99c 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d013      	beq.n	8000b02 <SPI_Worker+0x3a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000ada:	2200      	movs	r2, #0
 8000adc:	2104      	movs	r1, #4
 8000ade:	480a      	ldr	r0, [pc, #40]	@ (8000b08 <SPI_Worker+0x40>)
 8000ae0:	f001 f9ac 	bl	8001e3c <HAL_GPIO_WritePin>

		SPITx[0] = 0b01000001;//read
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <SPI_Worker+0x44>)
 8000ae6:	2241      	movs	r2, #65	@ 0x41
 8000ae8:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12;
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <SPI_Worker+0x44>)
 8000aec:	2212      	movs	r2, #18
 8000aee:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <SPI_Worker+0x44>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	709a      	strb	r2, [r3, #2]

		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000af6:	2303      	movs	r3, #3
 8000af8:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <SPI_Worker+0x48>)
 8000afa:	4904      	ldr	r1, [pc, #16]	@ (8000b0c <SPI_Worker+0x44>)
 8000afc:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <SPI_Worker+0x4c>)
 8000afe:	f002 fab5 	bl	800306c <HAL_SPI_TransmitReceive_IT>

	}
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	48000c00 	.word	0x48000c00
 8000b0c:	20000300 	.word	0x20000300
 8000b10:	200002f4 	.word	0x200002f4
 8000b14:	200001d4 	.word	0x200001d4

08000b18 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000b20:	2201      	movs	r2, #1
 8000b22:	2104      	movs	r1, #4
 8000b24:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000b26:	f001 f989 	bl	8001e3c <HAL_GPIO_WritePin>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	48000c00 	.word	0x48000c00

08000b38 <ButtonRead>:
void ButtonRead()
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
	if (SPIRx[2]==14)
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <ButtonRead+0x4c>)
 8000b3e:	789b      	ldrb	r3, [r3, #2]
 8000b40:	2b0e      	cmp	r3, #14
 8000b42:	d103      	bne.n	8000b4c <ButtonRead+0x14>
		{
			Switch = 1;
 8000b44:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <ButtonRead+0x50>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		}
	else if (SPIRx[2]==11)
		{
			Switch = 4;
		}
}
 8000b4a:	e016      	b.n	8000b7a <ButtonRead+0x42>
	else if (SPIRx[2]==13)
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <ButtonRead+0x4c>)
 8000b4e:	789b      	ldrb	r3, [r3, #2]
 8000b50:	2b0d      	cmp	r3, #13
 8000b52:	d103      	bne.n	8000b5c <ButtonRead+0x24>
			Switch = 2;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <ButtonRead+0x50>)
 8000b56:	2202      	movs	r2, #2
 8000b58:	701a      	strb	r2, [r3, #0]
}
 8000b5a:	e00e      	b.n	8000b7a <ButtonRead+0x42>
	else if (SPIRx[2]==7)
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <ButtonRead+0x4c>)
 8000b5e:	789b      	ldrb	r3, [r3, #2]
 8000b60:	2b07      	cmp	r3, #7
 8000b62:	d103      	bne.n	8000b6c <ButtonRead+0x34>
			Switch = 3;
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <ButtonRead+0x50>)
 8000b66:	2203      	movs	r2, #3
 8000b68:	701a      	strb	r2, [r3, #0]
}
 8000b6a:	e006      	b.n	8000b7a <ButtonRead+0x42>
	else if (SPIRx[2]==11)
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <ButtonRead+0x4c>)
 8000b6e:	789b      	ldrb	r3, [r3, #2]
 8000b70:	2b0b      	cmp	r3, #11
 8000b72:	d102      	bne.n	8000b7a <ButtonRead+0x42>
			Switch = 4;
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <ButtonRead+0x50>)
 8000b76:	2204      	movs	r2, #4
 8000b78:	701a      	strb	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	200002f4 	.word	0x200002f4
 8000b88:	2000030a 	.word	0x2000030a

08000b8c <Wordle>:
/*/ SPI Function end /*/

void Wordle()
	{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
		//readFlag = 0;
	for(uint8_t i = 0;i <5;i++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	71fb      	strb	r3, [r7, #7]
 8000b96:	e049      	b.n	8000c2c <Wordle+0xa0>
	{
		output[5] = '\0';
 8000b98:	4b53      	ldr	r3, [pc, #332]	@ (8000ce8 <Wordle+0x15c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	715a      	strb	r2, [r3, #5]

		if(Switch == 3) //retry press "-"
 8000b9e:	4b53      	ldr	r3, [pc, #332]	@ (8000cec <Wordle+0x160>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d103      	bne.n	8000bae <Wordle+0x22>
		{
			Switch = 0;
 8000ba6:	4b51      	ldr	r3, [pc, #324]	@ (8000cec <Wordle+0x160>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
//			sprintf((char*)TxBuffer,"Answer Cleared\r\n");
//			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5); // uart1, text , size , timeout
			return;
 8000bac:	e098      	b.n	8000ce0 <Wordle+0x154>
		}
		else if(RxBuffer[i] == wordle[i]){
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	4a4f      	ldr	r2, [pc, #316]	@ (8000cf0 <Wordle+0x164>)
 8000bb2:	5cd2      	ldrb	r2, [r2, r3]
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	494f      	ldr	r1, [pc, #316]	@ (8000cf4 <Wordle+0x168>)
 8000bb8:	5ccb      	ldrb	r3, [r1, r3]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d10c      	bne.n	8000bd8 <Wordle+0x4c>
			output[i] = RxBuffer[i];
 8000bbe:	79fa      	ldrb	r2, [r7, #7]
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	494b      	ldr	r1, [pc, #300]	@ (8000cf0 <Wordle+0x164>)
 8000bc4:	5c89      	ldrb	r1, [r1, r2]
 8000bc6:	4a48      	ldr	r2, [pc, #288]	@ (8000ce8 <Wordle+0x15c>)
 8000bc8:	54d1      	strb	r1, [r2, r3]
			point++;
 8000bca:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf8 <Wordle+0x16c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b49      	ldr	r3, [pc, #292]	@ (8000cf8 <Wordle+0x16c>)
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e015      	b.n	8000c04 <Wordle+0x78>

		}
		else {
			for(uint8_t j=0; j<5;j++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	71bb      	strb	r3, [r7, #6]
 8000bdc:	e00f      	b.n	8000bfe <Wordle+0x72>
			{
				if(RxBuffer[i] == wordle[j])
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4a43      	ldr	r2, [pc, #268]	@ (8000cf0 <Wordle+0x164>)
 8000be2:	5cd2      	ldrb	r2, [r2, r3]
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	4943      	ldr	r1, [pc, #268]	@ (8000cf4 <Wordle+0x168>)
 8000be8:	5ccb      	ldrb	r3, [r1, r3]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d104      	bne.n	8000bf8 <Wordle+0x6c>
				{
					output[i] = '?';
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4a3d      	ldr	r2, [pc, #244]	@ (8000ce8 <Wordle+0x15c>)
 8000bf2:	213f      	movs	r1, #63	@ 0x3f
 8000bf4:	54d1      	strb	r1, [r2, r3]
					break;
 8000bf6:	e005      	b.n	8000c04 <Wordle+0x78>
			for(uint8_t j=0; j<5;j++)
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	79bb      	ldrb	r3, [r7, #6]
 8000c00:	2b04      	cmp	r3, #4
 8000c02:	d9ec      	bls.n	8000bde <Wordle+0x52>
				}
			}
		}
		if(output[i] != '?' && output[i] != RxBuffer[i]){
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	4a38      	ldr	r2, [pc, #224]	@ (8000ce8 <Wordle+0x15c>)
 8000c08:	5cd3      	ldrb	r3, [r2, r3]
 8000c0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c0c:	d00b      	beq.n	8000c26 <Wordle+0x9a>
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4a35      	ldr	r2, [pc, #212]	@ (8000ce8 <Wordle+0x15c>)
 8000c12:	5cd2      	ldrb	r2, [r2, r3]
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	4936      	ldr	r1, [pc, #216]	@ (8000cf0 <Wordle+0x164>)
 8000c18:	5ccb      	ldrb	r3, [r1, r3]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d003      	beq.n	8000c26 <Wordle+0x9a>
			output[i] = '_';
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4a31      	ldr	r2, [pc, #196]	@ (8000ce8 <Wordle+0x15c>)
 8000c22:	215f      	movs	r1, #95	@ 0x5f
 8000c24:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0;i <5;i++)
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d9b2      	bls.n	8000b98 <Wordle+0xc>
		}
	}
	if(point == 5){
 8000c32:	4b31      	ldr	r3, [pc, #196]	@ (8000cf8 <Wordle+0x16c>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d10f      	bne.n	8000c5a <Wordle+0xce>
		sprintf((char*)TxBuffer,"\n Congratulations!\n %s is correct\r\n", output);
 8000c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ce8 <Wordle+0x15c>)
 8000c3c:	492f      	ldr	r1, [pc, #188]	@ (8000cfc <Wordle+0x170>)
 8000c3e:	4830      	ldr	r0, [pc, #192]	@ (8000d00 <Wordle+0x174>)
 8000c40:	f004 ff82 	bl	8005b48 <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000c44:	482e      	ldr	r0, [pc, #184]	@ (8000d00 <Wordle+0x174>)
 8000c46:	f7ff faeb 	bl	8000220 <strlen>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	2305      	movs	r3, #5
 8000c50:	492b      	ldr	r1, [pc, #172]	@ (8000d00 <Wordle+0x174>)
 8000c52:	482c      	ldr	r0, [pc, #176]	@ (8000d04 <Wordle+0x178>)
 8000c54:	f003 fc60 	bl	8004518 <HAL_UART_Transmit>
 8000c58:	e042      	b.n	8000ce0 <Wordle+0x154>
	}
	else{
		point = 0;
 8000c5a:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <Wordle+0x16c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
		attempt++;
 8000c60:	4b29      	ldr	r3, [pc, #164]	@ (8000d08 <Wordle+0x17c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <Wordle+0x17c>)
 8000c6a:	701a      	strb	r2, [r3, #0]
		if(attempt >= 5){
 8000c6c:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <Wordle+0x17c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d90f      	bls.n	8000c94 <Wordle+0x108>
				sprintf((char*)TxBuffer,"\nGame Over!\r\n\n Correct Answer is %s\n\r\n", (char*)wordle);
 8000c74:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf4 <Wordle+0x168>)
 8000c76:	4925      	ldr	r1, [pc, #148]	@ (8000d0c <Wordle+0x180>)
 8000c78:	4821      	ldr	r0, [pc, #132]	@ (8000d00 <Wordle+0x174>)
 8000c7a:	f004 ff65 	bl	8005b48 <siprintf>
				HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000c7e:	4820      	ldr	r0, [pc, #128]	@ (8000d00 <Wordle+0x174>)
 8000c80:	f7ff face 	bl	8000220 <strlen>
 8000c84:	4603      	mov	r3, r0
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	2305      	movs	r3, #5
 8000c8a:	491d      	ldr	r1, [pc, #116]	@ (8000d00 <Wordle+0x174>)
 8000c8c:	481d      	ldr	r0, [pc, #116]	@ (8000d04 <Wordle+0x178>)
 8000c8e:	f003 fc43 	bl	8004518 <HAL_UART_Transmit>
 8000c92:	e025      	b.n	8000ce0 <Wordle+0x154>
		}
		else if(RxBuffer[1] != '1'){
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <Wordle+0x164>)
 8000c96:	785b      	ldrb	r3, [r3, #1]
 8000c98:	2b31      	cmp	r3, #49	@ 0x31
 8000c9a:	d021      	beq.n	8000ce0 <Wordle+0x154>
			sprintf((char*)TxBuffer,"Wrong Answer \n Your Word : %s\r\n", (char*)output);
 8000c9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <Wordle+0x15c>)
 8000c9e:	491c      	ldr	r1, [pc, #112]	@ (8000d10 <Wordle+0x184>)
 8000ca0:	4817      	ldr	r0, [pc, #92]	@ (8000d00 <Wordle+0x174>)
 8000ca2:	f004 ff51 	bl	8005b48 <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000ca6:	4816      	ldr	r0, [pc, #88]	@ (8000d00 <Wordle+0x174>)
 8000ca8:	f7ff faba 	bl	8000220 <strlen>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	4913      	ldr	r1, [pc, #76]	@ (8000d00 <Wordle+0x174>)
 8000cb4:	4813      	ldr	r0, [pc, #76]	@ (8000d04 <Wordle+0x178>)
 8000cb6:	f003 fc2f 	bl	8004518 <HAL_UART_Transmit>
			sprintf((char*)TxBuffer,"Remaining Chances: %d/5 \r\n", (int)(5-attempt));
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <Wordle+0x17c>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	f1c3 0305 	rsb	r3, r3, #5
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4913      	ldr	r1, [pc, #76]	@ (8000d14 <Wordle+0x188>)
 8000cc6:	480e      	ldr	r0, [pc, #56]	@ (8000d00 <Wordle+0x174>)
 8000cc8:	f004 ff3e 	bl	8005b48 <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <Wordle+0x174>)
 8000cce:	f7ff faa7 	bl	8000220 <strlen>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	4909      	ldr	r1, [pc, #36]	@ (8000d00 <Wordle+0x174>)
 8000cda:	480a      	ldr	r0, [pc, #40]	@ (8000d04 <Wordle+0x178>)
 8000cdc:	f003 fc1c 	bl	8004518 <HAL_UART_Transmit>
		}

	}

}
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200002e8 	.word	0x200002e8
 8000cec:	2000030a 	.word	0x2000030a
 8000cf0:	20000284 	.word	0x20000284
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	200002ee 	.word	0x200002ee
 8000cfc:	08006548 	.word	0x08006548
 8000d00:	20000298 	.word	0x20000298
 8000d04:	20000080 	.word	0x20000080
 8000d08:	200002ef 	.word	0x200002ef
 8000d0c:	0800656c 	.word	0x0800656c
 8000d10:	08006594 	.word	0x08006594
 8000d14:	080065b4 	.word	0x080065b4

08000d18 <UARTPollingMethod>:

void UARTPollingMethod()
	{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
	//read UART 10 char with in 10s
	HAL_StatusTypeDef HAL_status = HAL_UART_Receive(&hlpuart1, RxBuffer, 5, 15000);
 8000d1e:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8000d22:	2205      	movs	r2, #5
 8000d24:	492c      	ldr	r1, [pc, #176]	@ (8000dd8 <UARTPollingMethod+0xc0>)
 8000d26:	482d      	ldr	r0, [pc, #180]	@ (8000ddc <UARTPollingMethod+0xc4>)
 8000d28:	f003 fc84 	bl	8004634 <HAL_UART_Receive>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71fb      	strb	r3, [r7, #7]

	//if complete read 5 char
	if(HAL_status == HAL_OK)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d12b      	bne.n	8000d8e <UARTPollingMethod+0x76>
	{
		readFlag = 1;
 8000d36:	4b2a      	ldr	r3, [pc, #168]	@ (8000de0 <UARTPollingMethod+0xc8>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
		RxBuffer[5] = '\0';
 8000d3c:	4b26      	ldr	r3, [pc, #152]	@ (8000dd8 <UARTPollingMethod+0xc0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	715a      	strb	r2, [r3, #5]
		if(Switch == 3){
 8000d42:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <UARTPollingMethod+0xcc>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d104      	bne.n	8000d54 <UARTPollingMethod+0x3c>
			sprintf((char*)TxBuffer,"Completed\r\n");
 8000d4a:	4927      	ldr	r1, [pc, #156]	@ (8000de8 <UARTPollingMethod+0xd0>)
 8000d4c:	4827      	ldr	r0, [pc, #156]	@ (8000dec <UARTPollingMethod+0xd4>)
 8000d4e:	f004 fefb 	bl	8005b48 <siprintf>
 8000d52:	e011      	b.n	8000d78 <UARTPollingMethod+0x60>
		}
		else if(attempt >= 5 || point == 5){
 8000d54:	4b26      	ldr	r3, [pc, #152]	@ (8000df0 <UARTPollingMethod+0xd8>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d803      	bhi.n	8000d64 <UARTPollingMethod+0x4c>
 8000d5c:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <UARTPollingMethod+0xdc>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b05      	cmp	r3, #5
 8000d62:	d104      	bne.n	8000d6e <UARTPollingMethod+0x56>
			sprintf((char*)TxBuffer,"Game Ended, press [Button 2] to re-attempt\r\n");
 8000d64:	4924      	ldr	r1, [pc, #144]	@ (8000df8 <UARTPollingMethod+0xe0>)
 8000d66:	4821      	ldr	r0, [pc, #132]	@ (8000dec <UARTPollingMethod+0xd4>)
 8000d68:	f004 feee 	bl	8005b48 <siprintf>
 8000d6c:	e004      	b.n	8000d78 <UARTPollingMethod+0x60>
		}
		else{
			sprintf((char*)TxBuffer,"Your answer : %s\r\n",(char*)RxBuffer);
 8000d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000dd8 <UARTPollingMethod+0xc0>)
 8000d70:	4922      	ldr	r1, [pc, #136]	@ (8000dfc <UARTPollingMethod+0xe4>)
 8000d72:	481e      	ldr	r0, [pc, #120]	@ (8000dec <UARTPollingMethod+0xd4>)
 8000d74:	f004 fee8 	bl	8005b48 <siprintf>
		}
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000d78:	481c      	ldr	r0, [pc, #112]	@ (8000dec <UARTPollingMethod+0xd4>)
 8000d7a:	f7ff fa51 	bl	8000220 <strlen>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	2305      	movs	r3, #5
 8000d84:	4919      	ldr	r1, [pc, #100]	@ (8000dec <UARTPollingMethod+0xd4>)
 8000d86:	4815      	ldr	r0, [pc, #84]	@ (8000ddc <UARTPollingMethod+0xc4>)
 8000d88:	f003 fbc6 	bl	8004518 <HAL_UART_Transmit>
		//return received char
		sprintf((char*)TxBuffer,"Make sure to turn CAPLOCK on before typing\r\n");
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);

	}
}
 8000d8c:	e01f      	b.n	8000dce <UARTPollingMethod+0xb6>
	else if(HAL_status == HAL_TIMEOUT)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d11c      	bne.n	8000dce <UARTPollingMethod+0xb6>
		uint32_t lastCharPos = hlpuart1.RxXferSize - hlpuart1.RxXferCount;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <UARTPollingMethod+0xc4>)
 8000d96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <UARTPollingMethod+0xc4>)
 8000d9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	603b      	str	r3, [r7, #0]
		RxBuffer[lastCharPos] = '\0';
 8000da8:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd8 <UARTPollingMethod+0xc0>)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	4413      	add	r3, r2
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
		sprintf((char*)TxBuffer,"Make sure to turn CAPLOCK on before typing\r\n");
 8000db2:	4913      	ldr	r1, [pc, #76]	@ (8000e00 <UARTPollingMethod+0xe8>)
 8000db4:	480d      	ldr	r0, [pc, #52]	@ (8000dec <UARTPollingMethod+0xd4>)
 8000db6:	f004 fec7 	bl	8005b48 <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000dba:	480c      	ldr	r0, [pc, #48]	@ (8000dec <UARTPollingMethod+0xd4>)
 8000dbc:	f7ff fa30 	bl	8000220 <strlen>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	4909      	ldr	r1, [pc, #36]	@ (8000dec <UARTPollingMethod+0xd4>)
 8000dc8:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <UARTPollingMethod+0xc4>)
 8000dca:	f003 fba5 	bl	8004518 <HAL_UART_Transmit>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000284 	.word	0x20000284
 8000ddc:	20000080 	.word	0x20000080
 8000de0:	200002f0 	.word	0x200002f0
 8000de4:	2000030a 	.word	0x2000030a
 8000de8:	080065d0 	.word	0x080065d0
 8000dec:	20000298 	.word	0x20000298
 8000df0:	200002ef 	.word	0x200002ef
 8000df4:	200002ee 	.word	0x200002ee
 8000df8:	080065dc 	.word	0x080065dc
 8000dfc:	0800660c 	.word	0x0800660c
 8000e00:	08006620 	.word	0x08006620

08000e04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d137      	bne.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		  SPI_Worker();
 8000e14:	f7ff fe58 	bl	8000ac8 <SPI_Worker>
		  ButtonRead();
 8000e18:	f7ff fe8e 	bl	8000b38 <ButtonRead>
			if(Switch == 2){
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d11a      	bne.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x56>
				Switch = 3;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e26:	2203      	movs	r2, #3
 8000e28:	701a      	strb	r2, [r3, #0]
				point = 0;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
				attempt = 0;
 8000e30:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
				RxBuffer[0] = '1';
 8000e36:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e38:	2231      	movs	r2, #49	@ 0x31
 8000e3a:	701a      	strb	r2, [r3, #0]
				sprintf((char*)TxBuffer,"Restarting\r\n");
 8000e3c:	4918      	ldr	r1, [pc, #96]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e3e:	4819      	ldr	r0, [pc, #100]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e40:	f004 fe82 	bl	8005b48 <siprintf>
				HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000e44:	4817      	ldr	r0, [pc, #92]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e46:	f7ff f9eb 	bl	8000220 <strlen>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	2305      	movs	r3, #5
 8000e50:	4914      	ldr	r1, [pc, #80]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e52:	4815      	ldr	r0, [pc, #84]	@ (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000e54:	f003 fb60 	bl	8004518 <HAL_UART_Transmit>
				Switch = 3;
				sprintf((char*)TxBuffer,"Submit message to clear\r\n");
				HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
			}
	}
}
 8000e58:	e014      	b.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x80>
			else if(Switch == 1) //retry press "-"
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d110      	bne.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x80>
				Switch = 3;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e64:	2203      	movs	r2, #3
 8000e66:	701a      	strb	r2, [r3, #0]
				sprintf((char*)TxBuffer,"Submit message to clear\r\n");
 8000e68:	4910      	ldr	r1, [pc, #64]	@ (8000eac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e6a:	480e      	ldr	r0, [pc, #56]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e6c:	f004 fe6c 	bl	8005b48 <siprintf>
				HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000e70:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e72:	f7ff f9d5 	bl	8000220 <strlen>
 8000e76:	4603      	mov	r3, r0
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	4909      	ldr	r1, [pc, #36]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e7e:	480a      	ldr	r0, [pc, #40]	@ (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000e80:	f003 fb4a 	bl	8004518 <HAL_UART_Transmit>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000238 	.word	0x20000238
 8000e90:	2000030a 	.word	0x2000030a
 8000e94:	200002ee 	.word	0x200002ee
 8000e98:	200002ef 	.word	0x200002ef
 8000e9c:	20000284 	.word	0x20000284
 8000ea0:	08006650 	.word	0x08006650
 8000ea4:	20000298 	.word	0x20000298
 8000ea8:	20000080 	.word	0x20000080
 8000eac:	08006660 	.word	0x08006660

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <Error_Handler+0x8>

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_MspInit+0x44>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ede:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ef2:	f001 f883 	bl	8001ffc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09e      	sub	sp, #120	@ 0x78
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2254      	movs	r2, #84	@ 0x54
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f004 fe2f 	bl	8005b88 <memset>
  if(huart->Instance==LPUART1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a4d      	ldr	r2, [pc, #308]	@ (8001064 <HAL_UART_MspInit+0x160>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	f040 8092 	bne.w	800105a <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f36:	2320      	movs	r3, #32
 8000f38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 fd98 	bl	8002a78 <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f4e:	f7ff ffaf 	bl	8000eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f52:	4b45      	ldr	r3, [pc, #276]	@ (8001068 <HAL_UART_MspInit+0x164>)
 8000f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f56:	4a44      	ldr	r2, [pc, #272]	@ (8001068 <HAL_UART_MspInit+0x164>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000f5e:	4b42      	ldr	r3, [pc, #264]	@ (8001068 <HAL_UART_MspInit+0x164>)
 8000f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001068 <HAL_UART_MspInit+0x164>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001068 <HAL_UART_MspInit+0x164>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f76:	4b3c      	ldr	r3, [pc, #240]	@ (8001068 <HAL_UART_MspInit+0x164>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000f82:	230c      	movs	r3, #12
 8000f84:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f92:	230c      	movs	r3, #12
 8000f94:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa0:	f000 fdb2 	bl	8001b08 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000fa4:	4b31      	ldr	r3, [pc, #196]	@ (800106c <HAL_UART_MspInit+0x168>)
 8000fa6:	4a32      	ldr	r2, [pc, #200]	@ (8001070 <HAL_UART_MspInit+0x16c>)
 8000fa8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000faa:	4b30      	ldr	r3, [pc, #192]	@ (800106c <HAL_UART_MspInit+0x168>)
 8000fac:	2222      	movs	r2, #34	@ 0x22
 8000fae:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800106c <HAL_UART_MspInit+0x168>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800106c <HAL_UART_MspInit+0x168>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <HAL_UART_MspInit+0x168>)
 8000fbe:	2280      	movs	r2, #128	@ 0x80
 8000fc0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800106c <HAL_UART_MspInit+0x168>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc8:	4b28      	ldr	r3, [pc, #160]	@ (800106c <HAL_UART_MspInit+0x168>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fce:	4b27      	ldr	r3, [pc, #156]	@ (800106c <HAL_UART_MspInit+0x168>)
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd4:	4b25      	ldr	r3, [pc, #148]	@ (800106c <HAL_UART_MspInit+0x168>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000fda:	4824      	ldr	r0, [pc, #144]	@ (800106c <HAL_UART_MspInit+0x168>)
 8000fdc:	f000 fb1a 	bl	8001614 <HAL_DMA_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000fe6:	f7ff ff63 	bl	8000eb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a1f      	ldr	r2, [pc, #124]	@ (800106c <HAL_UART_MspInit+0x168>)
 8000fee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800106c <HAL_UART_MspInit+0x168>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <HAL_UART_MspInit+0x170>)
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8001078 <HAL_UART_MspInit+0x174>)
 8000ffc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <HAL_UART_MspInit+0x170>)
 8001000:	2223      	movs	r2, #35	@ 0x23
 8001002:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001004:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <HAL_UART_MspInit+0x170>)
 8001006:	2210      	movs	r2, #16
 8001008:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800100a:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <HAL_UART_MspInit+0x170>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <HAL_UART_MspInit+0x170>)
 8001012:	2280      	movs	r2, #128	@ 0x80
 8001014:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <HAL_UART_MspInit+0x170>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_UART_MspInit+0x170>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001022:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <HAL_UART_MspInit+0x170>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_UART_MspInit+0x170>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800102e:	4811      	ldr	r0, [pc, #68]	@ (8001074 <HAL_UART_MspInit+0x170>)
 8001030:	f000 faf0 	bl	8001614 <HAL_DMA_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800103a:	f7ff ff39 	bl	8000eb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a0c      	ldr	r2, [pc, #48]	@ (8001074 <HAL_UART_MspInit+0x170>)
 8001042:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001044:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <HAL_UART_MspInit+0x170>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	205b      	movs	r0, #91	@ 0x5b
 8001050:	f000 faab 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001054:	205b      	movs	r0, #91	@ 0x5b
 8001056:	f000 fac2 	bl	80015de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3778      	adds	r7, #120	@ 0x78
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40008000 	.word	0x40008000
 8001068:	40021000 	.word	0x40021000
 800106c:	20000114 	.word	0x20000114
 8001070:	40020008 	.word	0x40020008
 8001074:	20000174 	.word	0x20000174
 8001078:	4002001c 	.word	0x4002001c

0800107c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1b      	ldr	r2, [pc, #108]	@ (8001108 <HAL_SPI_MspInit+0x8c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d130      	bne.n	8001100 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800109e:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HAL_SPI_MspInit+0x90>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a2:	4a1a      	ldr	r2, [pc, #104]	@ (800110c <HAL_SPI_MspInit+0x90>)
 80010a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_SPI_MspInit+0x90>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_SPI_MspInit+0x90>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	4a14      	ldr	r2, [pc, #80]	@ (800110c <HAL_SPI_MspInit+0x90>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_SPI_MspInit+0x90>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80010ce:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010e0:	2306      	movs	r3, #6
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4809      	ldr	r0, [pc, #36]	@ (8001110 <HAL_SPI_MspInit+0x94>)
 80010ec:	f000 fd0c 	bl	8001b08 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2033      	movs	r0, #51	@ 0x33
 80010f6:	f000 fa58 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80010fa:	2033      	movs	r0, #51	@ 0x33
 80010fc:	f000 fa6f 	bl	80015de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	@ 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40003c00 	.word	0x40003c00
 800110c:	40021000 	.word	0x40021000
 8001110:	48000800 	.word	0x48000800

08001114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001124:	d113      	bne.n	800114e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <HAL_TIM_Base_MspInit+0x44>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <HAL_TIM_Base_MspInit+0x44>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6593      	str	r3, [r2, #88]	@ 0x58
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <HAL_TIM_Base_MspInit+0x44>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	201c      	movs	r0, #28
 8001144:	f000 fa31 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001148:	201c      	movs	r0, #28
 800114a:	f000 fa48 	bl	80015de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <NMI_Handler+0x4>

08001164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <MemManage_Handler+0x4>

08001174 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <UsageFault_Handler+0x4>

08001184 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b2:	f000 f901 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <DMA1_Channel1_IRQHandler+0x10>)
 80011c2:	f000 fb8f 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000114 	.word	0x20000114

080011d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <DMA1_Channel2_IRQHandler+0x10>)
 80011d6:	f000 fb85 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000174 	.word	0x20000174

080011e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <TIM2_IRQHandler+0x10>)
 80011ea:	f002 fc8b 	bl	8003b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000238 	.word	0x20000238

080011f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011fc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001200:	f000 fe34 	bl	8001e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <SPI3_IRQHandler+0x10>)
 800120e:	f001 ffdb 	bl	80031c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200001d4 	.word	0x200001d4

0800121c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <LPUART1_IRQHandler+0x10>)
 8001222:	f003 facf 	bl	80047c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000080 	.word	0x20000080

08001230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001238:	4a14      	ldr	r2, [pc, #80]	@ (800128c <_sbrk+0x5c>)
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <_sbrk+0x60>)
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <_sbrk+0x64>)
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <_sbrk+0x68>)
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	429a      	cmp	r2, r3
 800125e:	d207      	bcs.n	8001270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001260:	f004 fc9a 	bl	8005b98 <__errno>
 8001264:	4603      	mov	r3, r0
 8001266:	220c      	movs	r2, #12
 8001268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	e009      	b.n	8001284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001276:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <_sbrk+0x64>)
 8001280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20020000 	.word	0x20020000
 8001290:	00000400 	.word	0x00000400
 8001294:	2000030c 	.word	0x2000030c
 8001298:	20000460 	.word	0x20000460

0800129c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <SystemInit+0x20>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a6:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <SystemInit+0x20>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c0:	480d      	ldr	r0, [pc, #52]	@ (80012f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c4:	f7ff ffea 	bl	800129c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c8:	480c      	ldr	r0, [pc, #48]	@ (80012fc <LoopForever+0x6>)
  ldr r1, =_edata
 80012ca:	490d      	ldr	r1, [pc, #52]	@ (8001300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <LoopForever+0xe>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e0:	4c0a      	ldr	r4, [pc, #40]	@ (800130c <LoopForever+0x16>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ee:	f004 fc59 	bl	8005ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f2:	f7ff f965 	bl	80005c0 <main>

080012f6 <LoopForever>:

LoopForever:
    b LoopForever
 80012f6:	e7fe      	b.n	80012f6 <LoopForever>
  ldr   r0, =_estack
 80012f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001304:	08006700 	.word	0x08006700
  ldr r2, =_sbss
 8001308:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800130c:	2000045c 	.word	0x2000045c

08001310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC1_2_IRQHandler>

08001312 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f939 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f80e 	bl	8001344 <HAL_InitTick>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	e001      	b.n	8001338 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001334:	f7ff fdc2 	bl	8000ebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001338:	79fb      	ldrb	r3, [r7, #7]

}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001350:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <HAL_InitTick+0x68>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d022      	beq.n	800139e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001358:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <HAL_InitTick+0x6c>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <HAL_InitTick+0x68>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001364:	fbb1 f3f3 	udiv	r3, r1, r3
 8001368:	fbb2 f3f3 	udiv	r3, r2, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f944 	bl	80015fa <HAL_SYSTICK_Config>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10f      	bne.n	8001398 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b0f      	cmp	r3, #15
 800137c:	d809      	bhi.n	8001392 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137e:	2200      	movs	r2, #0
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	f04f 30ff 	mov.w	r0, #4294967295
 8001386:	f000 f910 	bl	80015aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800138a:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <HAL_InitTick+0x70>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	e007      	b.n	80013a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e004      	b.n	80013a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e001      	b.n	80013a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000010 	.word	0x20000010
 80013b0:	20000008 	.word	0x20000008
 80013b4:	2000000c 	.word	0x2000000c

080013b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_IncTick+0x1c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_IncTick+0x20>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a03      	ldr	r2, [pc, #12]	@ (80013d4 <HAL_IncTick+0x1c>)
 80013c8:	6013      	str	r3, [r2, #0]
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20000310 	.word	0x20000310
 80013d8:	20000010 	.word	0x20000010

080013dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b03      	ldr	r3, [pc, #12]	@ (80013f0 <HAL_GetTick+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000310 	.word	0x20000310

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4907      	ldr	r1, [pc, #28]	@ (8001490 <__NVIC_EnableIRQ+0x38>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	@ (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	@ (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	@ 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	@ 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f7ff ff8e 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff29 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b8:	f7ff ff40 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff90 	bl	80014e8 <NVIC_EncodePriority>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff5f 	bl	8001494 <__NVIC_SetPriority>
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff33 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffa4 	bl	8001550 <SysTick_Config>
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e08d      	b.n	8001742 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4b47      	ldr	r3, [pc, #284]	@ (800174c <HAL_DMA_Init+0x138>)
 800162e:	429a      	cmp	r2, r3
 8001630:	d80f      	bhi.n	8001652 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4b45      	ldr	r3, [pc, #276]	@ (8001750 <HAL_DMA_Init+0x13c>)
 800163a:	4413      	add	r3, r2
 800163c:	4a45      	ldr	r2, [pc, #276]	@ (8001754 <HAL_DMA_Init+0x140>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	009a      	lsls	r2, r3, #2
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a42      	ldr	r2, [pc, #264]	@ (8001758 <HAL_DMA_Init+0x144>)
 800164e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001650:	e00e      	b.n	8001670 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	4b40      	ldr	r3, [pc, #256]	@ (800175c <HAL_DMA_Init+0x148>)
 800165a:	4413      	add	r3, r2
 800165c:	4a3d      	ldr	r2, [pc, #244]	@ (8001754 <HAL_DMA_Init+0x140>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	009a      	lsls	r2, r3, #2
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a3c      	ldr	r2, [pc, #240]	@ (8001760 <HAL_DMA_Init+0x14c>)
 800166e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800168a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f9be 	bl	8001a44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016d0:	d102      	bne.n	80016d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016ec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d010      	beq.n	8001718 <HAL_DMA_Init+0x104>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d80c      	bhi.n	8001718 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f9de 	bl	8001ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	e008      	b.n	800172a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40020407 	.word	0x40020407
 8001750:	bffdfff8 	.word	0xbffdfff8
 8001754:	cccccccd 	.word	0xcccccccd
 8001758:	40020000 	.word	0x40020000
 800175c:	bffdfbf8 	.word	0xbffdfbf8
 8001760:	40020400 	.word	0x40020400

08001764 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d005      	beq.n	8001788 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2204      	movs	r2, #4
 8001780:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	e037      	b.n	80017f8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 020e 	bic.w	r2, r2, #14
 8001796:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017a6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ca:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017d4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00c      	beq.n	80017f8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017ec:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017f6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001808:	7bfb      	ldrb	r3, [r7, #15]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d00d      	beq.n	800184a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2204      	movs	r2, #4
 8001832:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
 8001848:	e047      	b.n	80018da <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 020e 	bic.w	r2, r2, #14
 8001858:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	f003 021f 	and.w	r2, r3, #31
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	2101      	movs	r1, #1
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001896:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
    }
  }
  return status;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2204      	movs	r2, #4
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d026      	beq.n	800195e <HAL_DMA_IRQHandler+0x7a>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b00      	cmp	r3, #0
 8001918:	d021      	beq.n	800195e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	2b00      	cmp	r3, #0
 8001926:	d107      	bne.n	8001938 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0204 	bic.w	r2, r2, #4
 8001936:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	2104      	movs	r1, #4
 8001946:	fa01 f202 	lsl.w	r2, r1, r2
 800194a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	2b00      	cmp	r3, #0
 8001952:	d071      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800195c:	e06c      	b.n	8001a38 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2202      	movs	r2, #2
 8001968:	409a      	lsls	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4013      	ands	r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d02e      	beq.n	80019d0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d029      	beq.n	80019d0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10b      	bne.n	80019a2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 020a 	bic.w	r2, r2, #10
 8001998:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f003 021f 	and.w	r2, r3, #31
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	2102      	movs	r1, #2
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d038      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80019ce:	e033      	b.n	8001a38 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	2208      	movs	r2, #8
 80019da:	409a      	lsls	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d02a      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d025      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 020e 	bic.w	r2, r2, #14
 80019fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a02:	f003 021f 	and.w	r2, r3, #31
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a10:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
}
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d802      	bhi.n	8001a5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e001      	b.n	8001a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001a60:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	3b08      	subs	r3, #8
 8001a6e:	4a12      	ldr	r2, [pc, #72]	@ (8001ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	009a      	lsls	r2, r3, #2
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4413      	add	r3, r2
 8001a84:	461a      	mov	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001abc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001a8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	2201      	movs	r2, #1
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a9e:	bf00      	nop
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40020407 	.word	0x40020407
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020820 	.word	0x40020820
 8001ab8:	cccccccd 	.word	0xcccccccd
 8001abc:	40020880 	.word	0x40020880

08001ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a08      	ldr	r2, [pc, #32]	@ (8001b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ae2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	2201      	movs	r2, #1
 8001aee:	409a      	lsls	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	1000823f 	.word	0x1000823f
 8001b04:	40020940 	.word	0x40020940

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b16:	e15a      	b.n	8001dce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	4013      	ands	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 814c 	beq.w	8001dc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d005      	beq.n	8001b48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d130      	bne.n	8001baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b7e:	2201      	movs	r2, #1
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	f003 0201 	and.w	r2, r3, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d017      	beq.n	8001be6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d123      	bne.n	8001c3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	08da      	lsrs	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3208      	adds	r2, #8
 8001bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	08da      	lsrs	r2, r3, #3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3208      	adds	r2, #8
 8001c34:	6939      	ldr	r1, [r7, #16]
 8001c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	2203      	movs	r2, #3
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0203 	and.w	r2, r3, #3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 80a6 	beq.w	8001dc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001dec <HAL_GPIO_Init+0x2e4>)
 8001c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c80:	4a5a      	ldr	r2, [pc, #360]	@ (8001dec <HAL_GPIO_Init+0x2e4>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c88:	4b58      	ldr	r3, [pc, #352]	@ (8001dec <HAL_GPIO_Init+0x2e4>)
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c94:	4a56      	ldr	r2, [pc, #344]	@ (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cbe:	d01f      	beq.n	8001d00 <HAL_GPIO_Init+0x1f8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a4c      	ldr	r2, [pc, #304]	@ (8001df4 <HAL_GPIO_Init+0x2ec>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d019      	beq.n	8001cfc <HAL_GPIO_Init+0x1f4>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a4b      	ldr	r2, [pc, #300]	@ (8001df8 <HAL_GPIO_Init+0x2f0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d013      	beq.n	8001cf8 <HAL_GPIO_Init+0x1f0>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a4a      	ldr	r2, [pc, #296]	@ (8001dfc <HAL_GPIO_Init+0x2f4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_GPIO_Init+0x1ec>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a49      	ldr	r2, [pc, #292]	@ (8001e00 <HAL_GPIO_Init+0x2f8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d007      	beq.n	8001cf0 <HAL_GPIO_Init+0x1e8>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a48      	ldr	r2, [pc, #288]	@ (8001e04 <HAL_GPIO_Init+0x2fc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d101      	bne.n	8001cec <HAL_GPIO_Init+0x1e4>
 8001ce8:	2305      	movs	r3, #5
 8001cea:	e00a      	b.n	8001d02 <HAL_GPIO_Init+0x1fa>
 8001cec:	2306      	movs	r3, #6
 8001cee:	e008      	b.n	8001d02 <HAL_GPIO_Init+0x1fa>
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	e006      	b.n	8001d02 <HAL_GPIO_Init+0x1fa>
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e004      	b.n	8001d02 <HAL_GPIO_Init+0x1fa>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e002      	b.n	8001d02 <HAL_GPIO_Init+0x1fa>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <HAL_GPIO_Init+0x1fa>
 8001d00:	2300      	movs	r3, #0
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	f002 0203 	and.w	r2, r2, #3
 8001d08:	0092      	lsls	r2, r2, #2
 8001d0a:	4093      	lsls	r3, r2
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d12:	4937      	ldr	r1, [pc, #220]	@ (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	3302      	adds	r3, #2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d20:	4b39      	ldr	r3, [pc, #228]	@ (8001e08 <HAL_GPIO_Init+0x300>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d44:	4a30      	ldr	r2, [pc, #192]	@ (8001e08 <HAL_GPIO_Init+0x300>)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e08 <HAL_GPIO_Init+0x300>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d6e:	4a26      	ldr	r2, [pc, #152]	@ (8001e08 <HAL_GPIO_Init+0x300>)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d74:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <HAL_GPIO_Init+0x300>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d98:	4a1b      	ldr	r2, [pc, #108]	@ (8001e08 <HAL_GPIO_Init+0x300>)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <HAL_GPIO_Init+0x300>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dc2:	4a11      	ldr	r2, [pc, #68]	@ (8001e08 <HAL_GPIO_Init+0x300>)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f47f ae9d 	bne.w	8001b18 <HAL_GPIO_Init+0x10>
  }
}
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40010000 	.word	0x40010000
 8001df4:	48000400 	.word	0x48000400
 8001df8:	48000800 	.word	0x48000800
 8001dfc:	48000c00 	.word	0x48000c00
 8001e00:	48001000 	.word	0x48001000
 8001e04:	48001400 	.word	0x48001400
 8001e08:	40010400 	.word	0x40010400

08001e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	887b      	ldrh	r3, [r7, #2]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	e001      	b.n	8001e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e76:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e82:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f806 	bl	8001e9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d141      	bne.n	8001f46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ece:	d131      	bne.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ed0:	4b47      	ldr	r3, [pc, #284]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ed6:	4a46      	ldr	r2, [pc, #280]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee0:	4b43      	ldr	r3, [pc, #268]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ee8:	4a41      	ldr	r2, [pc, #260]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ef0:	4b40      	ldr	r3, [pc, #256]	@ (8001ff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2232      	movs	r2, #50	@ 0x32
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	0c9b      	lsrs	r3, r3, #18
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f06:	e002      	b.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f0e:	4b38      	ldr	r3, [pc, #224]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f1a:	d102      	bne.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f2      	bne.n	8001f08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f22:	4b33      	ldr	r3, [pc, #204]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f2e:	d158      	bne.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e057      	b.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f34:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f44:	e04d      	b.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f4c:	d141      	bne.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f4e:	4b28      	ldr	r3, [pc, #160]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f5a:	d131      	bne.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f5c:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f62:	4a23      	ldr	r2, [pc, #140]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f6c:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f74:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2232      	movs	r2, #50	@ 0x32
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	0c9b      	lsrs	r3, r3, #18
 8001f8e:	3301      	adds	r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f92:	e002      	b.n	8001f9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa6:	d102      	bne.n	8001fae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f2      	bne.n	8001f94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fba:	d112      	bne.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e011      	b.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fd0:	e007      	b.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fda:	4a05      	ldr	r2, [pc, #20]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fe0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	431bde83 	.word	0x431bde83

08001ffc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800200a:	6093      	str	r3, [r2, #8]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40007000 	.word	0x40007000

0800201c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e2fe      	b.n	800262c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d075      	beq.n	8002126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203a:	4b97      	ldr	r3, [pc, #604]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002044:	4b94      	ldr	r3, [pc, #592]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b0c      	cmp	r3, #12
 8002052:	d102      	bne.n	800205a <HAL_RCC_OscConfig+0x3e>
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d002      	beq.n	8002060 <HAL_RCC_OscConfig+0x44>
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d10b      	bne.n	8002078 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	4b8d      	ldr	r3, [pc, #564]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d05b      	beq.n	8002124 <HAL_RCC_OscConfig+0x108>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d157      	bne.n	8002124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e2d9      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002080:	d106      	bne.n	8002090 <HAL_RCC_OscConfig+0x74>
 8002082:	4b85      	ldr	r3, [pc, #532]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a84      	ldr	r2, [pc, #528]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e01d      	b.n	80020cc <HAL_RCC_OscConfig+0xb0>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x98>
 800209a:	4b7f      	ldr	r3, [pc, #508]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7e      	ldr	r2, [pc, #504]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7b      	ldr	r2, [pc, #492]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0xb0>
 80020b4:	4b78      	ldr	r3, [pc, #480]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a77      	ldr	r2, [pc, #476]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a74      	ldr	r2, [pc, #464]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff f982 	bl	80013dc <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff f97e 	bl	80013dc <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	@ 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e29e      	b.n	800262c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0xc0>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7ff f96e 	bl	80013dc <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff f96a 	bl	80013dc <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	@ 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e28a      	b.n	800262c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002116:	4b60      	ldr	r3, [pc, #384]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0xe8>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d075      	beq.n	800221e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002132:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213c:	4b56      	ldr	r3, [pc, #344]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b0c      	cmp	r3, #12
 800214a:	d102      	bne.n	8002152 <HAL_RCC_OscConfig+0x136>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d002      	beq.n	8002158 <HAL_RCC_OscConfig+0x13c>
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d11f      	bne.n	8002198 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002158:	4b4f      	ldr	r3, [pc, #316]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_OscConfig+0x154>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e25d      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	4b49      	ldr	r3, [pc, #292]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	061b      	lsls	r3, r3, #24
 800217e:	4946      	ldr	r1, [pc, #280]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002184:	4b45      	ldr	r3, [pc, #276]	@ (800229c <HAL_RCC_OscConfig+0x280>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff f8db 	bl	8001344 <HAL_InitTick>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d043      	beq.n	800221c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e249      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d023      	beq.n	80021e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff f916 	bl	80013dc <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b4:	f7ff f912 	bl	80013dc <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e232      	b.n	800262c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c6:	4b34      	ldr	r3, [pc, #208]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	061b      	lsls	r3, r3, #24
 80021e0:	492d      	ldr	r1, [pc, #180]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
 80021e6:	e01a      	b.n	800221e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 80021ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff f8f2 	bl	80013dc <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fc:	f7ff f8ee 	bl	80013dc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e20e      	b.n	800262c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800220e:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x1e0>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d041      	beq.n	80022ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01c      	beq.n	800226c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002232:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002238:	4a17      	ldr	r2, [pc, #92]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7ff f8cb 	bl	80013dc <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224a:	f7ff f8c7 	bl	80013dc <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1e7      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800225c:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ef      	beq.n	800224a <HAL_RCC_OscConfig+0x22e>
 800226a:	e020      	b.n	80022ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002272:	4a09      	ldr	r2, [pc, #36]	@ (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7ff f8ae 	bl	80013dc <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002282:	e00d      	b.n	80022a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002284:	f7ff f8aa 	bl	80013dc <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d906      	bls.n	80022a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1ca      	b.n	800262c <HAL_RCC_OscConfig+0x610>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022a0:	4b8c      	ldr	r3, [pc, #560]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ea      	bne.n	8002284 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80a6 	beq.w	8002408 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022c0:	4b84      	ldr	r3, [pc, #528]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2b4>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x2b6>
 80022d0:	2300      	movs	r3, #0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	4b7f      	ldr	r3, [pc, #508]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022da:	4a7e      	ldr	r2, [pc, #504]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80022dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022e2:	4b7c      	ldr	r3, [pc, #496]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ee:	2301      	movs	r3, #1
 80022f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f2:	4b79      	ldr	r3, [pc, #484]	@ (80024d8 <HAL_RCC_OscConfig+0x4bc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d118      	bne.n	8002330 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022fe:	4b76      	ldr	r3, [pc, #472]	@ (80024d8 <HAL_RCC_OscConfig+0x4bc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a75      	ldr	r2, [pc, #468]	@ (80024d8 <HAL_RCC_OscConfig+0x4bc>)
 8002304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230a:	f7ff f867 	bl	80013dc <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002312:	f7ff f863 	bl	80013dc <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e183      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002324:	4b6c      	ldr	r3, [pc, #432]	@ (80024d8 <HAL_RCC_OscConfig+0x4bc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d108      	bne.n	800234a <HAL_RCC_OscConfig+0x32e>
 8002338:	4b66      	ldr	r3, [pc, #408]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233e:	4a65      	ldr	r2, [pc, #404]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002348:	e024      	b.n	8002394 <HAL_RCC_OscConfig+0x378>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b05      	cmp	r3, #5
 8002350:	d110      	bne.n	8002374 <HAL_RCC_OscConfig+0x358>
 8002352:	4b60      	ldr	r3, [pc, #384]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002358:	4a5e      	ldr	r2, [pc, #376]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002362:	4b5c      	ldr	r3, [pc, #368]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002368:	4a5a      	ldr	r2, [pc, #360]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002372:	e00f      	b.n	8002394 <HAL_RCC_OscConfig+0x378>
 8002374:	4b57      	ldr	r3, [pc, #348]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237a:	4a56      	ldr	r2, [pc, #344]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002384:	4b53      	ldr	r3, [pc, #332]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238a:	4a52      	ldr	r2, [pc, #328]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d016      	beq.n	80023ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7ff f81e 	bl	80013dc <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7ff f81a 	bl	80013dc <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e138      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ba:	4b46      	ldr	r3, [pc, #280]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ed      	beq.n	80023a4 <HAL_RCC_OscConfig+0x388>
 80023c8:	e015      	b.n	80023f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ca:	f7ff f807 	bl	80013dc <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7ff f803 	bl	80013dc <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e121      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023e8:	4b3a      	ldr	r3, [pc, #232]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1ed      	bne.n	80023d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023f6:	7ffb      	ldrb	r3, [r7, #31]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fc:	4b35      	ldr	r3, [pc, #212]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002400:	4a34      	ldr	r2, [pc, #208]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002406:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d03c      	beq.n	800248e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01c      	beq.n	8002456 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800241c:	4b2d      	ldr	r3, [pc, #180]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800241e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002422:	4a2c      	ldr	r2, [pc, #176]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe ffd6 	bl	80013dc <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002434:	f7fe ffd2 	bl	80013dc <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e0f2      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002446:	4b23      	ldr	r3, [pc, #140]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002448:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ef      	beq.n	8002434 <HAL_RCC_OscConfig+0x418>
 8002454:	e01b      	b.n	800248e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002456:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002458:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800245c:	4a1d      	ldr	r2, [pc, #116]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe ffb9 	bl	80013dc <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800246e:	f7fe ffb5 	bl	80013dc <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0d5      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002480:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 8002482:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ef      	bne.n	800246e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80c9 	beq.w	800262a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002498:	4b0e      	ldr	r3, [pc, #56]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	f000 8083 	beq.w	80025ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d15e      	bne.n	800256c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a08      	ldr	r2, [pc, #32]	@ (80024d4 <HAL_RCC_OscConfig+0x4b8>)
 80024b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe ff8f 	bl	80013dc <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c0:	e00c      	b.n	80024dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe ff8b 	bl	80013dc <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d905      	bls.n	80024dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0ab      	b.n	800262c <HAL_RCC_OscConfig+0x610>
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024dc:	4b55      	ldr	r3, [pc, #340]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ec      	bne.n	80024c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e8:	4b52      	ldr	r3, [pc, #328]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	4b52      	ldr	r3, [pc, #328]	@ (8002638 <HAL_RCC_OscConfig+0x61c>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6a11      	ldr	r1, [r2, #32]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024f8:	3a01      	subs	r2, #1
 80024fa:	0112      	lsls	r2, r2, #4
 80024fc:	4311      	orrs	r1, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002502:	0212      	lsls	r2, r2, #8
 8002504:	4311      	orrs	r1, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800250a:	0852      	lsrs	r2, r2, #1
 800250c:	3a01      	subs	r2, #1
 800250e:	0552      	lsls	r2, r2, #21
 8002510:	4311      	orrs	r1, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002516:	0852      	lsrs	r2, r2, #1
 8002518:	3a01      	subs	r2, #1
 800251a:	0652      	lsls	r2, r2, #25
 800251c:	4311      	orrs	r1, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002522:	06d2      	lsls	r2, r2, #27
 8002524:	430a      	orrs	r2, r1
 8002526:	4943      	ldr	r1, [pc, #268]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 8002528:	4313      	orrs	r3, r2
 800252a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252c:	4b41      	ldr	r3, [pc, #260]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a40      	ldr	r2, [pc, #256]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002538:	4b3e      	ldr	r3, [pc, #248]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a3d      	ldr	r2, [pc, #244]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 800253e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002542:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe ff4a 	bl	80013dc <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe ff46 	bl	80013dc <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e066      	b.n	800262c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	4b35      	ldr	r3, [pc, #212]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x530>
 800256a:	e05e      	b.n	800262a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256c:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a30      	ldr	r2, [pc, #192]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 8002572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe ff30 	bl	80013dc <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe ff2c 	bl	80013dc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e04c      	b.n	800262c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002592:	4b28      	ldr	r3, [pc, #160]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800259e:	4b25      	ldr	r3, [pc, #148]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	4924      	ldr	r1, [pc, #144]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 80025a4:	4b25      	ldr	r3, [pc, #148]	@ (800263c <HAL_RCC_OscConfig+0x620>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	60cb      	str	r3, [r1, #12]
 80025aa:	e03e      	b.n	800262a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e039      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002634 <HAL_RCC_OscConfig+0x618>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0203 	and.w	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d12c      	bne.n	8002626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	3b01      	subs	r3, #1
 80025d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d123      	bne.n	8002626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d11b      	bne.n	8002626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d113      	bne.n	8002626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	3b01      	subs	r3, #1
 800260c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d109      	bne.n	8002626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	3b01      	subs	r3, #1
 8002620:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	019f800c 	.word	0x019f800c
 800263c:	feeefffc 	.word	0xfeeefffc

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e11e      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b91      	ldr	r3, [pc, #580]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d910      	bls.n	8002688 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b8e      	ldr	r3, [pc, #568]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 020f 	bic.w	r2, r3, #15
 800266e:	498c      	ldr	r1, [pc, #560]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b8a      	ldr	r3, [pc, #552]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e106      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d073      	beq.n	800277c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b03      	cmp	r3, #3
 800269a:	d129      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269c:	4b81      	ldr	r3, [pc, #516]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0f4      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026ac:	f000 f99e 	bl	80029ec <RCC_GetSysClockFreqFromPLLSource>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4a7c      	ldr	r2, [pc, #496]	@ (80028a8 <HAL_RCC_ClockConfig+0x268>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d93f      	bls.n	800273a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026ba:	4b7a      	ldr	r3, [pc, #488]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d033      	beq.n	800273a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d12f      	bne.n	800273a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026da:	4b72      	ldr	r3, [pc, #456]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026e2:	4a70      	ldr	r2, [pc, #448]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80026e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e024      	b.n	800273a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f8:	4b6a      	ldr	r3, [pc, #424]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0c6      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002708:	4b66      	ldr	r3, [pc, #408]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0be      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002718:	f000 f8ce 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 800271c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4a61      	ldr	r2, [pc, #388]	@ (80028a8 <HAL_RCC_ClockConfig+0x268>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d909      	bls.n	800273a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002726:	4b5f      	ldr	r3, [pc, #380]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800272e:	4a5d      	ldr	r2, [pc, #372]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002734:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b5a      	ldr	r3, [pc, #360]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4957      	ldr	r1, [pc, #348]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274c:	f7fe fe46 	bl	80013dc <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7fe fe42 	bl	80013dc <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e095      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b4e      	ldr	r3, [pc, #312]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d023      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002794:	4b43      	ldr	r3, [pc, #268]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a42      	ldr	r2, [pc, #264]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800279a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800279e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027ac:	4b3d      	ldr	r3, [pc, #244]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80027b4:	4a3b      	ldr	r2, [pc, #236]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b39      	ldr	r3, [pc, #228]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4936      	ldr	r1, [pc, #216]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b80      	cmp	r3, #128	@ 0x80
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027d6:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	4a32      	ldr	r2, [pc, #200]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 80027dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e2:	4b2f      	ldr	r3, [pc, #188]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d21d      	bcs.n	800282c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f0:	4b2b      	ldr	r3, [pc, #172]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 020f 	bic.w	r2, r3, #15
 80027f8:	4929      	ldr	r1, [pc, #164]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002800:	f7fe fdec 	bl	80013dc <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fe fde8 	bl	80013dc <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e03b      	b.n	8002896 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_RCC_ClockConfig+0x260>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d1ed      	bne.n	8002808 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4917      	ldr	r1, [pc, #92]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002856:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490f      	ldr	r1, [pc, #60]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800286a:	f000 f825 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <HAL_RCC_ClockConfig+0x264>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490c      	ldr	r1, [pc, #48]	@ (80028ac <HAL_RCC_ClockConfig+0x26c>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	fa22 f303 	lsr.w	r3, r2, r3
 8002886:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <HAL_RCC_ClockConfig+0x270>)
 8002888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800288a:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <HAL_RCC_ClockConfig+0x274>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fd58 	bl	8001344 <HAL_InitTick>
 8002894:	4603      	mov	r3, r0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	04c4b400 	.word	0x04c4b400
 80028ac:	0800667c 	.word	0x0800667c
 80028b0:	20000008 	.word	0x20000008
 80028b4:	2000000c 	.word	0x2000000c

080028b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028be:	4b2c      	ldr	r3, [pc, #176]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002974 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e047      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028d0:	4b27      	ldr	r3, [pc, #156]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028dc:	4b26      	ldr	r3, [pc, #152]	@ (8002978 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e03e      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028e2:	4b23      	ldr	r3, [pc, #140]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d136      	bne.n	800295c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3301      	adds	r3, #1
 8002904:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800290c:	4a1a      	ldr	r2, [pc, #104]	@ (8002978 <HAL_RCC_GetSysClockFreq+0xc0>)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	4a16      	ldr	r2, [pc, #88]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002916:	68d2      	ldr	r2, [r2, #12]
 8002918:	0a12      	lsrs	r2, r2, #8
 800291a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	617b      	str	r3, [r7, #20]
      break;
 8002924:	e00c      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002926:	4a13      	ldr	r2, [pc, #76]	@ (8002974 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4a10      	ldr	r2, [pc, #64]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	0a12      	lsrs	r2, r2, #8
 8002934:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
      break;
 800293e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002940:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0e5b      	lsrs	r3, r3, #25
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	3301      	adds	r3, #1
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	e001      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002960:	693b      	ldr	r3, [r7, #16]
}
 8002962:	4618      	mov	r0, r3
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	00f42400 	.word	0x00f42400
 8002978:	016e3600 	.word	0x016e3600

0800297c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002980:	4b03      	ldr	r3, [pc, #12]	@ (8002990 <HAL_RCC_GetHCLKFreq+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000008 	.word	0x20000008

08002994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002998:	f7ff fff0 	bl	800297c <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4904      	ldr	r1, [pc, #16]	@ (80029bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	0800668c 	.word	0x0800668c

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029c4:	f7ff ffda 	bl	800297c <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	0adb      	lsrs	r3, r3, #11
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4904      	ldr	r1, [pc, #16]	@ (80029e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	0800668c 	.word	0x0800668c

080029ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029f2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	3301      	adds	r3, #1
 8002a08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d10c      	bne.n	8002a2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a10:	4a17      	ldr	r2, [pc, #92]	@ (8002a70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	4a14      	ldr	r2, [pc, #80]	@ (8002a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a1a:	68d2      	ldr	r2, [r2, #12]
 8002a1c:	0a12      	lsrs	r2, r2, #8
 8002a1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	617b      	str	r3, [r7, #20]
    break;
 8002a28:	e00c      	b.n	8002a44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a2a:	4a12      	ldr	r2, [pc, #72]	@ (8002a74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4a0e      	ldr	r2, [pc, #56]	@ (8002a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a34:	68d2      	ldr	r2, [r2, #12]
 8002a36:	0a12      	lsrs	r2, r2, #8
 8002a38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
    break;
 8002a42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a44:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0e5b      	lsrs	r3, r3, #25
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a5e:	687b      	ldr	r3, [r7, #4]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	016e3600 	.word	0x016e3600
 8002a74:	00f42400 	.word	0x00f42400

08002a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a80:	2300      	movs	r3, #0
 8002a82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a84:	2300      	movs	r3, #0
 8002a86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8098 	beq.w	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9a:	4b43      	ldr	r3, [pc, #268]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	4b40      	ldr	r3, [pc, #256]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a39      	ldr	r2, [pc, #228]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002acc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ace:	f7fe fc85 	bl	80013dc <HAL_GetTick>
 8002ad2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ad4:	e009      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7fe fc81 	bl	80013dc <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d902      	bls.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	74fb      	strb	r3, [r7, #19]
        break;
 8002ae8:	e005      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aea:	4b30      	ldr	r3, [pc, #192]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0ef      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d159      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002afc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01e      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d019      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b18:	4b23      	ldr	r3, [pc, #140]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b24:	4b20      	ldr	r3, [pc, #128]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b44:	4a18      	ldr	r2, [pc, #96]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe fc41 	bl	80013dc <HAL_GetTick>
 8002b5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe fc3d 	bl	80013dc <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d902      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	74fb      	strb	r3, [r7, #19]
            break;
 8002b74:	e006      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ec      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10b      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b98:	4903      	ldr	r1, [pc, #12]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	74bb      	strb	r3, [r7, #18]
 8002ba6:	e005      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb4:	7c7b      	ldrb	r3, [r7, #17]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d105      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bba:	4ba7      	ldr	r3, [pc, #668]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	4aa6      	ldr	r2, [pc, #664]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bd2:	4ba1      	ldr	r3, [pc, #644]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd8:	f023 0203 	bic.w	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	499d      	ldr	r1, [pc, #628]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bf4:	4b98      	ldr	r3, [pc, #608]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfa:	f023 020c 	bic.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4995      	ldr	r1, [pc, #596]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c16:	4b90      	ldr	r3, [pc, #576]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	498c      	ldr	r1, [pc, #560]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c38:	4b87      	ldr	r3, [pc, #540]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	4984      	ldr	r1, [pc, #528]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	497b      	ldr	r1, [pc, #492]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c7c:	4b76      	ldr	r3, [pc, #472]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	4973      	ldr	r1, [pc, #460]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c9e:	4b6e      	ldr	r3, [pc, #440]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	496a      	ldr	r1, [pc, #424]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cc0:	4b65      	ldr	r3, [pc, #404]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4962      	ldr	r1, [pc, #392]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	4959      	ldr	r1, [pc, #356]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d04:	4b54      	ldr	r3, [pc, #336]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d0a:	f023 0203 	bic.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d12:	4951      	ldr	r1, [pc, #324]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d26:	4b4c      	ldr	r3, [pc, #304]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	4948      	ldr	r1, [pc, #288]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d015      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d48:	4b43      	ldr	r3, [pc, #268]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	4940      	ldr	r1, [pc, #256]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d66:	d105      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d68:	4b3b      	ldr	r3, [pc, #236]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d015      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d80:	4b35      	ldr	r3, [pc, #212]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8e:	4932      	ldr	r1, [pc, #200]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d9e:	d105      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a2c      	ldr	r2, [pc, #176]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002daa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d015      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002db8:	4b27      	ldr	r3, [pc, #156]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc6:	4924      	ldr	r1, [pc, #144]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002de2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d015      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002df0:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfe:	4916      	ldr	r1, [pc, #88]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e10:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a10      	ldr	r2, [pc, #64]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d019      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e28:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	4908      	ldr	r1, [pc, #32]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e46:	d109      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e48:	4b03      	ldr	r3, [pc, #12]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a02      	ldr	r2, [pc, #8]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e52:	60d3      	str	r3, [r2, #12]
 8002e54:	e002      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d015      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e68:	4b29      	ldr	r3, [pc, #164]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	4926      	ldr	r1, [pc, #152]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e86:	d105      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e88:	4b21      	ldr	r3, [pc, #132]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4a20      	ldr	r2, [pc, #128]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e92:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d015      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eae:	4918      	ldr	r1, [pc, #96]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ebe:	d105      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ec0:	4b13      	ldr	r3, [pc, #76]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4a12      	ldr	r2, [pc, #72]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ede:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee6:	490a      	ldr	r1, [pc, #40]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a04      	ldr	r2, [pc, #16]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f04:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000

08002f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e09d      	b.n	8003062 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f36:	d009      	beq.n	8002f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]
 8002f3e:	e005      	b.n	8002f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fe f888 	bl	800107c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f8c:	d902      	bls.n	8002f94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	e002      	b.n	8002f9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002fa2:	d007      	beq.n	8002fb4 <HAL_SPI_Init+0xa0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fac:	d002      	beq.n	8002fb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff6:	ea42 0103 	orr.w	r1, r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	0c1b      	lsrs	r3, r3, #16
 8003010:	f003 0204 	and.w	r2, r3, #4
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003030:	ea42 0103 	orr.w	r1, r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003050:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003084:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800308c:	7dbb      	ldrb	r3, [r7, #22]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d00d      	beq.n	80030ae <HAL_SPI_TransmitReceive_IT+0x42>
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003098:	d106      	bne.n	80030a8 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <HAL_SPI_TransmitReceive_IT+0x3c>
 80030a2:	7dbb      	ldrb	r3, [r7, #22]
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d002      	beq.n	80030ae <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
 80030aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030ac:	e07d      	b.n	80031aa <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_SPI_TransmitReceive_IT+0x54>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_SPI_TransmitReceive_IT+0x54>
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030c4:	e071      	b.n	80031aa <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_SPI_TransmitReceive_IT+0x68>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e06b      	b.n	80031ac <HAL_SPI_TransmitReceive_IT+0x140>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d003      	beq.n	80030f0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2205      	movs	r2, #5
 80030ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	887a      	ldrh	r2, [r7, #2]
 8003106:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	887a      	ldrh	r2, [r7, #2]
 8003112:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	887a      	ldrh	r2, [r7, #2]
 800311a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003126:	d906      	bls.n	8003136 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a23      	ldr	r2, [pc, #140]	@ (80031b8 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800312c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4a22      	ldr	r2, [pc, #136]	@ (80031bc <HAL_SPI_TransmitReceive_IT+0x150>)
 8003132:	651a      	str	r2, [r3, #80]	@ 0x50
 8003134:	e005      	b.n	8003142 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4a21      	ldr	r2, [pc, #132]	@ (80031c0 <HAL_SPI_TransmitReceive_IT+0x154>)
 800313a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a21      	ldr	r2, [pc, #132]	@ (80031c4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8003140:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800314a:	d802      	bhi.n	8003152 <HAL_SPI_TransmitReceive_IT+0xe6>
 800314c:	887b      	ldrh	r3, [r7, #2]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d908      	bls.n	8003164 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	e007      	b.n	8003174 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003172:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317e:	2b40      	cmp	r3, #64	@ 0x40
 8003180:	d007      	beq.n	8003192 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003190:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80031a8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	08003553 	.word	0x08003553
 80031bc:	080035b9 	.word	0x080035b9
 80031c0:	08003403 	.word	0x08003403
 80031c4:	080034c1 	.word	0x080034c1

080031c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10e      	bne.n	8003208 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d009      	beq.n	8003208 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4798      	blx	r3
    return;
 8003206:	e0ce      	b.n	80033a6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_SPI_IRQHandler+0x5e>
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
    return;
 8003224:	e0bf      	b.n	80033a6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <HAL_SPI_IRQHandler+0x7e>
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80b0 	beq.w	80033a6 <HAL_SPI_IRQHandler+0x1de>
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80aa 	beq.w	80033a6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d023      	beq.n	80032a4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b03      	cmp	r3, #3
 8003266:	d011      	beq.n	800328c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326c:	f043 0204 	orr.w	r2, r3, #4
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	e00b      	b.n	80032a4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	693b      	ldr	r3, [r7, #16]
        return;
 80032a2:	e080      	b.n	80033a6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d014      	beq.n	80032d8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b2:	f043 0201 	orr.w	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00c      	beq.n	80032fc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e6:	f043 0208 	orr.w	r2, r3, #8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003300:	2b00      	cmp	r3, #0
 8003302:	d04f      	beq.n	80033a4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003312:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d104      	bne.n	8003330 <HAL_SPI_IRQHandler+0x168>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d034      	beq.n	800339a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0203 	bic.w	r2, r2, #3
 800333e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003344:	2b00      	cmp	r3, #0
 8003346:	d011      	beq.n	800336c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334c:	4a17      	ldr	r2, [pc, #92]	@ (80033ac <HAL_SPI_IRQHandler+0x1e4>)
 800334e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe fa5e 	bl	8001816 <HAL_DMA_Abort_IT>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003364:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003370:	2b00      	cmp	r3, #0
 8003372:	d016      	beq.n	80033a2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003378:	4a0c      	ldr	r2, [pc, #48]	@ (80033ac <HAL_SPI_IRQHandler+0x1e4>)
 800337a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe fa48 	bl	8001816 <HAL_DMA_Abort_IT>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003390:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003398:	e003      	b.n	80033a2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f812 	bl	80033c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80033a0:	e000      	b.n	80033a4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80033a2:	bf00      	nop
    return;
 80033a4:	bf00      	nop
  }
}
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	080033d9 	.word	0x080033d9

080033b0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff ffe5 	bl	80033c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b01      	cmp	r3, #1
 8003414:	d923      	bls.n	800345e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	b292      	uxth	r2, r2
 8003422:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	1c9a      	adds	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b02      	subs	r3, #2
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d11f      	bne.n	800348c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	e016      	b.n	800348c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f103 020c 	add.w	r2, r3, #12
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	7812      	ldrb	r2, [r2, #0]
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10f      	bne.n	80034b8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034a6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fa14 	bl	80038e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d912      	bls.n	80034f8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d6:	881a      	ldrh	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e2:	1c9a      	adds	r2, r3, #2
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b02      	subs	r3, #2
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034f6:	e012      	b.n	800351e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	330c      	adds	r3, #12
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d110      	bne.n	800354a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003536:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f9cb 	bl	80038e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	b292      	uxth	r2, r2
 8003566:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	1c9a      	adds	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10f      	bne.n	80035b0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800359e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f998 	bl	80038e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	881a      	ldrh	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d0:	1c9a      	adds	r2, r3, #2
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d110      	bne.n	8003610 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035fc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f968 	bl	80038e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003628:	f7fd fed8 	bl	80013dc <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	4413      	add	r3, r2
 8003636:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003638:	f7fd fed0 	bl	80013dc <HAL_GetTick>
 800363c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800363e:	4b39      	ldr	r3, [pc, #228]	@ (8003724 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	015b      	lsls	r3, r3, #5
 8003644:	0d1b      	lsrs	r3, r3, #20
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800364e:	e054      	b.n	80036fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d050      	beq.n	80036fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003658:	f7fd fec0 	bl	80013dc <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	429a      	cmp	r2, r3
 8003666:	d902      	bls.n	800366e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d13d      	bne.n	80036ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800367c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003686:	d111      	bne.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003690:	d004      	beq.n	800369c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369a:	d107      	bne.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036b4:	d10f      	bne.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e017      	b.n	800371a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	429a      	cmp	r2, r3
 8003716:	d19b      	bne.n	8003650 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000008 	.word	0x20000008

08003728 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	@ 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800373a:	f7fd fe4f 	bl	80013dc <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	4413      	add	r3, r2
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800374a:	f7fd fe47 	bl	80013dc <HAL_GetTick>
 800374e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003758:	4b3d      	ldr	r3, [pc, #244]	@ (8003850 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	00da      	lsls	r2, r3, #3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	0d1b      	lsrs	r3, r3, #20
 8003768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003770:	e060      	b.n	8003834 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003778:	d107      	bne.n	800378a <SPI_WaitFifoStateUntilTimeout+0x62>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d104      	bne.n	800378a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003788:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d050      	beq.n	8003834 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003792:	f7fd fe23 	bl	80013dc <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379e:	429a      	cmp	r2, r3
 80037a0:	d902      	bls.n	80037a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d13d      	bne.n	8003824 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037c0:	d111      	bne.n	80037e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ca:	d004      	beq.n	80037d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d4:	d107      	bne.n	80037e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ee:	d10f      	bne.n	8003810 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800380e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e010      	b.n	8003846 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	3b01      	subs	r3, #1
 8003832:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4013      	ands	r3, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	d196      	bne.n	8003772 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3728      	adds	r7, #40	@ 0x28
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000008 	.word	0x20000008

08003854 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2200      	movs	r2, #0
 8003868:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff ff5b 	bl	8003728 <SPI_WaitFifoStateUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387c:	f043 0220 	orr.w	r2, r3, #32
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e027      	b.n	80038d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2200      	movs	r2, #0
 8003890:	2180      	movs	r1, #128	@ 0x80
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f7ff fec0 	bl	8003618 <SPI_WaitFlagStateUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e014      	b.n	80038d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f7ff ff34 	bl	8003728 <SPI_WaitFifoStateUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e000      	b.n	80038d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038e8:	f7fd fd78 	bl	80013dc <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0220 	bic.w	r2, r2, #32
 80038fc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	2164      	movs	r1, #100	@ 0x64
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff ffa6 	bl	8003854 <SPI_EndRxTxTransaction>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003912:	f043 0220 	orr.w	r2, r3, #32
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391e:	2b00      	cmp	r3, #0
 8003920:	d115      	bne.n	800394e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b04      	cmp	r3, #4
 800392c:	d107      	bne.n	800393e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fd3a 	bl	80033b0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800393c:	e00e      	b.n	800395c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd f8e6 	bl	8000b18 <HAL_SPI_TxRxCpltCallback>
}
 800394c:	e006      	b.n	800395c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff fd34 	bl	80033c4 <HAL_SPI_ErrorCallback>
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e049      	b.n	8003a0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fbc2 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f000 fb3c 	bl	8004020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d001      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e054      	b.n	8003ad6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a26      	ldr	r2, [pc, #152]	@ (8003ae4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d022      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a56:	d01d      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ae8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d018      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a21      	ldr	r2, [pc, #132]	@ (8003aec <HAL_TIM_Base_Start_IT+0xd8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1f      	ldr	r2, [pc, #124]	@ (8003af0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003af4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d009      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1c      	ldr	r2, [pc, #112]	@ (8003af8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x80>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003afc <HAL_TIM_Base_Start_IT+0xe8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d115      	bne.n	8003ac0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	4b19      	ldr	r3, [pc, #100]	@ (8003b00 <HAL_TIM_Base_Start_IT+0xec>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d015      	beq.n	8003ad2 <HAL_TIM_Base_Start_IT+0xbe>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aac:	d011      	beq.n	8003ad2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abe:	e008      	b.n	8003ad2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e000      	b.n	8003ad4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000800 	.word	0x40000800
 8003af0:	40000c00 	.word	0x40000c00
 8003af4:	40013400 	.word	0x40013400
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40015000 	.word	0x40015000
 8003b00:	00010007 	.word	0x00010007

08003b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d020      	beq.n	8003b68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01b      	beq.n	8003b68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0202 	mvn.w	r2, #2
 8003b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fa48 	bl	8003fe4 <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa3a 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fa4b 	bl	8003ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d020      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01b      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0204 	mvn.w	r2, #4
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa22 	bl	8003fe4 <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fa14 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fa25 	bl	8003ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d020      	beq.n	8003c00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01b      	beq.n	8003c00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0208 	mvn.w	r2, #8
 8003bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f9fc 	bl	8003fe4 <HAL_TIM_IC_CaptureCallback>
 8003bec:	e005      	b.n	8003bfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f9ee 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f9ff 	bl	8003ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d020      	beq.n	8003c4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01b      	beq.n	8003c4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0210 	mvn.w	r2, #16
 8003c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2208      	movs	r2, #8
 8003c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f9d6 	bl	8003fe4 <HAL_TIM_IC_CaptureCallback>
 8003c38:	e005      	b.n	8003c46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f9c8 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f9d9 	bl	8003ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00c      	beq.n	8003c70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0201 	mvn.w	r2, #1
 8003c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd f8ca 	bl	8000e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00c      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d007      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fbb1 	bl	8004400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00c      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fba9 	bl	8004414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00c      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f993 	bl	800400c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00c      	beq.n	8003d0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f06f 0220 	mvn.w	r2, #32
 8003d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fb71 	bl	80043ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00c      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fb7d 	bl	8004428 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00c      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fb75 	bl	800443c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00c      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fb6d 	bl	8004450 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00c      	beq.n	8003d9a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fb65 	bl	8004464 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e0f6      	b.n	8003fae <HAL_TIM_ConfigClockSource+0x20a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003dde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6f      	ldr	r2, [pc, #444]	@ (8003fb8 <HAL_TIM_ConfigClockSource+0x214>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	f000 80c1 	beq.w	8003f82 <HAL_TIM_ConfigClockSource+0x1de>
 8003e00:	4a6d      	ldr	r2, [pc, #436]	@ (8003fb8 <HAL_TIM_ConfigClockSource+0x214>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	f200 80c6 	bhi.w	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e08:	4a6c      	ldr	r2, [pc, #432]	@ (8003fbc <HAL_TIM_ConfigClockSource+0x218>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	f000 80b9 	beq.w	8003f82 <HAL_TIM_ConfigClockSource+0x1de>
 8003e10:	4a6a      	ldr	r2, [pc, #424]	@ (8003fbc <HAL_TIM_ConfigClockSource+0x218>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	f200 80be 	bhi.w	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e18:	4a69      	ldr	r2, [pc, #420]	@ (8003fc0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	f000 80b1 	beq.w	8003f82 <HAL_TIM_ConfigClockSource+0x1de>
 8003e20:	4a67      	ldr	r2, [pc, #412]	@ (8003fc0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	f200 80b6 	bhi.w	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e28:	4a66      	ldr	r2, [pc, #408]	@ (8003fc4 <HAL_TIM_ConfigClockSource+0x220>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	f000 80a9 	beq.w	8003f82 <HAL_TIM_ConfigClockSource+0x1de>
 8003e30:	4a64      	ldr	r2, [pc, #400]	@ (8003fc4 <HAL_TIM_ConfigClockSource+0x220>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	f200 80ae 	bhi.w	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e38:	4a63      	ldr	r2, [pc, #396]	@ (8003fc8 <HAL_TIM_ConfigClockSource+0x224>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	f000 80a1 	beq.w	8003f82 <HAL_TIM_ConfigClockSource+0x1de>
 8003e40:	4a61      	ldr	r2, [pc, #388]	@ (8003fc8 <HAL_TIM_ConfigClockSource+0x224>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f200 80a6 	bhi.w	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e48:	4a60      	ldr	r2, [pc, #384]	@ (8003fcc <HAL_TIM_ConfigClockSource+0x228>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	f000 8099 	beq.w	8003f82 <HAL_TIM_ConfigClockSource+0x1de>
 8003e50:	4a5e      	ldr	r2, [pc, #376]	@ (8003fcc <HAL_TIM_ConfigClockSource+0x228>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	f200 809e 	bhi.w	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003e5c:	f000 8091 	beq.w	8003f82 <HAL_TIM_ConfigClockSource+0x1de>
 8003e60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003e64:	f200 8096 	bhi.w	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e6c:	f000 8089 	beq.w	8003f82 <HAL_TIM_ConfigClockSource+0x1de>
 8003e70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e74:	f200 808e 	bhi.w	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e7c:	d03e      	beq.n	8003efc <HAL_TIM_ConfigClockSource+0x158>
 8003e7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e82:	f200 8087 	bhi.w	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e8a:	f000 8086 	beq.w	8003f9a <HAL_TIM_ConfigClockSource+0x1f6>
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e92:	d87f      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e94:	2b70      	cmp	r3, #112	@ 0x70
 8003e96:	d01a      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x12a>
 8003e98:	2b70      	cmp	r3, #112	@ 0x70
 8003e9a:	d87b      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e9c:	2b60      	cmp	r3, #96	@ 0x60
 8003e9e:	d050      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x19e>
 8003ea0:	2b60      	cmp	r3, #96	@ 0x60
 8003ea2:	d877      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ea4:	2b50      	cmp	r3, #80	@ 0x50
 8003ea6:	d03c      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x17e>
 8003ea8:	2b50      	cmp	r3, #80	@ 0x50
 8003eaa:	d873      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	d058      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x1be>
 8003eb0:	2b40      	cmp	r3, #64	@ 0x40
 8003eb2:	d86f      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003eb4:	2b30      	cmp	r3, #48	@ 0x30
 8003eb6:	d064      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x1de>
 8003eb8:	2b30      	cmp	r3, #48	@ 0x30
 8003eba:	d86b      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d060      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x1de>
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d867      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d05c      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x1de>
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d05a      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x1de>
 8003ecc:	e062      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ede:	f000 f9cf 	bl	8004280 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ef0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	609a      	str	r2, [r3, #8]
      break;
 8003efa:	e04f      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f0c:	f000 f9b8 	bl	8004280 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f1e:	609a      	str	r2, [r3, #8]
      break;
 8003f20:	e03c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 f92a 	bl	8004188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2150      	movs	r1, #80	@ 0x50
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f983 	bl	8004246 <TIM_ITRx_SetConfig>
      break;
 8003f40:	e02c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f000 f949 	bl	80041e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2160      	movs	r1, #96	@ 0x60
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f973 	bl	8004246 <TIM_ITRx_SetConfig>
      break;
 8003f60:	e01c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f000 f90a 	bl	8004188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2140      	movs	r1, #64	@ 0x40
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f963 	bl	8004246 <TIM_ITRx_SetConfig>
      break;
 8003f80:	e00c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f000 f95a 	bl	8004246 <TIM_ITRx_SetConfig>
      break;
 8003f92:	e003      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
      break;
 8003f98:	e000      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003f9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	00100070 	.word	0x00100070
 8003fbc:	00100060 	.word	0x00100060
 8003fc0:	00100050 	.word	0x00100050
 8003fc4:	00100040 	.word	0x00100040
 8003fc8:	00100030 	.word	0x00100030
 8003fcc:	00100020 	.word	0x00100020

08003fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a4c      	ldr	r2, [pc, #304]	@ (8004164 <TIM_Base_SetConfig+0x144>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d017      	beq.n	8004068 <TIM_Base_SetConfig+0x48>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403e:	d013      	beq.n	8004068 <TIM_Base_SetConfig+0x48>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a49      	ldr	r2, [pc, #292]	@ (8004168 <TIM_Base_SetConfig+0x148>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00f      	beq.n	8004068 <TIM_Base_SetConfig+0x48>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a48      	ldr	r2, [pc, #288]	@ (800416c <TIM_Base_SetConfig+0x14c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00b      	beq.n	8004068 <TIM_Base_SetConfig+0x48>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a47      	ldr	r2, [pc, #284]	@ (8004170 <TIM_Base_SetConfig+0x150>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d007      	beq.n	8004068 <TIM_Base_SetConfig+0x48>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a46      	ldr	r2, [pc, #280]	@ (8004174 <TIM_Base_SetConfig+0x154>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d003      	beq.n	8004068 <TIM_Base_SetConfig+0x48>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a45      	ldr	r2, [pc, #276]	@ (8004178 <TIM_Base_SetConfig+0x158>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d108      	bne.n	800407a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800406e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a39      	ldr	r2, [pc, #228]	@ (8004164 <TIM_Base_SetConfig+0x144>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d023      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004088:	d01f      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a36      	ldr	r2, [pc, #216]	@ (8004168 <TIM_Base_SetConfig+0x148>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01b      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a35      	ldr	r2, [pc, #212]	@ (800416c <TIM_Base_SetConfig+0x14c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d017      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a34      	ldr	r2, [pc, #208]	@ (8004170 <TIM_Base_SetConfig+0x150>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a33      	ldr	r2, [pc, #204]	@ (8004174 <TIM_Base_SetConfig+0x154>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00f      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a33      	ldr	r2, [pc, #204]	@ (800417c <TIM_Base_SetConfig+0x15c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a32      	ldr	r2, [pc, #200]	@ (8004180 <TIM_Base_SetConfig+0x160>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a31      	ldr	r2, [pc, #196]	@ (8004184 <TIM_Base_SetConfig+0x164>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_Base_SetConfig+0xaa>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004178 <TIM_Base_SetConfig+0x158>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d108      	bne.n	80040dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a18      	ldr	r2, [pc, #96]	@ (8004164 <TIM_Base_SetConfig+0x144>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d013      	beq.n	8004130 <TIM_Base_SetConfig+0x110>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a1a      	ldr	r2, [pc, #104]	@ (8004174 <TIM_Base_SetConfig+0x154>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00f      	beq.n	8004130 <TIM_Base_SetConfig+0x110>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a1a      	ldr	r2, [pc, #104]	@ (800417c <TIM_Base_SetConfig+0x15c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00b      	beq.n	8004130 <TIM_Base_SetConfig+0x110>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a19      	ldr	r2, [pc, #100]	@ (8004180 <TIM_Base_SetConfig+0x160>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d007      	beq.n	8004130 <TIM_Base_SetConfig+0x110>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a18      	ldr	r2, [pc, #96]	@ (8004184 <TIM_Base_SetConfig+0x164>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_Base_SetConfig+0x110>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a13      	ldr	r2, [pc, #76]	@ (8004178 <TIM_Base_SetConfig+0x158>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d103      	bne.n	8004138 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b01      	cmp	r3, #1
 8004148:	d105      	bne.n	8004156 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f023 0201 	bic.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	611a      	str	r2, [r3, #16]
  }
}
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40013400 	.word	0x40013400
 8004178:	40015000 	.word	0x40015000
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800

08004188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f023 0201 	bic.w	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f023 030a 	bic.w	r3, r3, #10
 80041c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	621a      	str	r2, [r3, #32]
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b087      	sub	sp, #28
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f023 0210 	bic.w	r2, r3, #16
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	031b      	lsls	r3, r3, #12
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004222:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	621a      	str	r2, [r3, #32]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004246:	b480      	push	{r7}
 8004248:	b085      	sub	sp, #20
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800425c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	f043 0307 	orr.w	r3, r3, #7
 800426c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	609a      	str	r2, [r3, #8]
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800429a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	021a      	lsls	r2, r3, #8
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	609a      	str	r2, [r3, #8]
}
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e074      	b.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a34      	ldr	r2, [pc, #208]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d009      	beq.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a33      	ldr	r2, [pc, #204]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d004      	beq.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a31      	ldr	r2, [pc, #196]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d108      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800431c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800432e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a21      	ldr	r2, [pc, #132]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d022      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004358:	d01d      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1f      	ldr	r2, [pc, #124]	@ (80043dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d018      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1d      	ldr	r2, [pc, #116]	@ (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1c      	ldr	r2, [pc, #112]	@ (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a15      	ldr	r2, [pc, #84]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d009      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a18      	ldr	r2, [pc, #96]	@ (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a11      	ldr	r2, [pc, #68]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10c      	bne.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800439c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40013400 	.word	0x40013400
 80043d8:	40015000 	.word	0x40015000
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40000c00 	.word	0x40000c00
 80043e8:	40014000 	.word	0x40014000

080043ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e042      	b.n	8004510 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7fc fd31 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2224      	movs	r2, #36	@ 0x24
 80044a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 ffbe 	bl	8005444 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fcbf 	bl	8004e4c <UART_SetConfig>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e01b      	b.n	8004510 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f001 f83d 	bl	8005588 <UART_CheckIdleState>
 800450e:	4603      	mov	r3, r0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	@ 0x28
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452e:	2b20      	cmp	r3, #32
 8004530:	d17b      	bne.n	800462a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <HAL_UART_Transmit+0x26>
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e074      	b.n	800462c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2221      	movs	r2, #33	@ 0x21
 800454e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004552:	f7fc ff43 	bl	80013dc <HAL_GetTick>
 8004556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	88fa      	ldrh	r2, [r7, #6]
 800455c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004570:	d108      	bne.n	8004584 <HAL_UART_Transmit+0x6c>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d104      	bne.n	8004584 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e003      	b.n	800458c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800458c:	e030      	b.n	80045f0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2200      	movs	r2, #0
 8004596:	2180      	movs	r1, #128	@ 0x80
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f001 f89f 	bl	80056dc <UART_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e03d      	b.n	800462c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	3302      	adds	r3, #2
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	e007      	b.n	80045de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	3301      	adds	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1c8      	bne.n	800458e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2200      	movs	r2, #0
 8004604:	2140      	movs	r1, #64	@ 0x40
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f001 f868 	bl	80056dc <UART_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e006      	b.n	800462c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e000      	b.n	800462c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800462a:	2302      	movs	r3, #2
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3720      	adds	r7, #32
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	@ 0x28
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800464a:	2b20      	cmp	r3, #32
 800464c:	f040 80b5 	bne.w	80047ba <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_UART_Receive+0x28>
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0ad      	b.n	80047bc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2222      	movs	r2, #34	@ 0x22
 800466c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004676:	f7fc feb1 	bl	80013dc <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	88fa      	ldrh	r2, [r7, #6]
 8004688:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004694:	d10e      	bne.n	80046b4 <HAL_UART_Receive+0x80>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <HAL_UART_Receive+0x76>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80046a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046a8:	e02d      	b.n	8004706 <HAL_UART_Receive+0xd2>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	22ff      	movs	r2, #255	@ 0xff
 80046ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046b2:	e028      	b.n	8004706 <HAL_UART_Receive+0xd2>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10d      	bne.n	80046d8 <HAL_UART_Receive+0xa4>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d104      	bne.n	80046ce <HAL_UART_Receive+0x9a>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	22ff      	movs	r2, #255	@ 0xff
 80046c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046cc:	e01b      	b.n	8004706 <HAL_UART_Receive+0xd2>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	227f      	movs	r2, #127	@ 0x7f
 80046d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046d6:	e016      	b.n	8004706 <HAL_UART_Receive+0xd2>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046e0:	d10d      	bne.n	80046fe <HAL_UART_Receive+0xca>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <HAL_UART_Receive+0xc0>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	227f      	movs	r2, #127	@ 0x7f
 80046ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046f2:	e008      	b.n	8004706 <HAL_UART_Receive+0xd2>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	223f      	movs	r2, #63	@ 0x3f
 80046f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046fc:	e003      	b.n	8004706 <HAL_UART_Receive+0xd2>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800470c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004716:	d108      	bne.n	800472a <HAL_UART_Receive+0xf6>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004720:	2300      	movs	r3, #0
 8004722:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	e003      	b.n	8004732 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004732:	e036      	b.n	80047a2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2200      	movs	r2, #0
 800473c:	2120      	movs	r1, #32
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 ffcc 	bl	80056dc <UART_WaitOnFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2220      	movs	r2, #32
 800474e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e032      	b.n	80047bc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10c      	bne.n	8004776 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	b29a      	uxth	r2, r3
 8004764:	8a7b      	ldrh	r3, [r7, #18]
 8004766:	4013      	ands	r3, r2
 8004768:	b29a      	uxth	r2, r3
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3302      	adds	r3, #2
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e00c      	b.n	8004790 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	b2da      	uxtb	r2, r3
 800477e:	8a7b      	ldrh	r3, [r7, #18]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	4013      	ands	r3, r2
 8004784:	b2da      	uxtb	r2, r3
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	3301      	adds	r3, #1
 800478e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1c2      	bne.n	8004734 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
  }
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b0ba      	sub	sp, #232	@ 0xe8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80047ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80047f2:	4013      	ands	r3, r2
 80047f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80047f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d11b      	bne.n	8004838 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d015      	beq.n	8004838 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800480c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d105      	bne.n	8004824 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800481c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d009      	beq.n	8004838 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 82e3 	beq.w	8004df4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	4798      	blx	r3
      }
      return;
 8004836:	e2dd      	b.n	8004df4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8123 	beq.w	8004a88 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004842:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004846:	4b8d      	ldr	r3, [pc, #564]	@ (8004a7c <HAL_UART_IRQHandler+0x2b8>)
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800484e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004852:	4b8b      	ldr	r3, [pc, #556]	@ (8004a80 <HAL_UART_IRQHandler+0x2bc>)
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 8116 	beq.w	8004a88 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800485c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d011      	beq.n	800488c <HAL_UART_IRQHandler+0xc8>
 8004868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800486c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2201      	movs	r2, #1
 800487a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004882:	f043 0201 	orr.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d011      	beq.n	80048bc <HAL_UART_IRQHandler+0xf8>
 8004898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2202      	movs	r2, #2
 80048aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b2:	f043 0204 	orr.w	r2, r3, #4
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d011      	beq.n	80048ec <HAL_UART_IRQHandler+0x128>
 80048c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00b      	beq.n	80048ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2204      	movs	r2, #4
 80048da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e2:	f043 0202 	orr.w	r2, r3, #2
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d017      	beq.n	8004928 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d105      	bne.n	8004910 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004904:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004908:	4b5c      	ldr	r3, [pc, #368]	@ (8004a7c <HAL_UART_IRQHandler+0x2b8>)
 800490a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00b      	beq.n	8004928 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2208      	movs	r2, #8
 8004916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	f043 0208 	orr.w	r2, r3, #8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800492c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004930:	2b00      	cmp	r3, #0
 8004932:	d012      	beq.n	800495a <HAL_UART_IRQHandler+0x196>
 8004934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004938:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00c      	beq.n	800495a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004948:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 8249 	beq.w	8004df8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d013      	beq.n	800499a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800497e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ae:	2b40      	cmp	r3, #64	@ 0x40
 80049b0:	d005      	beq.n	80049be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d054      	beq.n	8004a68 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fef9 	bl	80057b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ce:	2b40      	cmp	r3, #64	@ 0x40
 80049d0:	d146      	bne.n	8004a60 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3308      	adds	r3, #8
 80049d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3308      	adds	r3, #8
 80049fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1d9      	bne.n	80049d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d017      	beq.n	8004a58 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a2e:	4a15      	ldr	r2, [pc, #84]	@ (8004a84 <HAL_UART_IRQHandler+0x2c0>)
 8004a30:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fc feec 	bl	8001816 <HAL_DMA_Abort_IT>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d019      	beq.n	8004a78 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004a52:	4610      	mov	r0, r2
 8004a54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a56:	e00f      	b.n	8004a78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f9e1 	bl	8004e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5e:	e00b      	b.n	8004a78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f9dd 	bl	8004e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a66:	e007      	b.n	8004a78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f9d9 	bl	8004e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004a76:	e1bf      	b.n	8004df8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	bf00      	nop
    return;
 8004a7a:	e1bd      	b.n	8004df8 <HAL_UART_IRQHandler+0x634>
 8004a7c:	10000001 	.word	0x10000001
 8004a80:	04000120 	.word	0x04000120
 8004a84:	08005883 	.word	0x08005883

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	f040 8153 	bne.w	8004d38 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 814c 	beq.w	8004d38 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa4:	f003 0310 	and.w	r3, r3, #16
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8145 	beq.w	8004d38 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2210      	movs	r2, #16
 8004ab4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac0:	2b40      	cmp	r3, #64	@ 0x40
 8004ac2:	f040 80bb 	bne.w	8004c3c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ad4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 818f 	beq.w	8004dfc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ae4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	f080 8187 	bcs.w	8004dfc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004af4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 8087 	bne.w	8004c1a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1da      	bne.n	8004b0c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3308      	adds	r3, #8
 8004b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e1      	bne.n	8004b56 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3308      	adds	r3, #8
 8004b98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e3      	bne.n	8004b92 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004be8:	f023 0310 	bic.w	r3, r3, #16
 8004bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e4      	bne.n	8004bd8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fc fda5 	bl	8001764 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f8fd 	bl	8004e34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c3a:	e0df      	b.n	8004dfc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80d1 	beq.w	8004e00 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004c5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80cc 	beq.w	8004e00 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c8c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e4      	bne.n	8004c68 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	623b      	str	r3, [r7, #32]
   return(result);
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e1      	bne.n	8004c9e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0310 	bic.w	r3, r3, #16
 8004d02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	69b9      	ldr	r1, [r7, #24]
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e4      	bne.n	8004cee <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f87f 	bl	8004e34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d36:	e063      	b.n	8004e00 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00e      	beq.n	8004d62 <HAL_UART_IRQHandler+0x59e>
 8004d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fdd2 	bl	8005904 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d60:	e051      	b.n	8004e06 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d014      	beq.n	8004d98 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d105      	bne.n	8004d86 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d03a      	beq.n	8004e04 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
    }
    return;
 8004d96:	e035      	b.n	8004e04 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d009      	beq.n	8004db8 <HAL_UART_IRQHandler+0x5f4>
 8004da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fd7c 	bl	80058ae <UART_EndTransmit_IT>
    return;
 8004db6:	e026      	b.n	8004e06 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <HAL_UART_IRQHandler+0x614>
 8004dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fdab 	bl	800592c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dd6:	e016      	b.n	8004e06 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ddc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d010      	beq.n	8004e06 <HAL_UART_IRQHandler+0x642>
 8004de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	da0c      	bge.n	8004e06 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fd93 	bl	8005918 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004df2:	e008      	b.n	8004e06 <HAL_UART_IRQHandler+0x642>
      return;
 8004df4:	bf00      	nop
 8004df6:	e006      	b.n	8004e06 <HAL_UART_IRQHandler+0x642>
    return;
 8004df8:	bf00      	nop
 8004dfa:	e004      	b.n	8004e06 <HAL_UART_IRQHandler+0x642>
      return;
 8004dfc:	bf00      	nop
 8004dfe:	e002      	b.n	8004e06 <HAL_UART_IRQHandler+0x642>
      return;
 8004e00:	bf00      	nop
 8004e02:	e000      	b.n	8004e06 <HAL_UART_IRQHandler+0x642>
    return;
 8004e04:	bf00      	nop
  }
}
 8004e06:	37e8      	adds	r7, #232	@ 0xe8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e50:	b08c      	sub	sp, #48	@ 0x30
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4baa      	ldr	r3, [pc, #680]	@ (8005124 <UART_SetConfig+0x2d8>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a9f      	ldr	r2, [pc, #636]	@ (8005128 <UART_SetConfig+0x2dc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004ec2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed6:	f023 010f 	bic.w	r1, r3, #15
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a90      	ldr	r2, [pc, #576]	@ (800512c <UART_SetConfig+0x2e0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d125      	bne.n	8004f3c <UART_SetConfig+0xf0>
 8004ef0:	4b8f      	ldr	r3, [pc, #572]	@ (8005130 <UART_SetConfig+0x2e4>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d81a      	bhi.n	8004f34 <UART_SetConfig+0xe8>
 8004efe:	a201      	add	r2, pc, #4	@ (adr r2, 8004f04 <UART_SetConfig+0xb8>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f25 	.word	0x08004f25
 8004f0c:	08004f1d 	.word	0x08004f1d
 8004f10:	08004f2d 	.word	0x08004f2d
 8004f14:	2301      	movs	r3, #1
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1a:	e116      	b.n	800514a <UART_SetConfig+0x2fe>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f22:	e112      	b.n	800514a <UART_SetConfig+0x2fe>
 8004f24:	2304      	movs	r3, #4
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2a:	e10e      	b.n	800514a <UART_SetConfig+0x2fe>
 8004f2c:	2308      	movs	r3, #8
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f32:	e10a      	b.n	800514a <UART_SetConfig+0x2fe>
 8004f34:	2310      	movs	r3, #16
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3a:	e106      	b.n	800514a <UART_SetConfig+0x2fe>
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a7c      	ldr	r2, [pc, #496]	@ (8005134 <UART_SetConfig+0x2e8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d138      	bne.n	8004fb8 <UART_SetConfig+0x16c>
 8004f46:	4b7a      	ldr	r3, [pc, #488]	@ (8005130 <UART_SetConfig+0x2e4>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4c:	f003 030c 	and.w	r3, r3, #12
 8004f50:	2b0c      	cmp	r3, #12
 8004f52:	d82d      	bhi.n	8004fb0 <UART_SetConfig+0x164>
 8004f54:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <UART_SetConfig+0x110>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08004f91 	.word	0x08004f91
 8004f60:	08004fb1 	.word	0x08004fb1
 8004f64:	08004fb1 	.word	0x08004fb1
 8004f68:	08004fb1 	.word	0x08004fb1
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08004fb1 	.word	0x08004fb1
 8004f74:	08004fb1 	.word	0x08004fb1
 8004f78:	08004fb1 	.word	0x08004fb1
 8004f7c:	08004f99 	.word	0x08004f99
 8004f80:	08004fb1 	.word	0x08004fb1
 8004f84:	08004fb1 	.word	0x08004fb1
 8004f88:	08004fb1 	.word	0x08004fb1
 8004f8c:	08004fa9 	.word	0x08004fa9
 8004f90:	2300      	movs	r3, #0
 8004f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f96:	e0d8      	b.n	800514a <UART_SetConfig+0x2fe>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9e:	e0d4      	b.n	800514a <UART_SetConfig+0x2fe>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fa6:	e0d0      	b.n	800514a <UART_SetConfig+0x2fe>
 8004fa8:	2308      	movs	r3, #8
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fae:	e0cc      	b.n	800514a <UART_SetConfig+0x2fe>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fb6:	e0c8      	b.n	800514a <UART_SetConfig+0x2fe>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a5e      	ldr	r2, [pc, #376]	@ (8005138 <UART_SetConfig+0x2ec>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d125      	bne.n	800500e <UART_SetConfig+0x1c2>
 8004fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8005130 <UART_SetConfig+0x2e4>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fcc:	2b30      	cmp	r3, #48	@ 0x30
 8004fce:	d016      	beq.n	8004ffe <UART_SetConfig+0x1b2>
 8004fd0:	2b30      	cmp	r3, #48	@ 0x30
 8004fd2:	d818      	bhi.n	8005006 <UART_SetConfig+0x1ba>
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d00a      	beq.n	8004fee <UART_SetConfig+0x1a2>
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d814      	bhi.n	8005006 <UART_SetConfig+0x1ba>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <UART_SetConfig+0x19a>
 8004fe0:	2b10      	cmp	r3, #16
 8004fe2:	d008      	beq.n	8004ff6 <UART_SetConfig+0x1aa>
 8004fe4:	e00f      	b.n	8005006 <UART_SetConfig+0x1ba>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fec:	e0ad      	b.n	800514a <UART_SetConfig+0x2fe>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff4:	e0a9      	b.n	800514a <UART_SetConfig+0x2fe>
 8004ff6:	2304      	movs	r3, #4
 8004ff8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ffc:	e0a5      	b.n	800514a <UART_SetConfig+0x2fe>
 8004ffe:	2308      	movs	r3, #8
 8005000:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005004:	e0a1      	b.n	800514a <UART_SetConfig+0x2fe>
 8005006:	2310      	movs	r3, #16
 8005008:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800500c:	e09d      	b.n	800514a <UART_SetConfig+0x2fe>
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a4a      	ldr	r2, [pc, #296]	@ (800513c <UART_SetConfig+0x2f0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d125      	bne.n	8005064 <UART_SetConfig+0x218>
 8005018:	4b45      	ldr	r3, [pc, #276]	@ (8005130 <UART_SetConfig+0x2e4>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005022:	2bc0      	cmp	r3, #192	@ 0xc0
 8005024:	d016      	beq.n	8005054 <UART_SetConfig+0x208>
 8005026:	2bc0      	cmp	r3, #192	@ 0xc0
 8005028:	d818      	bhi.n	800505c <UART_SetConfig+0x210>
 800502a:	2b80      	cmp	r3, #128	@ 0x80
 800502c:	d00a      	beq.n	8005044 <UART_SetConfig+0x1f8>
 800502e:	2b80      	cmp	r3, #128	@ 0x80
 8005030:	d814      	bhi.n	800505c <UART_SetConfig+0x210>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <UART_SetConfig+0x1f0>
 8005036:	2b40      	cmp	r3, #64	@ 0x40
 8005038:	d008      	beq.n	800504c <UART_SetConfig+0x200>
 800503a:	e00f      	b.n	800505c <UART_SetConfig+0x210>
 800503c:	2300      	movs	r3, #0
 800503e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005042:	e082      	b.n	800514a <UART_SetConfig+0x2fe>
 8005044:	2302      	movs	r3, #2
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504a:	e07e      	b.n	800514a <UART_SetConfig+0x2fe>
 800504c:	2304      	movs	r3, #4
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005052:	e07a      	b.n	800514a <UART_SetConfig+0x2fe>
 8005054:	2308      	movs	r3, #8
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505a:	e076      	b.n	800514a <UART_SetConfig+0x2fe>
 800505c:	2310      	movs	r3, #16
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005062:	e072      	b.n	800514a <UART_SetConfig+0x2fe>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a35      	ldr	r2, [pc, #212]	@ (8005140 <UART_SetConfig+0x2f4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d12a      	bne.n	80050c4 <UART_SetConfig+0x278>
 800506e:	4b30      	ldr	r3, [pc, #192]	@ (8005130 <UART_SetConfig+0x2e4>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005074:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005078:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800507c:	d01a      	beq.n	80050b4 <UART_SetConfig+0x268>
 800507e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005082:	d81b      	bhi.n	80050bc <UART_SetConfig+0x270>
 8005084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005088:	d00c      	beq.n	80050a4 <UART_SetConfig+0x258>
 800508a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508e:	d815      	bhi.n	80050bc <UART_SetConfig+0x270>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <UART_SetConfig+0x250>
 8005094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005098:	d008      	beq.n	80050ac <UART_SetConfig+0x260>
 800509a:	e00f      	b.n	80050bc <UART_SetConfig+0x270>
 800509c:	2300      	movs	r3, #0
 800509e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a2:	e052      	b.n	800514a <UART_SetConfig+0x2fe>
 80050a4:	2302      	movs	r3, #2
 80050a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050aa:	e04e      	b.n	800514a <UART_SetConfig+0x2fe>
 80050ac:	2304      	movs	r3, #4
 80050ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b2:	e04a      	b.n	800514a <UART_SetConfig+0x2fe>
 80050b4:	2308      	movs	r3, #8
 80050b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ba:	e046      	b.n	800514a <UART_SetConfig+0x2fe>
 80050bc:	2310      	movs	r3, #16
 80050be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050c2:	e042      	b.n	800514a <UART_SetConfig+0x2fe>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a17      	ldr	r2, [pc, #92]	@ (8005128 <UART_SetConfig+0x2dc>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d13a      	bne.n	8005144 <UART_SetConfig+0x2f8>
 80050ce:	4b18      	ldr	r3, [pc, #96]	@ (8005130 <UART_SetConfig+0x2e4>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050dc:	d01a      	beq.n	8005114 <UART_SetConfig+0x2c8>
 80050de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050e2:	d81b      	bhi.n	800511c <UART_SetConfig+0x2d0>
 80050e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050e8:	d00c      	beq.n	8005104 <UART_SetConfig+0x2b8>
 80050ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ee:	d815      	bhi.n	800511c <UART_SetConfig+0x2d0>
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <UART_SetConfig+0x2b0>
 80050f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f8:	d008      	beq.n	800510c <UART_SetConfig+0x2c0>
 80050fa:	e00f      	b.n	800511c <UART_SetConfig+0x2d0>
 80050fc:	2300      	movs	r3, #0
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005102:	e022      	b.n	800514a <UART_SetConfig+0x2fe>
 8005104:	2302      	movs	r3, #2
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510a:	e01e      	b.n	800514a <UART_SetConfig+0x2fe>
 800510c:	2304      	movs	r3, #4
 800510e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005112:	e01a      	b.n	800514a <UART_SetConfig+0x2fe>
 8005114:	2308      	movs	r3, #8
 8005116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800511a:	e016      	b.n	800514a <UART_SetConfig+0x2fe>
 800511c:	2310      	movs	r3, #16
 800511e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005122:	e012      	b.n	800514a <UART_SetConfig+0x2fe>
 8005124:	cfff69f3 	.word	0xcfff69f3
 8005128:	40008000 	.word	0x40008000
 800512c:	40013800 	.word	0x40013800
 8005130:	40021000 	.word	0x40021000
 8005134:	40004400 	.word	0x40004400
 8005138:	40004800 	.word	0x40004800
 800513c:	40004c00 	.word	0x40004c00
 8005140:	40005000 	.word	0x40005000
 8005144:	2310      	movs	r3, #16
 8005146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4aae      	ldr	r2, [pc, #696]	@ (8005408 <UART_SetConfig+0x5bc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	f040 8097 	bne.w	8005284 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005156:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800515a:	2b08      	cmp	r3, #8
 800515c:	d823      	bhi.n	80051a6 <UART_SetConfig+0x35a>
 800515e:	a201      	add	r2, pc, #4	@ (adr r2, 8005164 <UART_SetConfig+0x318>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	08005189 	.word	0x08005189
 8005168:	080051a7 	.word	0x080051a7
 800516c:	08005191 	.word	0x08005191
 8005170:	080051a7 	.word	0x080051a7
 8005174:	08005197 	.word	0x08005197
 8005178:	080051a7 	.word	0x080051a7
 800517c:	080051a7 	.word	0x080051a7
 8005180:	080051a7 	.word	0x080051a7
 8005184:	0800519f 	.word	0x0800519f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005188:	f7fd fc04 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 800518c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800518e:	e010      	b.n	80051b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005190:	4b9e      	ldr	r3, [pc, #632]	@ (800540c <UART_SetConfig+0x5c0>)
 8005192:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005194:	e00d      	b.n	80051b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005196:	f7fd fb8f 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 800519a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800519c:	e009      	b.n	80051b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051a4:	e005      	b.n	80051b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8130 	beq.w	800541a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	4a94      	ldr	r2, [pc, #592]	@ (8005410 <UART_SetConfig+0x5c4>)
 80051c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c4:	461a      	mov	r2, r3
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d305      	bcc.n	80051ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d903      	bls.n	80051f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051f0:	e113      	b.n	800541a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	2200      	movs	r2, #0
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	60fa      	str	r2, [r7, #12]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fe:	4a84      	ldr	r2, [pc, #528]	@ (8005410 <UART_SetConfig+0x5c4>)
 8005200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005204:	b29b      	uxth	r3, r3
 8005206:	2200      	movs	r2, #0
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005210:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005214:	f7fb f85c 	bl	80002d0 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4610      	mov	r0, r2
 800521e:	4619      	mov	r1, r3
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	020b      	lsls	r3, r1, #8
 800522a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800522e:	0202      	lsls	r2, r0, #8
 8005230:	6979      	ldr	r1, [r7, #20]
 8005232:	6849      	ldr	r1, [r1, #4]
 8005234:	0849      	lsrs	r1, r1, #1
 8005236:	2000      	movs	r0, #0
 8005238:	460c      	mov	r4, r1
 800523a:	4605      	mov	r5, r0
 800523c:	eb12 0804 	adds.w	r8, r2, r4
 8005240:	eb43 0905 	adc.w	r9, r3, r5
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	469a      	mov	sl, r3
 800524c:	4693      	mov	fp, r2
 800524e:	4652      	mov	r2, sl
 8005250:	465b      	mov	r3, fp
 8005252:	4640      	mov	r0, r8
 8005254:	4649      	mov	r1, r9
 8005256:	f7fb f83b 	bl	80002d0 <__aeabi_uldivmod>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4613      	mov	r3, r2
 8005260:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005268:	d308      	bcc.n	800527c <UART_SetConfig+0x430>
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005270:	d204      	bcs.n	800527c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6a3a      	ldr	r2, [r7, #32]
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	e0ce      	b.n	800541a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005282:	e0ca      	b.n	800541a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800528c:	d166      	bne.n	800535c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800528e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005292:	2b08      	cmp	r3, #8
 8005294:	d827      	bhi.n	80052e6 <UART_SetConfig+0x49a>
 8005296:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <UART_SetConfig+0x450>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052c9 	.word	0x080052c9
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	080052e7 	.word	0x080052e7
 80052ac:	080052d7 	.word	0x080052d7
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052e7 	.word	0x080052e7
 80052b8:	080052e7 	.word	0x080052e7
 80052bc:	080052df 	.word	0x080052df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c0:	f7fd fb68 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 80052c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052c6:	e014      	b.n	80052f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7fd fb7a 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 80052cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052ce:	e010      	b.n	80052f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d0:	4b4e      	ldr	r3, [pc, #312]	@ (800540c <UART_SetConfig+0x5c0>)
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052d4:	e00d      	b.n	80052f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fd faef 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 80052da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052dc:	e009      	b.n	80052f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052e4:	e005      	b.n	80052f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8090 	beq.w	800541a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fe:	4a44      	ldr	r2, [pc, #272]	@ (8005410 <UART_SetConfig+0x5c4>)
 8005300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005304:	461a      	mov	r2, r3
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	fbb3 f3f2 	udiv	r3, r3, r2
 800530c:	005a      	lsls	r2, r3, #1
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	441a      	add	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	2b0f      	cmp	r3, #15
 8005324:	d916      	bls.n	8005354 <UART_SetConfig+0x508>
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800532c:	d212      	bcs.n	8005354 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f023 030f 	bic.w	r3, r3, #15
 8005336:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	085b      	lsrs	r3, r3, #1
 800533c:	b29b      	uxth	r3, r3
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	b29a      	uxth	r2, r3
 8005344:	8bfb      	ldrh	r3, [r7, #30]
 8005346:	4313      	orrs	r3, r2
 8005348:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	8bfa      	ldrh	r2, [r7, #30]
 8005350:	60da      	str	r2, [r3, #12]
 8005352:	e062      	b.n	800541a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800535a:	e05e      	b.n	800541a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800535c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005360:	2b08      	cmp	r3, #8
 8005362:	d828      	bhi.n	80053b6 <UART_SetConfig+0x56a>
 8005364:	a201      	add	r2, pc, #4	@ (adr r2, 800536c <UART_SetConfig+0x520>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	08005391 	.word	0x08005391
 8005370:	08005399 	.word	0x08005399
 8005374:	080053a1 	.word	0x080053a1
 8005378:	080053b7 	.word	0x080053b7
 800537c:	080053a7 	.word	0x080053a7
 8005380:	080053b7 	.word	0x080053b7
 8005384:	080053b7 	.word	0x080053b7
 8005388:	080053b7 	.word	0x080053b7
 800538c:	080053af 	.word	0x080053af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005390:	f7fd fb00 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8005394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005396:	e014      	b.n	80053c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005398:	f7fd fb12 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 800539c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800539e:	e010      	b.n	80053c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a0:	4b1a      	ldr	r3, [pc, #104]	@ (800540c <UART_SetConfig+0x5c0>)
 80053a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053a4:	e00d      	b.n	80053c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053a6:	f7fd fa87 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 80053aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053ac:	e009      	b.n	80053c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053b4:	e005      	b.n	80053c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053c0:	bf00      	nop
    }

    if (pclk != 0U)
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d028      	beq.n	800541a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	4a10      	ldr	r2, [pc, #64]	@ (8005410 <UART_SetConfig+0x5c4>)
 80053ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d2:	461a      	mov	r2, r3
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	441a      	add	r2, r3
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	2b0f      	cmp	r3, #15
 80053f0:	d910      	bls.n	8005414 <UART_SetConfig+0x5c8>
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f8:	d20c      	bcs.n	8005414 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60da      	str	r2, [r3, #12]
 8005404:	e009      	b.n	800541a <UART_SetConfig+0x5ce>
 8005406:	bf00      	nop
 8005408:	40008000 	.word	0x40008000
 800540c:	00f42400 	.word	0x00f42400
 8005410:	08006694 	.word	0x08006694
      }
      else
      {
        ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2201      	movs	r2, #1
 800541e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2201      	movs	r2, #1
 8005426:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2200      	movs	r2, #0
 800542e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2200      	movs	r2, #0
 8005434:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005436:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800543a:	4618      	mov	r0, r3
 800543c:	3730      	adds	r7, #48	@ 0x30
 800543e:	46bd      	mov	sp, r7
 8005440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01a      	beq.n	800555a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005542:	d10a      	bne.n	800555a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b098      	sub	sp, #96	@ 0x60
 800558c:	af02      	add	r7, sp, #8
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005598:	f7fb ff20 	bl	80013dc <HAL_GetTick>
 800559c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d12f      	bne.n	800560c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b4:	2200      	movs	r2, #0
 80055b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f88e 	bl	80056dc <UART_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d022      	beq.n	800560c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055da:	653b      	str	r3, [r7, #80]	@ 0x50
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e6      	bne.n	80055c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e063      	b.n	80056d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b04      	cmp	r3, #4
 8005618:	d149      	bne.n	80056ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800561a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005622:	2200      	movs	r2, #0
 8005624:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f857 	bl	80056dc <UART_WaitOnFlagUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d03c      	beq.n	80056ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	623b      	str	r3, [r7, #32]
   return(result);
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005652:	633b      	str	r3, [r7, #48]	@ 0x30
 8005654:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e6      	bne.n	8005634 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3308      	adds	r3, #8
 800566c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	60fb      	str	r3, [r7, #12]
   return(result);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3308      	adds	r3, #8
 8005684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005686:	61fa      	str	r2, [r7, #28]
 8005688:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	69b9      	ldr	r1, [r7, #24]
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	617b      	str	r3, [r7, #20]
   return(result);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e5      	bne.n	8005666 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e012      	b.n	80056d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3758      	adds	r7, #88	@ 0x58
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	4613      	mov	r3, r2
 80056ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ec:	e04f      	b.n	800578e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f4:	d04b      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f6:	f7fb fe71 	bl	80013dc <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	429a      	cmp	r2, r3
 8005704:	d302      	bcc.n	800570c <UART_WaitOnFlagUntilTimeout+0x30>
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e04e      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d037      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0xb2>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b80      	cmp	r3, #128	@ 0x80
 8005722:	d034      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b40      	cmp	r3, #64	@ 0x40
 8005728:	d031      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b08      	cmp	r3, #8
 8005736:	d110      	bne.n	800575a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2208      	movs	r2, #8
 800573e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f838 	bl	80057b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2208      	movs	r2, #8
 800574a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e029      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005768:	d111      	bne.n	800578e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f81e 	bl	80057b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e00f      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4013      	ands	r3, r2
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	429a      	cmp	r2, r3
 800579c:	bf0c      	ite	eq
 800579e:	2301      	moveq	r3, #1
 80057a0:	2300      	movne	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d0a0      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b095      	sub	sp, #84	@ 0x54
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80057de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e6      	bne.n	80057be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3308      	adds	r3, #8
 80057f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005806:	f023 0301 	bic.w	r3, r3, #1
 800580a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3308      	adds	r3, #8
 8005812:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005814:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005816:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800581a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e3      	bne.n	80057f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d118      	bne.n	8005862 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	60bb      	str	r3, [r7, #8]
   return(result);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f023 0310 	bic.w	r3, r3, #16
 8005844:	647b      	str	r3, [r7, #68]	@ 0x44
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6979      	ldr	r1, [r7, #20]
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	613b      	str	r3, [r7, #16]
   return(result);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e6      	bne.n	8005830 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005876:	bf00      	nop
 8005878:	3754      	adds	r7, #84	@ 0x54
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f7ff fabd 	bl	8004e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b088      	sub	sp, #32
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058ca:	61fb      	str	r3, [r7, #28]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	461a      	mov	r2, r3
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6979      	ldr	r1, [r7, #20]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	613b      	str	r3, [r7, #16]
   return(result);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e6      	bne.n	80058b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff fa88 	bl	8004e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058fc:	bf00      	nop
 80058fe:	3720      	adds	r7, #32
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_UARTEx_DisableFifoMode+0x16>
 8005952:	2302      	movs	r3, #2
 8005954:	e027      	b.n	80059a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2224      	movs	r2, #36	@ 0x24
 8005962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005984:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e02d      	b.n	8005a26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2224      	movs	r2, #36	@ 0x24
 80059d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f850 	bl	8005aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e02d      	b.n	8005aa2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2224      	movs	r2, #36	@ 0x24
 8005a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0201 	bic.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f812 	bl	8005aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d108      	bne.n	8005ace <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005acc:	e031      	b.n	8005b32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ace:	2308      	movs	r3, #8
 8005ad0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ad2:	2308      	movs	r3, #8
 8005ad4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	0e5b      	lsrs	r3, r3, #25
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	0f5b      	lsrs	r3, r3, #29
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005af6:	7bbb      	ldrb	r3, [r7, #14]
 8005af8:	7b3a      	ldrb	r2, [r7, #12]
 8005afa:	4911      	ldr	r1, [pc, #68]	@ (8005b40 <UARTEx_SetNbDataToProcess+0x94>)
 8005afc:	5c8a      	ldrb	r2, [r1, r2]
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b02:	7b3a      	ldrb	r2, [r7, #12]
 8005b04:	490f      	ldr	r1, [pc, #60]	@ (8005b44 <UARTEx_SetNbDataToProcess+0x98>)
 8005b06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b08:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	7b7a      	ldrb	r2, [r7, #13]
 8005b18:	4909      	ldr	r1, [pc, #36]	@ (8005b40 <UARTEx_SetNbDataToProcess+0x94>)
 8005b1a:	5c8a      	ldrb	r2, [r1, r2]
 8005b1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b20:	7b7a      	ldrb	r2, [r7, #13]
 8005b22:	4908      	ldr	r1, [pc, #32]	@ (8005b44 <UARTEx_SetNbDataToProcess+0x98>)
 8005b24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b26:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005b32:	bf00      	nop
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	080066ac 	.word	0x080066ac
 8005b44:	080066b4 	.word	0x080066b4

08005b48 <siprintf>:
 8005b48:	b40e      	push	{r1, r2, r3}
 8005b4a:	b500      	push	{lr}
 8005b4c:	b09c      	sub	sp, #112	@ 0x70
 8005b4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b50:	9002      	str	r0, [sp, #8]
 8005b52:	9006      	str	r0, [sp, #24]
 8005b54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b58:	4809      	ldr	r0, [pc, #36]	@ (8005b80 <siprintf+0x38>)
 8005b5a:	9107      	str	r1, [sp, #28]
 8005b5c:	9104      	str	r1, [sp, #16]
 8005b5e:	4909      	ldr	r1, [pc, #36]	@ (8005b84 <siprintf+0x3c>)
 8005b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b64:	9105      	str	r1, [sp, #20]
 8005b66:	6800      	ldr	r0, [r0, #0]
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	a902      	add	r1, sp, #8
 8005b6c:	f000 f994 	bl	8005e98 <_svfiprintf_r>
 8005b70:	9b02      	ldr	r3, [sp, #8]
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
 8005b76:	b01c      	add	sp, #112	@ 0x70
 8005b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b7c:	b003      	add	sp, #12
 8005b7e:	4770      	bx	lr
 8005b80:	20000014 	.word	0x20000014
 8005b84:	ffff0208 	.word	0xffff0208

08005b88 <memset>:
 8005b88:	4402      	add	r2, r0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d100      	bne.n	8005b92 <memset+0xa>
 8005b90:	4770      	bx	lr
 8005b92:	f803 1b01 	strb.w	r1, [r3], #1
 8005b96:	e7f9      	b.n	8005b8c <memset+0x4>

08005b98 <__errno>:
 8005b98:	4b01      	ldr	r3, [pc, #4]	@ (8005ba0 <__errno+0x8>)
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20000014 	.word	0x20000014

08005ba4 <__libc_init_array>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8005bdc <__libc_init_array+0x38>)
 8005ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8005be0 <__libc_init_array+0x3c>)
 8005baa:	1b64      	subs	r4, r4, r5
 8005bac:	10a4      	asrs	r4, r4, #2
 8005bae:	2600      	movs	r6, #0
 8005bb0:	42a6      	cmp	r6, r4
 8005bb2:	d109      	bne.n	8005bc8 <__libc_init_array+0x24>
 8005bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8005be4 <__libc_init_array+0x40>)
 8005bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8005be8 <__libc_init_array+0x44>)
 8005bb8:	f000 fc66 	bl	8006488 <_init>
 8005bbc:	1b64      	subs	r4, r4, r5
 8005bbe:	10a4      	asrs	r4, r4, #2
 8005bc0:	2600      	movs	r6, #0
 8005bc2:	42a6      	cmp	r6, r4
 8005bc4:	d105      	bne.n	8005bd2 <__libc_init_array+0x2e>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bcc:	4798      	blx	r3
 8005bce:	3601      	adds	r6, #1
 8005bd0:	e7ee      	b.n	8005bb0 <__libc_init_array+0xc>
 8005bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd6:	4798      	blx	r3
 8005bd8:	3601      	adds	r6, #1
 8005bda:	e7f2      	b.n	8005bc2 <__libc_init_array+0x1e>
 8005bdc:	080066f8 	.word	0x080066f8
 8005be0:	080066f8 	.word	0x080066f8
 8005be4:	080066f8 	.word	0x080066f8
 8005be8:	080066fc 	.word	0x080066fc

08005bec <__retarget_lock_acquire_recursive>:
 8005bec:	4770      	bx	lr

08005bee <__retarget_lock_release_recursive>:
 8005bee:	4770      	bx	lr

08005bf0 <_free_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d041      	beq.n	8005c7c <_free_r+0x8c>
 8005bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bfc:	1f0c      	subs	r4, r1, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bfb8      	it	lt
 8005c02:	18e4      	addlt	r4, r4, r3
 8005c04:	f000 f8e0 	bl	8005dc8 <__malloc_lock>
 8005c08:	4a1d      	ldr	r2, [pc, #116]	@ (8005c80 <_free_r+0x90>)
 8005c0a:	6813      	ldr	r3, [r2, #0]
 8005c0c:	b933      	cbnz	r3, 8005c1c <_free_r+0x2c>
 8005c0e:	6063      	str	r3, [r4, #4]
 8005c10:	6014      	str	r4, [r2, #0]
 8005c12:	4628      	mov	r0, r5
 8005c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c18:	f000 b8dc 	b.w	8005dd4 <__malloc_unlock>
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	d908      	bls.n	8005c32 <_free_r+0x42>
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	1821      	adds	r1, r4, r0
 8005c24:	428b      	cmp	r3, r1
 8005c26:	bf01      	itttt	eq
 8005c28:	6819      	ldreq	r1, [r3, #0]
 8005c2a:	685b      	ldreq	r3, [r3, #4]
 8005c2c:	1809      	addeq	r1, r1, r0
 8005c2e:	6021      	streq	r1, [r4, #0]
 8005c30:	e7ed      	b.n	8005c0e <_free_r+0x1e>
 8005c32:	461a      	mov	r2, r3
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	b10b      	cbz	r3, 8005c3c <_free_r+0x4c>
 8005c38:	42a3      	cmp	r3, r4
 8005c3a:	d9fa      	bls.n	8005c32 <_free_r+0x42>
 8005c3c:	6811      	ldr	r1, [r2, #0]
 8005c3e:	1850      	adds	r0, r2, r1
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	d10b      	bne.n	8005c5c <_free_r+0x6c>
 8005c44:	6820      	ldr	r0, [r4, #0]
 8005c46:	4401      	add	r1, r0
 8005c48:	1850      	adds	r0, r2, r1
 8005c4a:	4283      	cmp	r3, r0
 8005c4c:	6011      	str	r1, [r2, #0]
 8005c4e:	d1e0      	bne.n	8005c12 <_free_r+0x22>
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	6053      	str	r3, [r2, #4]
 8005c56:	4408      	add	r0, r1
 8005c58:	6010      	str	r0, [r2, #0]
 8005c5a:	e7da      	b.n	8005c12 <_free_r+0x22>
 8005c5c:	d902      	bls.n	8005c64 <_free_r+0x74>
 8005c5e:	230c      	movs	r3, #12
 8005c60:	602b      	str	r3, [r5, #0]
 8005c62:	e7d6      	b.n	8005c12 <_free_r+0x22>
 8005c64:	6820      	ldr	r0, [r4, #0]
 8005c66:	1821      	adds	r1, r4, r0
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	bf04      	itt	eq
 8005c6c:	6819      	ldreq	r1, [r3, #0]
 8005c6e:	685b      	ldreq	r3, [r3, #4]
 8005c70:	6063      	str	r3, [r4, #4]
 8005c72:	bf04      	itt	eq
 8005c74:	1809      	addeq	r1, r1, r0
 8005c76:	6021      	streq	r1, [r4, #0]
 8005c78:	6054      	str	r4, [r2, #4]
 8005c7a:	e7ca      	b.n	8005c12 <_free_r+0x22>
 8005c7c:	bd38      	pop	{r3, r4, r5, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000458 	.word	0x20000458

08005c84 <sbrk_aligned>:
 8005c84:	b570      	push	{r4, r5, r6, lr}
 8005c86:	4e0f      	ldr	r6, [pc, #60]	@ (8005cc4 <sbrk_aligned+0x40>)
 8005c88:	460c      	mov	r4, r1
 8005c8a:	6831      	ldr	r1, [r6, #0]
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	b911      	cbnz	r1, 8005c96 <sbrk_aligned+0x12>
 8005c90:	f000 fba6 	bl	80063e0 <_sbrk_r>
 8005c94:	6030      	str	r0, [r6, #0]
 8005c96:	4621      	mov	r1, r4
 8005c98:	4628      	mov	r0, r5
 8005c9a:	f000 fba1 	bl	80063e0 <_sbrk_r>
 8005c9e:	1c43      	adds	r3, r0, #1
 8005ca0:	d103      	bne.n	8005caa <sbrk_aligned+0x26>
 8005ca2:	f04f 34ff 	mov.w	r4, #4294967295
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	bd70      	pop	{r4, r5, r6, pc}
 8005caa:	1cc4      	adds	r4, r0, #3
 8005cac:	f024 0403 	bic.w	r4, r4, #3
 8005cb0:	42a0      	cmp	r0, r4
 8005cb2:	d0f8      	beq.n	8005ca6 <sbrk_aligned+0x22>
 8005cb4:	1a21      	subs	r1, r4, r0
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f000 fb92 	bl	80063e0 <_sbrk_r>
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d1f2      	bne.n	8005ca6 <sbrk_aligned+0x22>
 8005cc0:	e7ef      	b.n	8005ca2 <sbrk_aligned+0x1e>
 8005cc2:	bf00      	nop
 8005cc4:	20000454 	.word	0x20000454

08005cc8 <_malloc_r>:
 8005cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ccc:	1ccd      	adds	r5, r1, #3
 8005cce:	f025 0503 	bic.w	r5, r5, #3
 8005cd2:	3508      	adds	r5, #8
 8005cd4:	2d0c      	cmp	r5, #12
 8005cd6:	bf38      	it	cc
 8005cd8:	250c      	movcc	r5, #12
 8005cda:	2d00      	cmp	r5, #0
 8005cdc:	4606      	mov	r6, r0
 8005cde:	db01      	blt.n	8005ce4 <_malloc_r+0x1c>
 8005ce0:	42a9      	cmp	r1, r5
 8005ce2:	d904      	bls.n	8005cee <_malloc_r+0x26>
 8005ce4:	230c      	movs	r3, #12
 8005ce6:	6033      	str	r3, [r6, #0]
 8005ce8:	2000      	movs	r0, #0
 8005cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005dc4 <_malloc_r+0xfc>
 8005cf2:	f000 f869 	bl	8005dc8 <__malloc_lock>
 8005cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cfa:	461c      	mov	r4, r3
 8005cfc:	bb44      	cbnz	r4, 8005d50 <_malloc_r+0x88>
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4630      	mov	r0, r6
 8005d02:	f7ff ffbf 	bl	8005c84 <sbrk_aligned>
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	4604      	mov	r4, r0
 8005d0a:	d158      	bne.n	8005dbe <_malloc_r+0xf6>
 8005d0c:	f8d8 4000 	ldr.w	r4, [r8]
 8005d10:	4627      	mov	r7, r4
 8005d12:	2f00      	cmp	r7, #0
 8005d14:	d143      	bne.n	8005d9e <_malloc_r+0xd6>
 8005d16:	2c00      	cmp	r4, #0
 8005d18:	d04b      	beq.n	8005db2 <_malloc_r+0xea>
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	4639      	mov	r1, r7
 8005d1e:	4630      	mov	r0, r6
 8005d20:	eb04 0903 	add.w	r9, r4, r3
 8005d24:	f000 fb5c 	bl	80063e0 <_sbrk_r>
 8005d28:	4581      	cmp	r9, r0
 8005d2a:	d142      	bne.n	8005db2 <_malloc_r+0xea>
 8005d2c:	6821      	ldr	r1, [r4, #0]
 8005d2e:	1a6d      	subs	r5, r5, r1
 8005d30:	4629      	mov	r1, r5
 8005d32:	4630      	mov	r0, r6
 8005d34:	f7ff ffa6 	bl	8005c84 <sbrk_aligned>
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d03a      	beq.n	8005db2 <_malloc_r+0xea>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	442b      	add	r3, r5
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	f8d8 3000 	ldr.w	r3, [r8]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	bb62      	cbnz	r2, 8005da4 <_malloc_r+0xdc>
 8005d4a:	f8c8 7000 	str.w	r7, [r8]
 8005d4e:	e00f      	b.n	8005d70 <_malloc_r+0xa8>
 8005d50:	6822      	ldr	r2, [r4, #0]
 8005d52:	1b52      	subs	r2, r2, r5
 8005d54:	d420      	bmi.n	8005d98 <_malloc_r+0xd0>
 8005d56:	2a0b      	cmp	r2, #11
 8005d58:	d917      	bls.n	8005d8a <_malloc_r+0xc2>
 8005d5a:	1961      	adds	r1, r4, r5
 8005d5c:	42a3      	cmp	r3, r4
 8005d5e:	6025      	str	r5, [r4, #0]
 8005d60:	bf18      	it	ne
 8005d62:	6059      	strne	r1, [r3, #4]
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	bf08      	it	eq
 8005d68:	f8c8 1000 	streq.w	r1, [r8]
 8005d6c:	5162      	str	r2, [r4, r5]
 8005d6e:	604b      	str	r3, [r1, #4]
 8005d70:	4630      	mov	r0, r6
 8005d72:	f000 f82f 	bl	8005dd4 <__malloc_unlock>
 8005d76:	f104 000b 	add.w	r0, r4, #11
 8005d7a:	1d23      	adds	r3, r4, #4
 8005d7c:	f020 0007 	bic.w	r0, r0, #7
 8005d80:	1ac2      	subs	r2, r0, r3
 8005d82:	bf1c      	itt	ne
 8005d84:	1a1b      	subne	r3, r3, r0
 8005d86:	50a3      	strne	r3, [r4, r2]
 8005d88:	e7af      	b.n	8005cea <_malloc_r+0x22>
 8005d8a:	6862      	ldr	r2, [r4, #4]
 8005d8c:	42a3      	cmp	r3, r4
 8005d8e:	bf0c      	ite	eq
 8005d90:	f8c8 2000 	streq.w	r2, [r8]
 8005d94:	605a      	strne	r2, [r3, #4]
 8005d96:	e7eb      	b.n	8005d70 <_malloc_r+0xa8>
 8005d98:	4623      	mov	r3, r4
 8005d9a:	6864      	ldr	r4, [r4, #4]
 8005d9c:	e7ae      	b.n	8005cfc <_malloc_r+0x34>
 8005d9e:	463c      	mov	r4, r7
 8005da0:	687f      	ldr	r7, [r7, #4]
 8005da2:	e7b6      	b.n	8005d12 <_malloc_r+0x4a>
 8005da4:	461a      	mov	r2, r3
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	42a3      	cmp	r3, r4
 8005daa:	d1fb      	bne.n	8005da4 <_malloc_r+0xdc>
 8005dac:	2300      	movs	r3, #0
 8005dae:	6053      	str	r3, [r2, #4]
 8005db0:	e7de      	b.n	8005d70 <_malloc_r+0xa8>
 8005db2:	230c      	movs	r3, #12
 8005db4:	6033      	str	r3, [r6, #0]
 8005db6:	4630      	mov	r0, r6
 8005db8:	f000 f80c 	bl	8005dd4 <__malloc_unlock>
 8005dbc:	e794      	b.n	8005ce8 <_malloc_r+0x20>
 8005dbe:	6005      	str	r5, [r0, #0]
 8005dc0:	e7d6      	b.n	8005d70 <_malloc_r+0xa8>
 8005dc2:	bf00      	nop
 8005dc4:	20000458 	.word	0x20000458

08005dc8 <__malloc_lock>:
 8005dc8:	4801      	ldr	r0, [pc, #4]	@ (8005dd0 <__malloc_lock+0x8>)
 8005dca:	f7ff bf0f 	b.w	8005bec <__retarget_lock_acquire_recursive>
 8005dce:	bf00      	nop
 8005dd0:	20000450 	.word	0x20000450

08005dd4 <__malloc_unlock>:
 8005dd4:	4801      	ldr	r0, [pc, #4]	@ (8005ddc <__malloc_unlock+0x8>)
 8005dd6:	f7ff bf0a 	b.w	8005bee <__retarget_lock_release_recursive>
 8005dda:	bf00      	nop
 8005ddc:	20000450 	.word	0x20000450

08005de0 <__ssputs_r>:
 8005de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	688e      	ldr	r6, [r1, #8]
 8005de6:	461f      	mov	r7, r3
 8005de8:	42be      	cmp	r6, r7
 8005dea:	680b      	ldr	r3, [r1, #0]
 8005dec:	4682      	mov	sl, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	4690      	mov	r8, r2
 8005df2:	d82d      	bhi.n	8005e50 <__ssputs_r+0x70>
 8005df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005df8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005dfc:	d026      	beq.n	8005e4c <__ssputs_r+0x6c>
 8005dfe:	6965      	ldr	r5, [r4, #20]
 8005e00:	6909      	ldr	r1, [r1, #16]
 8005e02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e06:	eba3 0901 	sub.w	r9, r3, r1
 8005e0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e0e:	1c7b      	adds	r3, r7, #1
 8005e10:	444b      	add	r3, r9
 8005e12:	106d      	asrs	r5, r5, #1
 8005e14:	429d      	cmp	r5, r3
 8005e16:	bf38      	it	cc
 8005e18:	461d      	movcc	r5, r3
 8005e1a:	0553      	lsls	r3, r2, #21
 8005e1c:	d527      	bpl.n	8005e6e <__ssputs_r+0x8e>
 8005e1e:	4629      	mov	r1, r5
 8005e20:	f7ff ff52 	bl	8005cc8 <_malloc_r>
 8005e24:	4606      	mov	r6, r0
 8005e26:	b360      	cbz	r0, 8005e82 <__ssputs_r+0xa2>
 8005e28:	6921      	ldr	r1, [r4, #16]
 8005e2a:	464a      	mov	r2, r9
 8005e2c:	f000 fae8 	bl	8006400 <memcpy>
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e3a:	81a3      	strh	r3, [r4, #12]
 8005e3c:	6126      	str	r6, [r4, #16]
 8005e3e:	6165      	str	r5, [r4, #20]
 8005e40:	444e      	add	r6, r9
 8005e42:	eba5 0509 	sub.w	r5, r5, r9
 8005e46:	6026      	str	r6, [r4, #0]
 8005e48:	60a5      	str	r5, [r4, #8]
 8005e4a:	463e      	mov	r6, r7
 8005e4c:	42be      	cmp	r6, r7
 8005e4e:	d900      	bls.n	8005e52 <__ssputs_r+0x72>
 8005e50:	463e      	mov	r6, r7
 8005e52:	6820      	ldr	r0, [r4, #0]
 8005e54:	4632      	mov	r2, r6
 8005e56:	4641      	mov	r1, r8
 8005e58:	f000 faa8 	bl	80063ac <memmove>
 8005e5c:	68a3      	ldr	r3, [r4, #8]
 8005e5e:	1b9b      	subs	r3, r3, r6
 8005e60:	60a3      	str	r3, [r4, #8]
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	4433      	add	r3, r6
 8005e66:	6023      	str	r3, [r4, #0]
 8005e68:	2000      	movs	r0, #0
 8005e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e6e:	462a      	mov	r2, r5
 8005e70:	f000 fad4 	bl	800641c <_realloc_r>
 8005e74:	4606      	mov	r6, r0
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d1e0      	bne.n	8005e3c <__ssputs_r+0x5c>
 8005e7a:	6921      	ldr	r1, [r4, #16]
 8005e7c:	4650      	mov	r0, sl
 8005e7e:	f7ff feb7 	bl	8005bf0 <_free_r>
 8005e82:	230c      	movs	r3, #12
 8005e84:	f8ca 3000 	str.w	r3, [sl]
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e8e:	81a3      	strh	r3, [r4, #12]
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295
 8005e94:	e7e9      	b.n	8005e6a <__ssputs_r+0x8a>
	...

08005e98 <_svfiprintf_r>:
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	4698      	mov	r8, r3
 8005e9e:	898b      	ldrh	r3, [r1, #12]
 8005ea0:	061b      	lsls	r3, r3, #24
 8005ea2:	b09d      	sub	sp, #116	@ 0x74
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	460d      	mov	r5, r1
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	d510      	bpl.n	8005ece <_svfiprintf_r+0x36>
 8005eac:	690b      	ldr	r3, [r1, #16]
 8005eae:	b973      	cbnz	r3, 8005ece <_svfiprintf_r+0x36>
 8005eb0:	2140      	movs	r1, #64	@ 0x40
 8005eb2:	f7ff ff09 	bl	8005cc8 <_malloc_r>
 8005eb6:	6028      	str	r0, [r5, #0]
 8005eb8:	6128      	str	r0, [r5, #16]
 8005eba:	b930      	cbnz	r0, 8005eca <_svfiprintf_r+0x32>
 8005ebc:	230c      	movs	r3, #12
 8005ebe:	603b      	str	r3, [r7, #0]
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	b01d      	add	sp, #116	@ 0x74
 8005ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eca:	2340      	movs	r3, #64	@ 0x40
 8005ecc:	616b      	str	r3, [r5, #20]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ed2:	2320      	movs	r3, #32
 8005ed4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ed8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005edc:	2330      	movs	r3, #48	@ 0x30
 8005ede:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800607c <_svfiprintf_r+0x1e4>
 8005ee2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ee6:	f04f 0901 	mov.w	r9, #1
 8005eea:	4623      	mov	r3, r4
 8005eec:	469a      	mov	sl, r3
 8005eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ef2:	b10a      	cbz	r2, 8005ef8 <_svfiprintf_r+0x60>
 8005ef4:	2a25      	cmp	r2, #37	@ 0x25
 8005ef6:	d1f9      	bne.n	8005eec <_svfiprintf_r+0x54>
 8005ef8:	ebba 0b04 	subs.w	fp, sl, r4
 8005efc:	d00b      	beq.n	8005f16 <_svfiprintf_r+0x7e>
 8005efe:	465b      	mov	r3, fp
 8005f00:	4622      	mov	r2, r4
 8005f02:	4629      	mov	r1, r5
 8005f04:	4638      	mov	r0, r7
 8005f06:	f7ff ff6b 	bl	8005de0 <__ssputs_r>
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	f000 80a7 	beq.w	800605e <_svfiprintf_r+0x1c6>
 8005f10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f12:	445a      	add	r2, fp
 8005f14:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f16:	f89a 3000 	ldrb.w	r3, [sl]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 809f 	beq.w	800605e <_svfiprintf_r+0x1c6>
 8005f20:	2300      	movs	r3, #0
 8005f22:	f04f 32ff 	mov.w	r2, #4294967295
 8005f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f2a:	f10a 0a01 	add.w	sl, sl, #1
 8005f2e:	9304      	str	r3, [sp, #16]
 8005f30:	9307      	str	r3, [sp, #28]
 8005f32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f36:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f38:	4654      	mov	r4, sl
 8005f3a:	2205      	movs	r2, #5
 8005f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f40:	484e      	ldr	r0, [pc, #312]	@ (800607c <_svfiprintf_r+0x1e4>)
 8005f42:	f7fa f975 	bl	8000230 <memchr>
 8005f46:	9a04      	ldr	r2, [sp, #16]
 8005f48:	b9d8      	cbnz	r0, 8005f82 <_svfiprintf_r+0xea>
 8005f4a:	06d0      	lsls	r0, r2, #27
 8005f4c:	bf44      	itt	mi
 8005f4e:	2320      	movmi	r3, #32
 8005f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f54:	0711      	lsls	r1, r2, #28
 8005f56:	bf44      	itt	mi
 8005f58:	232b      	movmi	r3, #43	@ 0x2b
 8005f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f64:	d015      	beq.n	8005f92 <_svfiprintf_r+0xfa>
 8005f66:	9a07      	ldr	r2, [sp, #28]
 8005f68:	4654      	mov	r4, sl
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	f04f 0c0a 	mov.w	ip, #10
 8005f70:	4621      	mov	r1, r4
 8005f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f76:	3b30      	subs	r3, #48	@ 0x30
 8005f78:	2b09      	cmp	r3, #9
 8005f7a:	d94b      	bls.n	8006014 <_svfiprintf_r+0x17c>
 8005f7c:	b1b0      	cbz	r0, 8005fac <_svfiprintf_r+0x114>
 8005f7e:	9207      	str	r2, [sp, #28]
 8005f80:	e014      	b.n	8005fac <_svfiprintf_r+0x114>
 8005f82:	eba0 0308 	sub.w	r3, r0, r8
 8005f86:	fa09 f303 	lsl.w	r3, r9, r3
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	9304      	str	r3, [sp, #16]
 8005f8e:	46a2      	mov	sl, r4
 8005f90:	e7d2      	b.n	8005f38 <_svfiprintf_r+0xa0>
 8005f92:	9b03      	ldr	r3, [sp, #12]
 8005f94:	1d19      	adds	r1, r3, #4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	9103      	str	r1, [sp, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	bfbb      	ittet	lt
 8005f9e:	425b      	neglt	r3, r3
 8005fa0:	f042 0202 	orrlt.w	r2, r2, #2
 8005fa4:	9307      	strge	r3, [sp, #28]
 8005fa6:	9307      	strlt	r3, [sp, #28]
 8005fa8:	bfb8      	it	lt
 8005faa:	9204      	strlt	r2, [sp, #16]
 8005fac:	7823      	ldrb	r3, [r4, #0]
 8005fae:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fb0:	d10a      	bne.n	8005fc8 <_svfiprintf_r+0x130>
 8005fb2:	7863      	ldrb	r3, [r4, #1]
 8005fb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fb6:	d132      	bne.n	800601e <_svfiprintf_r+0x186>
 8005fb8:	9b03      	ldr	r3, [sp, #12]
 8005fba:	1d1a      	adds	r2, r3, #4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	9203      	str	r2, [sp, #12]
 8005fc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fc4:	3402      	adds	r4, #2
 8005fc6:	9305      	str	r3, [sp, #20]
 8005fc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800608c <_svfiprintf_r+0x1f4>
 8005fcc:	7821      	ldrb	r1, [r4, #0]
 8005fce:	2203      	movs	r2, #3
 8005fd0:	4650      	mov	r0, sl
 8005fd2:	f7fa f92d 	bl	8000230 <memchr>
 8005fd6:	b138      	cbz	r0, 8005fe8 <_svfiprintf_r+0x150>
 8005fd8:	9b04      	ldr	r3, [sp, #16]
 8005fda:	eba0 000a 	sub.w	r0, r0, sl
 8005fde:	2240      	movs	r2, #64	@ 0x40
 8005fe0:	4082      	lsls	r2, r0
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	3401      	adds	r4, #1
 8005fe6:	9304      	str	r3, [sp, #16]
 8005fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fec:	4824      	ldr	r0, [pc, #144]	@ (8006080 <_svfiprintf_r+0x1e8>)
 8005fee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ff2:	2206      	movs	r2, #6
 8005ff4:	f7fa f91c 	bl	8000230 <memchr>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d036      	beq.n	800606a <_svfiprintf_r+0x1d2>
 8005ffc:	4b21      	ldr	r3, [pc, #132]	@ (8006084 <_svfiprintf_r+0x1ec>)
 8005ffe:	bb1b      	cbnz	r3, 8006048 <_svfiprintf_r+0x1b0>
 8006000:	9b03      	ldr	r3, [sp, #12]
 8006002:	3307      	adds	r3, #7
 8006004:	f023 0307 	bic.w	r3, r3, #7
 8006008:	3308      	adds	r3, #8
 800600a:	9303      	str	r3, [sp, #12]
 800600c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800600e:	4433      	add	r3, r6
 8006010:	9309      	str	r3, [sp, #36]	@ 0x24
 8006012:	e76a      	b.n	8005eea <_svfiprintf_r+0x52>
 8006014:	fb0c 3202 	mla	r2, ip, r2, r3
 8006018:	460c      	mov	r4, r1
 800601a:	2001      	movs	r0, #1
 800601c:	e7a8      	b.n	8005f70 <_svfiprintf_r+0xd8>
 800601e:	2300      	movs	r3, #0
 8006020:	3401      	adds	r4, #1
 8006022:	9305      	str	r3, [sp, #20]
 8006024:	4619      	mov	r1, r3
 8006026:	f04f 0c0a 	mov.w	ip, #10
 800602a:	4620      	mov	r0, r4
 800602c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006030:	3a30      	subs	r2, #48	@ 0x30
 8006032:	2a09      	cmp	r2, #9
 8006034:	d903      	bls.n	800603e <_svfiprintf_r+0x1a6>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0c6      	beq.n	8005fc8 <_svfiprintf_r+0x130>
 800603a:	9105      	str	r1, [sp, #20]
 800603c:	e7c4      	b.n	8005fc8 <_svfiprintf_r+0x130>
 800603e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006042:	4604      	mov	r4, r0
 8006044:	2301      	movs	r3, #1
 8006046:	e7f0      	b.n	800602a <_svfiprintf_r+0x192>
 8006048:	ab03      	add	r3, sp, #12
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	462a      	mov	r2, r5
 800604e:	4b0e      	ldr	r3, [pc, #56]	@ (8006088 <_svfiprintf_r+0x1f0>)
 8006050:	a904      	add	r1, sp, #16
 8006052:	4638      	mov	r0, r7
 8006054:	f3af 8000 	nop.w
 8006058:	1c42      	adds	r2, r0, #1
 800605a:	4606      	mov	r6, r0
 800605c:	d1d6      	bne.n	800600c <_svfiprintf_r+0x174>
 800605e:	89ab      	ldrh	r3, [r5, #12]
 8006060:	065b      	lsls	r3, r3, #25
 8006062:	f53f af2d 	bmi.w	8005ec0 <_svfiprintf_r+0x28>
 8006066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006068:	e72c      	b.n	8005ec4 <_svfiprintf_r+0x2c>
 800606a:	ab03      	add	r3, sp, #12
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	462a      	mov	r2, r5
 8006070:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <_svfiprintf_r+0x1f0>)
 8006072:	a904      	add	r1, sp, #16
 8006074:	4638      	mov	r0, r7
 8006076:	f000 f879 	bl	800616c <_printf_i>
 800607a:	e7ed      	b.n	8006058 <_svfiprintf_r+0x1c0>
 800607c:	080066bc 	.word	0x080066bc
 8006080:	080066c6 	.word	0x080066c6
 8006084:	00000000 	.word	0x00000000
 8006088:	08005de1 	.word	0x08005de1
 800608c:	080066c2 	.word	0x080066c2

08006090 <_printf_common>:
 8006090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	4616      	mov	r6, r2
 8006096:	4698      	mov	r8, r3
 8006098:	688a      	ldr	r2, [r1, #8]
 800609a:	690b      	ldr	r3, [r1, #16]
 800609c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060a0:	4293      	cmp	r3, r2
 80060a2:	bfb8      	it	lt
 80060a4:	4613      	movlt	r3, r2
 80060a6:	6033      	str	r3, [r6, #0]
 80060a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060ac:	4607      	mov	r7, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	b10a      	cbz	r2, 80060b6 <_printf_common+0x26>
 80060b2:	3301      	adds	r3, #1
 80060b4:	6033      	str	r3, [r6, #0]
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	0699      	lsls	r1, r3, #26
 80060ba:	bf42      	ittt	mi
 80060bc:	6833      	ldrmi	r3, [r6, #0]
 80060be:	3302      	addmi	r3, #2
 80060c0:	6033      	strmi	r3, [r6, #0]
 80060c2:	6825      	ldr	r5, [r4, #0]
 80060c4:	f015 0506 	ands.w	r5, r5, #6
 80060c8:	d106      	bne.n	80060d8 <_printf_common+0x48>
 80060ca:	f104 0a19 	add.w	sl, r4, #25
 80060ce:	68e3      	ldr	r3, [r4, #12]
 80060d0:	6832      	ldr	r2, [r6, #0]
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	42ab      	cmp	r3, r5
 80060d6:	dc26      	bgt.n	8006126 <_printf_common+0x96>
 80060d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060dc:	6822      	ldr	r2, [r4, #0]
 80060de:	3b00      	subs	r3, #0
 80060e0:	bf18      	it	ne
 80060e2:	2301      	movne	r3, #1
 80060e4:	0692      	lsls	r2, r2, #26
 80060e6:	d42b      	bmi.n	8006140 <_printf_common+0xb0>
 80060e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060ec:	4641      	mov	r1, r8
 80060ee:	4638      	mov	r0, r7
 80060f0:	47c8      	blx	r9
 80060f2:	3001      	adds	r0, #1
 80060f4:	d01e      	beq.n	8006134 <_printf_common+0xa4>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	6922      	ldr	r2, [r4, #16]
 80060fa:	f003 0306 	and.w	r3, r3, #6
 80060fe:	2b04      	cmp	r3, #4
 8006100:	bf02      	ittt	eq
 8006102:	68e5      	ldreq	r5, [r4, #12]
 8006104:	6833      	ldreq	r3, [r6, #0]
 8006106:	1aed      	subeq	r5, r5, r3
 8006108:	68a3      	ldr	r3, [r4, #8]
 800610a:	bf0c      	ite	eq
 800610c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006110:	2500      	movne	r5, #0
 8006112:	4293      	cmp	r3, r2
 8006114:	bfc4      	itt	gt
 8006116:	1a9b      	subgt	r3, r3, r2
 8006118:	18ed      	addgt	r5, r5, r3
 800611a:	2600      	movs	r6, #0
 800611c:	341a      	adds	r4, #26
 800611e:	42b5      	cmp	r5, r6
 8006120:	d11a      	bne.n	8006158 <_printf_common+0xc8>
 8006122:	2000      	movs	r0, #0
 8006124:	e008      	b.n	8006138 <_printf_common+0xa8>
 8006126:	2301      	movs	r3, #1
 8006128:	4652      	mov	r2, sl
 800612a:	4641      	mov	r1, r8
 800612c:	4638      	mov	r0, r7
 800612e:	47c8      	blx	r9
 8006130:	3001      	adds	r0, #1
 8006132:	d103      	bne.n	800613c <_printf_common+0xac>
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613c:	3501      	adds	r5, #1
 800613e:	e7c6      	b.n	80060ce <_printf_common+0x3e>
 8006140:	18e1      	adds	r1, r4, r3
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	2030      	movs	r0, #48	@ 0x30
 8006146:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800614a:	4422      	add	r2, r4
 800614c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006154:	3302      	adds	r3, #2
 8006156:	e7c7      	b.n	80060e8 <_printf_common+0x58>
 8006158:	2301      	movs	r3, #1
 800615a:	4622      	mov	r2, r4
 800615c:	4641      	mov	r1, r8
 800615e:	4638      	mov	r0, r7
 8006160:	47c8      	blx	r9
 8006162:	3001      	adds	r0, #1
 8006164:	d0e6      	beq.n	8006134 <_printf_common+0xa4>
 8006166:	3601      	adds	r6, #1
 8006168:	e7d9      	b.n	800611e <_printf_common+0x8e>
	...

0800616c <_printf_i>:
 800616c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	7e0f      	ldrb	r7, [r1, #24]
 8006172:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006174:	2f78      	cmp	r7, #120	@ 0x78
 8006176:	4691      	mov	r9, r2
 8006178:	4680      	mov	r8, r0
 800617a:	460c      	mov	r4, r1
 800617c:	469a      	mov	sl, r3
 800617e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006182:	d807      	bhi.n	8006194 <_printf_i+0x28>
 8006184:	2f62      	cmp	r7, #98	@ 0x62
 8006186:	d80a      	bhi.n	800619e <_printf_i+0x32>
 8006188:	2f00      	cmp	r7, #0
 800618a:	f000 80d2 	beq.w	8006332 <_printf_i+0x1c6>
 800618e:	2f58      	cmp	r7, #88	@ 0x58
 8006190:	f000 80b9 	beq.w	8006306 <_printf_i+0x19a>
 8006194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006198:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800619c:	e03a      	b.n	8006214 <_printf_i+0xa8>
 800619e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061a2:	2b15      	cmp	r3, #21
 80061a4:	d8f6      	bhi.n	8006194 <_printf_i+0x28>
 80061a6:	a101      	add	r1, pc, #4	@ (adr r1, 80061ac <_printf_i+0x40>)
 80061a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061ac:	08006205 	.word	0x08006205
 80061b0:	08006219 	.word	0x08006219
 80061b4:	08006195 	.word	0x08006195
 80061b8:	08006195 	.word	0x08006195
 80061bc:	08006195 	.word	0x08006195
 80061c0:	08006195 	.word	0x08006195
 80061c4:	08006219 	.word	0x08006219
 80061c8:	08006195 	.word	0x08006195
 80061cc:	08006195 	.word	0x08006195
 80061d0:	08006195 	.word	0x08006195
 80061d4:	08006195 	.word	0x08006195
 80061d8:	08006319 	.word	0x08006319
 80061dc:	08006243 	.word	0x08006243
 80061e0:	080062d3 	.word	0x080062d3
 80061e4:	08006195 	.word	0x08006195
 80061e8:	08006195 	.word	0x08006195
 80061ec:	0800633b 	.word	0x0800633b
 80061f0:	08006195 	.word	0x08006195
 80061f4:	08006243 	.word	0x08006243
 80061f8:	08006195 	.word	0x08006195
 80061fc:	08006195 	.word	0x08006195
 8006200:	080062db 	.word	0x080062db
 8006204:	6833      	ldr	r3, [r6, #0]
 8006206:	1d1a      	adds	r2, r3, #4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6032      	str	r2, [r6, #0]
 800620c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006210:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006214:	2301      	movs	r3, #1
 8006216:	e09d      	b.n	8006354 <_printf_i+0x1e8>
 8006218:	6833      	ldr	r3, [r6, #0]
 800621a:	6820      	ldr	r0, [r4, #0]
 800621c:	1d19      	adds	r1, r3, #4
 800621e:	6031      	str	r1, [r6, #0]
 8006220:	0606      	lsls	r6, r0, #24
 8006222:	d501      	bpl.n	8006228 <_printf_i+0xbc>
 8006224:	681d      	ldr	r5, [r3, #0]
 8006226:	e003      	b.n	8006230 <_printf_i+0xc4>
 8006228:	0645      	lsls	r5, r0, #25
 800622a:	d5fb      	bpl.n	8006224 <_printf_i+0xb8>
 800622c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006230:	2d00      	cmp	r5, #0
 8006232:	da03      	bge.n	800623c <_printf_i+0xd0>
 8006234:	232d      	movs	r3, #45	@ 0x2d
 8006236:	426d      	negs	r5, r5
 8006238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800623c:	4859      	ldr	r0, [pc, #356]	@ (80063a4 <_printf_i+0x238>)
 800623e:	230a      	movs	r3, #10
 8006240:	e011      	b.n	8006266 <_printf_i+0xfa>
 8006242:	6821      	ldr	r1, [r4, #0]
 8006244:	6833      	ldr	r3, [r6, #0]
 8006246:	0608      	lsls	r0, r1, #24
 8006248:	f853 5b04 	ldr.w	r5, [r3], #4
 800624c:	d402      	bmi.n	8006254 <_printf_i+0xe8>
 800624e:	0649      	lsls	r1, r1, #25
 8006250:	bf48      	it	mi
 8006252:	b2ad      	uxthmi	r5, r5
 8006254:	2f6f      	cmp	r7, #111	@ 0x6f
 8006256:	4853      	ldr	r0, [pc, #332]	@ (80063a4 <_printf_i+0x238>)
 8006258:	6033      	str	r3, [r6, #0]
 800625a:	bf14      	ite	ne
 800625c:	230a      	movne	r3, #10
 800625e:	2308      	moveq	r3, #8
 8006260:	2100      	movs	r1, #0
 8006262:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006266:	6866      	ldr	r6, [r4, #4]
 8006268:	60a6      	str	r6, [r4, #8]
 800626a:	2e00      	cmp	r6, #0
 800626c:	bfa2      	ittt	ge
 800626e:	6821      	ldrge	r1, [r4, #0]
 8006270:	f021 0104 	bicge.w	r1, r1, #4
 8006274:	6021      	strge	r1, [r4, #0]
 8006276:	b90d      	cbnz	r5, 800627c <_printf_i+0x110>
 8006278:	2e00      	cmp	r6, #0
 800627a:	d04b      	beq.n	8006314 <_printf_i+0x1a8>
 800627c:	4616      	mov	r6, r2
 800627e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006282:	fb03 5711 	mls	r7, r3, r1, r5
 8006286:	5dc7      	ldrb	r7, [r0, r7]
 8006288:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800628c:	462f      	mov	r7, r5
 800628e:	42bb      	cmp	r3, r7
 8006290:	460d      	mov	r5, r1
 8006292:	d9f4      	bls.n	800627e <_printf_i+0x112>
 8006294:	2b08      	cmp	r3, #8
 8006296:	d10b      	bne.n	80062b0 <_printf_i+0x144>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	07df      	lsls	r7, r3, #31
 800629c:	d508      	bpl.n	80062b0 <_printf_i+0x144>
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	6861      	ldr	r1, [r4, #4]
 80062a2:	4299      	cmp	r1, r3
 80062a4:	bfde      	ittt	le
 80062a6:	2330      	movle	r3, #48	@ 0x30
 80062a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062b0:	1b92      	subs	r2, r2, r6
 80062b2:	6122      	str	r2, [r4, #16]
 80062b4:	f8cd a000 	str.w	sl, [sp]
 80062b8:	464b      	mov	r3, r9
 80062ba:	aa03      	add	r2, sp, #12
 80062bc:	4621      	mov	r1, r4
 80062be:	4640      	mov	r0, r8
 80062c0:	f7ff fee6 	bl	8006090 <_printf_common>
 80062c4:	3001      	adds	r0, #1
 80062c6:	d14a      	bne.n	800635e <_printf_i+0x1f2>
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	b004      	add	sp, #16
 80062ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	f043 0320 	orr.w	r3, r3, #32
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	4833      	ldr	r0, [pc, #204]	@ (80063a8 <_printf_i+0x23c>)
 80062dc:	2778      	movs	r7, #120	@ 0x78
 80062de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	6831      	ldr	r1, [r6, #0]
 80062e6:	061f      	lsls	r7, r3, #24
 80062e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80062ec:	d402      	bmi.n	80062f4 <_printf_i+0x188>
 80062ee:	065f      	lsls	r7, r3, #25
 80062f0:	bf48      	it	mi
 80062f2:	b2ad      	uxthmi	r5, r5
 80062f4:	6031      	str	r1, [r6, #0]
 80062f6:	07d9      	lsls	r1, r3, #31
 80062f8:	bf44      	itt	mi
 80062fa:	f043 0320 	orrmi.w	r3, r3, #32
 80062fe:	6023      	strmi	r3, [r4, #0]
 8006300:	b11d      	cbz	r5, 800630a <_printf_i+0x19e>
 8006302:	2310      	movs	r3, #16
 8006304:	e7ac      	b.n	8006260 <_printf_i+0xf4>
 8006306:	4827      	ldr	r0, [pc, #156]	@ (80063a4 <_printf_i+0x238>)
 8006308:	e7e9      	b.n	80062de <_printf_i+0x172>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	f023 0320 	bic.w	r3, r3, #32
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	e7f6      	b.n	8006302 <_printf_i+0x196>
 8006314:	4616      	mov	r6, r2
 8006316:	e7bd      	b.n	8006294 <_printf_i+0x128>
 8006318:	6833      	ldr	r3, [r6, #0]
 800631a:	6825      	ldr	r5, [r4, #0]
 800631c:	6961      	ldr	r1, [r4, #20]
 800631e:	1d18      	adds	r0, r3, #4
 8006320:	6030      	str	r0, [r6, #0]
 8006322:	062e      	lsls	r6, r5, #24
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	d501      	bpl.n	800632c <_printf_i+0x1c0>
 8006328:	6019      	str	r1, [r3, #0]
 800632a:	e002      	b.n	8006332 <_printf_i+0x1c6>
 800632c:	0668      	lsls	r0, r5, #25
 800632e:	d5fb      	bpl.n	8006328 <_printf_i+0x1bc>
 8006330:	8019      	strh	r1, [r3, #0]
 8006332:	2300      	movs	r3, #0
 8006334:	6123      	str	r3, [r4, #16]
 8006336:	4616      	mov	r6, r2
 8006338:	e7bc      	b.n	80062b4 <_printf_i+0x148>
 800633a:	6833      	ldr	r3, [r6, #0]
 800633c:	1d1a      	adds	r2, r3, #4
 800633e:	6032      	str	r2, [r6, #0]
 8006340:	681e      	ldr	r6, [r3, #0]
 8006342:	6862      	ldr	r2, [r4, #4]
 8006344:	2100      	movs	r1, #0
 8006346:	4630      	mov	r0, r6
 8006348:	f7f9 ff72 	bl	8000230 <memchr>
 800634c:	b108      	cbz	r0, 8006352 <_printf_i+0x1e6>
 800634e:	1b80      	subs	r0, r0, r6
 8006350:	6060      	str	r0, [r4, #4]
 8006352:	6863      	ldr	r3, [r4, #4]
 8006354:	6123      	str	r3, [r4, #16]
 8006356:	2300      	movs	r3, #0
 8006358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800635c:	e7aa      	b.n	80062b4 <_printf_i+0x148>
 800635e:	6923      	ldr	r3, [r4, #16]
 8006360:	4632      	mov	r2, r6
 8006362:	4649      	mov	r1, r9
 8006364:	4640      	mov	r0, r8
 8006366:	47d0      	blx	sl
 8006368:	3001      	adds	r0, #1
 800636a:	d0ad      	beq.n	80062c8 <_printf_i+0x15c>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	079b      	lsls	r3, r3, #30
 8006370:	d413      	bmi.n	800639a <_printf_i+0x22e>
 8006372:	68e0      	ldr	r0, [r4, #12]
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	4298      	cmp	r0, r3
 8006378:	bfb8      	it	lt
 800637a:	4618      	movlt	r0, r3
 800637c:	e7a6      	b.n	80062cc <_printf_i+0x160>
 800637e:	2301      	movs	r3, #1
 8006380:	4632      	mov	r2, r6
 8006382:	4649      	mov	r1, r9
 8006384:	4640      	mov	r0, r8
 8006386:	47d0      	blx	sl
 8006388:	3001      	adds	r0, #1
 800638a:	d09d      	beq.n	80062c8 <_printf_i+0x15c>
 800638c:	3501      	adds	r5, #1
 800638e:	68e3      	ldr	r3, [r4, #12]
 8006390:	9903      	ldr	r1, [sp, #12]
 8006392:	1a5b      	subs	r3, r3, r1
 8006394:	42ab      	cmp	r3, r5
 8006396:	dcf2      	bgt.n	800637e <_printf_i+0x212>
 8006398:	e7eb      	b.n	8006372 <_printf_i+0x206>
 800639a:	2500      	movs	r5, #0
 800639c:	f104 0619 	add.w	r6, r4, #25
 80063a0:	e7f5      	b.n	800638e <_printf_i+0x222>
 80063a2:	bf00      	nop
 80063a4:	080066cd 	.word	0x080066cd
 80063a8:	080066de 	.word	0x080066de

080063ac <memmove>:
 80063ac:	4288      	cmp	r0, r1
 80063ae:	b510      	push	{r4, lr}
 80063b0:	eb01 0402 	add.w	r4, r1, r2
 80063b4:	d902      	bls.n	80063bc <memmove+0x10>
 80063b6:	4284      	cmp	r4, r0
 80063b8:	4623      	mov	r3, r4
 80063ba:	d807      	bhi.n	80063cc <memmove+0x20>
 80063bc:	1e43      	subs	r3, r0, #1
 80063be:	42a1      	cmp	r1, r4
 80063c0:	d008      	beq.n	80063d4 <memmove+0x28>
 80063c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063ca:	e7f8      	b.n	80063be <memmove+0x12>
 80063cc:	4402      	add	r2, r0
 80063ce:	4601      	mov	r1, r0
 80063d0:	428a      	cmp	r2, r1
 80063d2:	d100      	bne.n	80063d6 <memmove+0x2a>
 80063d4:	bd10      	pop	{r4, pc}
 80063d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063de:	e7f7      	b.n	80063d0 <memmove+0x24>

080063e0 <_sbrk_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	4d06      	ldr	r5, [pc, #24]	@ (80063fc <_sbrk_r+0x1c>)
 80063e4:	2300      	movs	r3, #0
 80063e6:	4604      	mov	r4, r0
 80063e8:	4608      	mov	r0, r1
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	f7fa ff20 	bl	8001230 <_sbrk>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_sbrk_r+0x1a>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_sbrk_r+0x1a>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	2000044c 	.word	0x2000044c

08006400 <memcpy>:
 8006400:	440a      	add	r2, r1
 8006402:	4291      	cmp	r1, r2
 8006404:	f100 33ff 	add.w	r3, r0, #4294967295
 8006408:	d100      	bne.n	800640c <memcpy+0xc>
 800640a:	4770      	bx	lr
 800640c:	b510      	push	{r4, lr}
 800640e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006416:	4291      	cmp	r1, r2
 8006418:	d1f9      	bne.n	800640e <memcpy+0xe>
 800641a:	bd10      	pop	{r4, pc}

0800641c <_realloc_r>:
 800641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006420:	4680      	mov	r8, r0
 8006422:	4615      	mov	r5, r2
 8006424:	460c      	mov	r4, r1
 8006426:	b921      	cbnz	r1, 8006432 <_realloc_r+0x16>
 8006428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800642c:	4611      	mov	r1, r2
 800642e:	f7ff bc4b 	b.w	8005cc8 <_malloc_r>
 8006432:	b92a      	cbnz	r2, 8006440 <_realloc_r+0x24>
 8006434:	f7ff fbdc 	bl	8005bf0 <_free_r>
 8006438:	2400      	movs	r4, #0
 800643a:	4620      	mov	r0, r4
 800643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006440:	f000 f81a 	bl	8006478 <_malloc_usable_size_r>
 8006444:	4285      	cmp	r5, r0
 8006446:	4606      	mov	r6, r0
 8006448:	d802      	bhi.n	8006450 <_realloc_r+0x34>
 800644a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800644e:	d8f4      	bhi.n	800643a <_realloc_r+0x1e>
 8006450:	4629      	mov	r1, r5
 8006452:	4640      	mov	r0, r8
 8006454:	f7ff fc38 	bl	8005cc8 <_malloc_r>
 8006458:	4607      	mov	r7, r0
 800645a:	2800      	cmp	r0, #0
 800645c:	d0ec      	beq.n	8006438 <_realloc_r+0x1c>
 800645e:	42b5      	cmp	r5, r6
 8006460:	462a      	mov	r2, r5
 8006462:	4621      	mov	r1, r4
 8006464:	bf28      	it	cs
 8006466:	4632      	movcs	r2, r6
 8006468:	f7ff ffca 	bl	8006400 <memcpy>
 800646c:	4621      	mov	r1, r4
 800646e:	4640      	mov	r0, r8
 8006470:	f7ff fbbe 	bl	8005bf0 <_free_r>
 8006474:	463c      	mov	r4, r7
 8006476:	e7e0      	b.n	800643a <_realloc_r+0x1e>

08006478 <_malloc_usable_size_r>:
 8006478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800647c:	1f18      	subs	r0, r3, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	bfbc      	itt	lt
 8006482:	580b      	ldrlt	r3, [r1, r0]
 8006484:	18c0      	addlt	r0, r0, r3
 8006486:	4770      	bx	lr

08006488 <_init>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	bf00      	nop
 800648c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648e:	bc08      	pop	{r3}
 8006490:	469e      	mov	lr, r3
 8006492:	4770      	bx	lr

08006494 <_fini>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	bf00      	nop
 8006498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649a:	bc08      	pop	{r3}
 800649c:	469e      	mov	lr, r3
 800649e:	4770      	bx	lr
