
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006050  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08006230  08006230  00007230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b0  080063b0  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  080063b0  080063b0  000073b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063b8  080063b8  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063b8  080063b8  000073b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063bc  080063bc  000073bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080063c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000064  08006424  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08006424  0000836c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d78a  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec9  00000000  00000000  0001581e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  000176e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ef  00000000  00000000  00018140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e5c  00000000  00000000  0001892f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d376  00000000  00000000  0003d78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9857  00000000  00000000  0004ab01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134358  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e5c  00000000  00000000  0013439c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001371f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006218 	.word	0x08006218

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08006218 	.word	0x08006218

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fc8b 	bl	8000ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f822 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f8e8 	bl	80007a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 f8b4 	bl	800073c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d4:	f000 f868 	bl	80006a8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t text[] = "HELLO FIBO";
 // HAL_UART_Transmit(&hlpuart1,text, 11, 10); // มี 10 �?ต่ส่ง 11 ตัวเพราะลงท้ายด้วย backslash zero
  UARTDMAConfig();
 80005d8:	f000 fa9a 	bl	8000b10 <UARTDMAConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UARTPollingMethod();
 80005dc:	f000 fa1e 	bl	8000a1c <UARTPollingMethod>
	  //DummyTask();
	  if(readFlag && (attempt < 5 || point != 5)){
 80005e0:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <main+0x44>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d0f9      	beq.n	80005dc <main+0x1c>
 80005e8:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <main+0x48>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	d903      	bls.n	80005f8 <main+0x38>
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <main+0x4c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	d0f1      	beq.n	80005dc <main+0x1c>
		  readFlag = 0;
 80005f8:	4b02      	ldr	r3, [pc, #8]	@ (8000604 <main+0x44>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
		  Wordle();
 80005fe:	f000 f93d 	bl	800087c <Wordle>
	  UARTPollingMethod();
 8000602:	e7eb      	b.n	80005dc <main+0x1c>
 8000604:	20000218 	.word	0x20000218
 8000608:	20000217 	.word	0x20000217
 800060c:	20000216 	.word	0x20000216

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2238      	movs	r2, #56	@ 0x38
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f005 f97a 	bl	8005918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000632:	2000      	movs	r0, #0
 8000634:	f001 fac4 	bl	8001bc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000640:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000642:	2340      	movs	r3, #64	@ 0x40
 8000644:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800064e:	2304      	movs	r3, #4
 8000650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000652:	2355      	movs	r3, #85	@ 0x55
 8000654:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fb5e 	bl	8001d28 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000672:	f000 fa87 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2104      	movs	r1, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fe5c 	bl	800234c <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800069a:	f000 fa73 	bl	8000b84 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	@ 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006ac:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 80006ae:	4a22      	ldr	r2, [pc, #136]	@ (8000738 <MX_LPUART1_UART_Init+0x90>)
 80006b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006b2:	4b20      	ldr	r3, [pc, #128]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d8:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e4:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ea:	4812      	ldr	r0, [pc, #72]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 80006ec:	f002 fa98 	bl	8002c20 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006f6:	f000 fa45 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006fa:	2100      	movs	r1, #0
 80006fc:	480d      	ldr	r0, [pc, #52]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 80006fe:	f005 f820 	bl	8005742 <HAL_UARTEx_SetTxFifoThreshold>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000708:	f000 fa3c 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070c:	2100      	movs	r1, #0
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 8000710:	f005 f855 	bl	80057be <HAL_UARTEx_SetRxFifoThreshold>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800071a:	f000 fa33 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_LPUART1_UART_Init+0x8c>)
 8000720:	f004 ffd6 	bl	80056d0 <HAL_UARTEx_DisableFifoMode>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800072a:	f000 fa2b 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000080 	.word	0x20000080
 8000738:	40008000 	.word	0x40008000

0800073c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000742:	4b16      	ldr	r3, [pc, #88]	@ (800079c <MX_DMA_Init+0x60>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	4a15      	ldr	r2, [pc, #84]	@ (800079c <MX_DMA_Init+0x60>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6493      	str	r3, [r2, #72]	@ 0x48
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <MX_DMA_Init+0x60>)
 8000750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <MX_DMA_Init+0x60>)
 800075c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <MX_DMA_Init+0x60>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6493      	str	r3, [r2, #72]	@ 0x48
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <MX_DMA_Init+0x60>)
 8000768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	200b      	movs	r0, #11
 8000778:	f000 fcfd 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800077c:	200b      	movs	r0, #11
 800077e:	f000 fd14 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	200c      	movs	r0, #12
 8000788:	f000 fcf5 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800078c:	200c      	movs	r0, #12
 800078e:	f000 fd0c 	bl	80011aa <HAL_NVIC_EnableIRQ>

}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000874 <MX_GPIO_Init+0xd4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000874 <MX_GPIO_Init+0xd4>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000874 <MX_GPIO_Init+0xd4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ce:	4b29      	ldr	r3, [pc, #164]	@ (8000874 <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a28      	ldr	r2, [pc, #160]	@ (8000874 <MX_GPIO_Init+0xd4>)
 80007d4:	f043 0320 	orr.w	r3, r3, #32
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b26      	ldr	r3, [pc, #152]	@ (8000874 <MX_GPIO_Init+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0320 	and.w	r3, r3, #32
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b23      	ldr	r3, [pc, #140]	@ (8000874 <MX_GPIO_Init+0xd4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a22      	ldr	r2, [pc, #136]	@ (8000874 <MX_GPIO_Init+0xd4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b20      	ldr	r3, [pc, #128]	@ (8000874 <MX_GPIO_Init+0xd4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <MX_GPIO_Init+0xd4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <MX_GPIO_Init+0xd4>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_GPIO_Init+0xd4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2120      	movs	r1, #32
 800081a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081e:	f001 f993 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000822:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000828:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	480f      	ldr	r0, [pc, #60]	@ (8000878 <MX_GPIO_Init+0xd8>)
 800083a:	f001 f803 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800083e:	2320      	movs	r3, #32
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000858:	f000 fff4 	bl	8001844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	2028      	movs	r0, #40	@ 0x28
 8000862:	f000 fc88 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000866:	2028      	movs	r0, #40	@ 0x28
 8000868:	f000 fc9f 	bl	80011aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	@ 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	48000800 	.word	0x48000800

0800087c <Wordle>:

/* USER CODE BEGIN 4 */
void Wordle()
	{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
		//readFlag = 0;
	for(uint8_t i = 0;i <5;i++)
 8000882:	2300      	movs	r3, #0
 8000884:	71fb      	strb	r3, [r7, #7]
 8000886:	e055      	b.n	8000934 <Wordle+0xb8>
	{
		output[5] = '\0';
 8000888:	4b58      	ldr	r3, [pc, #352]	@ (80009ec <Wordle+0x170>)
 800088a:	2200      	movs	r2, #0
 800088c:	715a      	strb	r2, [r3, #5]

		if(RxBuffer[i] == '-') //retry press "-"
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4a57      	ldr	r2, [pc, #348]	@ (80009f0 <Wordle+0x174>)
 8000892:	5cd3      	ldrb	r3, [r2, r3]
 8000894:	2b2d      	cmp	r3, #45	@ 0x2d
 8000896:	d10e      	bne.n	80008b6 <Wordle+0x3a>
		{
			sprintf((char*)TxBuffer,"Retrying");
 8000898:	4956      	ldr	r1, [pc, #344]	@ (80009f4 <Wordle+0x178>)
 800089a:	4857      	ldr	r0, [pc, #348]	@ (80009f8 <Wordle+0x17c>)
 800089c:	f005 f81c 	bl	80058d8 <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5); // uart1, text , size , timeout
 80008a0:	4855      	ldr	r0, [pc, #340]	@ (80009f8 <Wordle+0x17c>)
 80008a2:	f7ff fcbd 	bl	8000220 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	2305      	movs	r3, #5
 80008ac:	4952      	ldr	r1, [pc, #328]	@ (80009f8 <Wordle+0x17c>)
 80008ae:	4853      	ldr	r0, [pc, #332]	@ (80009fc <Wordle+0x180>)
 80008b0:	f002 fa06 	bl	8002cc0 <HAL_UART_Transmit>
			return;
 80008b4:	e096      	b.n	80009e4 <Wordle+0x168>
		}
		else if(RxBuffer[i] == wordle[i]){
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	4a4d      	ldr	r2, [pc, #308]	@ (80009f0 <Wordle+0x174>)
 80008ba:	5cd2      	ldrb	r2, [r2, r3]
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	4950      	ldr	r1, [pc, #320]	@ (8000a00 <Wordle+0x184>)
 80008c0:	5ccb      	ldrb	r3, [r1, r3]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d10c      	bne.n	80008e0 <Wordle+0x64>
			output[i] = RxBuffer[i];
 80008c6:	79fa      	ldrb	r2, [r7, #7]
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4949      	ldr	r1, [pc, #292]	@ (80009f0 <Wordle+0x174>)
 80008cc:	5c89      	ldrb	r1, [r1, r2]
 80008ce:	4a47      	ldr	r2, [pc, #284]	@ (80009ec <Wordle+0x170>)
 80008d0:	54d1      	strb	r1, [r2, r3]
			point++;
 80008d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000a04 <Wordle+0x188>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b4a      	ldr	r3, [pc, #296]	@ (8000a04 <Wordle+0x188>)
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	e015      	b.n	800090c <Wordle+0x90>

		}
		else {
			for(uint8_t j=0; j<5;j++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	71bb      	strb	r3, [r7, #6]
 80008e4:	e00f      	b.n	8000906 <Wordle+0x8a>
			{
				if(RxBuffer[i] == wordle[j])
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4a41      	ldr	r2, [pc, #260]	@ (80009f0 <Wordle+0x174>)
 80008ea:	5cd2      	ldrb	r2, [r2, r3]
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	4944      	ldr	r1, [pc, #272]	@ (8000a00 <Wordle+0x184>)
 80008f0:	5ccb      	ldrb	r3, [r1, r3]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d104      	bne.n	8000900 <Wordle+0x84>
				{
					output[i] = '?';
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	4a3c      	ldr	r2, [pc, #240]	@ (80009ec <Wordle+0x170>)
 80008fa:	213f      	movs	r1, #63	@ 0x3f
 80008fc:	54d1      	strb	r1, [r2, r3]
					break;
 80008fe:	e005      	b.n	800090c <Wordle+0x90>
			for(uint8_t j=0; j<5;j++)
 8000900:	79bb      	ldrb	r3, [r7, #6]
 8000902:	3301      	adds	r3, #1
 8000904:	71bb      	strb	r3, [r7, #6]
 8000906:	79bb      	ldrb	r3, [r7, #6]
 8000908:	2b04      	cmp	r3, #4
 800090a:	d9ec      	bls.n	80008e6 <Wordle+0x6a>
				}
			}
		}
		if(output[i] != '?' && output[i] != RxBuffer[i]){
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	4a37      	ldr	r2, [pc, #220]	@ (80009ec <Wordle+0x170>)
 8000910:	5cd3      	ldrb	r3, [r2, r3]
 8000912:	2b3f      	cmp	r3, #63	@ 0x3f
 8000914:	d00b      	beq.n	800092e <Wordle+0xb2>
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4a34      	ldr	r2, [pc, #208]	@ (80009ec <Wordle+0x170>)
 800091a:	5cd2      	ldrb	r2, [r2, r3]
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	4934      	ldr	r1, [pc, #208]	@ (80009f0 <Wordle+0x174>)
 8000920:	5ccb      	ldrb	r3, [r1, r3]
 8000922:	429a      	cmp	r2, r3
 8000924:	d003      	beq.n	800092e <Wordle+0xb2>
			output[i] = '_';
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	4a30      	ldr	r2, [pc, #192]	@ (80009ec <Wordle+0x170>)
 800092a:	215f      	movs	r1, #95	@ 0x5f
 800092c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0;i <5;i++)
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	3301      	adds	r3, #1
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d9a6      	bls.n	8000888 <Wordle+0xc>
		}
	}
	if(point == 5){
 800093a:	4b32      	ldr	r3, [pc, #200]	@ (8000a04 <Wordle+0x188>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b05      	cmp	r3, #5
 8000940:	d10f      	bne.n	8000962 <Wordle+0xe6>
		sprintf((char*)TxBuffer,"Congratulations\n %s is correct\r\n", output);
 8000942:	4a2a      	ldr	r2, [pc, #168]	@ (80009ec <Wordle+0x170>)
 8000944:	4930      	ldr	r1, [pc, #192]	@ (8000a08 <Wordle+0x18c>)
 8000946:	482c      	ldr	r0, [pc, #176]	@ (80009f8 <Wordle+0x17c>)
 8000948:	f004 ffc6 	bl	80058d8 <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 800094c:	482a      	ldr	r0, [pc, #168]	@ (80009f8 <Wordle+0x17c>)
 800094e:	f7ff fc67 	bl	8000220 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	b29a      	uxth	r2, r3
 8000956:	2305      	movs	r3, #5
 8000958:	4927      	ldr	r1, [pc, #156]	@ (80009f8 <Wordle+0x17c>)
 800095a:	4828      	ldr	r0, [pc, #160]	@ (80009fc <Wordle+0x180>)
 800095c:	f002 f9b0 	bl	8002cc0 <HAL_UART_Transmit>
 8000960:	e040      	b.n	80009e4 <Wordle+0x168>
	}
	else{
		point = 0;
 8000962:	4b28      	ldr	r3, [pc, #160]	@ (8000a04 <Wordle+0x188>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
		attempt++;
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <Wordle+0x190>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <Wordle+0x190>)
 8000972:	701a      	strb	r2, [r3, #0]
		if(attempt >= 5){
 8000974:	4b25      	ldr	r3, [pc, #148]	@ (8000a0c <Wordle+0x190>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b04      	cmp	r3, #4
 800097a:	d90f      	bls.n	800099c <Wordle+0x120>
				sprintf((char*)TxBuffer,"Game Over\n Correct Answer is %s\r\n", (char*)wordle);
 800097c:	4a20      	ldr	r2, [pc, #128]	@ (8000a00 <Wordle+0x184>)
 800097e:	4924      	ldr	r1, [pc, #144]	@ (8000a10 <Wordle+0x194>)
 8000980:	481d      	ldr	r0, [pc, #116]	@ (80009f8 <Wordle+0x17c>)
 8000982:	f004 ffa9 	bl	80058d8 <siprintf>
				HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000986:	481c      	ldr	r0, [pc, #112]	@ (80009f8 <Wordle+0x17c>)
 8000988:	f7ff fc4a 	bl	8000220 <strlen>
 800098c:	4603      	mov	r3, r0
 800098e:	b29a      	uxth	r2, r3
 8000990:	2305      	movs	r3, #5
 8000992:	4919      	ldr	r1, [pc, #100]	@ (80009f8 <Wordle+0x17c>)
 8000994:	4819      	ldr	r0, [pc, #100]	@ (80009fc <Wordle+0x180>)
 8000996:	f002 f993 	bl	8002cc0 <HAL_UART_Transmit>
 800099a:	e023      	b.n	80009e4 <Wordle+0x168>
		}
		else if(RxBuffer[1] != '1'){
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <Wordle+0x174>)
 800099e:	785b      	ldrb	r3, [r3, #1]
 80009a0:	2b31      	cmp	r3, #49	@ 0x31
 80009a2:	d01f      	beq.n	80009e4 <Wordle+0x168>
			sprintf((char*)TxBuffer,"Wrong Answer \n Your word : %s\r\n", (char*)output);
 80009a4:	4a11      	ldr	r2, [pc, #68]	@ (80009ec <Wordle+0x170>)
 80009a6:	491b      	ldr	r1, [pc, #108]	@ (8000a14 <Wordle+0x198>)
 80009a8:	4813      	ldr	r0, [pc, #76]	@ (80009f8 <Wordle+0x17c>)
 80009aa:	f004 ff95 	bl	80058d8 <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 80009ae:	4812      	ldr	r0, [pc, #72]	@ (80009f8 <Wordle+0x17c>)
 80009b0:	f7ff fc36 	bl	8000220 <strlen>
 80009b4:	4603      	mov	r3, r0
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	2305      	movs	r3, #5
 80009ba:	490f      	ldr	r1, [pc, #60]	@ (80009f8 <Wordle+0x17c>)
 80009bc:	480f      	ldr	r0, [pc, #60]	@ (80009fc <Wordle+0x180>)
 80009be:	f002 f97f 	bl	8002cc0 <HAL_UART_Transmit>
			sprintf((char*)TxBuffer,"Remaining Attempt : %s\r\n", (char*)attempt);
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <Wordle+0x190>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	4913      	ldr	r1, [pc, #76]	@ (8000a18 <Wordle+0x19c>)
 80009ca:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <Wordle+0x17c>)
 80009cc:	f004 ff84 	bl	80058d8 <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 80009d0:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <Wordle+0x17c>)
 80009d2:	f7ff fc25 	bl	8000220 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	2305      	movs	r3, #5
 80009dc:	4906      	ldr	r1, [pc, #24]	@ (80009f8 <Wordle+0x17c>)
 80009de:	4807      	ldr	r0, [pc, #28]	@ (80009fc <Wordle+0x180>)
 80009e0:	f002 f96e 	bl	8002cc0 <HAL_UART_Transmit>
		}

	}

}
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000210 	.word	0x20000210
 80009f0:	200001d4 	.word	0x200001d4
 80009f4:	08006230 	.word	0x08006230
 80009f8:	200001e8 	.word	0x200001e8
 80009fc:	20000080 	.word	0x20000080
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000216 	.word	0x20000216
 8000a08:	0800623c 	.word	0x0800623c
 8000a0c:	20000217 	.word	0x20000217
 8000a10:	08006260 	.word	0x08006260
 8000a14:	08006284 	.word	0x08006284
 8000a18:	080062a4 	.word	0x080062a4

08000a1c <UARTPollingMethod>:

void UARTPollingMethod()
	{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	//read UART 10 char with in 10s
	HAL_StatusTypeDef HAL_status = HAL_UART_Receive(&hlpuart1, RxBuffer, 5, 15000);
 8000a22:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8000a26:	2205      	movs	r2, #5
 8000a28:	492f      	ldr	r1, [pc, #188]	@ (8000ae8 <UARTPollingMethod+0xcc>)
 8000a2a:	4830      	ldr	r0, [pc, #192]	@ (8000aec <UARTPollingMethod+0xd0>)
 8000a2c:	f002 f9d6 	bl	8002ddc <HAL_UART_Receive>
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]

	//if complete read 10 char
	if(HAL_status == HAL_OK)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d131      	bne.n	8000a9e <UARTPollingMethod+0x82>
	{
		readFlag = 1;
 8000a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000af0 <UARTPollingMethod+0xd4>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
		RxBuffer[5] = '\0';
 8000a40:	4b29      	ldr	r3, [pc, #164]	@ (8000ae8 <UARTPollingMethod+0xcc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	715a      	strb	r2, [r3, #5]
		if(RxBuffer[0] == '1'){
 8000a46:	4b28      	ldr	r3, [pc, #160]	@ (8000ae8 <UARTPollingMethod+0xcc>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b31      	cmp	r3, #49	@ 0x31
 8000a4c:	d10a      	bne.n	8000a64 <UARTPollingMethod+0x48>
			point = 0;
 8000a4e:	4b29      	ldr	r3, [pc, #164]	@ (8000af4 <UARTPollingMethod+0xd8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
			attempt = 0;
 8000a54:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <UARTPollingMethod+0xdc>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
			sprintf((char*)TxBuffer,"Reset Completed");
 8000a5a:	4928      	ldr	r1, [pc, #160]	@ (8000afc <UARTPollingMethod+0xe0>)
 8000a5c:	4828      	ldr	r0, [pc, #160]	@ (8000b00 <UARTPollingMethod+0xe4>)
 8000a5e:	f004 ff3b 	bl	80058d8 <siprintf>
 8000a62:	e011      	b.n	8000a88 <UARTPollingMethod+0x6c>
		}
		else if(attempt >= 5 || point == 5){
 8000a64:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <UARTPollingMethod+0xdc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d803      	bhi.n	8000a74 <UARTPollingMethod+0x58>
 8000a6c:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <UARTPollingMethod+0xd8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b05      	cmp	r3, #5
 8000a72:	d104      	bne.n	8000a7e <UARTPollingMethod+0x62>
			sprintf((char*)TxBuffer,"Game halted, hold 1 to Continue\r\n");
 8000a74:	4923      	ldr	r1, [pc, #140]	@ (8000b04 <UARTPollingMethod+0xe8>)
 8000a76:	4822      	ldr	r0, [pc, #136]	@ (8000b00 <UARTPollingMethod+0xe4>)
 8000a78:	f004 ff2e 	bl	80058d8 <siprintf>
 8000a7c:	e004      	b.n	8000a88 <UARTPollingMethod+0x6c>
		}
		else{
			sprintf((char*)TxBuffer,"Your answer : %s\r\n",(char*)RxBuffer);
 8000a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ae8 <UARTPollingMethod+0xcc>)
 8000a80:	4921      	ldr	r1, [pc, #132]	@ (8000b08 <UARTPollingMethod+0xec>)
 8000a82:	481f      	ldr	r0, [pc, #124]	@ (8000b00 <UARTPollingMethod+0xe4>)
 8000a84:	f004 ff28 	bl	80058d8 <siprintf>
		}
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000a88:	481d      	ldr	r0, [pc, #116]	@ (8000b00 <UARTPollingMethod+0xe4>)
 8000a8a:	f7ff fbc9 	bl	8000220 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	2305      	movs	r3, #5
 8000a94:	491a      	ldr	r1, [pc, #104]	@ (8000b00 <UARTPollingMethod+0xe4>)
 8000a96:	4815      	ldr	r0, [pc, #84]	@ (8000aec <UARTPollingMethod+0xd0>)
 8000a98:	f002 f912 	bl	8002cc0 <HAL_UART_Transmit>
		//return received char
		sprintf((char*)TxBuffer,"Received Timeout : %s\r\n, try again",RxBuffer);
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);

	}
}
 8000a9c:	e020      	b.n	8000ae0 <UARTPollingMethod+0xc4>
	else if(HAL_status == HAL_TIMEOUT)
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d11d      	bne.n	8000ae0 <UARTPollingMethod+0xc4>
		uint32_t lastCharPos = hlpuart1.RxXferSize - hlpuart1.RxXferCount;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <UARTPollingMethod+0xd0>)
 8000aa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <UARTPollingMethod+0xd0>)
 8000aae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	603b      	str	r3, [r7, #0]
		RxBuffer[lastCharPos] = '\0';
 8000ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <UARTPollingMethod+0xcc>)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	4413      	add	r3, r2
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
		sprintf((char*)TxBuffer,"Received Timeout : %s\r\n, try again",RxBuffer);
 8000ac2:	4a09      	ldr	r2, [pc, #36]	@ (8000ae8 <UARTPollingMethod+0xcc>)
 8000ac4:	4911      	ldr	r1, [pc, #68]	@ (8000b0c <UARTPollingMethod+0xf0>)
 8000ac6:	480e      	ldr	r0, [pc, #56]	@ (8000b00 <UARTPollingMethod+0xe4>)
 8000ac8:	f004 ff06 	bl	80058d8 <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000acc:	480c      	ldr	r0, [pc, #48]	@ (8000b00 <UARTPollingMethod+0xe4>)
 8000ace:	f7ff fba7 	bl	8000220 <strlen>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	4909      	ldr	r1, [pc, #36]	@ (8000b00 <UARTPollingMethod+0xe4>)
 8000ada:	4804      	ldr	r0, [pc, #16]	@ (8000aec <UARTPollingMethod+0xd0>)
 8000adc:	f002 f8f0 	bl	8002cc0 <HAL_UART_Transmit>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200001d4 	.word	0x200001d4
 8000aec:	20000080 	.word	0x20000080
 8000af0:	20000218 	.word	0x20000218
 8000af4:	20000216 	.word	0x20000216
 8000af8:	20000217 	.word	0x20000217
 8000afc:	080062c0 	.word	0x080062c0
 8000b00:	200001e8 	.word	0x200001e8
 8000b04:	080062d0 	.word	0x080062d0
 8000b08:	080062f4 	.word	0x080062f4
 8000b0c:	08006308 	.word	0x08006308

08000b10 <UARTDMAConfig>:
void UARTInterruptConfig()
{
	//HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
}
void UARTDMAConfig()
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 10);
 8000b14:	220a      	movs	r2, #10
 8000b16:	4903      	ldr	r1, [pc, #12]	@ (8000b24 <UARTDMAConfig+0x14>)
 8000b18:	4803      	ldr	r0, [pc, #12]	@ (8000b28 <UARTDMAConfig+0x18>)
 8000b1a:	f002 fb07 	bl	800312c <HAL_UART_Receive_DMA>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200001d4 	.word	0x200001d4
 8000b28:	20000080 	.word	0x20000080

08000b2c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	if(hlpuart == &hlpuart1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a0f      	ldr	r2, [pc, #60]	@ (8000b74 <HAL_UART_RxCpltCallback+0x48>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d116      	bne.n	8000b6a <HAL_UART_RxCpltCallback+0x3e>
	{
		RxBuffer[10] = '\0';
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_UART_RxCpltCallback+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	729a      	strb	r2, [r3, #10]

		sprintf((char*)TxBuffer,"Received : %s\r\n", RxBuffer);
 8000b42:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <HAL_UART_RxCpltCallback+0x4c>)
 8000b44:	490d      	ldr	r1, [pc, #52]	@ (8000b7c <HAL_UART_RxCpltCallback+0x50>)
 8000b46:	480e      	ldr	r0, [pc, #56]	@ (8000b80 <HAL_UART_RxCpltCallback+0x54>)
 8000b48:	f004 fec6 	bl	80058d8 <siprintf>
		HAL_UART_Transmit_IT(&hlpuart1, TxBuffer, strlen((char*)TxBuffer));
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <HAL_UART_RxCpltCallback+0x54>)
 8000b4e:	f7ff fb67 	bl	8000220 <strlen>
 8000b52:	4603      	mov	r3, r0
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	4909      	ldr	r1, [pc, #36]	@ (8000b80 <HAL_UART_RxCpltCallback+0x54>)
 8000b5a:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <HAL_UART_RxCpltCallback+0x48>)
 8000b5c:	f002 fa06 	bl	8002f6c <HAL_UART_Transmit_IT>

		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
 8000b60:	220a      	movs	r2, #10
 8000b62:	4905      	ldr	r1, [pc, #20]	@ (8000b78 <HAL_UART_RxCpltCallback+0x4c>)
 8000b64:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <HAL_UART_RxCpltCallback+0x48>)
 8000b66:	f002 fa95 	bl	8003094 <HAL_UART_Receive_IT>
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000080 	.word	0x20000080
 8000b78:	200001d4 	.word	0x200001d4
 8000b7c:	0800632c 	.word	0x0800632c
 8000b80:	200001e8 	.word	0x200001e8

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb2:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bc6:	f001 f89f 	bl	8001d08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b09e      	sub	sp, #120	@ 0x78
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	2254      	movs	r2, #84	@ 0x54
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f004 fe8d 	bl	8005918 <memset>
  if(huart->Instance==LPUART1)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a4d      	ldr	r2, [pc, #308]	@ (8000d38 <HAL_UART_MspInit+0x160>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	f040 8092 	bne.w	8000d2e <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c0a:	2320      	movs	r3, #32
 8000c0c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 fdb4 	bl	8002784 <HAL_RCCEx_PeriphCLKConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c22:	f7ff ffaf 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c26:	4b45      	ldr	r3, [pc, #276]	@ (8000d3c <HAL_UART_MspInit+0x164>)
 8000c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c2a:	4a44      	ldr	r2, [pc, #272]	@ (8000d3c <HAL_UART_MspInit+0x164>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c32:	4b42      	ldr	r3, [pc, #264]	@ (8000d3c <HAL_UART_MspInit+0x164>)
 8000c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d3c <HAL_UART_MspInit+0x164>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	4a3e      	ldr	r2, [pc, #248]	@ (8000d3c <HAL_UART_MspInit+0x164>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d3c <HAL_UART_MspInit+0x164>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c56:	230c      	movs	r3, #12
 8000c58:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c66:	230c      	movs	r3, #12
 8000c68:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c74:	f000 fde6 	bl	8001844 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000c78:	4b31      	ldr	r3, [pc, #196]	@ (8000d40 <HAL_UART_MspInit+0x168>)
 8000c7a:	4a32      	ldr	r2, [pc, #200]	@ (8000d44 <HAL_UART_MspInit+0x16c>)
 8000c7c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000c7e:	4b30      	ldr	r3, [pc, #192]	@ (8000d40 <HAL_UART_MspInit+0x168>)
 8000c80:	2222      	movs	r2, #34	@ 0x22
 8000c82:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c84:	4b2e      	ldr	r3, [pc, #184]	@ (8000d40 <HAL_UART_MspInit+0x168>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d40 <HAL_UART_MspInit+0x168>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <HAL_UART_MspInit+0x168>)
 8000c92:	2280      	movs	r2, #128	@ 0x80
 8000c94:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c96:	4b2a      	ldr	r3, [pc, #168]	@ (8000d40 <HAL_UART_MspInit+0x168>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c9c:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <HAL_UART_MspInit+0x168>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000ca2:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <HAL_UART_MspInit+0x168>)
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ca8:	4b25      	ldr	r3, [pc, #148]	@ (8000d40 <HAL_UART_MspInit+0x168>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000cae:	4824      	ldr	r0, [pc, #144]	@ (8000d40 <HAL_UART_MspInit+0x168>)
 8000cb0:	f000 fa96 	bl	80011e0 <HAL_DMA_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000cba:	f7ff ff63 	bl	8000b84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d40 <HAL_UART_MspInit+0x168>)
 8000cc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d40 <HAL_UART_MspInit+0x168>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <HAL_UART_MspInit+0x170>)
 8000cce:	4a1f      	ldr	r2, [pc, #124]	@ (8000d4c <HAL_UART_MspInit+0x174>)
 8000cd0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <HAL_UART_MspInit+0x170>)
 8000cd4:	2223      	movs	r2, #35	@ 0x23
 8000cd6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <HAL_UART_MspInit+0x170>)
 8000cda:	2210      	movs	r2, #16
 8000cdc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <HAL_UART_MspInit+0x170>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <HAL_UART_MspInit+0x170>)
 8000ce6:	2280      	movs	r2, #128	@ 0x80
 8000ce8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cea:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <HAL_UART_MspInit+0x170>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <HAL_UART_MspInit+0x170>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <HAL_UART_MspInit+0x170>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_UART_MspInit+0x170>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000d02:	4811      	ldr	r0, [pc, #68]	@ (8000d48 <HAL_UART_MspInit+0x170>)
 8000d04:	f000 fa6c 	bl	80011e0 <HAL_DMA_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000d0e:	f7ff ff39 	bl	8000b84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a0c      	ldr	r2, [pc, #48]	@ (8000d48 <HAL_UART_MspInit+0x170>)
 8000d16:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000d18:	4a0b      	ldr	r2, [pc, #44]	@ (8000d48 <HAL_UART_MspInit+0x170>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	205b      	movs	r0, #91	@ 0x5b
 8000d24:	f000 fa27 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000d28:	205b      	movs	r0, #91	@ 0x5b
 8000d2a:	f000 fa3e 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3778      	adds	r7, #120	@ 0x78
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40008000 	.word	0x40008000
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	20000114 	.word	0x20000114
 8000d44:	40020008 	.word	0x40020008
 8000d48:	20000174 	.word	0x20000174
 8000d4c:	4002001c 	.word	0x4002001c

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <NMI_Handler+0x4>

08000d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <MemManage_Handler+0x4>

08000d68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da6:	f000 f8ed 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <DMA1_Channel1_IRQHandler+0x10>)
 8000db6:	f000 fbf6 	bl	80015a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000114 	.word	0x20000114

08000dc4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000dc8:	4802      	ldr	r0, [pc, #8]	@ (8000dd4 <DMA1_Channel2_IRQHandler+0x10>)
 8000dca:	f000 fbec 	bl	80015a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000174 	.word	0x20000174

08000dd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ddc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000de0:	f000 feca 	bl	8001b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <LPUART1_IRQHandler+0x10>)
 8000dee:	f002 f9e9 	bl	80031c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000080 	.word	0x20000080

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f004 fd7c 	bl	8005928 <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20020000 	.word	0x20020000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	2000021c 	.word	0x2000021c
 8000e64:	20000370 	.word	0x20000370

08000e68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e8c:	480d      	ldr	r0, [pc, #52]	@ (8000ec4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e90:	f7ff ffea 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	@ (8000ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <LoopForever+0xe>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed8 <LoopForever+0x16>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f004 fd3b 	bl	8005934 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ebe:	f7ff fb7f 	bl	80005c0 <main>

08000ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
  ldr   r0, =_estack
 8000ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ed0:	080063c0 	.word	0x080063c0
  ldr r2, =_sbss
 8000ed4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ed8:	2000036c 	.word	0x2000036c

08000edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_2_IRQHandler>

08000ede <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f939 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f80e 	bl	8000f10 <HAL_InitTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	e001      	b.n	8000f04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f00:	f7ff fe46 	bl	8000b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f04:	79fb      	ldrb	r3, [r7, #7]

}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f1c:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <HAL_InitTick+0x68>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d022      	beq.n	8000f6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <HAL_InitTick+0x6c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <HAL_InitTick+0x68>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f944 	bl	80011c6 <HAL_SYSTICK_Config>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10f      	bne.n	8000f64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d809      	bhi.n	8000f5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f52:	f000 f910 	bl	8001176 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <HAL_InitTick+0x70>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e007      	b.n	8000f6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e004      	b.n	8000f6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e001      	b.n	8000f6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000010 	.word	0x20000010
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	2000000c 	.word	0x2000000c

08000f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <HAL_IncTick+0x1c>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <HAL_IncTick+0x20>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a03      	ldr	r2, [pc, #12]	@ (8000fa0 <HAL_IncTick+0x1c>)
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	20000220 	.word	0x20000220
 8000fa4:	20000010 	.word	0x20000010

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000220 	.word	0x20000220

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	@ (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	@ (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	@ (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	@ 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	@ 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	@ (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff40 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff90 	bl	80010b4 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5f 	bl	8001060 <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff33 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffa4 	bl	800111c <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e08d      	b.n	800130e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b47      	ldr	r3, [pc, #284]	@ (8001318 <HAL_DMA_Init+0x138>)
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d80f      	bhi.n	800121e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	4b45      	ldr	r3, [pc, #276]	@ (800131c <HAL_DMA_Init+0x13c>)
 8001206:	4413      	add	r3, r2
 8001208:	4a45      	ldr	r2, [pc, #276]	@ (8001320 <HAL_DMA_Init+0x140>)
 800120a:	fba2 2303 	umull	r2, r3, r2, r3
 800120e:	091b      	lsrs	r3, r3, #4
 8001210:	009a      	lsls	r2, r3, #2
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a42      	ldr	r2, [pc, #264]	@ (8001324 <HAL_DMA_Init+0x144>)
 800121a:	641a      	str	r2, [r3, #64]	@ 0x40
 800121c:	e00e      	b.n	800123c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b40      	ldr	r3, [pc, #256]	@ (8001328 <HAL_DMA_Init+0x148>)
 8001226:	4413      	add	r3, r2
 8001228:	4a3d      	ldr	r2, [pc, #244]	@ (8001320 <HAL_DMA_Init+0x140>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	009a      	lsls	r2, r3, #2
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a3c      	ldr	r2, [pc, #240]	@ (800132c <HAL_DMA_Init+0x14c>)
 800123a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2202      	movs	r2, #2
 8001240:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001256:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001260:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001278:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 fa76 	bl	8001780 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800129c:	d102      	bne.n	80012a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80012b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d010      	beq.n	80012e4 <HAL_DMA_Init+0x104>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d80c      	bhi.n	80012e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fa96 	bl	80017fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	e008      	b.n	80012f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020407 	.word	0x40020407
 800131c:	bffdfff8 	.word	0xbffdfff8
 8001320:	cccccccd 	.word	0xcccccccd
 8001324:	40020000 	.word	0x40020000
 8001328:	bffdfbf8 	.word	0xbffdfbf8
 800132c:	40020400 	.word	0x40020400

08001330 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_DMA_Start_IT+0x20>
 800134c:	2302      	movs	r3, #2
 800134e:	e066      	b.n	800141e <HAL_DMA_Start_IT+0xee>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d155      	bne.n	8001410 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2202      	movs	r2, #2
 8001368:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	68b9      	ldr	r1, [r7, #8]
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 f9bb 	bl	8001704 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	2b00      	cmp	r3, #0
 8001394:	d008      	beq.n	80013a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 020e 	orr.w	r2, r2, #14
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	e00f      	b.n	80013c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0204 	bic.w	r2, r2, #4
 80013b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 020a 	orr.w	r2, r2, #10
 80013c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d007      	beq.n	80013e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0201 	orr.w	r2, r2, #1
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e005      	b.n	800141c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001418:	2302      	movs	r3, #2
 800141a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800141c:	7dfb      	ldrb	r3, [r7, #23]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001426:	b480      	push	{r7}
 8001428:	b085      	sub	sp, #20
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d005      	beq.n	800144a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2204      	movs	r2, #4
 8001442:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e037      	b.n	80014ba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 020e 	bic.w	r2, r2, #14
 8001458:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001464:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001468:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	f003 021f 	and.w	r2, r3, #31
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	2101      	movs	r1, #1
 8001488:	fa01 f202 	lsl.w	r2, r1, r2
 800148c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001496:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00c      	beq.n	80014ba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014ae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014b8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d00d      	beq.n	800150c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2204      	movs	r2, #4
 80014f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e047      	b.n	800159c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 020e 	bic.w	r2, r2, #14
 800151a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001536:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800153a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001540:	f003 021f 	and.w	r2, r3, #31
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f202 	lsl.w	r2, r1, r2
 800154e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001558:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00c      	beq.n	800157c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800156c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001570:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800157a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	4798      	blx	r3
    }
  }
  return status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	2204      	movs	r2, #4
 80015c8:	409a      	lsls	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d026      	beq.n	8001620 <HAL_DMA_IRQHandler+0x7a>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d021      	beq.n	8001620 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0320 	and.w	r3, r3, #32
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0204 	bic.w	r2, r2, #4
 80015f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	f003 021f 	and.w	r2, r3, #31
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	2104      	movs	r1, #4
 8001608:	fa01 f202 	lsl.w	r2, r1, r2
 800160c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	2b00      	cmp	r3, #0
 8001614:	d071      	beq.n	80016fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800161e:	e06c      	b.n	80016fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	2202      	movs	r2, #2
 800162a:	409a      	lsls	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d02e      	beq.n	8001692 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d029      	beq.n	8001692 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10b      	bne.n	8001664 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 020a 	bic.w	r2, r2, #10
 800165a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	2102      	movs	r1, #2
 8001672:	fa01 f202 	lsl.w	r2, r1, r2
 8001676:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d038      	beq.n	80016fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001690:	e033      	b.n	80016fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	2208      	movs	r2, #8
 800169c:	409a      	lsls	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d02a      	beq.n	80016fc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d025      	beq.n	80016fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 020e 	bic.w	r2, r2, #14
 80016be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f202 	lsl.w	r2, r1, r2
 80016d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
}
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800171a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800172c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	f003 021f 	and.w	r2, r3, #31
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f202 	lsl.w	r2, r1, r2
 8001740:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b10      	cmp	r3, #16
 8001750:	d108      	bne.n	8001764 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001762:	e007      	b.n	8001774 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	60da      	str	r2, [r3, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001790:	429a      	cmp	r2, r3
 8001792:	d802      	bhi.n	800179a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001794:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e001      	b.n	800179e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800179c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	3b08      	subs	r3, #8
 80017aa:	4a12      	ldr	r2, [pc, #72]	@ (80017f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	009a      	lsls	r2, r3, #2
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4413      	add	r3, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	2201      	movs	r2, #1
 80017d4:	409a      	lsls	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40020407 	.word	0x40020407
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020820 	.word	0x40020820
 80017f4:	cccccccd 	.word	0xcccccccd
 80017f8:	40020880 	.word	0x40020880

080017fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	461a      	mov	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a08      	ldr	r2, [pc, #32]	@ (8001840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800181e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3b01      	subs	r3, #1
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	2201      	movs	r2, #1
 800182a:	409a      	lsls	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	1000823f 	.word	0x1000823f
 8001840:	40020940 	.word	0x40020940

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001852:	e15a      	b.n	8001b0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 814c 	beq.w	8001b04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d005      	beq.n	8001884 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001880:	2b02      	cmp	r3, #2
 8001882:	d130      	bne.n	80018e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ba:	2201      	movs	r2, #1
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	f003 0201 	and.w	r2, r3, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d017      	beq.n	8001922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d123      	bne.n	8001976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	08da      	lsrs	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3208      	adds	r2, #8
 8001936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	220f      	movs	r2, #15
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	6939      	ldr	r1, [r7, #16]
 8001972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0203 	and.w	r2, r3, #3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80a6 	beq.w	8001b04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b28 <HAL_GPIO_Init+0x2e4>)
 80019ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019bc:	4a5a      	ldr	r2, [pc, #360]	@ (8001b28 <HAL_GPIO_Init+0x2e4>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80019c4:	4b58      	ldr	r3, [pc, #352]	@ (8001b28 <HAL_GPIO_Init+0x2e4>)
 80019c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d0:	4a56      	ldr	r2, [pc, #344]	@ (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019fa:	d01f      	beq.n	8001a3c <HAL_GPIO_Init+0x1f8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001b30 <HAL_GPIO_Init+0x2ec>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d019      	beq.n	8001a38 <HAL_GPIO_Init+0x1f4>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a4b      	ldr	r2, [pc, #300]	@ (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d013      	beq.n	8001a34 <HAL_GPIO_Init+0x1f0>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b38 <HAL_GPIO_Init+0x2f4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d00d      	beq.n	8001a30 <HAL_GPIO_Init+0x1ec>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a49      	ldr	r2, [pc, #292]	@ (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d007      	beq.n	8001a2c <HAL_GPIO_Init+0x1e8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a48      	ldr	r2, [pc, #288]	@ (8001b40 <HAL_GPIO_Init+0x2fc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_GPIO_Init+0x1e4>
 8001a24:	2305      	movs	r3, #5
 8001a26:	e00a      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a28:	2306      	movs	r3, #6
 8001a2a:	e008      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e004      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	f002 0203 	and.w	r2, r2, #3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a4e:	4937      	ldr	r1, [pc, #220]	@ (8001b2c <HAL_GPIO_Init+0x2e8>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a5c:	4b39      	ldr	r3, [pc, #228]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a80:	4a30      	ldr	r2, [pc, #192]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a86:	4b2f      	ldr	r3, [pc, #188]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aaa:	4a26      	ldr	r2, [pc, #152]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ab0:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001afe:	4a11      	ldr	r2, [pc, #68]	@ (8001b44 <HAL_GPIO_Init+0x300>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f ae9d 	bne.w	8001854 <HAL_GPIO_Init+0x10>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	48001400 	.word	0x48001400
 8001b44:	40010400 	.word	0x40010400

08001b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
 8001b54:	4613      	mov	r3, r2
 8001b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b58:	787b      	ldrb	r3, [r7, #1]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b64:	e002      	b.n	8001b6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b82:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d006      	beq.n	8001b9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f806 	bl	8001ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40010400 	.word	0x40010400

08001ba8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d141      	bne.n	8001c52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bce:	4b4b      	ldr	r3, [pc, #300]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bda:	d131      	bne.n	8001c40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bdc:	4b47      	ldr	r3, [pc, #284]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001be2:	4a46      	ldr	r2, [pc, #280]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001be8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bec:	4b43      	ldr	r3, [pc, #268]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bf4:	4a41      	ldr	r2, [pc, #260]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bfc:	4b40      	ldr	r3, [pc, #256]	@ (8001d00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2232      	movs	r2, #50	@ 0x32
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	4a3f      	ldr	r2, [pc, #252]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	0c9b      	lsrs	r3, r3, #18
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c12:	e002      	b.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c1a:	4b38      	ldr	r3, [pc, #224]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c26:	d102      	bne.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f2      	bne.n	8001c14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c2e:	4b33      	ldr	r3, [pc, #204]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c3a:	d158      	bne.n	8001cee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e057      	b.n	8001cf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c40:	4b2e      	ldr	r3, [pc, #184]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c46:	4a2d      	ldr	r2, [pc, #180]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c50:	e04d      	b.n	8001cee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c58:	d141      	bne.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c5a:	4b28      	ldr	r3, [pc, #160]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c66:	d131      	bne.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c6e:	4a23      	ldr	r2, [pc, #140]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c78:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c80:	4a1e      	ldr	r2, [pc, #120]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2232      	movs	r2, #50	@ 0x32
 8001c8e:	fb02 f303 	mul.w	r3, r2, r3
 8001c92:	4a1c      	ldr	r2, [pc, #112]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	0c9b      	lsrs	r3, r3, #18
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c9e:	e002      	b.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cb2:	d102      	bne.n	8001cba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f2      	bne.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cc6:	d112      	bne.n	8001cee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e011      	b.n	8001cf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cdc:	e007      	b.n	8001cee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	20000008 	.word	0x20000008
 8001d04:	431bde83 	.word	0x431bde83

08001d08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d16:	6093      	str	r3, [r2, #8]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40007000 	.word	0x40007000

08001d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e2fe      	b.n	8002338 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d075      	beq.n	8001e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d46:	4b97      	ldr	r3, [pc, #604]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d50:	4b94      	ldr	r3, [pc, #592]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b0c      	cmp	r3, #12
 8001d5e:	d102      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3e>
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d002      	beq.n	8001d6c <HAL_RCC_OscConfig+0x44>
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d10b      	bne.n	8001d84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	4b8d      	ldr	r3, [pc, #564]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d05b      	beq.n	8001e30 <HAL_RCC_OscConfig+0x108>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d157      	bne.n	8001e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e2d9      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x74>
 8001d8e:	4b85      	ldr	r3, [pc, #532]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a84      	ldr	r2, [pc, #528]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e01d      	b.n	8001dd8 <HAL_RCC_OscConfig+0xb0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x98>
 8001da6:	4b7f      	ldr	r3, [pc, #508]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a7e      	ldr	r2, [pc, #504]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b7c      	ldr	r3, [pc, #496]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7b      	ldr	r2, [pc, #492]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0xb0>
 8001dc0:	4b78      	ldr	r3, [pc, #480]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a77      	ldr	r2, [pc, #476]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b75      	ldr	r3, [pc, #468]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a74      	ldr	r2, [pc, #464]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff f8e2 	bl	8000fa8 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff f8de 	bl	8000fa8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	@ 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e29e      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0xc0>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f8ce 	bl	8000fa8 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff f8ca 	bl	8000fa8 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	@ 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e28a      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e22:	4b60      	ldr	r3, [pc, #384]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0xe8>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d075      	beq.n	8001f2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e3e:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e48:	4b56      	ldr	r3, [pc, #344]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_OscConfig+0x136>
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d002      	beq.n	8001e64 <HAL_RCC_OscConfig+0x13c>
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d11f      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e64:	4b4f      	ldr	r3, [pc, #316]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_OscConfig+0x154>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e25d      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7c:	4b49      	ldr	r3, [pc, #292]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	4946      	ldr	r1, [pc, #280]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e90:	4b45      	ldr	r3, [pc, #276]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f83b 	bl	8000f10 <HAL_InitTick>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d043      	beq.n	8001f28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e249      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d023      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eac:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f876 	bl	8000fa8 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7ff f872 	bl	8000fa8 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e232      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed2:	4b34      	ldr	r3, [pc, #208]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ede:	4b31      	ldr	r3, [pc, #196]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	061b      	lsls	r3, r3, #24
 8001eec:	492d      	ldr	r1, [pc, #180]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
 8001ef2:	e01a      	b.n	8001f2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001efa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff f852 	bl	8000fa8 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f08:	f7ff f84e 	bl	8000fa8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e20e      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f1a:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x1e0>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d041      	beq.n	8001fba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01c      	beq.n	8001f78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3e:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f44:	4a17      	ldr	r2, [pc, #92]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4e:	f7ff f82b 	bl	8000fa8 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff f827 	bl	8000fa8 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e1e7      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f68:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0ef      	beq.n	8001f56 <HAL_RCC_OscConfig+0x22e>
 8001f76:	e020      	b.n	8001fba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f78:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f7e:	4a09      	ldr	r2, [pc, #36]	@ (8001fa4 <HAL_RCC_OscConfig+0x27c>)
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7ff f80e 	bl	8000fa8 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f8e:	e00d      	b.n	8001fac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f90:	f7ff f80a 	bl	8000fa8 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d906      	bls.n	8001fac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1ca      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fac:	4b8c      	ldr	r3, [pc, #560]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8001fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ea      	bne.n	8001f90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80a6 	beq.w	8002114 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fcc:	4b84      	ldr	r3, [pc, #528]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2b4>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x2b6>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00d      	beq.n	8001ffe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fee:	4b7c      	ldr	r3, [pc, #496]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffe:	4b79      	ldr	r3, [pc, #484]	@ (80021e4 <HAL_RCC_OscConfig+0x4bc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d118      	bne.n	800203c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200a:	4b76      	ldr	r3, [pc, #472]	@ (80021e4 <HAL_RCC_OscConfig+0x4bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a75      	ldr	r2, [pc, #468]	@ (80021e4 <HAL_RCC_OscConfig+0x4bc>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002016:	f7fe ffc7 	bl	8000fa8 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201e:	f7fe ffc3 	bl	8000fa8 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e183      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002030:	4b6c      	ldr	r3, [pc, #432]	@ (80021e4 <HAL_RCC_OscConfig+0x4bc>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d108      	bne.n	8002056 <HAL_RCC_OscConfig+0x32e>
 8002044:	4b66      	ldr	r3, [pc, #408]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204a:	4a65      	ldr	r2, [pc, #404]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002054:	e024      	b.n	80020a0 <HAL_RCC_OscConfig+0x378>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b05      	cmp	r3, #5
 800205c:	d110      	bne.n	8002080 <HAL_RCC_OscConfig+0x358>
 800205e:	4b60      	ldr	r3, [pc, #384]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002064:	4a5e      	ldr	r2, [pc, #376]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800206e:	4b5c      	ldr	r3, [pc, #368]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002074:	4a5a      	ldr	r2, [pc, #360]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800207e:	e00f      	b.n	80020a0 <HAL_RCC_OscConfig+0x378>
 8002080:	4b57      	ldr	r3, [pc, #348]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002086:	4a56      	ldr	r2, [pc, #344]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002090:	4b53      	ldr	r3, [pc, #332]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002096:	4a52      	ldr	r2, [pc, #328]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8002098:	f023 0304 	bic.w	r3, r3, #4
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d016      	beq.n	80020d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7fe ff7e 	bl	8000fa8 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b0:	f7fe ff7a 	bl	8000fa8 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e138      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c6:	4b46      	ldr	r3, [pc, #280]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ed      	beq.n	80020b0 <HAL_RCC_OscConfig+0x388>
 80020d4:	e015      	b.n	8002102 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d6:	f7fe ff67 	bl	8000fa8 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7fe ff63 	bl	8000fa8 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e121      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f4:	4b3a      	ldr	r3, [pc, #232]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1ed      	bne.n	80020de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002102:	7ffb      	ldrb	r3, [r7, #31]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	4b35      	ldr	r3, [pc, #212]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	4a34      	ldr	r2, [pc, #208]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 800210e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002112:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	d03c      	beq.n	800219a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01c      	beq.n	8002162 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002128:	4b2d      	ldr	r3, [pc, #180]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 800212a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800212e:	4a2c      	ldr	r2, [pc, #176]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7fe ff36 	bl	8000fa8 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002140:	f7fe ff32 	bl	8000fa8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e0f2      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002152:	4b23      	ldr	r3, [pc, #140]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8002154:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ef      	beq.n	8002140 <HAL_RCC_OscConfig+0x418>
 8002160:	e01b      	b.n	800219a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002162:	4b1f      	ldr	r3, [pc, #124]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 8002164:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002168:	4a1d      	ldr	r2, [pc, #116]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7fe ff19 	bl	8000fa8 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800217a:	f7fe ff15 	bl	8000fa8 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0d5      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800218c:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 800218e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1ef      	bne.n	800217a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80c9 	beq.w	8002336 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021a4:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	f000 8083 	beq.w	80022b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d15e      	bne.n	8002278 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ba:	4b09      	ldr	r3, [pc, #36]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a08      	ldr	r2, [pc, #32]	@ (80021e0 <HAL_RCC_OscConfig+0x4b8>)
 80021c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7fe feef 	bl	8000fa8 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021cc:	e00c      	b.n	80021e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7fe feeb 	bl	8000fa8 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d905      	bls.n	80021e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e0ab      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e8:	4b55      	ldr	r3, [pc, #340]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1ec      	bne.n	80021ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f4:	4b52      	ldr	r3, [pc, #328]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	4b52      	ldr	r3, [pc, #328]	@ (8002344 <HAL_RCC_OscConfig+0x61c>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6a11      	ldr	r1, [r2, #32]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002204:	3a01      	subs	r2, #1
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	4311      	orrs	r1, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800220e:	0212      	lsls	r2, r2, #8
 8002210:	4311      	orrs	r1, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002216:	0852      	lsrs	r2, r2, #1
 8002218:	3a01      	subs	r2, #1
 800221a:	0552      	lsls	r2, r2, #21
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002222:	0852      	lsrs	r2, r2, #1
 8002224:	3a01      	subs	r2, #1
 8002226:	0652      	lsls	r2, r2, #25
 8002228:	4311      	orrs	r1, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800222e:	06d2      	lsls	r2, r2, #27
 8002230:	430a      	orrs	r2, r1
 8002232:	4943      	ldr	r1, [pc, #268]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 8002234:	4313      	orrs	r3, r2
 8002236:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002238:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a40      	ldr	r2, [pc, #256]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002242:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002244:	4b3e      	ldr	r3, [pc, #248]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a3d      	ldr	r2, [pc, #244]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 800224a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800224e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe feaa 	bl	8000fa8 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fea6 	bl	8000fa8 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e066      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226a:	4b35      	ldr	r3, [pc, #212]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x530>
 8002276:	e05e      	b.n	8002336 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002278:	4b31      	ldr	r3, [pc, #196]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a30      	ldr	r2, [pc, #192]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 800227e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fe90 	bl	8000fa8 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7fe fe8c 	bl	8000fa8 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e04c      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800229e:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022aa:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	4924      	ldr	r1, [pc, #144]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 80022b0:	4b25      	ldr	r3, [pc, #148]	@ (8002348 <HAL_RCC_OscConfig+0x620>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	60cb      	str	r3, [r1, #12]
 80022b6:	e03e      	b.n	8002336 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e039      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <HAL_RCC_OscConfig+0x618>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d12c      	bne.n	8002332 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	3b01      	subs	r3, #1
 80022e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d123      	bne.n	8002332 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d11b      	bne.n	8002332 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d113      	bne.n	8002332 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	3b01      	subs	r3, #1
 8002318:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d109      	bne.n	8002332 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002328:	085b      	lsrs	r3, r3, #1
 800232a:	3b01      	subs	r3, #1
 800232c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	019f800c 	.word	0x019f800c
 8002348:	feeefffc 	.word	0xfeeefffc

0800234c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e11e      	b.n	80025a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b91      	ldr	r3, [pc, #580]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d910      	bls.n	8002394 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b8e      	ldr	r3, [pc, #568]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 020f 	bic.w	r2, r3, #15
 800237a:	498c      	ldr	r1, [pc, #560]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b8a      	ldr	r3, [pc, #552]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e106      	b.n	80025a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d073      	beq.n	8002488 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d129      	bne.n	80023fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a8:	4b81      	ldr	r3, [pc, #516]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0f4      	b.n	80025a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023b8:	f000 f99e 	bl	80026f8 <RCC_GetSysClockFreqFromPLLSource>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4a7c      	ldr	r2, [pc, #496]	@ (80025b4 <HAL_RCC_ClockConfig+0x268>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d93f      	bls.n	8002446 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023c6:	4b7a      	ldr	r3, [pc, #488]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d033      	beq.n	8002446 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d12f      	bne.n	8002446 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023e6:	4b72      	ldr	r3, [pc, #456]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023ee:	4a70      	ldr	r2, [pc, #448]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80023f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	e024      	b.n	8002446 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d107      	bne.n	8002414 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002404:	4b6a      	ldr	r3, [pc, #424]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0c6      	b.n	80025a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002414:	4b66      	ldr	r3, [pc, #408]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0be      	b.n	80025a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002424:	f000 f8ce 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8002428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4a61      	ldr	r2, [pc, #388]	@ (80025b4 <HAL_RCC_ClockConfig+0x268>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d909      	bls.n	8002446 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002432:	4b5f      	ldr	r3, [pc, #380]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800243a:	4a5d      	ldr	r2, [pc, #372]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 800243c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002440:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002442:	2380      	movs	r3, #128	@ 0x80
 8002444:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002446:	4b5a      	ldr	r3, [pc, #360]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f023 0203 	bic.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4957      	ldr	r1, [pc, #348]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002458:	f7fe fda6 	bl	8000fa8 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7fe fda2 	bl	8000fa8 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e095      	b.n	80025a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b4e      	ldr	r3, [pc, #312]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 020c 	and.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1eb      	bne.n	8002460 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d023      	beq.n	80024dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a0:	4b43      	ldr	r3, [pc, #268]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a42      	ldr	r2, [pc, #264]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80024a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024b8:	4b3d      	ldr	r3, [pc, #244]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80024c0:	4a3b      	ldr	r2, [pc, #236]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4b39      	ldr	r3, [pc, #228]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4936      	ldr	r1, [pc, #216]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
 80024da:	e008      	b.n	80024ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b80      	cmp	r3, #128	@ 0x80
 80024e0:	d105      	bne.n	80024ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024e2:	4b33      	ldr	r3, [pc, #204]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	4a32      	ldr	r2, [pc, #200]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 80024e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ee:	4b2f      	ldr	r3, [pc, #188]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d21d      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fc:	4b2b      	ldr	r3, [pc, #172]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 020f 	bic.w	r2, r3, #15
 8002504:	4929      	ldr	r1, [pc, #164]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800250c:	f7fe fd4c 	bl	8000fa8 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	e00a      	b.n	800252a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002514:	f7fe fd48 	bl	8000fa8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e03b      	b.n	80025a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252a:	4b20      	ldr	r3, [pc, #128]	@ (80025ac <HAL_RCC_ClockConfig+0x260>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d1ed      	bne.n	8002514 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b1a      	ldr	r3, [pc, #104]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4917      	ldr	r1, [pc, #92]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002562:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	490f      	ldr	r1, [pc, #60]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002576:	f000 f825 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 800257a:	4602      	mov	r2, r0
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <HAL_RCC_ClockConfig+0x264>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	490c      	ldr	r1, [pc, #48]	@ (80025b8 <HAL_RCC_ClockConfig+0x26c>)
 8002588:	5ccb      	ldrb	r3, [r1, r3]
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	fa22 f303 	lsr.w	r3, r2, r3
 8002592:	4a0a      	ldr	r2, [pc, #40]	@ (80025bc <HAL_RCC_ClockConfig+0x270>)
 8002594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <HAL_RCC_ClockConfig+0x274>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fcb8 	bl	8000f10 <HAL_InitTick>
 80025a0:	4603      	mov	r3, r0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	04c4b400 	.word	0x04c4b400
 80025b8:	0800633c 	.word	0x0800633c
 80025bc:	20000008 	.word	0x20000008
 80025c0:	2000000c 	.word	0x2000000c

080025c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025ca:	4b2c      	ldr	r3, [pc, #176]	@ (800267c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d102      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002680 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	e047      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025dc:	4b27      	ldr	r3, [pc, #156]	@ (800267c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d102      	bne.n	80025ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025e8:	4b26      	ldr	r3, [pc, #152]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	e03e      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025ee:	4b23      	ldr	r3, [pc, #140]	@ (800267c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b0c      	cmp	r3, #12
 80025f8:	d136      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025fa:	4b20      	ldr	r3, [pc, #128]	@ (800267c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002604:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3301      	adds	r3, #1
 8002610:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d10c      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002618:	4a1a      	ldr	r2, [pc, #104]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xc0>)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	4a16      	ldr	r2, [pc, #88]	@ (800267c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002622:	68d2      	ldr	r2, [r2, #12]
 8002624:	0a12      	lsrs	r2, r2, #8
 8002626:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	617b      	str	r3, [r7, #20]
      break;
 8002630:	e00c      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002632:	4a13      	ldr	r2, [pc, #76]	@ (8002680 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	4a10      	ldr	r2, [pc, #64]	@ (800267c <HAL_RCC_GetSysClockFreq+0xb8>)
 800263c:	68d2      	ldr	r2, [r2, #12]
 800263e:	0a12      	lsrs	r2, r2, #8
 8002640:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	617b      	str	r3, [r7, #20]
      break;
 800264a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800264c:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <HAL_RCC_GetSysClockFreq+0xb8>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0e5b      	lsrs	r3, r3, #25
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	3301      	adds	r3, #1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	e001      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800266c:	693b      	ldr	r3, [r7, #16]
}
 800266e:	4618      	mov	r0, r3
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	00f42400 	.word	0x00f42400
 8002684:	016e3600 	.word	0x016e3600

08002688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <HAL_RCC_GetHCLKFreq+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000008 	.word	0x20000008

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026a4:	f7ff fff0 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4904      	ldr	r1, [pc, #16]	@ (80026c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	0800634c 	.word	0x0800634c

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026d0:	f7ff ffda 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0adb      	lsrs	r3, r3, #11
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4904      	ldr	r1, [pc, #16]	@ (80026f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	0800634c 	.word	0x0800634c

080026f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3301      	adds	r3, #1
 8002714:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d10c      	bne.n	8002736 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800271c:	4a17      	ldr	r2, [pc, #92]	@ (800277c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	4a14      	ldr	r2, [pc, #80]	@ (8002778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002726:	68d2      	ldr	r2, [r2, #12]
 8002728:	0a12      	lsrs	r2, r2, #8
 800272a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	617b      	str	r3, [r7, #20]
    break;
 8002734:	e00c      	b.n	8002750 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002736:	4a12      	ldr	r2, [pc, #72]	@ (8002780 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	4a0e      	ldr	r2, [pc, #56]	@ (8002778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002740:	68d2      	ldr	r2, [r2, #12]
 8002742:	0a12      	lsrs	r2, r2, #8
 8002744:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]
    break;
 800274e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002750:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0e5b      	lsrs	r3, r3, #25
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	3301      	adds	r3, #1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800276a:	687b      	ldr	r3, [r7, #4]
}
 800276c:	4618      	mov	r0, r3
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40021000 	.word	0x40021000
 800277c:	016e3600 	.word	0x016e3600
 8002780:	00f42400 	.word	0x00f42400

08002784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800278c:	2300      	movs	r3, #0
 800278e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002790:	2300      	movs	r3, #0
 8002792:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8098 	beq.w	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a6:	4b43      	ldr	r3, [pc, #268]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10d      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	4b40      	ldr	r3, [pc, #256]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	4a3f      	ldr	r2, [pc, #252]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80027be:	4b3d      	ldr	r3, [pc, #244]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ca:	2301      	movs	r3, #1
 80027cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ce:	4b3a      	ldr	r3, [pc, #232]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a39      	ldr	r2, [pc, #228]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027da:	f7fe fbe5 	bl	8000fa8 <HAL_GetTick>
 80027de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027e0:	e009      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7fe fbe1 	bl	8000fa8 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d902      	bls.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	74fb      	strb	r3, [r7, #19]
        break;
 80027f4:	e005      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027f6:	4b30      	ldr	r3, [pc, #192]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0ef      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d159      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002808:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002812:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01e      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	429a      	cmp	r2, r3
 8002822:	d019      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002824:	4b23      	ldr	r3, [pc, #140]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800282e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002830:	4b20      	ldr	r3, [pc, #128]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002836:	4a1f      	ldr	r2, [pc, #124]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002840:	4b1c      	ldr	r3, [pc, #112]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	4a1b      	ldr	r2, [pc, #108]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002850:	4a18      	ldr	r2, [pc, #96]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe fba1 	bl	8000fa8 <HAL_GetTick>
 8002866:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002868:	e00b      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7fe fb9d 	bl	8000fa8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d902      	bls.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	74fb      	strb	r3, [r7, #19]
            break;
 8002880:	e006      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002882:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ec      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002896:	4b07      	ldr	r3, [pc, #28]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a4:	4903      	ldr	r1, [pc, #12]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028ac:	e008      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028ae:	7cfb      	ldrb	r3, [r7, #19]
 80028b0:	74bb      	strb	r3, [r7, #18]
 80028b2:	e005      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c0:	7c7b      	ldrb	r3, [r7, #17]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c6:	4ba7      	ldr	r3, [pc, #668]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ca:	4aa6      	ldr	r2, [pc, #664]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028de:	4ba1      	ldr	r3, [pc, #644]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e4:	f023 0203 	bic.w	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	499d      	ldr	r1, [pc, #628]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002900:	4b98      	ldr	r3, [pc, #608]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002906:	f023 020c 	bic.w	r2, r3, #12
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4995      	ldr	r1, [pc, #596]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002922:	4b90      	ldr	r3, [pc, #576]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002928:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	498c      	ldr	r1, [pc, #560]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002944:	4b87      	ldr	r3, [pc, #540]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	4984      	ldr	r1, [pc, #528]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002966:	4b7f      	ldr	r3, [pc, #508]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	497b      	ldr	r1, [pc, #492]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002988:	4b76      	ldr	r3, [pc, #472]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	4973      	ldr	r1, [pc, #460]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	496a      	ldr	r1, [pc, #424]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029cc:	4b65      	ldr	r3, [pc, #404]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4962      	ldr	r1, [pc, #392]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	4959      	ldr	r1, [pc, #356]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a10:	4b54      	ldr	r3, [pc, #336]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a16:	f023 0203 	bic.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1e:	4951      	ldr	r1, [pc, #324]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a32:	4b4c      	ldr	r3, [pc, #304]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	4948      	ldr	r1, [pc, #288]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a54:	4b43      	ldr	r3, [pc, #268]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	4940      	ldr	r1, [pc, #256]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a72:	d105      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a74:	4b3b      	ldr	r3, [pc, #236]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a3a      	ldr	r2, [pc, #232]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a8c:	4b35      	ldr	r3, [pc, #212]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9a:	4932      	ldr	r1, [pc, #200]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aac:	4b2d      	ldr	r3, [pc, #180]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ab6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ac4:	4b27      	ldr	r3, [pc, #156]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad2:	4924      	ldr	r1, [pc, #144]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ade:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002afc:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0a:	4916      	ldr	r1, [pc, #88]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b1c:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a10      	ldr	r2, [pc, #64]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b26:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d019      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	4908      	ldr	r1, [pc, #32]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b52:	d109      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b54:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a02      	ldr	r2, [pc, #8]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b5e:	60d3      	str	r3, [r2, #12]
 8002b60:	e002      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b74:	4b29      	ldr	r3, [pc, #164]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	4926      	ldr	r1, [pc, #152]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b94:	4b21      	ldr	r3, [pc, #132]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4a20      	ldr	r2, [pc, #128]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bba:	4918      	ldr	r1, [pc, #96]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bca:	d105      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a12      	ldr	r2, [pc, #72]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d015      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002be4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf2:	490a      	ldr	r1, [pc, #40]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c02:	d105      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a04      	ldr	r2, [pc, #16]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c10:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000

08002c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e042      	b.n	8002cb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7fd ffc7 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2224      	movs	r2, #36	@ 0x24
 8002c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f001 f8f4 	bl	8003e58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fdf5 	bl	8003860 <UART_SetConfig>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e01b      	b.n	8002cb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f001 f973 	bl	8003f9c <UART_CheckIdleState>
 8002cb6:	4603      	mov	r3, r0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	@ 0x28
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d17b      	bne.n	8002dd2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_UART_Transmit+0x26>
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e074      	b.n	8002dd4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2221      	movs	r2, #33	@ 0x21
 8002cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cfa:	f7fe f955 	bl	8000fa8 <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d18:	d108      	bne.n	8002d2c <HAL_UART_Transmit+0x6c>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d104      	bne.n	8002d2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	e003      	b.n	8002d34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d34:	e030      	b.n	8002d98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2180      	movs	r1, #128	@ 0x80
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f001 f9d5 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e03d      	b.n	8002dd4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10b      	bne.n	8002d76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	3302      	adds	r3, #2
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	e007      	b.n	8002d86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	3301      	adds	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1c8      	bne.n	8002d36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2200      	movs	r2, #0
 8002dac:	2140      	movs	r1, #64	@ 0x40
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f001 f99e 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e006      	b.n	8002dd4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3720      	adds	r7, #32
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	@ 0x28
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	f040 80b5 	bne.w	8002f62 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_UART_Receive+0x28>
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0ad      	b.n	8002f64 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2222      	movs	r2, #34	@ 0x22
 8002e14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e1e:	f7fe f8c3 	bl	8000fa8 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	88fa      	ldrh	r2, [r7, #6]
 8002e30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e3c:	d10e      	bne.n	8002e5c <HAL_UART_Receive+0x80>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <HAL_UART_Receive+0x76>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002e4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002e50:	e02d      	b.n	8002eae <HAL_UART_Receive+0xd2>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	22ff      	movs	r2, #255	@ 0xff
 8002e56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002e5a:	e028      	b.n	8002eae <HAL_UART_Receive+0xd2>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10d      	bne.n	8002e80 <HAL_UART_Receive+0xa4>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <HAL_UART_Receive+0x9a>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	22ff      	movs	r2, #255	@ 0xff
 8002e70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002e74:	e01b      	b.n	8002eae <HAL_UART_Receive+0xd2>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	227f      	movs	r2, #127	@ 0x7f
 8002e7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002e7e:	e016      	b.n	8002eae <HAL_UART_Receive+0xd2>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e88:	d10d      	bne.n	8002ea6 <HAL_UART_Receive+0xca>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <HAL_UART_Receive+0xc0>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	227f      	movs	r2, #127	@ 0x7f
 8002e96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002e9a:	e008      	b.n	8002eae <HAL_UART_Receive+0xd2>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	223f      	movs	r2, #63	@ 0x3f
 8002ea0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002ea4:	e003      	b.n	8002eae <HAL_UART_Receive+0xd2>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002eb4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ebe:	d108      	bne.n	8002ed2 <HAL_UART_Receive+0xf6>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d104      	bne.n	8002ed2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e003      	b.n	8002eda <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002eda:	e036      	b.n	8002f4a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f001 f902 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e032      	b.n	8002f64 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10c      	bne.n	8002f1e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	8a7b      	ldrh	r3, [r7, #18]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	3302      	adds	r3, #2
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	e00c      	b.n	8002f38 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	8a7b      	ldrh	r3, [r7, #18]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3301      	adds	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1c2      	bne.n	8002edc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
  }
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b091      	sub	sp, #68	@ 0x44
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	4613      	mov	r3, r2
 8002f78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d178      	bne.n	8003076 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_UART_Transmit_IT+0x24>
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e071      	b.n	8003078 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	88fa      	ldrh	r2, [r7, #6]
 8002f9e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2221      	movs	r2, #33	@ 0x21
 8002fbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fc8:	d12a      	bne.n	8003020 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd2:	d107      	bne.n	8002fe4 <HAL_UART_Transmit_IT+0x78>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d103      	bne.n	8002fe4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a29      	ldr	r2, [pc, #164]	@ (8003084 <HAL_UART_Transmit_IT+0x118>)
 8002fe0:	679a      	str	r2, [r3, #120]	@ 0x78
 8002fe2:	e002      	b.n	8002fea <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4a28      	ldr	r2, [pc, #160]	@ (8003088 <HAL_UART_Transmit_IT+0x11c>)
 8002fe8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3308      	adds	r3, #8
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff4:	e853 3f00 	ldrex	r3, [r3]
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003000:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3308      	adds	r3, #8
 8003008:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800300a:	637a      	str	r2, [r7, #52]	@ 0x34
 800300c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003010:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003012:	e841 2300 	strex	r3, r2, [r1]
 8003016:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1e5      	bne.n	8002fea <HAL_UART_Transmit_IT+0x7e>
 800301e:	e028      	b.n	8003072 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003028:	d107      	bne.n	800303a <HAL_UART_Transmit_IT+0xce>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4a15      	ldr	r2, [pc, #84]	@ (800308c <HAL_UART_Transmit_IT+0x120>)
 8003036:	679a      	str	r2, [r3, #120]	@ 0x78
 8003038:	e002      	b.n	8003040 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4a14      	ldr	r2, [pc, #80]	@ (8003090 <HAL_UART_Transmit_IT+0x124>)
 800303e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	613b      	str	r3, [r7, #16]
   return(result);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	69f9      	ldr	r1, [r7, #28]
 8003064:	6a3a      	ldr	r2, [r7, #32]
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	61bb      	str	r3, [r7, #24]
   return(result);
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e6      	bne.n	8003040 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003076:	2302      	movs	r3, #2
  }
}
 8003078:	4618      	mov	r0, r3
 800307a:	3744      	adds	r7, #68	@ 0x44
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	08004b1b 	.word	0x08004b1b
 8003088:	08004a3b 	.word	0x08004a3b
 800308c:	08004979 	.word	0x08004979
 8003090:	080048c1 	.word	0x080048c1

08003094 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	@ 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d137      	bne.n	800311c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_UART_Receive_IT+0x24>
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e030      	b.n	800311e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a18      	ldr	r2, [pc, #96]	@ (8003128 <HAL_UART_Receive_IT+0x94>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d01f      	beq.n	800310c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d018      	beq.n	800310c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	613b      	str	r3, [r7, #16]
   return(result);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	623b      	str	r3, [r7, #32]
 80030fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	69f9      	ldr	r1, [r7, #28]
 80030fe:	6a3a      	ldr	r2, [r7, #32]
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	61bb      	str	r3, [r7, #24]
   return(result);
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e6      	bne.n	80030da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	461a      	mov	r2, r3
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f001 f85a 	bl	80041cc <UART_Start_Receive_IT>
 8003118:	4603      	mov	r3, r0
 800311a:	e000      	b.n	800311e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3728      	adds	r7, #40	@ 0x28
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40008000 	.word	0x40008000

0800312c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	@ 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003140:	2b20      	cmp	r3, #32
 8003142:	d137      	bne.n	80031b4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_UART_Receive_DMA+0x24>
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e030      	b.n	80031b6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a18      	ldr	r2, [pc, #96]	@ (80031c0 <HAL_UART_Receive_DMA+0x94>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d01f      	beq.n	80031a4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d018      	beq.n	80031a4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	e853 3f00 	ldrex	r3, [r3]
 800317e:	613b      	str	r3, [r7, #16]
   return(result);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	623b      	str	r3, [r7, #32]
 8003192:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	69f9      	ldr	r1, [r7, #28]
 8003196:	6a3a      	ldr	r2, [r7, #32]
 8003198:	e841 2300 	strex	r3, r2, [r1]
 800319c:	61bb      	str	r3, [r7, #24]
   return(result);
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e6      	bne.n	8003172 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f001 f930 	bl	8004410 <UART_Start_Receive_DMA>
 80031b0:	4603      	mov	r3, r0
 80031b2:	e000      	b.n	80031b6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3728      	adds	r7, #40	@ 0x28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40008000 	.word	0x40008000

080031c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b0ba      	sub	sp, #232	@ 0xe8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80031ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80031f2:	4013      	ands	r3, r2
 80031f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80031f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d11b      	bne.n	8003238 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800320c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800321c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 82e3 	beq.w	80037f4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	4798      	blx	r3
      }
      return;
 8003236:	e2dd      	b.n	80037f4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8123 	beq.w	8003488 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003242:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003246:	4b8d      	ldr	r3, [pc, #564]	@ (800347c <HAL_UART_IRQHandler+0x2b8>)
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800324e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003252:	4b8b      	ldr	r3, [pc, #556]	@ (8003480 <HAL_UART_IRQHandler+0x2bc>)
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8116 	beq.w	8003488 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800325c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d011      	beq.n	800328c <HAL_UART_IRQHandler+0xc8>
 8003268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800326c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2201      	movs	r2, #1
 800327a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800328c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d011      	beq.n	80032bc <HAL_UART_IRQHandler+0xf8>
 8003298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2202      	movs	r2, #2
 80032aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b2:	f043 0204 	orr.w	r2, r3, #4
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d011      	beq.n	80032ec <HAL_UART_IRQHandler+0x128>
 80032c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2204      	movs	r2, #4
 80032da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e2:	f043 0202 	orr.w	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d017      	beq.n	8003328 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003304:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003308:	4b5c      	ldr	r3, [pc, #368]	@ (800347c <HAL_UART_IRQHandler+0x2b8>)
 800330a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00b      	beq.n	8003328 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2208      	movs	r2, #8
 8003316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331e:	f043 0208 	orr.w	r2, r3, #8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800332c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <HAL_UART_IRQHandler+0x196>
 8003334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003338:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00c      	beq.n	800335a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003350:	f043 0220 	orr.w	r2, r3, #32
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8249 	beq.w	80037f8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d013      	beq.n	800339a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d105      	bne.n	800338a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800337e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ae:	2b40      	cmp	r3, #64	@ 0x40
 80033b0:	d005      	beq.n	80033be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d054      	beq.n	8003468 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f001 f90d 	bl	80045de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ce:	2b40      	cmp	r3, #64	@ 0x40
 80033d0:	d146      	bne.n	8003460 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3308      	adds	r3, #8
 80033d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3308      	adds	r3, #8
 80033fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003402:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800340a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1d9      	bne.n	80033d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003424:	2b00      	cmp	r3, #0
 8003426:	d017      	beq.n	8003458 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800342e:	4a15      	ldr	r2, [pc, #84]	@ (8003484 <HAL_UART_IRQHandler+0x2c0>)
 8003430:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe f84d 	bl	80014d8 <HAL_DMA_Abort_IT>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d019      	beq.n	8003478 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003452:	4610      	mov	r0, r2
 8003454:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003456:	e00f      	b.n	8003478 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f9eb 	bl	8003834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345e:	e00b      	b.n	8003478 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f9e7 	bl	8003834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003466:	e007      	b.n	8003478 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f9e3 	bl	8003834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003476:	e1bf      	b.n	80037f8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003478:	bf00      	nop
    return;
 800347a:	e1bd      	b.n	80037f8 <HAL_UART_IRQHandler+0x634>
 800347c:	10000001 	.word	0x10000001
 8003480:	04000120 	.word	0x04000120
 8003484:	08004895 	.word	0x08004895

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800348c:	2b01      	cmp	r3, #1
 800348e:	f040 8153 	bne.w	8003738 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 814c 	beq.w	8003738 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8145 	beq.w	8003738 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2210      	movs	r2, #16
 80034b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c0:	2b40      	cmp	r3, #64	@ 0x40
 80034c2:	f040 80bb 	bne.w	800363c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 818f 	beq.w	80037fc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80034e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034e8:	429a      	cmp	r2, r3
 80034ea:	f080 8187 	bcs.w	80037fc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	f040 8087 	bne.w	800361a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003520:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003528:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800353a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003542:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800354e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1da      	bne.n	800350c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3308      	adds	r3, #8
 800355c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3308      	adds	r3, #8
 8003576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800357a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800357e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003582:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800358c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1e1      	bne.n	8003556 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3308      	adds	r3, #8
 8003598:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80035a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3308      	adds	r3, #8
 80035b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80035bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80035c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e3      	bne.n	8003592 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035e8:	f023 0310 	bic.w	r3, r3, #16
 80035ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003600:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e4      	bne.n	80035d8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003614:	4618      	mov	r0, r3
 8003616:	f7fd ff06 	bl	8001426 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2202      	movs	r2, #2
 800361e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800362c:	b29b      	uxth	r3, r3
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	b29b      	uxth	r3, r3
 8003632:	4619      	mov	r1, r3
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f907 	bl	8003848 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800363a:	e0df      	b.n	80037fc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003648:	b29b      	uxth	r3, r3
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80d1 	beq.w	8003800 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800365e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80cc 	beq.w	8003800 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800367c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800368a:	647b      	str	r3, [r7, #68]	@ 0x44
 800368c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003690:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e4      	bne.n	8003668 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3308      	adds	r3, #8
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	623b      	str	r3, [r7, #32]
   return(result);
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3308      	adds	r3, #8
 80036c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80036c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e1      	bne.n	800369e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0310 	bic.w	r3, r3, #16
 8003702:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	69b9      	ldr	r1, [r7, #24]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	e841 2300 	strex	r3, r2, [r1]
 800371c:	617b      	str	r3, [r7, #20]
   return(result);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e4      	bne.n	80036ee <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800372a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800372e:	4619      	mov	r1, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f889 	bl	8003848 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003736:	e063      	b.n	8003800 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00e      	beq.n	8003762 <HAL_UART_IRQHandler+0x59e>
 8003744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003758:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f001 ff9a 	bl	8005694 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003760:	e051      	b.n	8003806 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376a:	2b00      	cmp	r3, #0
 800376c:	d014      	beq.n	8003798 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800376e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d105      	bne.n	8003786 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800377a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800377e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800378a:	2b00      	cmp	r3, #0
 800378c:	d03a      	beq.n	8003804 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
    }
    return;
 8003796:	e035      	b.n	8003804 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800379c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <HAL_UART_IRQHandler+0x5f4>
 80037a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f001 fa27 	bl	8004c04 <UART_EndTransmit_IT>
    return;
 80037b6:	e026      	b.n	8003806 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80037b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <HAL_UART_IRQHandler+0x614>
 80037c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f001 ff73 	bl	80056bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037d6:	e016      	b.n	8003806 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80037d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d010      	beq.n	8003806 <HAL_UART_IRQHandler+0x642>
 80037e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	da0c      	bge.n	8003806 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f001 ff5b 	bl	80056a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037f2:	e008      	b.n	8003806 <HAL_UART_IRQHandler+0x642>
      return;
 80037f4:	bf00      	nop
 80037f6:	e006      	b.n	8003806 <HAL_UART_IRQHandler+0x642>
    return;
 80037f8:	bf00      	nop
 80037fa:	e004      	b.n	8003806 <HAL_UART_IRQHandler+0x642>
      return;
 80037fc:	bf00      	nop
 80037fe:	e002      	b.n	8003806 <HAL_UART_IRQHandler+0x642>
      return;
 8003800:	bf00      	nop
 8003802:	e000      	b.n	8003806 <HAL_UART_IRQHandler+0x642>
    return;
 8003804:	bf00      	nop
  }
}
 8003806:	37e8      	adds	r7, #232	@ 0xe8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003864:	b08c      	sub	sp, #48	@ 0x30
 8003866:	af00      	add	r7, sp, #0
 8003868:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	431a      	orrs	r2, r3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	431a      	orrs	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	4313      	orrs	r3, r2
 8003886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4baa      	ldr	r3, [pc, #680]	@ (8003b38 <UART_SetConfig+0x2d8>)
 8003890:	4013      	ands	r3, r2
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003898:	430b      	orrs	r3, r1
 800389a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a9f      	ldr	r2, [pc, #636]	@ (8003b3c <UART_SetConfig+0x2dc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c8:	4313      	orrs	r3, r2
 80038ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80038d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ea:	f023 010f 	bic.w	r1, r3, #15
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a90      	ldr	r2, [pc, #576]	@ (8003b40 <UART_SetConfig+0x2e0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d125      	bne.n	8003950 <UART_SetConfig+0xf0>
 8003904:	4b8f      	ldr	r3, [pc, #572]	@ (8003b44 <UART_SetConfig+0x2e4>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b03      	cmp	r3, #3
 8003910:	d81a      	bhi.n	8003948 <UART_SetConfig+0xe8>
 8003912:	a201      	add	r2, pc, #4	@ (adr r2, 8003918 <UART_SetConfig+0xb8>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	08003929 	.word	0x08003929
 800391c:	08003939 	.word	0x08003939
 8003920:	08003931 	.word	0x08003931
 8003924:	08003941 	.word	0x08003941
 8003928:	2301      	movs	r3, #1
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800392e:	e116      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003930:	2302      	movs	r3, #2
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003936:	e112      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003938:	2304      	movs	r3, #4
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800393e:	e10e      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003940:	2308      	movs	r3, #8
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003946:	e10a      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003948:	2310      	movs	r3, #16
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800394e:	e106      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7c      	ldr	r2, [pc, #496]	@ (8003b48 <UART_SetConfig+0x2e8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d138      	bne.n	80039cc <UART_SetConfig+0x16c>
 800395a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b44 <UART_SetConfig+0x2e4>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d82d      	bhi.n	80039c4 <UART_SetConfig+0x164>
 8003968:	a201      	add	r2, pc, #4	@ (adr r2, 8003970 <UART_SetConfig+0x110>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	080039a5 	.word	0x080039a5
 8003974:	080039c5 	.word	0x080039c5
 8003978:	080039c5 	.word	0x080039c5
 800397c:	080039c5 	.word	0x080039c5
 8003980:	080039b5 	.word	0x080039b5
 8003984:	080039c5 	.word	0x080039c5
 8003988:	080039c5 	.word	0x080039c5
 800398c:	080039c5 	.word	0x080039c5
 8003990:	080039ad 	.word	0x080039ad
 8003994:	080039c5 	.word	0x080039c5
 8003998:	080039c5 	.word	0x080039c5
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039bd 	.word	0x080039bd
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039aa:	e0d8      	b.n	8003b5e <UART_SetConfig+0x2fe>
 80039ac:	2302      	movs	r3, #2
 80039ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039b2:	e0d4      	b.n	8003b5e <UART_SetConfig+0x2fe>
 80039b4:	2304      	movs	r3, #4
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ba:	e0d0      	b.n	8003b5e <UART_SetConfig+0x2fe>
 80039bc:	2308      	movs	r3, #8
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039c2:	e0cc      	b.n	8003b5e <UART_SetConfig+0x2fe>
 80039c4:	2310      	movs	r3, #16
 80039c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ca:	e0c8      	b.n	8003b5e <UART_SetConfig+0x2fe>
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b4c <UART_SetConfig+0x2ec>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d125      	bne.n	8003a22 <UART_SetConfig+0x1c2>
 80039d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b44 <UART_SetConfig+0x2e4>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039e0:	2b30      	cmp	r3, #48	@ 0x30
 80039e2:	d016      	beq.n	8003a12 <UART_SetConfig+0x1b2>
 80039e4:	2b30      	cmp	r3, #48	@ 0x30
 80039e6:	d818      	bhi.n	8003a1a <UART_SetConfig+0x1ba>
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d00a      	beq.n	8003a02 <UART_SetConfig+0x1a2>
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d814      	bhi.n	8003a1a <UART_SetConfig+0x1ba>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <UART_SetConfig+0x19a>
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d008      	beq.n	8003a0a <UART_SetConfig+0x1aa>
 80039f8:	e00f      	b.n	8003a1a <UART_SetConfig+0x1ba>
 80039fa:	2300      	movs	r3, #0
 80039fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a00:	e0ad      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a02:	2302      	movs	r3, #2
 8003a04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a08:	e0a9      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a10:	e0a5      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a12:	2308      	movs	r3, #8
 8003a14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a18:	e0a1      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a20:	e09d      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a4a      	ldr	r2, [pc, #296]	@ (8003b50 <UART_SetConfig+0x2f0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d125      	bne.n	8003a78 <UART_SetConfig+0x218>
 8003a2c:	4b45      	ldr	r3, [pc, #276]	@ (8003b44 <UART_SetConfig+0x2e4>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a38:	d016      	beq.n	8003a68 <UART_SetConfig+0x208>
 8003a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a3c:	d818      	bhi.n	8003a70 <UART_SetConfig+0x210>
 8003a3e:	2b80      	cmp	r3, #128	@ 0x80
 8003a40:	d00a      	beq.n	8003a58 <UART_SetConfig+0x1f8>
 8003a42:	2b80      	cmp	r3, #128	@ 0x80
 8003a44:	d814      	bhi.n	8003a70 <UART_SetConfig+0x210>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <UART_SetConfig+0x1f0>
 8003a4a:	2b40      	cmp	r3, #64	@ 0x40
 8003a4c:	d008      	beq.n	8003a60 <UART_SetConfig+0x200>
 8003a4e:	e00f      	b.n	8003a70 <UART_SetConfig+0x210>
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a56:	e082      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5e:	e07e      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a60:	2304      	movs	r3, #4
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a66:	e07a      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a68:	2308      	movs	r3, #8
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6e:	e076      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a70:	2310      	movs	r3, #16
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a76:	e072      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a35      	ldr	r2, [pc, #212]	@ (8003b54 <UART_SetConfig+0x2f4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d12a      	bne.n	8003ad8 <UART_SetConfig+0x278>
 8003a82:	4b30      	ldr	r3, [pc, #192]	@ (8003b44 <UART_SetConfig+0x2e4>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a90:	d01a      	beq.n	8003ac8 <UART_SetConfig+0x268>
 8003a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a96:	d81b      	bhi.n	8003ad0 <UART_SetConfig+0x270>
 8003a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a9c:	d00c      	beq.n	8003ab8 <UART_SetConfig+0x258>
 8003a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa2:	d815      	bhi.n	8003ad0 <UART_SetConfig+0x270>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <UART_SetConfig+0x250>
 8003aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aac:	d008      	beq.n	8003ac0 <UART_SetConfig+0x260>
 8003aae:	e00f      	b.n	8003ad0 <UART_SetConfig+0x270>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ab6:	e052      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003abe:	e04e      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac6:	e04a      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003ac8:	2308      	movs	r3, #8
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ace:	e046      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad6:	e042      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a17      	ldr	r2, [pc, #92]	@ (8003b3c <UART_SetConfig+0x2dc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d13a      	bne.n	8003b58 <UART_SetConfig+0x2f8>
 8003ae2:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <UART_SetConfig+0x2e4>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003aec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003af0:	d01a      	beq.n	8003b28 <UART_SetConfig+0x2c8>
 8003af2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003af6:	d81b      	bhi.n	8003b30 <UART_SetConfig+0x2d0>
 8003af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003afc:	d00c      	beq.n	8003b18 <UART_SetConfig+0x2b8>
 8003afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b02:	d815      	bhi.n	8003b30 <UART_SetConfig+0x2d0>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <UART_SetConfig+0x2b0>
 8003b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b0c:	d008      	beq.n	8003b20 <UART_SetConfig+0x2c0>
 8003b0e:	e00f      	b.n	8003b30 <UART_SetConfig+0x2d0>
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b16:	e022      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1e:	e01e      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003b20:	2304      	movs	r3, #4
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b26:	e01a      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003b28:	2308      	movs	r3, #8
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b2e:	e016      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003b30:	2310      	movs	r3, #16
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b36:	e012      	b.n	8003b5e <UART_SetConfig+0x2fe>
 8003b38:	cfff69f3 	.word	0xcfff69f3
 8003b3c:	40008000 	.word	0x40008000
 8003b40:	40013800 	.word	0x40013800
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40004400 	.word	0x40004400
 8003b4c:	40004800 	.word	0x40004800
 8003b50:	40004c00 	.word	0x40004c00
 8003b54:	40005000 	.word	0x40005000
 8003b58:	2310      	movs	r3, #16
 8003b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4aae      	ldr	r2, [pc, #696]	@ (8003e1c <UART_SetConfig+0x5bc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	f040 8097 	bne.w	8003c98 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d823      	bhi.n	8003bba <UART_SetConfig+0x35a>
 8003b72:	a201      	add	r2, pc, #4	@ (adr r2, 8003b78 <UART_SetConfig+0x318>)
 8003b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b78:	08003b9d 	.word	0x08003b9d
 8003b7c:	08003bbb 	.word	0x08003bbb
 8003b80:	08003ba5 	.word	0x08003ba5
 8003b84:	08003bbb 	.word	0x08003bbb
 8003b88:	08003bab 	.word	0x08003bab
 8003b8c:	08003bbb 	.word	0x08003bbb
 8003b90:	08003bbb 	.word	0x08003bbb
 8003b94:	08003bbb 	.word	0x08003bbb
 8003b98:	08003bb3 	.word	0x08003bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b9c:	f7fe fd80 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8003ba0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ba2:	e010      	b.n	8003bc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ba4:	4b9e      	ldr	r3, [pc, #632]	@ (8003e20 <UART_SetConfig+0x5c0>)
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ba8:	e00d      	b.n	8003bc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003baa:	f7fe fd0b 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8003bae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bb0:	e009      	b.n	8003bc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bb8:	e005      	b.n	8003bc6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003bc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8130 	beq.w	8003e2e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	4a94      	ldr	r2, [pc, #592]	@ (8003e24 <UART_SetConfig+0x5c4>)
 8003bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d305      	bcc.n	8003bfe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d903      	bls.n	8003c06 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c04:	e113      	b.n	8003e2e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	2200      	movs	r2, #0
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	60fa      	str	r2, [r7, #12]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	4a84      	ldr	r2, [pc, #528]	@ (8003e24 <UART_SetConfig+0x5c4>)
 8003c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c28:	f7fc fb52 	bl	80002d0 <__aeabi_uldivmod>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	020b      	lsls	r3, r1, #8
 8003c3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c42:	0202      	lsls	r2, r0, #8
 8003c44:	6979      	ldr	r1, [r7, #20]
 8003c46:	6849      	ldr	r1, [r1, #4]
 8003c48:	0849      	lsrs	r1, r1, #1
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	4605      	mov	r5, r0
 8003c50:	eb12 0804 	adds.w	r8, r2, r4
 8003c54:	eb43 0905 	adc.w	r9, r3, r5
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	469a      	mov	sl, r3
 8003c60:	4693      	mov	fp, r2
 8003c62:	4652      	mov	r2, sl
 8003c64:	465b      	mov	r3, fp
 8003c66:	4640      	mov	r0, r8
 8003c68:	4649      	mov	r1, r9
 8003c6a:	f7fc fb31 	bl	80002d0 <__aeabi_uldivmod>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4613      	mov	r3, r2
 8003c74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c7c:	d308      	bcc.n	8003c90 <UART_SetConfig+0x430>
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c84:	d204      	bcs.n	8003c90 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6a3a      	ldr	r2, [r7, #32]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	e0ce      	b.n	8003e2e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c96:	e0ca      	b.n	8003e2e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ca0:	d166      	bne.n	8003d70 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d827      	bhi.n	8003cfa <UART_SetConfig+0x49a>
 8003caa:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <UART_SetConfig+0x450>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003cdd 	.word	0x08003cdd
 8003cb8:	08003ce5 	.word	0x08003ce5
 8003cbc:	08003cfb 	.word	0x08003cfb
 8003cc0:	08003ceb 	.word	0x08003ceb
 8003cc4:	08003cfb 	.word	0x08003cfb
 8003cc8:	08003cfb 	.word	0x08003cfb
 8003ccc:	08003cfb 	.word	0x08003cfb
 8003cd0:	08003cf3 	.word	0x08003cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd4:	f7fe fce4 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8003cd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cda:	e014      	b.n	8003d06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cdc:	f7fe fcf6 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8003ce0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ce2:	e010      	b.n	8003d06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce4:	4b4e      	ldr	r3, [pc, #312]	@ (8003e20 <UART_SetConfig+0x5c0>)
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ce8:	e00d      	b.n	8003d06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cea:	f7fe fc6b 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8003cee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cf0:	e009      	b.n	8003d06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cf8:	e005      	b.n	8003d06 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8090 	beq.w	8003e2e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	4a44      	ldr	r2, [pc, #272]	@ (8003e24 <UART_SetConfig+0x5c4>)
 8003d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d20:	005a      	lsls	r2, r3, #1
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	085b      	lsrs	r3, r3, #1
 8003d28:	441a      	add	r2, r3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	2b0f      	cmp	r3, #15
 8003d38:	d916      	bls.n	8003d68 <UART_SetConfig+0x508>
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d40:	d212      	bcs.n	8003d68 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	f023 030f 	bic.w	r3, r3, #15
 8003d4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	8bfb      	ldrh	r3, [r7, #30]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	8bfa      	ldrh	r2, [r7, #30]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	e062      	b.n	8003e2e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d6e:	e05e      	b.n	8003e2e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d828      	bhi.n	8003dca <UART_SetConfig+0x56a>
 8003d78:	a201      	add	r2, pc, #4	@ (adr r2, 8003d80 <UART_SetConfig+0x520>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003dad 	.word	0x08003dad
 8003d88:	08003db5 	.word	0x08003db5
 8003d8c:	08003dcb 	.word	0x08003dcb
 8003d90:	08003dbb 	.word	0x08003dbb
 8003d94:	08003dcb 	.word	0x08003dcb
 8003d98:	08003dcb 	.word	0x08003dcb
 8003d9c:	08003dcb 	.word	0x08003dcb
 8003da0:	08003dc3 	.word	0x08003dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da4:	f7fe fc7c 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8003da8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003daa:	e014      	b.n	8003dd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dac:	f7fe fc8e 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8003db0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003db2:	e010      	b.n	8003dd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e20 <UART_SetConfig+0x5c0>)
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003db8:	e00d      	b.n	8003dd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dba:	f7fe fc03 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8003dbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dc0:	e009      	b.n	8003dd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dc8:	e005      	b.n	8003dd6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003dd4:	bf00      	nop
    }

    if (pclk != 0U)
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d028      	beq.n	8003e2e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	4a10      	ldr	r2, [pc, #64]	@ (8003e24 <UART_SetConfig+0x5c4>)
 8003de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003de6:	461a      	mov	r2, r3
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	441a      	add	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	2b0f      	cmp	r3, #15
 8003e04:	d910      	bls.n	8003e28 <UART_SetConfig+0x5c8>
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e0c:	d20c      	bcs.n	8003e28 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60da      	str	r2, [r3, #12]
 8003e18:	e009      	b.n	8003e2e <UART_SetConfig+0x5ce>
 8003e1a:	bf00      	nop
 8003e1c:	40008000 	.word	0x40008000
 8003e20:	00f42400 	.word	0x00f42400
 8003e24:	08006354 	.word	0x08006354
      }
      else
      {
        ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2200      	movs	r2, #0
 8003e42:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2200      	movs	r2, #0
 8003e48:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e4a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3730      	adds	r7, #48	@ 0x30
 8003e52:	46bd      	mov	sp, r7
 8003e54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01a      	beq.n	8003f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f56:	d10a      	bne.n	8003f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
  }
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b098      	sub	sp, #96	@ 0x60
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fac:	f7fc fffc 	bl	8000fa8 <HAL_GetTick>
 8003fb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d12f      	bne.n	8004020 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f88e 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d022      	beq.n	8004020 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ffa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e6      	bne.n	8003fda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e063      	b.n	80040e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b04      	cmp	r3, #4
 800402c:	d149      	bne.n	80040c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004036:	2200      	movs	r2, #0
 8004038:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f857 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d03c      	beq.n	80040c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	623b      	str	r3, [r7, #32]
   return(result);
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800405c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004066:	633b      	str	r3, [r7, #48]	@ 0x30
 8004068:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800406c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e6      	bne.n	8004048 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3308      	adds	r3, #8
 8004080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	60fb      	str	r3, [r7, #12]
   return(result);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3308      	adds	r3, #8
 8004098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800409a:	61fa      	str	r2, [r7, #28]
 800409c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	69b9      	ldr	r1, [r7, #24]
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	617b      	str	r3, [r7, #20]
   return(result);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e5      	bne.n	800407a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e012      	b.n	80040e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3758      	adds	r7, #88	@ 0x58
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004100:	e04f      	b.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d04b      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410a:	f7fc ff4d 	bl	8000fa8 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	429a      	cmp	r2, r3
 8004118:	d302      	bcc.n	8004120 <UART_WaitOnFlagUntilTimeout+0x30>
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e04e      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d037      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b80      	cmp	r3, #128	@ 0x80
 8004136:	d034      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	d031      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b08      	cmp	r3, #8
 800414a:	d110      	bne.n	800416e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2208      	movs	r2, #8
 8004152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fa42 	bl	80045de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2208      	movs	r2, #8
 800415e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e029      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800417c:	d111      	bne.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fa28 	bl	80045de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e00f      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4013      	ands	r3, r2
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	bf0c      	ite	eq
 80041b2:	2301      	moveq	r3, #1
 80041b4:	2300      	movne	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d0a0      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b0a3      	sub	sp, #140	@ 0x8c
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	88fa      	ldrh	r2, [r7, #6]
 80041e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	88fa      	ldrh	r2, [r7, #6]
 80041ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fe:	d10e      	bne.n	800421e <UART_Start_Receive_IT+0x52>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d105      	bne.n	8004214 <UART_Start_Receive_IT+0x48>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800420e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004212:	e02d      	b.n	8004270 <UART_Start_Receive_IT+0xa4>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	22ff      	movs	r2, #255	@ 0xff
 8004218:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800421c:	e028      	b.n	8004270 <UART_Start_Receive_IT+0xa4>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10d      	bne.n	8004242 <UART_Start_Receive_IT+0x76>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d104      	bne.n	8004238 <UART_Start_Receive_IT+0x6c>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	22ff      	movs	r2, #255	@ 0xff
 8004232:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004236:	e01b      	b.n	8004270 <UART_Start_Receive_IT+0xa4>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	227f      	movs	r2, #127	@ 0x7f
 800423c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004240:	e016      	b.n	8004270 <UART_Start_Receive_IT+0xa4>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800424a:	d10d      	bne.n	8004268 <UART_Start_Receive_IT+0x9c>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <UART_Start_Receive_IT+0x92>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	227f      	movs	r2, #127	@ 0x7f
 8004258:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800425c:	e008      	b.n	8004270 <UART_Start_Receive_IT+0xa4>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	223f      	movs	r2, #63	@ 0x3f
 8004262:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004266:	e003      	b.n	8004270 <UART_Start_Receive_IT+0xa4>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2222      	movs	r2, #34	@ 0x22
 800427c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3308      	adds	r3, #8
 8004286:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004290:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3308      	adds	r3, #8
 80042a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80042a4:	673a      	str	r2, [r7, #112]	@ 0x70
 80042a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80042aa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80042b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e3      	bne.n	8004280 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c0:	d14f      	bne.n	8004362 <UART_Start_Receive_IT+0x196>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80042c8:	88fa      	ldrh	r2, [r7, #6]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d349      	bcc.n	8004362 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d6:	d107      	bne.n	80042e8 <UART_Start_Receive_IT+0x11c>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d103      	bne.n	80042e8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a47      	ldr	r2, [pc, #284]	@ (8004400 <UART_Start_Receive_IT+0x234>)
 80042e4:	675a      	str	r2, [r3, #116]	@ 0x74
 80042e6:	e002      	b.n	80042ee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4a46      	ldr	r2, [pc, #280]	@ (8004404 <UART_Start_Receive_IT+0x238>)
 80042ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01a      	beq.n	800432c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800430a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004318:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800431a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800431e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e4      	bne.n	80042f6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3308      	adds	r3, #8
 8004332:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800433c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004342:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800434c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800434e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004352:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800435a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_Start_Receive_IT+0x160>
 8004360:	e046      	b.n	80043f0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436a:	d107      	bne.n	800437c <UART_Start_Receive_IT+0x1b0>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d103      	bne.n	800437c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a24      	ldr	r2, [pc, #144]	@ (8004408 <UART_Start_Receive_IT+0x23c>)
 8004378:	675a      	str	r2, [r3, #116]	@ 0x74
 800437a:	e002      	b.n	8004382 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a23      	ldr	r2, [pc, #140]	@ (800440c <UART_Start_Receive_IT+0x240>)
 8004380:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d019      	beq.n	80043be <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800439e:	677b      	str	r3, [r7, #116]	@ 0x74
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043aa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80043b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e6      	bne.n	800438a <UART_Start_Receive_IT+0x1be>
 80043bc:	e018      	b.n	80043f0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	613b      	str	r3, [r7, #16]
   return(result);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f043 0320 	orr.w	r3, r3, #32
 80043d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043dc:	623b      	str	r3, [r7, #32]
 80043de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	69f9      	ldr	r1, [r7, #28]
 80043e2:	6a3a      	ldr	r2, [r7, #32]
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e6      	bne.n	80043be <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	378c      	adds	r7, #140	@ 0x8c
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	0800532d 	.word	0x0800532d
 8004404:	08004fcd 	.word	0x08004fcd
 8004408:	08004e15 	.word	0x08004e15
 800440c:	08004c5d 	.word	0x08004c5d

08004410 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b096      	sub	sp, #88	@ 0x58
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2222      	movs	r2, #34	@ 0x22
 8004438:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02d      	beq.n	80044a2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800444c:	4a40      	ldr	r2, [pc, #256]	@ (8004550 <UART_Start_Receive_DMA+0x140>)
 800444e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004456:	4a3f      	ldr	r2, [pc, #252]	@ (8004554 <UART_Start_Receive_DMA+0x144>)
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004460:	4a3d      	ldr	r2, [pc, #244]	@ (8004558 <UART_Start_Receive_DMA+0x148>)
 8004462:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800446a:	2200      	movs	r2, #0
 800446c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3324      	adds	r3, #36	@ 0x24
 800447a:	4619      	mov	r1, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004480:	461a      	mov	r2, r3
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	f7fc ff54 	bl	8001330 <HAL_DMA_Start_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2210      	movs	r2, #16
 8004492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e051      	b.n	8004546 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d018      	beq.n	80044dc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044be:	657b      	str	r3, [r7, #84]	@ 0x54
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ca:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80044ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80044d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e6      	bne.n	80044aa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3308      	adds	r3, #8
 80044fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80044fc:	637a      	str	r2, [r7, #52]	@ 0x34
 80044fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004502:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800450a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3308      	adds	r3, #8
 8004516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	613b      	str	r3, [r7, #16]
   return(result);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3308      	adds	r3, #8
 800452e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004530:	623a      	str	r2, [r7, #32]
 8004532:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	69f9      	ldr	r1, [r7, #28]
 8004536:	6a3a      	ldr	r2, [r7, #32]
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	61bb      	str	r3, [r7, #24]
   return(result);
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e5      	bne.n	8004510 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3758      	adds	r7, #88	@ 0x58
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	080046ab 	.word	0x080046ab
 8004554:	080047d7 	.word	0x080047d7
 8004558:	08004815 	.word	0x08004815

0800455c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800455c:	b480      	push	{r7}
 800455e:	b08f      	sub	sp, #60	@ 0x3c
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	61fb      	str	r3, [r7, #28]
   return(result);
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004578:	637b      	str	r3, [r7, #52]	@ 0x34
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004584:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004588:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e6      	bne.n	8004564 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3308      	adds	r3, #8
 800459c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b6:	61ba      	str	r2, [r7, #24]
 80045b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6979      	ldr	r1, [r7, #20]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	613b      	str	r3, [r7, #16]
   return(result);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e5      	bne.n	8004596 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80045d2:	bf00      	nop
 80045d4:	373c      	adds	r7, #60	@ 0x3c
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045de:	b480      	push	{r7}
 80045e0:	b095      	sub	sp, #84	@ 0x54
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004604:	643b      	str	r3, [r7, #64]	@ 0x40
 8004606:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800460a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e6      	bne.n	80045e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3308      	adds	r3, #8
 800461e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	61fb      	str	r3, [r7, #28]
   return(result);
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3308      	adds	r3, #8
 800463a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800463c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800463e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e3      	bne.n	8004618 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d118      	bne.n	800468a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	60bb      	str	r3, [r7, #8]
   return(result);
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f023 0310 	bic.w	r3, r3, #16
 800466c:	647b      	str	r3, [r7, #68]	@ 0x44
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	6979      	ldr	r1, [r7, #20]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	613b      	str	r3, [r7, #16]
   return(result);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e6      	bne.n	8004658 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800469e:	bf00      	nop
 80046a0:	3754      	adds	r7, #84	@ 0x54
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b09c      	sub	sp, #112	@ 0x70
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d171      	bne.n	80047aa <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80046c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e6      	bne.n	80046ce <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3308      	adds	r3, #8
 8004706:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	667b      	str	r3, [r7, #100]	@ 0x64
 8004718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3308      	adds	r3, #8
 800471e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004720:	647a      	str	r2, [r7, #68]	@ 0x44
 8004722:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800472e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e5      	bne.n	8004700 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3308      	adds	r3, #8
 800473a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	623b      	str	r3, [r7, #32]
   return(result);
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800474a:	663b      	str	r3, [r7, #96]	@ 0x60
 800474c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3308      	adds	r3, #8
 8004752:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004754:	633a      	str	r2, [r7, #48]	@ 0x30
 8004756:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800475a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e5      	bne.n	8004734 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800476a:	2220      	movs	r2, #32
 800476c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d118      	bne.n	80047aa <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	60fb      	str	r3, [r7, #12]
   return(result);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f023 0310 	bic.w	r3, r3, #16
 800478c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800478e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	69b9      	ldr	r1, [r7, #24]
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	617b      	str	r3, [r7, #20]
   return(result);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e6      	bne.n	8004778 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ac:	2200      	movs	r2, #0
 80047ae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d107      	bne.n	80047c8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80047be:	4619      	mov	r1, r3
 80047c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80047c2:	f7ff f841 	bl	8003848 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047c6:	e002      	b.n	80047ce <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80047c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80047ca:	f7fc f9af 	bl	8000b2c <HAL_UART_RxCpltCallback>
}
 80047ce:	bf00      	nop
 80047d0:	3770      	adds	r7, #112	@ 0x70
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d109      	bne.n	8004806 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	4619      	mov	r1, r3
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7ff f822 	bl	8003848 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004804:	e002      	b.n	800480c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff f80a 	bl	8003820 <HAL_UART_RxHalfCpltCallback>
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004828:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004830:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483c:	2b80      	cmp	r3, #128	@ 0x80
 800483e:	d109      	bne.n	8004854 <UART_DMAError+0x40>
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b21      	cmp	r3, #33	@ 0x21
 8004844:	d106      	bne.n	8004854 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2200      	movs	r2, #0
 800484a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800484e:	6978      	ldr	r0, [r7, #20]
 8004850:	f7ff fe84 	bl	800455c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485e:	2b40      	cmp	r3, #64	@ 0x40
 8004860:	d109      	bne.n	8004876 <UART_DMAError+0x62>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b22      	cmp	r3, #34	@ 0x22
 8004866:	d106      	bne.n	8004876 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2200      	movs	r2, #0
 800486c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8004870:	6978      	ldr	r0, [r7, #20]
 8004872:	f7ff feb4 	bl	80045de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487c:	f043 0210 	orr.w	r2, r3, #16
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004886:	6978      	ldr	r0, [r7, #20]
 8004888:	f7fe ffd4 	bl	8003834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800488c:	bf00      	nop
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7fe ffbe 	bl	8003834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048b8:	bf00      	nop
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b08f      	sub	sp, #60	@ 0x3c
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ce:	2b21      	cmp	r3, #33	@ 0x21
 80048d0:	d14c      	bne.n	800496c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d132      	bne.n	8004944 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048fe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e6      	bne.n	80048de <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	60bb      	str	r3, [r7, #8]
   return(result);
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004924:	633b      	str	r3, [r7, #48]	@ 0x30
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6979      	ldr	r1, [r7, #20]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	613b      	str	r3, [r7, #16]
   return(result);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e6      	bne.n	8004910 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004942:	e013      	b.n	800496c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004948:	781a      	ldrb	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800496c:	bf00      	nop
 800496e:	373c      	adds	r7, #60	@ 0x3c
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004978:	b480      	push	{r7}
 800497a:	b091      	sub	sp, #68	@ 0x44
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004986:	2b21      	cmp	r3, #33	@ 0x21
 8004988:	d151      	bne.n	8004a2e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d132      	bne.n	80049fc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	623b      	str	r3, [r7, #32]
   return(result);
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e6      	bne.n	8004996 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	69b9      	ldr	r1, [r7, #24]
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	617b      	str	r3, [r7, #20]
   return(result);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e6      	bne.n	80049c8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80049fa:	e018      	b.n	8004a2e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a10:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a16:	1c9a      	adds	r2, r3, #2
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8004a2e:	bf00      	nop
 8004a30:	3744      	adds	r7, #68	@ 0x44
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b091      	sub	sp, #68	@ 0x44
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a48:	2b21      	cmp	r3, #33	@ 0x21
 8004a4a:	d160      	bne.n	8004b0e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004a52:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004a54:	e057      	b.n	8004b06 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d133      	bne.n	8004aca <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3308      	adds	r3, #8
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	623b      	str	r3, [r7, #32]
   return(result);
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a82:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e5      	bne.n	8004a62 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab4:	61fb      	str	r3, [r7, #28]
 8004ab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	69b9      	ldr	r1, [r7, #24]
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e6      	bne.n	8004a96 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004ac8:	e021      	b.n	8004b0e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d013      	beq.n	8004b00 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004adc:	781a      	ldrb	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004b00:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004b02:	3b01      	subs	r3, #1
 8004b04:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004b06:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1a4      	bne.n	8004a56 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004b0c:	e7ff      	b.n	8004b0e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004b0e:	bf00      	nop
 8004b10:	3744      	adds	r7, #68	@ 0x44
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b091      	sub	sp, #68	@ 0x44
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b28:	2b21      	cmp	r3, #33	@ 0x21
 8004b2a:	d165      	bne.n	8004bf8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004b32:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004b34:	e05c      	b.n	8004bf0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d133      	bne.n	8004baa <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3308      	adds	r3, #8
 8004b48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3308      	adds	r3, #8
 8004b60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e5      	bne.n	8004b42 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6979      	ldr	r1, [r7, #20]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e6      	bne.n	8004b76 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004ba8:	e026      	b.n	8004bf8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d018      	beq.n	8004bea <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bcc:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd2:	1c9a      	adds	r2, r3, #2
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004bea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004bec:	3b01      	subs	r3, #1
 8004bee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004bf0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d19f      	bne.n	8004b36 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004bf6:	e7ff      	b.n	8004bf8 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004bf8:	bf00      	nop
 8004bfa:	3744      	adds	r7, #68	@ 0x44
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	61bb      	str	r3, [r7, #24]
 8004c2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6979      	ldr	r1, [r7, #20]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	613b      	str	r3, [r7, #16]
   return(result);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e6      	bne.n	8004c0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fe fddd 	bl	800380c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c52:	bf00      	nop
 8004c54:	3720      	adds	r7, #32
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b09c      	sub	sp, #112	@ 0x70
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004c6a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c74:	2b22      	cmp	r3, #34	@ 0x22
 8004c76:	f040 80be 	bne.w	8004df6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004c88:	b2d9      	uxtb	r1, r3
 8004c8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c94:	400a      	ands	r2, r1
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 80a1 	bne.w	8004e06 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ce2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ce4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ce8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004cf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e6      	bne.n	8004cc4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3308      	adds	r3, #8
 8004d14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004d16:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e5      	bne.n	8004cf6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a33      	ldr	r2, [pc, #204]	@ (8004e10 <UART_RxISR_8BIT+0x1b4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d01f      	beq.n	8004d88 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d018      	beq.n	8004d88 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	623b      	str	r3, [r7, #32]
   return(result);
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e6      	bne.n	8004d56 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d12e      	bne.n	8004dee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0310 	bic.w	r3, r3, #16
 8004daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	69b9      	ldr	r1, [r7, #24]
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e6      	bne.n	8004d96 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d103      	bne.n	8004dde <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2210      	movs	r2, #16
 8004ddc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004de4:	4619      	mov	r1, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fe fd2e 	bl	8003848 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004dec:	e00b      	b.n	8004e06 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fb fe9c 	bl	8000b2c <HAL_UART_RxCpltCallback>
}
 8004df4:	e007      	b.n	8004e06 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699a      	ldr	r2, [r3, #24]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0208 	orr.w	r2, r2, #8
 8004e04:	619a      	str	r2, [r3, #24]
}
 8004e06:	bf00      	nop
 8004e08:	3770      	adds	r7, #112	@ 0x70
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40008000 	.word	0x40008000

08004e14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b09c      	sub	sp, #112	@ 0x70
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004e22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e2c:	2b22      	cmp	r3, #34	@ 0x22
 8004e2e:	f040 80be 	bne.w	8004fae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e40:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004e46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e56:	1c9a      	adds	r2, r3, #2
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 80a1 	bne.w	8004fbe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e90:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e9c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ea0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e6      	bne.n	8004e7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ece:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ed4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e5      	bne.n	8004eae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a33      	ldr	r2, [pc, #204]	@ (8004fc8 <UART_RxISR_16BIT+0x1b4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d01f      	beq.n	8004f40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d018      	beq.n	8004f40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f2e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e6      	bne.n	8004f0e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d12e      	bne.n	8004fa6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f023 0310 	bic.w	r3, r3, #16
 8004f62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6979      	ldr	r1, [r7, #20]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e6      	bne.n	8004f4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d103      	bne.n	8004f96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2210      	movs	r2, #16
 8004f94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fe fc52 	bl	8003848 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fa4:	e00b      	b.n	8004fbe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fb fdc0 	bl	8000b2c <HAL_UART_RxCpltCallback>
}
 8004fac:	e007      	b.n	8004fbe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0208 	orr.w	r2, r2, #8
 8004fbc:	619a      	str	r2, [r3, #24]
}
 8004fbe:	bf00      	nop
 8004fc0:	3770      	adds	r7, #112	@ 0x70
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40008000 	.word	0x40008000

08004fcc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b0ac      	sub	sp, #176	@ 0xb0
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004fda:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005002:	2b22      	cmp	r3, #34	@ 0x22
 8005004:	f040 8182 	bne.w	800530c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800500e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005012:	e125      	b.n	8005260 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800501e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005022:	b2d9      	uxtb	r1, r3
 8005024:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005028:	b2da      	uxtb	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502e:	400a      	ands	r2, r1
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800505a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	2b00      	cmp	r3, #0
 8005064:	d053      	beq.n	800510e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d011      	beq.n	8005096 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00b      	beq.n	8005096 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2201      	movs	r2, #1
 8005084:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508c:	f043 0201 	orr.w	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d011      	beq.n	80050c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80050a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2202      	movs	r2, #2
 80050b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050bc:	f043 0204 	orr.w	r2, r3, #4
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d011      	beq.n	80050f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80050d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2204      	movs	r2, #4
 80050e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ec:	f043 0202 	orr.w	r2, r3, #2
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d006      	beq.n	800510e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7fe fb97 	bl	8003834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 80a2 	bne.w	8005260 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800512a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800512c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800513e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005140:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005144:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800514c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e4      	bne.n	800511c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3308      	adds	r3, #8
 8005158:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005162:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800517a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800517c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005180:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005188:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e1      	bne.n	8005152 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a5f      	ldr	r2, [pc, #380]	@ (8005324 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d021      	beq.n	80051f0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01a      	beq.n	80051f0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80051c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80051dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80051de:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80051e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80051ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e4      	bne.n	80051ba <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d130      	bne.n	800525a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800520c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520e:	f023 0310 	bic.w	r3, r3, #16
 8005212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005220:	643b      	str	r3, [r7, #64]	@ 0x40
 8005222:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005226:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800522e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e4      	bne.n	80051fe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b10      	cmp	r3, #16
 8005240:	d103      	bne.n	800524a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2210      	movs	r2, #16
 8005248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fe faf8 	bl	8003848 <HAL_UARTEx_RxEventCallback>
 8005258:	e002      	b.n	8005260 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fb fc66 	bl	8000b2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005260:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005264:	2b00      	cmp	r3, #0
 8005266:	d006      	beq.n	8005276 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	f47f aecf 	bne.w	8005014 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800527c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005280:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005284:	2b00      	cmp	r3, #0
 8005286:	d049      	beq.n	800531c <UART_RxISR_8BIT_FIFOEN+0x350>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800528e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005292:	429a      	cmp	r2, r3
 8005294:	d242      	bcs.n	800531c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3308      	adds	r3, #8
 80052b6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80052ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e3      	bne.n	8005296 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a15      	ldr	r2, [pc, #84]	@ (8005328 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80052d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f043 0320 	orr.w	r3, r3, #32
 80052e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6979      	ldr	r1, [r7, #20]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	613b      	str	r3, [r7, #16]
   return(result);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e4      	bne.n	80052d4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800530a:	e007      	b.n	800531c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0208 	orr.w	r2, r2, #8
 800531a:	619a      	str	r2, [r3, #24]
}
 800531c:	bf00      	nop
 800531e:	37b0      	adds	r7, #176	@ 0xb0
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40008000 	.word	0x40008000
 8005328:	08004c5d 	.word	0x08004c5d

0800532c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b0ae      	sub	sp, #184	@ 0xb8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800533a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005362:	2b22      	cmp	r3, #34	@ 0x22
 8005364:	f040 8186 	bne.w	8005674 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800536e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005372:	e129      	b.n	80055c8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005382:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005386:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800538a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800538e:	4013      	ands	r3, r2
 8005390:	b29a      	uxth	r2, r3
 8005392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005396:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539c:	1c9a      	adds	r2, r3, #2
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80053be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d053      	beq.n	8005472 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d011      	beq.n	80053fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80053d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2201      	movs	r2, #1
 80053e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f0:	f043 0201 	orr.w	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d011      	beq.n	800542a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2202      	movs	r2, #2
 8005418:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005420:	f043 0204 	orr.w	r2, r3, #4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800542a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d011      	beq.n	800545a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2204      	movs	r2, #4
 8005448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005450:	f043 0202 	orr.w	r2, r3, #2
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005460:	2b00      	cmp	r3, #0
 8005462:	d006      	beq.n	8005472 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fe f9e5 	bl	8003834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 80a4 	bne.w	80055c8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800548e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005494:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80054aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80054b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e2      	bne.n	8005480 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3308      	adds	r3, #8
 80054c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80054ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054d0:	f023 0301 	bic.w	r3, r3, #1
 80054d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3308      	adds	r3, #8
 80054de:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80054e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e1      	bne.n	80054ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a5f      	ldr	r2, [pc, #380]	@ (800568c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d021      	beq.n	8005558 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01a      	beq.n	8005558 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005532:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005544:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005546:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800554a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e4      	bne.n	8005522 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800555c:	2b01      	cmp	r3, #1
 800555e:	d130      	bne.n	80055c2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005576:	f023 0310 	bic.w	r3, r3, #16
 800557a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005588:	647b      	str	r3, [r7, #68]	@ 0x44
 800558a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800558e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e4      	bne.n	8005566 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d103      	bne.n	80055b2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2210      	movs	r2, #16
 80055b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80055b8:	4619      	mov	r1, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fe f944 	bl	8003848 <HAL_UARTEx_RxEventCallback>
 80055c0:	e002      	b.n	80055c8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fb fab2 	bl	8000b2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80055c8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d006      	beq.n	80055de <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80055d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f47f aecb 	bne.w	8005374 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80055e4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80055e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d049      	beq.n	8005684 <UART_RxISR_16BIT_FIFOEN+0x358>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80055f6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d242      	bcs.n	8005684 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3308      	adds	r3, #8
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	623b      	str	r3, [r7, #32]
   return(result);
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3308      	adds	r3, #8
 800561e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005622:	633a      	str	r2, [r7, #48]	@ 0x30
 8005624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e3      	bne.n	80055fe <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a15      	ldr	r2, [pc, #84]	@ (8005690 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800563a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	60fb      	str	r3, [r7, #12]
   return(result);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f043 0320 	orr.w	r3, r3, #32
 8005650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	69b9      	ldr	r1, [r7, #24]
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	617b      	str	r3, [r7, #20]
   return(result);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e4      	bne.n	800563c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005672:	e007      	b.n	8005684 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	619a      	str	r2, [r3, #24]
}
 8005684:	bf00      	nop
 8005686:	37b8      	adds	r7, #184	@ 0xb8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40008000 	.word	0x40008000
 8005690:	08004e15 	.word	0x08004e15

08005694 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e027      	b.n	8005736 <HAL_UARTEx_DisableFifoMode+0x66>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2224      	movs	r2, #36	@ 0x24
 80056f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005714:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005756:	2302      	movs	r3, #2
 8005758:	e02d      	b.n	80057b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2224      	movs	r2, #36	@ 0x24
 8005766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f850 	bl	800583c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e02d      	b.n	8005832 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2224      	movs	r2, #36	@ 0x24
 80057e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0201 	bic.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f812 	bl	800583c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005848:	2b00      	cmp	r3, #0
 800584a:	d108      	bne.n	800585e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800585c:	e031      	b.n	80058c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800585e:	2308      	movs	r3, #8
 8005860:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005862:	2308      	movs	r3, #8
 8005864:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	0e5b      	lsrs	r3, r3, #25
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	0f5b      	lsrs	r3, r3, #29
 800587e:	b2db      	uxtb	r3, r3
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005886:	7bbb      	ldrb	r3, [r7, #14]
 8005888:	7b3a      	ldrb	r2, [r7, #12]
 800588a:	4911      	ldr	r1, [pc, #68]	@ (80058d0 <UARTEx_SetNbDataToProcess+0x94>)
 800588c:	5c8a      	ldrb	r2, [r1, r2]
 800588e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005892:	7b3a      	ldrb	r2, [r7, #12]
 8005894:	490f      	ldr	r1, [pc, #60]	@ (80058d4 <UARTEx_SetNbDataToProcess+0x98>)
 8005896:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005898:	fb93 f3f2 	sdiv	r3, r3, r2
 800589c:	b29a      	uxth	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	7b7a      	ldrb	r2, [r7, #13]
 80058a8:	4909      	ldr	r1, [pc, #36]	@ (80058d0 <UARTEx_SetNbDataToProcess+0x94>)
 80058aa:	5c8a      	ldrb	r2, [r1, r2]
 80058ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058b0:	7b7a      	ldrb	r2, [r7, #13]
 80058b2:	4908      	ldr	r1, [pc, #32]	@ (80058d4 <UARTEx_SetNbDataToProcess+0x98>)
 80058b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	0800636c 	.word	0x0800636c
 80058d4:	08006374 	.word	0x08006374

080058d8 <siprintf>:
 80058d8:	b40e      	push	{r1, r2, r3}
 80058da:	b500      	push	{lr}
 80058dc:	b09c      	sub	sp, #112	@ 0x70
 80058de:	ab1d      	add	r3, sp, #116	@ 0x74
 80058e0:	9002      	str	r0, [sp, #8]
 80058e2:	9006      	str	r0, [sp, #24]
 80058e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80058e8:	4809      	ldr	r0, [pc, #36]	@ (8005910 <siprintf+0x38>)
 80058ea:	9107      	str	r1, [sp, #28]
 80058ec:	9104      	str	r1, [sp, #16]
 80058ee:	4909      	ldr	r1, [pc, #36]	@ (8005914 <siprintf+0x3c>)
 80058f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058f4:	9105      	str	r1, [sp, #20]
 80058f6:	6800      	ldr	r0, [r0, #0]
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	a902      	add	r1, sp, #8
 80058fc:	f000 f994 	bl	8005c28 <_svfiprintf_r>
 8005900:	9b02      	ldr	r3, [sp, #8]
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	b01c      	add	sp, #112	@ 0x70
 8005908:	f85d eb04 	ldr.w	lr, [sp], #4
 800590c:	b003      	add	sp, #12
 800590e:	4770      	bx	lr
 8005910:	20000014 	.word	0x20000014
 8005914:	ffff0208 	.word	0xffff0208

08005918 <memset>:
 8005918:	4402      	add	r2, r0
 800591a:	4603      	mov	r3, r0
 800591c:	4293      	cmp	r3, r2
 800591e:	d100      	bne.n	8005922 <memset+0xa>
 8005920:	4770      	bx	lr
 8005922:	f803 1b01 	strb.w	r1, [r3], #1
 8005926:	e7f9      	b.n	800591c <memset+0x4>

08005928 <__errno>:
 8005928:	4b01      	ldr	r3, [pc, #4]	@ (8005930 <__errno+0x8>)
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	20000014 	.word	0x20000014

08005934 <__libc_init_array>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	4d0d      	ldr	r5, [pc, #52]	@ (800596c <__libc_init_array+0x38>)
 8005938:	4c0d      	ldr	r4, [pc, #52]	@ (8005970 <__libc_init_array+0x3c>)
 800593a:	1b64      	subs	r4, r4, r5
 800593c:	10a4      	asrs	r4, r4, #2
 800593e:	2600      	movs	r6, #0
 8005940:	42a6      	cmp	r6, r4
 8005942:	d109      	bne.n	8005958 <__libc_init_array+0x24>
 8005944:	4d0b      	ldr	r5, [pc, #44]	@ (8005974 <__libc_init_array+0x40>)
 8005946:	4c0c      	ldr	r4, [pc, #48]	@ (8005978 <__libc_init_array+0x44>)
 8005948:	f000 fc66 	bl	8006218 <_init>
 800594c:	1b64      	subs	r4, r4, r5
 800594e:	10a4      	asrs	r4, r4, #2
 8005950:	2600      	movs	r6, #0
 8005952:	42a6      	cmp	r6, r4
 8005954:	d105      	bne.n	8005962 <__libc_init_array+0x2e>
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	f855 3b04 	ldr.w	r3, [r5], #4
 800595c:	4798      	blx	r3
 800595e:	3601      	adds	r6, #1
 8005960:	e7ee      	b.n	8005940 <__libc_init_array+0xc>
 8005962:	f855 3b04 	ldr.w	r3, [r5], #4
 8005966:	4798      	blx	r3
 8005968:	3601      	adds	r6, #1
 800596a:	e7f2      	b.n	8005952 <__libc_init_array+0x1e>
 800596c:	080063b8 	.word	0x080063b8
 8005970:	080063b8 	.word	0x080063b8
 8005974:	080063b8 	.word	0x080063b8
 8005978:	080063bc 	.word	0x080063bc

0800597c <__retarget_lock_acquire_recursive>:
 800597c:	4770      	bx	lr

0800597e <__retarget_lock_release_recursive>:
 800597e:	4770      	bx	lr

08005980 <_free_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4605      	mov	r5, r0
 8005984:	2900      	cmp	r1, #0
 8005986:	d041      	beq.n	8005a0c <_free_r+0x8c>
 8005988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800598c:	1f0c      	subs	r4, r1, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	bfb8      	it	lt
 8005992:	18e4      	addlt	r4, r4, r3
 8005994:	f000 f8e0 	bl	8005b58 <__malloc_lock>
 8005998:	4a1d      	ldr	r2, [pc, #116]	@ (8005a10 <_free_r+0x90>)
 800599a:	6813      	ldr	r3, [r2, #0]
 800599c:	b933      	cbnz	r3, 80059ac <_free_r+0x2c>
 800599e:	6063      	str	r3, [r4, #4]
 80059a0:	6014      	str	r4, [r2, #0]
 80059a2:	4628      	mov	r0, r5
 80059a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059a8:	f000 b8dc 	b.w	8005b64 <__malloc_unlock>
 80059ac:	42a3      	cmp	r3, r4
 80059ae:	d908      	bls.n	80059c2 <_free_r+0x42>
 80059b0:	6820      	ldr	r0, [r4, #0]
 80059b2:	1821      	adds	r1, r4, r0
 80059b4:	428b      	cmp	r3, r1
 80059b6:	bf01      	itttt	eq
 80059b8:	6819      	ldreq	r1, [r3, #0]
 80059ba:	685b      	ldreq	r3, [r3, #4]
 80059bc:	1809      	addeq	r1, r1, r0
 80059be:	6021      	streq	r1, [r4, #0]
 80059c0:	e7ed      	b.n	800599e <_free_r+0x1e>
 80059c2:	461a      	mov	r2, r3
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	b10b      	cbz	r3, 80059cc <_free_r+0x4c>
 80059c8:	42a3      	cmp	r3, r4
 80059ca:	d9fa      	bls.n	80059c2 <_free_r+0x42>
 80059cc:	6811      	ldr	r1, [r2, #0]
 80059ce:	1850      	adds	r0, r2, r1
 80059d0:	42a0      	cmp	r0, r4
 80059d2:	d10b      	bne.n	80059ec <_free_r+0x6c>
 80059d4:	6820      	ldr	r0, [r4, #0]
 80059d6:	4401      	add	r1, r0
 80059d8:	1850      	adds	r0, r2, r1
 80059da:	4283      	cmp	r3, r0
 80059dc:	6011      	str	r1, [r2, #0]
 80059de:	d1e0      	bne.n	80059a2 <_free_r+0x22>
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	6053      	str	r3, [r2, #4]
 80059e6:	4408      	add	r0, r1
 80059e8:	6010      	str	r0, [r2, #0]
 80059ea:	e7da      	b.n	80059a2 <_free_r+0x22>
 80059ec:	d902      	bls.n	80059f4 <_free_r+0x74>
 80059ee:	230c      	movs	r3, #12
 80059f0:	602b      	str	r3, [r5, #0]
 80059f2:	e7d6      	b.n	80059a2 <_free_r+0x22>
 80059f4:	6820      	ldr	r0, [r4, #0]
 80059f6:	1821      	adds	r1, r4, r0
 80059f8:	428b      	cmp	r3, r1
 80059fa:	bf04      	itt	eq
 80059fc:	6819      	ldreq	r1, [r3, #0]
 80059fe:	685b      	ldreq	r3, [r3, #4]
 8005a00:	6063      	str	r3, [r4, #4]
 8005a02:	bf04      	itt	eq
 8005a04:	1809      	addeq	r1, r1, r0
 8005a06:	6021      	streq	r1, [r4, #0]
 8005a08:	6054      	str	r4, [r2, #4]
 8005a0a:	e7ca      	b.n	80059a2 <_free_r+0x22>
 8005a0c:	bd38      	pop	{r3, r4, r5, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000368 	.word	0x20000368

08005a14 <sbrk_aligned>:
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	4e0f      	ldr	r6, [pc, #60]	@ (8005a54 <sbrk_aligned+0x40>)
 8005a18:	460c      	mov	r4, r1
 8005a1a:	6831      	ldr	r1, [r6, #0]
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	b911      	cbnz	r1, 8005a26 <sbrk_aligned+0x12>
 8005a20:	f000 fba6 	bl	8006170 <_sbrk_r>
 8005a24:	6030      	str	r0, [r6, #0]
 8005a26:	4621      	mov	r1, r4
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f000 fba1 	bl	8006170 <_sbrk_r>
 8005a2e:	1c43      	adds	r3, r0, #1
 8005a30:	d103      	bne.n	8005a3a <sbrk_aligned+0x26>
 8005a32:	f04f 34ff 	mov.w	r4, #4294967295
 8005a36:	4620      	mov	r0, r4
 8005a38:	bd70      	pop	{r4, r5, r6, pc}
 8005a3a:	1cc4      	adds	r4, r0, #3
 8005a3c:	f024 0403 	bic.w	r4, r4, #3
 8005a40:	42a0      	cmp	r0, r4
 8005a42:	d0f8      	beq.n	8005a36 <sbrk_aligned+0x22>
 8005a44:	1a21      	subs	r1, r4, r0
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 fb92 	bl	8006170 <_sbrk_r>
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d1f2      	bne.n	8005a36 <sbrk_aligned+0x22>
 8005a50:	e7ef      	b.n	8005a32 <sbrk_aligned+0x1e>
 8005a52:	bf00      	nop
 8005a54:	20000364 	.word	0x20000364

08005a58 <_malloc_r>:
 8005a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a5c:	1ccd      	adds	r5, r1, #3
 8005a5e:	f025 0503 	bic.w	r5, r5, #3
 8005a62:	3508      	adds	r5, #8
 8005a64:	2d0c      	cmp	r5, #12
 8005a66:	bf38      	it	cc
 8005a68:	250c      	movcc	r5, #12
 8005a6a:	2d00      	cmp	r5, #0
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	db01      	blt.n	8005a74 <_malloc_r+0x1c>
 8005a70:	42a9      	cmp	r1, r5
 8005a72:	d904      	bls.n	8005a7e <_malloc_r+0x26>
 8005a74:	230c      	movs	r3, #12
 8005a76:	6033      	str	r3, [r6, #0]
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b54 <_malloc_r+0xfc>
 8005a82:	f000 f869 	bl	8005b58 <__malloc_lock>
 8005a86:	f8d8 3000 	ldr.w	r3, [r8]
 8005a8a:	461c      	mov	r4, r3
 8005a8c:	bb44      	cbnz	r4, 8005ae0 <_malloc_r+0x88>
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4630      	mov	r0, r6
 8005a92:	f7ff ffbf 	bl	8005a14 <sbrk_aligned>
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	4604      	mov	r4, r0
 8005a9a:	d158      	bne.n	8005b4e <_malloc_r+0xf6>
 8005a9c:	f8d8 4000 	ldr.w	r4, [r8]
 8005aa0:	4627      	mov	r7, r4
 8005aa2:	2f00      	cmp	r7, #0
 8005aa4:	d143      	bne.n	8005b2e <_malloc_r+0xd6>
 8005aa6:	2c00      	cmp	r4, #0
 8005aa8:	d04b      	beq.n	8005b42 <_malloc_r+0xea>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	4639      	mov	r1, r7
 8005aae:	4630      	mov	r0, r6
 8005ab0:	eb04 0903 	add.w	r9, r4, r3
 8005ab4:	f000 fb5c 	bl	8006170 <_sbrk_r>
 8005ab8:	4581      	cmp	r9, r0
 8005aba:	d142      	bne.n	8005b42 <_malloc_r+0xea>
 8005abc:	6821      	ldr	r1, [r4, #0]
 8005abe:	1a6d      	subs	r5, r5, r1
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f7ff ffa6 	bl	8005a14 <sbrk_aligned>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d03a      	beq.n	8005b42 <_malloc_r+0xea>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	442b      	add	r3, r5
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	bb62      	cbnz	r2, 8005b34 <_malloc_r+0xdc>
 8005ada:	f8c8 7000 	str.w	r7, [r8]
 8005ade:	e00f      	b.n	8005b00 <_malloc_r+0xa8>
 8005ae0:	6822      	ldr	r2, [r4, #0]
 8005ae2:	1b52      	subs	r2, r2, r5
 8005ae4:	d420      	bmi.n	8005b28 <_malloc_r+0xd0>
 8005ae6:	2a0b      	cmp	r2, #11
 8005ae8:	d917      	bls.n	8005b1a <_malloc_r+0xc2>
 8005aea:	1961      	adds	r1, r4, r5
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	6025      	str	r5, [r4, #0]
 8005af0:	bf18      	it	ne
 8005af2:	6059      	strne	r1, [r3, #4]
 8005af4:	6863      	ldr	r3, [r4, #4]
 8005af6:	bf08      	it	eq
 8005af8:	f8c8 1000 	streq.w	r1, [r8]
 8005afc:	5162      	str	r2, [r4, r5]
 8005afe:	604b      	str	r3, [r1, #4]
 8005b00:	4630      	mov	r0, r6
 8005b02:	f000 f82f 	bl	8005b64 <__malloc_unlock>
 8005b06:	f104 000b 	add.w	r0, r4, #11
 8005b0a:	1d23      	adds	r3, r4, #4
 8005b0c:	f020 0007 	bic.w	r0, r0, #7
 8005b10:	1ac2      	subs	r2, r0, r3
 8005b12:	bf1c      	itt	ne
 8005b14:	1a1b      	subne	r3, r3, r0
 8005b16:	50a3      	strne	r3, [r4, r2]
 8005b18:	e7af      	b.n	8005a7a <_malloc_r+0x22>
 8005b1a:	6862      	ldr	r2, [r4, #4]
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	bf0c      	ite	eq
 8005b20:	f8c8 2000 	streq.w	r2, [r8]
 8005b24:	605a      	strne	r2, [r3, #4]
 8005b26:	e7eb      	b.n	8005b00 <_malloc_r+0xa8>
 8005b28:	4623      	mov	r3, r4
 8005b2a:	6864      	ldr	r4, [r4, #4]
 8005b2c:	e7ae      	b.n	8005a8c <_malloc_r+0x34>
 8005b2e:	463c      	mov	r4, r7
 8005b30:	687f      	ldr	r7, [r7, #4]
 8005b32:	e7b6      	b.n	8005aa2 <_malloc_r+0x4a>
 8005b34:	461a      	mov	r2, r3
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	d1fb      	bne.n	8005b34 <_malloc_r+0xdc>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6053      	str	r3, [r2, #4]
 8005b40:	e7de      	b.n	8005b00 <_malloc_r+0xa8>
 8005b42:	230c      	movs	r3, #12
 8005b44:	6033      	str	r3, [r6, #0]
 8005b46:	4630      	mov	r0, r6
 8005b48:	f000 f80c 	bl	8005b64 <__malloc_unlock>
 8005b4c:	e794      	b.n	8005a78 <_malloc_r+0x20>
 8005b4e:	6005      	str	r5, [r0, #0]
 8005b50:	e7d6      	b.n	8005b00 <_malloc_r+0xa8>
 8005b52:	bf00      	nop
 8005b54:	20000368 	.word	0x20000368

08005b58 <__malloc_lock>:
 8005b58:	4801      	ldr	r0, [pc, #4]	@ (8005b60 <__malloc_lock+0x8>)
 8005b5a:	f7ff bf0f 	b.w	800597c <__retarget_lock_acquire_recursive>
 8005b5e:	bf00      	nop
 8005b60:	20000360 	.word	0x20000360

08005b64 <__malloc_unlock>:
 8005b64:	4801      	ldr	r0, [pc, #4]	@ (8005b6c <__malloc_unlock+0x8>)
 8005b66:	f7ff bf0a 	b.w	800597e <__retarget_lock_release_recursive>
 8005b6a:	bf00      	nop
 8005b6c:	20000360 	.word	0x20000360

08005b70 <__ssputs_r>:
 8005b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	688e      	ldr	r6, [r1, #8]
 8005b76:	461f      	mov	r7, r3
 8005b78:	42be      	cmp	r6, r7
 8005b7a:	680b      	ldr	r3, [r1, #0]
 8005b7c:	4682      	mov	sl, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	4690      	mov	r8, r2
 8005b82:	d82d      	bhi.n	8005be0 <__ssputs_r+0x70>
 8005b84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b8c:	d026      	beq.n	8005bdc <__ssputs_r+0x6c>
 8005b8e:	6965      	ldr	r5, [r4, #20]
 8005b90:	6909      	ldr	r1, [r1, #16]
 8005b92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b96:	eba3 0901 	sub.w	r9, r3, r1
 8005b9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b9e:	1c7b      	adds	r3, r7, #1
 8005ba0:	444b      	add	r3, r9
 8005ba2:	106d      	asrs	r5, r5, #1
 8005ba4:	429d      	cmp	r5, r3
 8005ba6:	bf38      	it	cc
 8005ba8:	461d      	movcc	r5, r3
 8005baa:	0553      	lsls	r3, r2, #21
 8005bac:	d527      	bpl.n	8005bfe <__ssputs_r+0x8e>
 8005bae:	4629      	mov	r1, r5
 8005bb0:	f7ff ff52 	bl	8005a58 <_malloc_r>
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	b360      	cbz	r0, 8005c12 <__ssputs_r+0xa2>
 8005bb8:	6921      	ldr	r1, [r4, #16]
 8005bba:	464a      	mov	r2, r9
 8005bbc:	f000 fae8 	bl	8006190 <memcpy>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bca:	81a3      	strh	r3, [r4, #12]
 8005bcc:	6126      	str	r6, [r4, #16]
 8005bce:	6165      	str	r5, [r4, #20]
 8005bd0:	444e      	add	r6, r9
 8005bd2:	eba5 0509 	sub.w	r5, r5, r9
 8005bd6:	6026      	str	r6, [r4, #0]
 8005bd8:	60a5      	str	r5, [r4, #8]
 8005bda:	463e      	mov	r6, r7
 8005bdc:	42be      	cmp	r6, r7
 8005bde:	d900      	bls.n	8005be2 <__ssputs_r+0x72>
 8005be0:	463e      	mov	r6, r7
 8005be2:	6820      	ldr	r0, [r4, #0]
 8005be4:	4632      	mov	r2, r6
 8005be6:	4641      	mov	r1, r8
 8005be8:	f000 faa8 	bl	800613c <memmove>
 8005bec:	68a3      	ldr	r3, [r4, #8]
 8005bee:	1b9b      	subs	r3, r3, r6
 8005bf0:	60a3      	str	r3, [r4, #8]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	4433      	add	r3, r6
 8005bf6:	6023      	str	r3, [r4, #0]
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfe:	462a      	mov	r2, r5
 8005c00:	f000 fad4 	bl	80061ac <_realloc_r>
 8005c04:	4606      	mov	r6, r0
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d1e0      	bne.n	8005bcc <__ssputs_r+0x5c>
 8005c0a:	6921      	ldr	r1, [r4, #16]
 8005c0c:	4650      	mov	r0, sl
 8005c0e:	f7ff feb7 	bl	8005980 <_free_r>
 8005c12:	230c      	movs	r3, #12
 8005c14:	f8ca 3000 	str.w	r3, [sl]
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	e7e9      	b.n	8005bfa <__ssputs_r+0x8a>
	...

08005c28 <_svfiprintf_r>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	4698      	mov	r8, r3
 8005c2e:	898b      	ldrh	r3, [r1, #12]
 8005c30:	061b      	lsls	r3, r3, #24
 8005c32:	b09d      	sub	sp, #116	@ 0x74
 8005c34:	4607      	mov	r7, r0
 8005c36:	460d      	mov	r5, r1
 8005c38:	4614      	mov	r4, r2
 8005c3a:	d510      	bpl.n	8005c5e <_svfiprintf_r+0x36>
 8005c3c:	690b      	ldr	r3, [r1, #16]
 8005c3e:	b973      	cbnz	r3, 8005c5e <_svfiprintf_r+0x36>
 8005c40:	2140      	movs	r1, #64	@ 0x40
 8005c42:	f7ff ff09 	bl	8005a58 <_malloc_r>
 8005c46:	6028      	str	r0, [r5, #0]
 8005c48:	6128      	str	r0, [r5, #16]
 8005c4a:	b930      	cbnz	r0, 8005c5a <_svfiprintf_r+0x32>
 8005c4c:	230c      	movs	r3, #12
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295
 8005c54:	b01d      	add	sp, #116	@ 0x74
 8005c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5a:	2340      	movs	r3, #64	@ 0x40
 8005c5c:	616b      	str	r3, [r5, #20]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c62:	2320      	movs	r3, #32
 8005c64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c6c:	2330      	movs	r3, #48	@ 0x30
 8005c6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e0c <_svfiprintf_r+0x1e4>
 8005c72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c76:	f04f 0901 	mov.w	r9, #1
 8005c7a:	4623      	mov	r3, r4
 8005c7c:	469a      	mov	sl, r3
 8005c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c82:	b10a      	cbz	r2, 8005c88 <_svfiprintf_r+0x60>
 8005c84:	2a25      	cmp	r2, #37	@ 0x25
 8005c86:	d1f9      	bne.n	8005c7c <_svfiprintf_r+0x54>
 8005c88:	ebba 0b04 	subs.w	fp, sl, r4
 8005c8c:	d00b      	beq.n	8005ca6 <_svfiprintf_r+0x7e>
 8005c8e:	465b      	mov	r3, fp
 8005c90:	4622      	mov	r2, r4
 8005c92:	4629      	mov	r1, r5
 8005c94:	4638      	mov	r0, r7
 8005c96:	f7ff ff6b 	bl	8005b70 <__ssputs_r>
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	f000 80a7 	beq.w	8005dee <_svfiprintf_r+0x1c6>
 8005ca0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ca2:	445a      	add	r2, fp
 8005ca4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 809f 	beq.w	8005dee <_svfiprintf_r+0x1c6>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cba:	f10a 0a01 	add.w	sl, sl, #1
 8005cbe:	9304      	str	r3, [sp, #16]
 8005cc0:	9307      	str	r3, [sp, #28]
 8005cc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cc8:	4654      	mov	r4, sl
 8005cca:	2205      	movs	r2, #5
 8005ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd0:	484e      	ldr	r0, [pc, #312]	@ (8005e0c <_svfiprintf_r+0x1e4>)
 8005cd2:	f7fa faad 	bl	8000230 <memchr>
 8005cd6:	9a04      	ldr	r2, [sp, #16]
 8005cd8:	b9d8      	cbnz	r0, 8005d12 <_svfiprintf_r+0xea>
 8005cda:	06d0      	lsls	r0, r2, #27
 8005cdc:	bf44      	itt	mi
 8005cde:	2320      	movmi	r3, #32
 8005ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ce4:	0711      	lsls	r1, r2, #28
 8005ce6:	bf44      	itt	mi
 8005ce8:	232b      	movmi	r3, #43	@ 0x2b
 8005cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cee:	f89a 3000 	ldrb.w	r3, [sl]
 8005cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cf4:	d015      	beq.n	8005d22 <_svfiprintf_r+0xfa>
 8005cf6:	9a07      	ldr	r2, [sp, #28]
 8005cf8:	4654      	mov	r4, sl
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	f04f 0c0a 	mov.w	ip, #10
 8005d00:	4621      	mov	r1, r4
 8005d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d06:	3b30      	subs	r3, #48	@ 0x30
 8005d08:	2b09      	cmp	r3, #9
 8005d0a:	d94b      	bls.n	8005da4 <_svfiprintf_r+0x17c>
 8005d0c:	b1b0      	cbz	r0, 8005d3c <_svfiprintf_r+0x114>
 8005d0e:	9207      	str	r2, [sp, #28]
 8005d10:	e014      	b.n	8005d3c <_svfiprintf_r+0x114>
 8005d12:	eba0 0308 	sub.w	r3, r0, r8
 8005d16:	fa09 f303 	lsl.w	r3, r9, r3
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	9304      	str	r3, [sp, #16]
 8005d1e:	46a2      	mov	sl, r4
 8005d20:	e7d2      	b.n	8005cc8 <_svfiprintf_r+0xa0>
 8005d22:	9b03      	ldr	r3, [sp, #12]
 8005d24:	1d19      	adds	r1, r3, #4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	9103      	str	r1, [sp, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bfbb      	ittet	lt
 8005d2e:	425b      	neglt	r3, r3
 8005d30:	f042 0202 	orrlt.w	r2, r2, #2
 8005d34:	9307      	strge	r3, [sp, #28]
 8005d36:	9307      	strlt	r3, [sp, #28]
 8005d38:	bfb8      	it	lt
 8005d3a:	9204      	strlt	r2, [sp, #16]
 8005d3c:	7823      	ldrb	r3, [r4, #0]
 8005d3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d40:	d10a      	bne.n	8005d58 <_svfiprintf_r+0x130>
 8005d42:	7863      	ldrb	r3, [r4, #1]
 8005d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d46:	d132      	bne.n	8005dae <_svfiprintf_r+0x186>
 8005d48:	9b03      	ldr	r3, [sp, #12]
 8005d4a:	1d1a      	adds	r2, r3, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	9203      	str	r2, [sp, #12]
 8005d50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d54:	3402      	adds	r4, #2
 8005d56:	9305      	str	r3, [sp, #20]
 8005d58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e1c <_svfiprintf_r+0x1f4>
 8005d5c:	7821      	ldrb	r1, [r4, #0]
 8005d5e:	2203      	movs	r2, #3
 8005d60:	4650      	mov	r0, sl
 8005d62:	f7fa fa65 	bl	8000230 <memchr>
 8005d66:	b138      	cbz	r0, 8005d78 <_svfiprintf_r+0x150>
 8005d68:	9b04      	ldr	r3, [sp, #16]
 8005d6a:	eba0 000a 	sub.w	r0, r0, sl
 8005d6e:	2240      	movs	r2, #64	@ 0x40
 8005d70:	4082      	lsls	r2, r0
 8005d72:	4313      	orrs	r3, r2
 8005d74:	3401      	adds	r4, #1
 8005d76:	9304      	str	r3, [sp, #16]
 8005d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d7c:	4824      	ldr	r0, [pc, #144]	@ (8005e10 <_svfiprintf_r+0x1e8>)
 8005d7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d82:	2206      	movs	r2, #6
 8005d84:	f7fa fa54 	bl	8000230 <memchr>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d036      	beq.n	8005dfa <_svfiprintf_r+0x1d2>
 8005d8c:	4b21      	ldr	r3, [pc, #132]	@ (8005e14 <_svfiprintf_r+0x1ec>)
 8005d8e:	bb1b      	cbnz	r3, 8005dd8 <_svfiprintf_r+0x1b0>
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	3307      	adds	r3, #7
 8005d94:	f023 0307 	bic.w	r3, r3, #7
 8005d98:	3308      	adds	r3, #8
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d9e:	4433      	add	r3, r6
 8005da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005da2:	e76a      	b.n	8005c7a <_svfiprintf_r+0x52>
 8005da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005da8:	460c      	mov	r4, r1
 8005daa:	2001      	movs	r0, #1
 8005dac:	e7a8      	b.n	8005d00 <_svfiprintf_r+0xd8>
 8005dae:	2300      	movs	r3, #0
 8005db0:	3401      	adds	r4, #1
 8005db2:	9305      	str	r3, [sp, #20]
 8005db4:	4619      	mov	r1, r3
 8005db6:	f04f 0c0a 	mov.w	ip, #10
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dc0:	3a30      	subs	r2, #48	@ 0x30
 8005dc2:	2a09      	cmp	r2, #9
 8005dc4:	d903      	bls.n	8005dce <_svfiprintf_r+0x1a6>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0c6      	beq.n	8005d58 <_svfiprintf_r+0x130>
 8005dca:	9105      	str	r1, [sp, #20]
 8005dcc:	e7c4      	b.n	8005d58 <_svfiprintf_r+0x130>
 8005dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e7f0      	b.n	8005dba <_svfiprintf_r+0x192>
 8005dd8:	ab03      	add	r3, sp, #12
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	462a      	mov	r2, r5
 8005dde:	4b0e      	ldr	r3, [pc, #56]	@ (8005e18 <_svfiprintf_r+0x1f0>)
 8005de0:	a904      	add	r1, sp, #16
 8005de2:	4638      	mov	r0, r7
 8005de4:	f3af 8000 	nop.w
 8005de8:	1c42      	adds	r2, r0, #1
 8005dea:	4606      	mov	r6, r0
 8005dec:	d1d6      	bne.n	8005d9c <_svfiprintf_r+0x174>
 8005dee:	89ab      	ldrh	r3, [r5, #12]
 8005df0:	065b      	lsls	r3, r3, #25
 8005df2:	f53f af2d 	bmi.w	8005c50 <_svfiprintf_r+0x28>
 8005df6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005df8:	e72c      	b.n	8005c54 <_svfiprintf_r+0x2c>
 8005dfa:	ab03      	add	r3, sp, #12
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	462a      	mov	r2, r5
 8005e00:	4b05      	ldr	r3, [pc, #20]	@ (8005e18 <_svfiprintf_r+0x1f0>)
 8005e02:	a904      	add	r1, sp, #16
 8005e04:	4638      	mov	r0, r7
 8005e06:	f000 f879 	bl	8005efc <_printf_i>
 8005e0a:	e7ed      	b.n	8005de8 <_svfiprintf_r+0x1c0>
 8005e0c:	0800637c 	.word	0x0800637c
 8005e10:	08006386 	.word	0x08006386
 8005e14:	00000000 	.word	0x00000000
 8005e18:	08005b71 	.word	0x08005b71
 8005e1c:	08006382 	.word	0x08006382

08005e20 <_printf_common>:
 8005e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	4616      	mov	r6, r2
 8005e26:	4698      	mov	r8, r3
 8005e28:	688a      	ldr	r2, [r1, #8]
 8005e2a:	690b      	ldr	r3, [r1, #16]
 8005e2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e30:	4293      	cmp	r3, r2
 8005e32:	bfb8      	it	lt
 8005e34:	4613      	movlt	r3, r2
 8005e36:	6033      	str	r3, [r6, #0]
 8005e38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	b10a      	cbz	r2, 8005e46 <_printf_common+0x26>
 8005e42:	3301      	adds	r3, #1
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	0699      	lsls	r1, r3, #26
 8005e4a:	bf42      	ittt	mi
 8005e4c:	6833      	ldrmi	r3, [r6, #0]
 8005e4e:	3302      	addmi	r3, #2
 8005e50:	6033      	strmi	r3, [r6, #0]
 8005e52:	6825      	ldr	r5, [r4, #0]
 8005e54:	f015 0506 	ands.w	r5, r5, #6
 8005e58:	d106      	bne.n	8005e68 <_printf_common+0x48>
 8005e5a:	f104 0a19 	add.w	sl, r4, #25
 8005e5e:	68e3      	ldr	r3, [r4, #12]
 8005e60:	6832      	ldr	r2, [r6, #0]
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	42ab      	cmp	r3, r5
 8005e66:	dc26      	bgt.n	8005eb6 <_printf_common+0x96>
 8005e68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e6c:	6822      	ldr	r2, [r4, #0]
 8005e6e:	3b00      	subs	r3, #0
 8005e70:	bf18      	it	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	0692      	lsls	r2, r2, #26
 8005e76:	d42b      	bmi.n	8005ed0 <_printf_common+0xb0>
 8005e78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	4638      	mov	r0, r7
 8005e80:	47c8      	blx	r9
 8005e82:	3001      	adds	r0, #1
 8005e84:	d01e      	beq.n	8005ec4 <_printf_common+0xa4>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	6922      	ldr	r2, [r4, #16]
 8005e8a:	f003 0306 	and.w	r3, r3, #6
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	bf02      	ittt	eq
 8005e92:	68e5      	ldreq	r5, [r4, #12]
 8005e94:	6833      	ldreq	r3, [r6, #0]
 8005e96:	1aed      	subeq	r5, r5, r3
 8005e98:	68a3      	ldr	r3, [r4, #8]
 8005e9a:	bf0c      	ite	eq
 8005e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ea0:	2500      	movne	r5, #0
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	bfc4      	itt	gt
 8005ea6:	1a9b      	subgt	r3, r3, r2
 8005ea8:	18ed      	addgt	r5, r5, r3
 8005eaa:	2600      	movs	r6, #0
 8005eac:	341a      	adds	r4, #26
 8005eae:	42b5      	cmp	r5, r6
 8005eb0:	d11a      	bne.n	8005ee8 <_printf_common+0xc8>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e008      	b.n	8005ec8 <_printf_common+0xa8>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4652      	mov	r2, sl
 8005eba:	4641      	mov	r1, r8
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	47c8      	blx	r9
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d103      	bne.n	8005ecc <_printf_common+0xac>
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ecc:	3501      	adds	r5, #1
 8005ece:	e7c6      	b.n	8005e5e <_printf_common+0x3e>
 8005ed0:	18e1      	adds	r1, r4, r3
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	2030      	movs	r0, #48	@ 0x30
 8005ed6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005eda:	4422      	add	r2, r4
 8005edc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ee0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	e7c7      	b.n	8005e78 <_printf_common+0x58>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4622      	mov	r2, r4
 8005eec:	4641      	mov	r1, r8
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c8      	blx	r9
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d0e6      	beq.n	8005ec4 <_printf_common+0xa4>
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7d9      	b.n	8005eae <_printf_common+0x8e>
	...

08005efc <_printf_i>:
 8005efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	7e0f      	ldrb	r7, [r1, #24]
 8005f02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f04:	2f78      	cmp	r7, #120	@ 0x78
 8005f06:	4691      	mov	r9, r2
 8005f08:	4680      	mov	r8, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	469a      	mov	sl, r3
 8005f0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f12:	d807      	bhi.n	8005f24 <_printf_i+0x28>
 8005f14:	2f62      	cmp	r7, #98	@ 0x62
 8005f16:	d80a      	bhi.n	8005f2e <_printf_i+0x32>
 8005f18:	2f00      	cmp	r7, #0
 8005f1a:	f000 80d2 	beq.w	80060c2 <_printf_i+0x1c6>
 8005f1e:	2f58      	cmp	r7, #88	@ 0x58
 8005f20:	f000 80b9 	beq.w	8006096 <_printf_i+0x19a>
 8005f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f2c:	e03a      	b.n	8005fa4 <_printf_i+0xa8>
 8005f2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f32:	2b15      	cmp	r3, #21
 8005f34:	d8f6      	bhi.n	8005f24 <_printf_i+0x28>
 8005f36:	a101      	add	r1, pc, #4	@ (adr r1, 8005f3c <_printf_i+0x40>)
 8005f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f3c:	08005f95 	.word	0x08005f95
 8005f40:	08005fa9 	.word	0x08005fa9
 8005f44:	08005f25 	.word	0x08005f25
 8005f48:	08005f25 	.word	0x08005f25
 8005f4c:	08005f25 	.word	0x08005f25
 8005f50:	08005f25 	.word	0x08005f25
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	08005f25 	.word	0x08005f25
 8005f5c:	08005f25 	.word	0x08005f25
 8005f60:	08005f25 	.word	0x08005f25
 8005f64:	08005f25 	.word	0x08005f25
 8005f68:	080060a9 	.word	0x080060a9
 8005f6c:	08005fd3 	.word	0x08005fd3
 8005f70:	08006063 	.word	0x08006063
 8005f74:	08005f25 	.word	0x08005f25
 8005f78:	08005f25 	.word	0x08005f25
 8005f7c:	080060cb 	.word	0x080060cb
 8005f80:	08005f25 	.word	0x08005f25
 8005f84:	08005fd3 	.word	0x08005fd3
 8005f88:	08005f25 	.word	0x08005f25
 8005f8c:	08005f25 	.word	0x08005f25
 8005f90:	0800606b 	.word	0x0800606b
 8005f94:	6833      	ldr	r3, [r6, #0]
 8005f96:	1d1a      	adds	r2, r3, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6032      	str	r2, [r6, #0]
 8005f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e09d      	b.n	80060e4 <_printf_i+0x1e8>
 8005fa8:	6833      	ldr	r3, [r6, #0]
 8005faa:	6820      	ldr	r0, [r4, #0]
 8005fac:	1d19      	adds	r1, r3, #4
 8005fae:	6031      	str	r1, [r6, #0]
 8005fb0:	0606      	lsls	r6, r0, #24
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_i+0xbc>
 8005fb4:	681d      	ldr	r5, [r3, #0]
 8005fb6:	e003      	b.n	8005fc0 <_printf_i+0xc4>
 8005fb8:	0645      	lsls	r5, r0, #25
 8005fba:	d5fb      	bpl.n	8005fb4 <_printf_i+0xb8>
 8005fbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	da03      	bge.n	8005fcc <_printf_i+0xd0>
 8005fc4:	232d      	movs	r3, #45	@ 0x2d
 8005fc6:	426d      	negs	r5, r5
 8005fc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fcc:	4859      	ldr	r0, [pc, #356]	@ (8006134 <_printf_i+0x238>)
 8005fce:	230a      	movs	r3, #10
 8005fd0:	e011      	b.n	8005ff6 <_printf_i+0xfa>
 8005fd2:	6821      	ldr	r1, [r4, #0]
 8005fd4:	6833      	ldr	r3, [r6, #0]
 8005fd6:	0608      	lsls	r0, r1, #24
 8005fd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fdc:	d402      	bmi.n	8005fe4 <_printf_i+0xe8>
 8005fde:	0649      	lsls	r1, r1, #25
 8005fe0:	bf48      	it	mi
 8005fe2:	b2ad      	uxthmi	r5, r5
 8005fe4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fe6:	4853      	ldr	r0, [pc, #332]	@ (8006134 <_printf_i+0x238>)
 8005fe8:	6033      	str	r3, [r6, #0]
 8005fea:	bf14      	ite	ne
 8005fec:	230a      	movne	r3, #10
 8005fee:	2308      	moveq	r3, #8
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ff6:	6866      	ldr	r6, [r4, #4]
 8005ff8:	60a6      	str	r6, [r4, #8]
 8005ffa:	2e00      	cmp	r6, #0
 8005ffc:	bfa2      	ittt	ge
 8005ffe:	6821      	ldrge	r1, [r4, #0]
 8006000:	f021 0104 	bicge.w	r1, r1, #4
 8006004:	6021      	strge	r1, [r4, #0]
 8006006:	b90d      	cbnz	r5, 800600c <_printf_i+0x110>
 8006008:	2e00      	cmp	r6, #0
 800600a:	d04b      	beq.n	80060a4 <_printf_i+0x1a8>
 800600c:	4616      	mov	r6, r2
 800600e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006012:	fb03 5711 	mls	r7, r3, r1, r5
 8006016:	5dc7      	ldrb	r7, [r0, r7]
 8006018:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800601c:	462f      	mov	r7, r5
 800601e:	42bb      	cmp	r3, r7
 8006020:	460d      	mov	r5, r1
 8006022:	d9f4      	bls.n	800600e <_printf_i+0x112>
 8006024:	2b08      	cmp	r3, #8
 8006026:	d10b      	bne.n	8006040 <_printf_i+0x144>
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	07df      	lsls	r7, r3, #31
 800602c:	d508      	bpl.n	8006040 <_printf_i+0x144>
 800602e:	6923      	ldr	r3, [r4, #16]
 8006030:	6861      	ldr	r1, [r4, #4]
 8006032:	4299      	cmp	r1, r3
 8006034:	bfde      	ittt	le
 8006036:	2330      	movle	r3, #48	@ 0x30
 8006038:	f806 3c01 	strble.w	r3, [r6, #-1]
 800603c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006040:	1b92      	subs	r2, r2, r6
 8006042:	6122      	str	r2, [r4, #16]
 8006044:	f8cd a000 	str.w	sl, [sp]
 8006048:	464b      	mov	r3, r9
 800604a:	aa03      	add	r2, sp, #12
 800604c:	4621      	mov	r1, r4
 800604e:	4640      	mov	r0, r8
 8006050:	f7ff fee6 	bl	8005e20 <_printf_common>
 8006054:	3001      	adds	r0, #1
 8006056:	d14a      	bne.n	80060ee <_printf_i+0x1f2>
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	b004      	add	sp, #16
 800605e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	f043 0320 	orr.w	r3, r3, #32
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	4833      	ldr	r0, [pc, #204]	@ (8006138 <_printf_i+0x23c>)
 800606c:	2778      	movs	r7, #120	@ 0x78
 800606e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	6831      	ldr	r1, [r6, #0]
 8006076:	061f      	lsls	r7, r3, #24
 8006078:	f851 5b04 	ldr.w	r5, [r1], #4
 800607c:	d402      	bmi.n	8006084 <_printf_i+0x188>
 800607e:	065f      	lsls	r7, r3, #25
 8006080:	bf48      	it	mi
 8006082:	b2ad      	uxthmi	r5, r5
 8006084:	6031      	str	r1, [r6, #0]
 8006086:	07d9      	lsls	r1, r3, #31
 8006088:	bf44      	itt	mi
 800608a:	f043 0320 	orrmi.w	r3, r3, #32
 800608e:	6023      	strmi	r3, [r4, #0]
 8006090:	b11d      	cbz	r5, 800609a <_printf_i+0x19e>
 8006092:	2310      	movs	r3, #16
 8006094:	e7ac      	b.n	8005ff0 <_printf_i+0xf4>
 8006096:	4827      	ldr	r0, [pc, #156]	@ (8006134 <_printf_i+0x238>)
 8006098:	e7e9      	b.n	800606e <_printf_i+0x172>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	f023 0320 	bic.w	r3, r3, #32
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	e7f6      	b.n	8006092 <_printf_i+0x196>
 80060a4:	4616      	mov	r6, r2
 80060a6:	e7bd      	b.n	8006024 <_printf_i+0x128>
 80060a8:	6833      	ldr	r3, [r6, #0]
 80060aa:	6825      	ldr	r5, [r4, #0]
 80060ac:	6961      	ldr	r1, [r4, #20]
 80060ae:	1d18      	adds	r0, r3, #4
 80060b0:	6030      	str	r0, [r6, #0]
 80060b2:	062e      	lsls	r6, r5, #24
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	d501      	bpl.n	80060bc <_printf_i+0x1c0>
 80060b8:	6019      	str	r1, [r3, #0]
 80060ba:	e002      	b.n	80060c2 <_printf_i+0x1c6>
 80060bc:	0668      	lsls	r0, r5, #25
 80060be:	d5fb      	bpl.n	80060b8 <_printf_i+0x1bc>
 80060c0:	8019      	strh	r1, [r3, #0]
 80060c2:	2300      	movs	r3, #0
 80060c4:	6123      	str	r3, [r4, #16]
 80060c6:	4616      	mov	r6, r2
 80060c8:	e7bc      	b.n	8006044 <_printf_i+0x148>
 80060ca:	6833      	ldr	r3, [r6, #0]
 80060cc:	1d1a      	adds	r2, r3, #4
 80060ce:	6032      	str	r2, [r6, #0]
 80060d0:	681e      	ldr	r6, [r3, #0]
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	2100      	movs	r1, #0
 80060d6:	4630      	mov	r0, r6
 80060d8:	f7fa f8aa 	bl	8000230 <memchr>
 80060dc:	b108      	cbz	r0, 80060e2 <_printf_i+0x1e6>
 80060de:	1b80      	subs	r0, r0, r6
 80060e0:	6060      	str	r0, [r4, #4]
 80060e2:	6863      	ldr	r3, [r4, #4]
 80060e4:	6123      	str	r3, [r4, #16]
 80060e6:	2300      	movs	r3, #0
 80060e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ec:	e7aa      	b.n	8006044 <_printf_i+0x148>
 80060ee:	6923      	ldr	r3, [r4, #16]
 80060f0:	4632      	mov	r2, r6
 80060f2:	4649      	mov	r1, r9
 80060f4:	4640      	mov	r0, r8
 80060f6:	47d0      	blx	sl
 80060f8:	3001      	adds	r0, #1
 80060fa:	d0ad      	beq.n	8006058 <_printf_i+0x15c>
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	079b      	lsls	r3, r3, #30
 8006100:	d413      	bmi.n	800612a <_printf_i+0x22e>
 8006102:	68e0      	ldr	r0, [r4, #12]
 8006104:	9b03      	ldr	r3, [sp, #12]
 8006106:	4298      	cmp	r0, r3
 8006108:	bfb8      	it	lt
 800610a:	4618      	movlt	r0, r3
 800610c:	e7a6      	b.n	800605c <_printf_i+0x160>
 800610e:	2301      	movs	r3, #1
 8006110:	4632      	mov	r2, r6
 8006112:	4649      	mov	r1, r9
 8006114:	4640      	mov	r0, r8
 8006116:	47d0      	blx	sl
 8006118:	3001      	adds	r0, #1
 800611a:	d09d      	beq.n	8006058 <_printf_i+0x15c>
 800611c:	3501      	adds	r5, #1
 800611e:	68e3      	ldr	r3, [r4, #12]
 8006120:	9903      	ldr	r1, [sp, #12]
 8006122:	1a5b      	subs	r3, r3, r1
 8006124:	42ab      	cmp	r3, r5
 8006126:	dcf2      	bgt.n	800610e <_printf_i+0x212>
 8006128:	e7eb      	b.n	8006102 <_printf_i+0x206>
 800612a:	2500      	movs	r5, #0
 800612c:	f104 0619 	add.w	r6, r4, #25
 8006130:	e7f5      	b.n	800611e <_printf_i+0x222>
 8006132:	bf00      	nop
 8006134:	0800638d 	.word	0x0800638d
 8006138:	0800639e 	.word	0x0800639e

0800613c <memmove>:
 800613c:	4288      	cmp	r0, r1
 800613e:	b510      	push	{r4, lr}
 8006140:	eb01 0402 	add.w	r4, r1, r2
 8006144:	d902      	bls.n	800614c <memmove+0x10>
 8006146:	4284      	cmp	r4, r0
 8006148:	4623      	mov	r3, r4
 800614a:	d807      	bhi.n	800615c <memmove+0x20>
 800614c:	1e43      	subs	r3, r0, #1
 800614e:	42a1      	cmp	r1, r4
 8006150:	d008      	beq.n	8006164 <memmove+0x28>
 8006152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006156:	f803 2f01 	strb.w	r2, [r3, #1]!
 800615a:	e7f8      	b.n	800614e <memmove+0x12>
 800615c:	4402      	add	r2, r0
 800615e:	4601      	mov	r1, r0
 8006160:	428a      	cmp	r2, r1
 8006162:	d100      	bne.n	8006166 <memmove+0x2a>
 8006164:	bd10      	pop	{r4, pc}
 8006166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800616a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800616e:	e7f7      	b.n	8006160 <memmove+0x24>

08006170 <_sbrk_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4d06      	ldr	r5, [pc, #24]	@ (800618c <_sbrk_r+0x1c>)
 8006174:	2300      	movs	r3, #0
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	f7fa fe3e 	bl	8000dfc <_sbrk>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_sbrk_r+0x1a>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_sbrk_r+0x1a>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	2000035c 	.word	0x2000035c

08006190 <memcpy>:
 8006190:	440a      	add	r2, r1
 8006192:	4291      	cmp	r1, r2
 8006194:	f100 33ff 	add.w	r3, r0, #4294967295
 8006198:	d100      	bne.n	800619c <memcpy+0xc>
 800619a:	4770      	bx	lr
 800619c:	b510      	push	{r4, lr}
 800619e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061a6:	4291      	cmp	r1, r2
 80061a8:	d1f9      	bne.n	800619e <memcpy+0xe>
 80061aa:	bd10      	pop	{r4, pc}

080061ac <_realloc_r>:
 80061ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b0:	4680      	mov	r8, r0
 80061b2:	4615      	mov	r5, r2
 80061b4:	460c      	mov	r4, r1
 80061b6:	b921      	cbnz	r1, 80061c2 <_realloc_r+0x16>
 80061b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061bc:	4611      	mov	r1, r2
 80061be:	f7ff bc4b 	b.w	8005a58 <_malloc_r>
 80061c2:	b92a      	cbnz	r2, 80061d0 <_realloc_r+0x24>
 80061c4:	f7ff fbdc 	bl	8005980 <_free_r>
 80061c8:	2400      	movs	r4, #0
 80061ca:	4620      	mov	r0, r4
 80061cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d0:	f000 f81a 	bl	8006208 <_malloc_usable_size_r>
 80061d4:	4285      	cmp	r5, r0
 80061d6:	4606      	mov	r6, r0
 80061d8:	d802      	bhi.n	80061e0 <_realloc_r+0x34>
 80061da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80061de:	d8f4      	bhi.n	80061ca <_realloc_r+0x1e>
 80061e0:	4629      	mov	r1, r5
 80061e2:	4640      	mov	r0, r8
 80061e4:	f7ff fc38 	bl	8005a58 <_malloc_r>
 80061e8:	4607      	mov	r7, r0
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d0ec      	beq.n	80061c8 <_realloc_r+0x1c>
 80061ee:	42b5      	cmp	r5, r6
 80061f0:	462a      	mov	r2, r5
 80061f2:	4621      	mov	r1, r4
 80061f4:	bf28      	it	cs
 80061f6:	4632      	movcs	r2, r6
 80061f8:	f7ff ffca 	bl	8006190 <memcpy>
 80061fc:	4621      	mov	r1, r4
 80061fe:	4640      	mov	r0, r8
 8006200:	f7ff fbbe 	bl	8005980 <_free_r>
 8006204:	463c      	mov	r4, r7
 8006206:	e7e0      	b.n	80061ca <_realloc_r+0x1e>

08006208 <_malloc_usable_size_r>:
 8006208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800620c:	1f18      	subs	r0, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	bfbc      	itt	lt
 8006212:	580b      	ldrlt	r3, [r1, r0]
 8006214:	18c0      	addlt	r0, r0, r3
 8006216:	4770      	bx	lr

08006218 <_init>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	bf00      	nop
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr

08006224 <_fini>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	bf00      	nop
 8006228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622a:	bc08      	pop	{r3}
 800622c:	469e      	mov	lr, r3
 800622e:	4770      	bx	lr
