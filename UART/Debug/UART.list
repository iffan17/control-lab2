
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080057b4  080057b4  000067b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059cc  080059cc  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  080059cc  080059cc  000069cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059d4  080059d4  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d4  080059d4  000069d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d8  080059d8  000069d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080059dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000064  08005a40  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08005a40  000073fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7e6  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002171  00000000  00000000  0001687a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000189f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000981  00000000  00000000  00019640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025448  00000000  00000000  00019fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f721  00000000  00000000  0003f409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebb4f  00000000  00000000  0004eb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a679  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003738  00000000  00000000  0013a6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0013ddf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800579c 	.word	0x0800579c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	0800579c 	.word	0x0800579c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fdb9 	bl	800113a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f874 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f978 	bl	80008c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 f944 	bl	800085c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d4:	f000 f8ba 	bl	800074c <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 80005d8:	f000 f902 	bl	80007e0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  // UART CODE //
  //UARTDMAConfig();
  //HAL_UART_Transmit(ส่งด้วย , สิ่งที่ส่ง ,
  sprintf((char*)TxBuffer,"Welcome to WORDLE, You have 5 attempts to guess the word\r\n\n");
 80005dc:	492b      	ldr	r1, [pc, #172]	@ (800068c <main+0xcc>)
 80005de:	482c      	ldr	r0, [pc, #176]	@ (8000690 <main+0xd0>)
 80005e0:	f004 fc3c 	bl	8004e5c <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 80005e4:	482a      	ldr	r0, [pc, #168]	@ (8000690 <main+0xd0>)
 80005e6:	f7ff fe1b 	bl	8000220 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	2305      	movs	r3, #5
 80005f0:	4927      	ldr	r1, [pc, #156]	@ (8000690 <main+0xd0>)
 80005f2:	4828      	ldr	r0, [pc, #160]	@ (8000694 <main+0xd4>)
 80005f4:	f003 f91a 	bl	800382c <HAL_UART_Transmit>
  sprintf((char*)TxBuffer,"PRESS - to clear your word\r\n");
 80005f8:	4927      	ldr	r1, [pc, #156]	@ (8000698 <main+0xd8>)
 80005fa:	4825      	ldr	r0, [pc, #148]	@ (8000690 <main+0xd0>)
 80005fc:	f004 fc2e 	bl	8004e5c <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000600:	4823      	ldr	r0, [pc, #140]	@ (8000690 <main+0xd0>)
 8000602:	f7ff fe0d 	bl	8000220 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	2305      	movs	r3, #5
 800060c:	4920      	ldr	r1, [pc, #128]	@ (8000690 <main+0xd0>)
 800060e:	4821      	ldr	r0, [pc, #132]	@ (8000694 <main+0xd4>)
 8000610:	f003 f90c 	bl	800382c <HAL_UART_Transmit>
  sprintf((char*)TxBuffer,"SEND 11111 to re-attempt \n\n");
 8000614:	4921      	ldr	r1, [pc, #132]	@ (800069c <main+0xdc>)
 8000616:	481e      	ldr	r0, [pc, #120]	@ (8000690 <main+0xd0>)
 8000618:	f004 fc20 	bl	8004e5c <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 800061c:	481c      	ldr	r0, [pc, #112]	@ (8000690 <main+0xd0>)
 800061e:	f7ff fdff 	bl	8000220 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	b29a      	uxth	r2, r3
 8000626:	2305      	movs	r3, #5
 8000628:	4919      	ldr	r1, [pc, #100]	@ (8000690 <main+0xd0>)
 800062a:	481a      	ldr	r0, [pc, #104]	@ (8000694 <main+0xd4>)
 800062c:	f003 f8fe 	bl	800382c <HAL_UART_Transmit>
  sprintf((char*)TxBuffer,"Turn CAPLOCK on and begin typing \r\n");
 8000630:	491b      	ldr	r1, [pc, #108]	@ (80006a0 <main+0xe0>)
 8000632:	4817      	ldr	r0, [pc, #92]	@ (8000690 <main+0xd0>)
 8000634:	f004 fc12 	bl	8004e5c <siprintf>
  HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000638:	4815      	ldr	r0, [pc, #84]	@ (8000690 <main+0xd0>)
 800063a:	f7ff fdf1 	bl	8000220 <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	b29a      	uxth	r2, r3
 8000642:	2305      	movs	r3, #5
 8000644:	4912      	ldr	r1, [pc, #72]	@ (8000690 <main+0xd0>)
 8000646:	4813      	ldr	r0, [pc, #76]	@ (8000694 <main+0xd4>)
 8000648:	f003 f8f0 	bl	800382c <HAL_UART_Transmit>
  // UART END //
  // SPI CODE //
  LightSetup();
 800064c:	f000 f9c8 	bl	80009e0 <LightSetup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UARTPollingMethod();
 8000650:	f000 faf2 	bl	8000c38 <UARTPollingMethod>
	  //UARTInterruptConfig();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(readFlag && attempt < 5 && point != 5 && RxBuffer[0] != 1 && RxBuffer[4] != 1){
 8000654:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <main+0xe4>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d014      	beq.n	8000686 <main+0xc6>
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <main+0xe8>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b04      	cmp	r3, #4
 8000662:	d810      	bhi.n	8000686 <main+0xc6>
 8000664:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <main+0xec>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b05      	cmp	r3, #5
 800066a:	d00c      	beq.n	8000686 <main+0xc6>
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <main+0xf0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d008      	beq.n	8000686 <main+0xc6>
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <main+0xf0>)
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d004      	beq.n	8000686 <main+0xc6>
		  readFlag = 0;
 800067c:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <main+0xe4>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
		  Wordle();
 8000682:	f000 fa07 	bl	8000a94 <Wordle>
	  }
	  SPITxRx_readIO();
 8000686:	f000 f9cb 	bl	8000a20 <SPITxRx_readIO>
	  UARTPollingMethod();
 800068a:	e7e1      	b.n	8000650 <main+0x90>
 800068c:	080057b4 	.word	0x080057b4
 8000690:	2000024c 	.word	0x2000024c
 8000694:	20000080 	.word	0x20000080
 8000698:	080057f0 	.word	0x080057f0
 800069c:	08005810 	.word	0x08005810
 80006a0:	0800582c 	.word	0x0800582c
 80006a4:	20000290 	.word	0x20000290
 80006a8:	2000028f 	.word	0x2000028f
 80006ac:	2000028e 	.word	0x2000028e
 80006b0:	20000238 	.word	0x20000238

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	2238      	movs	r2, #56	@ 0x38
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fbea 	bl	8004e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f001 fb00 	bl	8001cdc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e6:	2340      	movs	r3, #64	@ 0x40
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006f6:	2355      	movs	r3, #85	@ 0x55
 80006f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0318 	add.w	r3, r7, #24
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fb9a 	bl	8001e44 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000716:	f000 fb0d 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2104      	movs	r1, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fe98 	bl	8002468 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800073e:	f000 faf9 	bl	8000d34 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	@ 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000750:	4b21      	ldr	r3, [pc, #132]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000752:	4a22      	ldr	r2, [pc, #136]	@ (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000754:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000756:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800076a:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800078e:	4812      	ldr	r0, [pc, #72]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000790:	f002 fffc 	bl	800378c <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 facb 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 80007a2:	f004 fa90 	bl	8004cc6 <HAL_UARTEx_SetTxFifoThreshold>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007ac:	f000 fac2 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 80007b4:	f004 fac5 	bl	8004d42 <HAL_UARTEx_SetRxFifoThreshold>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007be:	f000 fab9 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	f004 fa46 	bl	8004c54 <HAL_UARTEx_DisableFifoMode>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007ce:	f000 fab1 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000080 	.word	0x20000080
 80007dc:	40008000 	.word	0x40008000

080007e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <MX_SPI3_Init+0x74>)
 80007e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000858 <MX_SPI3_Init+0x78>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_SPI3_Init+0x74>)
 80007ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <MX_SPI3_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <MX_SPI3_Init+0x74>)
 80007fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007fe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_SPI3_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_SPI3_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_SPI3_Init+0x74>)
 800080e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000812:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_SPI3_Init+0x74>)
 8000816:	2238      	movs	r2, #56	@ 0x38
 8000818:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_SPI3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_SPI3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_SPI3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_SPI3_Init+0x74>)
 800082e:	2207      	movs	r2, #7
 8000830:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_SPI3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_SPI3_Init+0x74>)
 800083a:	2208      	movs	r2, #8
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_SPI3_Init+0x74>)
 8000840:	f002 fa7c 	bl	8002d3c <HAL_SPI_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800084a:	f000 fa73 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200001d4 	.word	0x200001d4
 8000858:	40003c00 	.word	0x40003c00

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000862:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <MX_DMA_Init+0x60>)
 8000864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000866:	4a15      	ldr	r2, [pc, #84]	@ (80008bc <MX_DMA_Init+0x60>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6493      	str	r3, [r2, #72]	@ 0x48
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_DMA_Init+0x60>)
 8000870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_DMA_Init+0x60>)
 800087c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800087e:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <MX_DMA_Init+0x60>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6493      	str	r3, [r2, #72]	@ 0x48
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_DMA_Init+0x60>)
 8000888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	200b      	movs	r0, #11
 8000898:	f000 fd9b 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800089c:	200b      	movs	r0, #11
 800089e:	f000 fdb2 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	200c      	movs	r0, #12
 80008a8:	f000 fd93 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80008ac:	200c      	movs	r0, #12
 80008ae:	f000 fdaa 	bl	8001406 <HAL_NVIC_EnableIRQ>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b3f      	ldr	r3, [pc, #252]	@ (80009d4 <MX_GPIO_Init+0x114>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a3e      	ldr	r2, [pc, #248]	@ (80009d4 <MX_GPIO_Init+0x114>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b3c      	ldr	r3, [pc, #240]	@ (80009d4 <MX_GPIO_Init+0x114>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ee:	4b39      	ldr	r3, [pc, #228]	@ (80009d4 <MX_GPIO_Init+0x114>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a38      	ldr	r2, [pc, #224]	@ (80009d4 <MX_GPIO_Init+0x114>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b36      	ldr	r3, [pc, #216]	@ (80009d4 <MX_GPIO_Init+0x114>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0320 	and.w	r3, r3, #32
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b33      	ldr	r3, [pc, #204]	@ (80009d4 <MX_GPIO_Init+0x114>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4a32      	ldr	r2, [pc, #200]	@ (80009d4 <MX_GPIO_Init+0x114>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <MX_GPIO_Init+0x114>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <MX_GPIO_Init+0x114>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4a2c      	ldr	r2, [pc, #176]	@ (80009d4 <MX_GPIO_Init+0x114>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <MX_GPIO_Init+0x114>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b27      	ldr	r3, [pc, #156]	@ (80009d4 <MX_GPIO_Init+0x114>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a26      	ldr	r2, [pc, #152]	@ (80009d4 <MX_GPIO_Init+0x114>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <MX_GPIO_Init+0x114>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000956:	f001 f985 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2104      	movs	r1, #4
 800095e:	481e      	ldr	r0, [pc, #120]	@ (80009d8 <MX_GPIO_Init+0x118>)
 8000960:	f001 f980 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4818      	ldr	r0, [pc, #96]	@ (80009dc <MX_GPIO_Init+0x11c>)
 800097c:	f000 ffd8 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000980:	2320      	movs	r3, #32
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099a:	f000 ffc9 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800099e:	2304      	movs	r3, #4
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <MX_GPIO_Init+0x118>)
 80009b6:	f000 ffbb 	bl	8001930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2028      	movs	r0, #40	@ 0x28
 80009c0:	f000 fd07 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c4:	2028      	movs	r0, #40	@ 0x28
 80009c6:	f000 fd1e 	bl	8001406 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	@ 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000c00 	.word	0x48000c00
 80009dc:	48000800 	.word	0x48000800

080009e0 <LightSetup>:

/* USER CODE BEGIN 4 */
void LightSetup()//at BEGIN 2
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2104      	movs	r1, #4
 80009e8:	4809      	ldr	r0, [pc, #36]	@ (8000a10 <LightSetup+0x30>)
 80009ea:	f001 f93b 	bl	8001c64 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;//write
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <LightSetup+0x34>)
 80009f0:	2240      	movs	r2, #64	@ 0x40
 80009f2:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;//IODIRB
 80009f4:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <LightSetup+0x34>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b00000000;
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <LightSetup+0x34>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000a00:	2303      	movs	r3, #3
 8000a02:	4a05      	ldr	r2, [pc, #20]	@ (8000a18 <LightSetup+0x38>)
 8000a04:	4903      	ldr	r1, [pc, #12]	@ (8000a14 <LightSetup+0x34>)
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <LightSetup+0x3c>)
 8000a08:	f002 fa44 	bl	8002e94 <HAL_SPI_TransmitReceive_IT>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	48000c00 	.word	0x48000c00
 8000a14:	200002a0 	.word	0x200002a0
 8000a18:	20000294 	.word	0x20000294
 8000a1c:	200001d4 	.word	0x200001d4

08000a20 <SPITxRx_readIO>:
void SPITxRx_readIO()
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000a24:	2104      	movs	r1, #4
 8000a26:	480f      	ldr	r0, [pc, #60]	@ (8000a64 <SPITxRx_readIO+0x44>)
 8000a28:	f001 f904 	bl	8001c34 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d016      	beq.n	8000a60 <SPITxRx_readIO+0x40>
	{
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a32:	2200      	movs	r2, #0
 8000a34:	2104      	movs	r1, #4
 8000a36:	480b      	ldr	r0, [pc, #44]	@ (8000a64 <SPITxRx_readIO+0x44>)
 8000a38:	f001 f914 	bl	8001c64 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000001;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <SPITxRx_readIO+0x48>)
 8000a3e:	2241      	movs	r2, #65	@ 0x41
 8000a40:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x12;
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <SPITxRx_readIO+0x48>)
 8000a44:	2212      	movs	r2, #18
 8000a46:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0;
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <SPITxRx_readIO+0x48>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	709a      	strb	r2, [r3, #2]
	SPITx[3] = 0;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <SPITxRx_readIO+0x48>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	70da      	strb	r2, [r3, #3]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000a54:	2304      	movs	r3, #4
 8000a56:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <SPITxRx_readIO+0x4c>)
 8000a58:	4903      	ldr	r1, [pc, #12]	@ (8000a68 <SPITxRx_readIO+0x48>)
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <SPITxRx_readIO+0x50>)
 8000a5c:	f002 fa1a 	bl	8002e94 <HAL_SPI_TransmitReceive_IT>
	}
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	48000c00 	.word	0x48000c00
 8000a68:	200002a0 	.word	0x200002a0
 8000a6c:	20000294 	.word	0x20000294
 8000a70:	200001d4 	.word	0x200001d4

08000a74 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2104      	movs	r1, #4
 8000a80:	4803      	ldr	r0, [pc, #12]	@ (8000a90 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000a82:	f001 f8ef 	bl	8001c64 <HAL_GPIO_WritePin>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	48000c00 	.word	0x48000c00

08000a94 <Wordle>:



void Wordle()
	{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
		//readFlag = 0;
	for(uint8_t i = 0;i <5;i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	71fb      	strb	r3, [r7, #7]
 8000a9e:	e055      	b.n	8000b4c <Wordle+0xb8>
	{
		output[5] = '\0';
 8000aa0:	4b59      	ldr	r3, [pc, #356]	@ (8000c08 <Wordle+0x174>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	715a      	strb	r2, [r3, #5]

		if(RxBuffer[i] == '-') //retry press "-"
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	4a58      	ldr	r2, [pc, #352]	@ (8000c0c <Wordle+0x178>)
 8000aaa:	5cd3      	ldrb	r3, [r2, r3]
 8000aac:	2b2d      	cmp	r3, #45	@ 0x2d
 8000aae:	d10e      	bne.n	8000ace <Wordle+0x3a>
		{
			sprintf((char*)TxBuffer,"Retrying");
 8000ab0:	4957      	ldr	r1, [pc, #348]	@ (8000c10 <Wordle+0x17c>)
 8000ab2:	4858      	ldr	r0, [pc, #352]	@ (8000c14 <Wordle+0x180>)
 8000ab4:	f004 f9d2 	bl	8004e5c <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5); // uart1, text , size , timeout
 8000ab8:	4856      	ldr	r0, [pc, #344]	@ (8000c14 <Wordle+0x180>)
 8000aba:	f7ff fbb1 	bl	8000220 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	2305      	movs	r3, #5
 8000ac4:	4953      	ldr	r1, [pc, #332]	@ (8000c14 <Wordle+0x180>)
 8000ac6:	4854      	ldr	r0, [pc, #336]	@ (8000c18 <Wordle+0x184>)
 8000ac8:	f002 feb0 	bl	800382c <HAL_UART_Transmit>
			return;
 8000acc:	e098      	b.n	8000c00 <Wordle+0x16c>
		}
		else if(RxBuffer[i] == wordle[i]){
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4a4e      	ldr	r2, [pc, #312]	@ (8000c0c <Wordle+0x178>)
 8000ad2:	5cd2      	ldrb	r2, [r2, r3]
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	4951      	ldr	r1, [pc, #324]	@ (8000c1c <Wordle+0x188>)
 8000ad8:	5ccb      	ldrb	r3, [r1, r3]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d10c      	bne.n	8000af8 <Wordle+0x64>
			output[i] = RxBuffer[i];
 8000ade:	79fa      	ldrb	r2, [r7, #7]
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	494a      	ldr	r1, [pc, #296]	@ (8000c0c <Wordle+0x178>)
 8000ae4:	5c89      	ldrb	r1, [r1, r2]
 8000ae6:	4a48      	ldr	r2, [pc, #288]	@ (8000c08 <Wordle+0x174>)
 8000ae8:	54d1      	strb	r1, [r2, r3]
			point++;
 8000aea:	4b4d      	ldr	r3, [pc, #308]	@ (8000c20 <Wordle+0x18c>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b4b      	ldr	r3, [pc, #300]	@ (8000c20 <Wordle+0x18c>)
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e015      	b.n	8000b24 <Wordle+0x90>

		}
		else {
			for(uint8_t j=0; j<5;j++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	71bb      	strb	r3, [r7, #6]
 8000afc:	e00f      	b.n	8000b1e <Wordle+0x8a>
			{
				if(RxBuffer[i] == wordle[j])
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4a42      	ldr	r2, [pc, #264]	@ (8000c0c <Wordle+0x178>)
 8000b02:	5cd2      	ldrb	r2, [r2, r3]
 8000b04:	79bb      	ldrb	r3, [r7, #6]
 8000b06:	4945      	ldr	r1, [pc, #276]	@ (8000c1c <Wordle+0x188>)
 8000b08:	5ccb      	ldrb	r3, [r1, r3]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d104      	bne.n	8000b18 <Wordle+0x84>
				{
					output[i] = '?';
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4a3d      	ldr	r2, [pc, #244]	@ (8000c08 <Wordle+0x174>)
 8000b12:	213f      	movs	r1, #63	@ 0x3f
 8000b14:	54d1      	strb	r1, [r2, r3]
					break;
 8000b16:	e005      	b.n	8000b24 <Wordle+0x90>
			for(uint8_t j=0; j<5;j++)
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	71bb      	strb	r3, [r7, #6]
 8000b1e:	79bb      	ldrb	r3, [r7, #6]
 8000b20:	2b04      	cmp	r3, #4
 8000b22:	d9ec      	bls.n	8000afe <Wordle+0x6a>
				}
			}
		}
		if(output[i] != '?' && output[i] != RxBuffer[i]){
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4a38      	ldr	r2, [pc, #224]	@ (8000c08 <Wordle+0x174>)
 8000b28:	5cd3      	ldrb	r3, [r2, r3]
 8000b2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b2c:	d00b      	beq.n	8000b46 <Wordle+0xb2>
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4a35      	ldr	r2, [pc, #212]	@ (8000c08 <Wordle+0x174>)
 8000b32:	5cd2      	ldrb	r2, [r2, r3]
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	4935      	ldr	r1, [pc, #212]	@ (8000c0c <Wordle+0x178>)
 8000b38:	5ccb      	ldrb	r3, [r1, r3]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d003      	beq.n	8000b46 <Wordle+0xb2>
			output[i] = '_';
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4a31      	ldr	r2, [pc, #196]	@ (8000c08 <Wordle+0x174>)
 8000b42:	215f      	movs	r1, #95	@ 0x5f
 8000b44:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0;i <5;i++)
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d9a6      	bls.n	8000aa0 <Wordle+0xc>
		}
	}
	if(point == 5){
 8000b52:	4b33      	ldr	r3, [pc, #204]	@ (8000c20 <Wordle+0x18c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b05      	cmp	r3, #5
 8000b58:	d10f      	bne.n	8000b7a <Wordle+0xe6>
		sprintf((char*)TxBuffer,"\n Congratulations\n %s is correct\r\n", output);
 8000b5a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c08 <Wordle+0x174>)
 8000b5c:	4931      	ldr	r1, [pc, #196]	@ (8000c24 <Wordle+0x190>)
 8000b5e:	482d      	ldr	r0, [pc, #180]	@ (8000c14 <Wordle+0x180>)
 8000b60:	f004 f97c 	bl	8004e5c <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000b64:	482b      	ldr	r0, [pc, #172]	@ (8000c14 <Wordle+0x180>)
 8000b66:	f7ff fb5b 	bl	8000220 <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	2305      	movs	r3, #5
 8000b70:	4928      	ldr	r1, [pc, #160]	@ (8000c14 <Wordle+0x180>)
 8000b72:	4829      	ldr	r0, [pc, #164]	@ (8000c18 <Wordle+0x184>)
 8000b74:	f002 fe5a 	bl	800382c <HAL_UART_Transmit>
 8000b78:	e042      	b.n	8000c00 <Wordle+0x16c>
	}
	else{
		point = 0;
 8000b7a:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <Wordle+0x18c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
		attempt++;
 8000b80:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <Wordle+0x194>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <Wordle+0x194>)
 8000b8a:	701a      	strb	r2, [r3, #0]
		if(attempt >= 5){
 8000b8c:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <Wordle+0x194>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d90f      	bls.n	8000bb4 <Wordle+0x120>
				sprintf((char*)TxBuffer,"\n Game Over\r\n\n Correct Answer is %s\n\r\n", (char*)wordle);
 8000b94:	4a21      	ldr	r2, [pc, #132]	@ (8000c1c <Wordle+0x188>)
 8000b96:	4925      	ldr	r1, [pc, #148]	@ (8000c2c <Wordle+0x198>)
 8000b98:	481e      	ldr	r0, [pc, #120]	@ (8000c14 <Wordle+0x180>)
 8000b9a:	f004 f95f 	bl	8004e5c <siprintf>
				HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000b9e:	481d      	ldr	r0, [pc, #116]	@ (8000c14 <Wordle+0x180>)
 8000ba0:	f7ff fb3e 	bl	8000220 <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	2305      	movs	r3, #5
 8000baa:	491a      	ldr	r1, [pc, #104]	@ (8000c14 <Wordle+0x180>)
 8000bac:	481a      	ldr	r0, [pc, #104]	@ (8000c18 <Wordle+0x184>)
 8000bae:	f002 fe3d 	bl	800382c <HAL_UART_Transmit>
 8000bb2:	e025      	b.n	8000c00 <Wordle+0x16c>
		}
		else if(RxBuffer[1] != '1'){
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <Wordle+0x178>)
 8000bb6:	785b      	ldrb	r3, [r3, #1]
 8000bb8:	2b31      	cmp	r3, #49	@ 0x31
 8000bba:	d021      	beq.n	8000c00 <Wordle+0x16c>
			sprintf((char*)TxBuffer,"Wrong Answer \n Your word : %s\r\n", (char*)output);
 8000bbc:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <Wordle+0x174>)
 8000bbe:	491c      	ldr	r1, [pc, #112]	@ (8000c30 <Wordle+0x19c>)
 8000bc0:	4814      	ldr	r0, [pc, #80]	@ (8000c14 <Wordle+0x180>)
 8000bc2:	f004 f94b 	bl	8004e5c <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000bc6:	4813      	ldr	r0, [pc, #76]	@ (8000c14 <Wordle+0x180>)
 8000bc8:	f7ff fb2a 	bl	8000220 <strlen>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	4910      	ldr	r1, [pc, #64]	@ (8000c14 <Wordle+0x180>)
 8000bd4:	4810      	ldr	r0, [pc, #64]	@ (8000c18 <Wordle+0x184>)
 8000bd6:	f002 fe29 	bl	800382c <HAL_UART_Transmit>
			sprintf((char*)TxBuffer,"Remaining Chances: %d/5 \r\n", (int)(5-attempt));
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <Wordle+0x194>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	f1c3 0305 	rsb	r3, r3, #5
 8000be2:	461a      	mov	r2, r3
 8000be4:	4913      	ldr	r1, [pc, #76]	@ (8000c34 <Wordle+0x1a0>)
 8000be6:	480b      	ldr	r0, [pc, #44]	@ (8000c14 <Wordle+0x180>)
 8000be8:	f004 f938 	bl	8004e5c <siprintf>
			HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer) , 5);
 8000bec:	4809      	ldr	r0, [pc, #36]	@ (8000c14 <Wordle+0x180>)
 8000bee:	f7ff fb17 	bl	8000220 <strlen>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	4906      	ldr	r1, [pc, #24]	@ (8000c14 <Wordle+0x180>)
 8000bfa:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <Wordle+0x184>)
 8000bfc:	f002 fe16 	bl	800382c <HAL_UART_Transmit>
		}

	}

}
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000288 	.word	0x20000288
 8000c0c:	20000238 	.word	0x20000238
 8000c10:	08005850 	.word	0x08005850
 8000c14:	2000024c 	.word	0x2000024c
 8000c18:	20000080 	.word	0x20000080
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	2000028e 	.word	0x2000028e
 8000c24:	0800585c 	.word	0x0800585c
 8000c28:	2000028f 	.word	0x2000028f
 8000c2c:	08005880 	.word	0x08005880
 8000c30:	080058a8 	.word	0x080058a8
 8000c34:	080058c8 	.word	0x080058c8

08000c38 <UARTPollingMethod>:

void UARTPollingMethod()
	{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	//read UART 10 char with in 10s
	HAL_StatusTypeDef HAL_status = HAL_UART_Receive(&hlpuart1, RxBuffer, 5, 15000);
 8000c3e:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8000c42:	2205      	movs	r2, #5
 8000c44:	4931      	ldr	r1, [pc, #196]	@ (8000d0c <UARTPollingMethod+0xd4>)
 8000c46:	4832      	ldr	r0, [pc, #200]	@ (8000d10 <UARTPollingMethod+0xd8>)
 8000c48:	f002 fe7e 	bl	8003948 <HAL_UART_Receive>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]

	//if complete read 10 char
	if(HAL_status == HAL_OK)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d135      	bne.n	8000cc2 <UARTPollingMethod+0x8a>
	{
		readFlag = 1;
 8000c56:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <UARTPollingMethod+0xdc>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
		RxBuffer[5] = '\0';
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d0c <UARTPollingMethod+0xd4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	715a      	strb	r2, [r3, #5]
		if(RxBuffer[0] == '1' || RxBuffer[4] == '1'){
 8000c62:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <UARTPollingMethod+0xd4>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b31      	cmp	r3, #49	@ 0x31
 8000c68:	d003      	beq.n	8000c72 <UARTPollingMethod+0x3a>
 8000c6a:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <UARTPollingMethod+0xd4>)
 8000c6c:	791b      	ldrb	r3, [r3, #4]
 8000c6e:	2b31      	cmp	r3, #49	@ 0x31
 8000c70:	d10a      	bne.n	8000c88 <UARTPollingMethod+0x50>
			point = 0;
 8000c72:	4b29      	ldr	r3, [pc, #164]	@ (8000d18 <UARTPollingMethod+0xe0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
			attempt = 0;
 8000c78:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <UARTPollingMethod+0xe4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
			sprintf((char*)TxBuffer,"Reset Completed");
 8000c7e:	4928      	ldr	r1, [pc, #160]	@ (8000d20 <UARTPollingMethod+0xe8>)
 8000c80:	4828      	ldr	r0, [pc, #160]	@ (8000d24 <UARTPollingMethod+0xec>)
 8000c82:	f004 f8eb 	bl	8004e5c <siprintf>
 8000c86:	e011      	b.n	8000cac <UARTPollingMethod+0x74>
		}
		else if(attempt >= 5 || point == 5){
 8000c88:	4b24      	ldr	r3, [pc, #144]	@ (8000d1c <UARTPollingMethod+0xe4>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d803      	bhi.n	8000c98 <UARTPollingMethod+0x60>
 8000c90:	4b21      	ldr	r3, [pc, #132]	@ (8000d18 <UARTPollingMethod+0xe0>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d104      	bne.n	8000ca2 <UARTPollingMethod+0x6a>
			sprintf((char*)TxBuffer,"Game Halted, SEND 11111 to re-attempt\r\n");
 8000c98:	4923      	ldr	r1, [pc, #140]	@ (8000d28 <UARTPollingMethod+0xf0>)
 8000c9a:	4822      	ldr	r0, [pc, #136]	@ (8000d24 <UARTPollingMethod+0xec>)
 8000c9c:	f004 f8de 	bl	8004e5c <siprintf>
 8000ca0:	e004      	b.n	8000cac <UARTPollingMethod+0x74>
		}
		else{
			sprintf((char*)TxBuffer,"Your answer : %s\r\n",(char*)RxBuffer);
 8000ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8000d0c <UARTPollingMethod+0xd4>)
 8000ca4:	4921      	ldr	r1, [pc, #132]	@ (8000d2c <UARTPollingMethod+0xf4>)
 8000ca6:	481f      	ldr	r0, [pc, #124]	@ (8000d24 <UARTPollingMethod+0xec>)
 8000ca8:	f004 f8d8 	bl	8004e5c <siprintf>
		}
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000cac:	481d      	ldr	r0, [pc, #116]	@ (8000d24 <UARTPollingMethod+0xec>)
 8000cae:	f7ff fab7 	bl	8000220 <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	491a      	ldr	r1, [pc, #104]	@ (8000d24 <UARTPollingMethod+0xec>)
 8000cba:	4815      	ldr	r0, [pc, #84]	@ (8000d10 <UARTPollingMethod+0xd8>)
 8000cbc:	f002 fdb6 	bl	800382c <HAL_UART_Transmit>
		//return received char
		sprintf((char*)TxBuffer,"turn CAPLOCK on, send S____ to begin\r\n");
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);

	}
}
 8000cc0:	e01f      	b.n	8000d02 <UARTPollingMethod+0xca>
	else if(HAL_status == HAL_TIMEOUT)
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	d11c      	bne.n	8000d02 <UARTPollingMethod+0xca>
		uint32_t lastCharPos = hlpuart1.RxXferSize - hlpuart1.RxXferCount;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <UARTPollingMethod+0xd8>)
 8000cca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <UARTPollingMethod+0xd8>)
 8000cd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	603b      	str	r3, [r7, #0]
		RxBuffer[lastCharPos] = '\0';
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <UARTPollingMethod+0xd4>)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
		sprintf((char*)TxBuffer,"turn CAPLOCK on, send S____ to begin\r\n");
 8000ce6:	4912      	ldr	r1, [pc, #72]	@ (8000d30 <UARTPollingMethod+0xf8>)
 8000ce8:	480e      	ldr	r0, [pc, #56]	@ (8000d24 <UARTPollingMethod+0xec>)
 8000cea:	f004 f8b7 	bl	8004e5c <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 5);
 8000cee:	480d      	ldr	r0, [pc, #52]	@ (8000d24 <UARTPollingMethod+0xec>)
 8000cf0:	f7ff fa96 	bl	8000220 <strlen>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	2305      	movs	r3, #5
 8000cfa:	490a      	ldr	r1, [pc, #40]	@ (8000d24 <UARTPollingMethod+0xec>)
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <UARTPollingMethod+0xd8>)
 8000cfe:	f002 fd95 	bl	800382c <HAL_UART_Transmit>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000238 	.word	0x20000238
 8000d10:	20000080 	.word	0x20000080
 8000d14:	20000290 	.word	0x20000290
 8000d18:	2000028e 	.word	0x2000028e
 8000d1c:	2000028f 	.word	0x2000028f
 8000d20:	080058e4 	.word	0x080058e4
 8000d24:	2000024c 	.word	0x2000024c
 8000d28:	080058f4 	.word	0x080058f4
 8000d2c:	0800591c 	.word	0x0800591c
 8000d30:	08005930 	.word	0x08005930

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <Error_Handler+0x8>

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d52:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d62:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d76:	f001 f855 	bl	8001e24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09e      	sub	sp, #120	@ 0x78
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2254      	movs	r2, #84	@ 0x54
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 f877 	bl	8004e9c <memset>
  if(huart->Instance==LPUART1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a4d      	ldr	r2, [pc, #308]	@ (8000ee8 <HAL_UART_MspInit+0x160>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	f040 8092 	bne.w	8000ede <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000dba:	2320      	movs	r3, #32
 8000dbc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fd6a 	bl	80028a0 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dd2:	f7ff ffaf 	bl	8000d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dd6:	4b45      	ldr	r3, [pc, #276]	@ (8000eec <HAL_UART_MspInit+0x164>)
 8000dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dda:	4a44      	ldr	r2, [pc, #272]	@ (8000eec <HAL_UART_MspInit+0x164>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000de2:	4b42      	ldr	r3, [pc, #264]	@ (8000eec <HAL_UART_MspInit+0x164>)
 8000de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b3f      	ldr	r3, [pc, #252]	@ (8000eec <HAL_UART_MspInit+0x164>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df2:	4a3e      	ldr	r2, [pc, #248]	@ (8000eec <HAL_UART_MspInit+0x164>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8000eec <HAL_UART_MspInit+0x164>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e06:	230c      	movs	r3, #12
 8000e08:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e16:	230c      	movs	r3, #12
 8000e18:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e24:	f000 fd84 	bl	8001930 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000e28:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <HAL_UART_MspInit+0x168>)
 8000e2a:	4a32      	ldr	r2, [pc, #200]	@ (8000ef4 <HAL_UART_MspInit+0x16c>)
 8000e2c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000e2e:	4b30      	ldr	r3, [pc, #192]	@ (8000ef0 <HAL_UART_MspInit+0x168>)
 8000e30:	2222      	movs	r2, #34	@ 0x22
 8000e32:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <HAL_UART_MspInit+0x168>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <HAL_UART_MspInit+0x168>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef0 <HAL_UART_MspInit+0x168>)
 8000e42:	2280      	movs	r2, #128	@ 0x80
 8000e44:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef0 <HAL_UART_MspInit+0x168>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <HAL_UART_MspInit+0x168>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e52:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <HAL_UART_MspInit+0x168>)
 8000e54:	2220      	movs	r2, #32
 8000e56:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e58:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <HAL_UART_MspInit+0x168>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000e5e:	4824      	ldr	r0, [pc, #144]	@ (8000ef0 <HAL_UART_MspInit+0x168>)
 8000e60:	f000 faec 	bl	800143c <HAL_DMA_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000e6a:	f7ff ff63 	bl	8000d34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a1f      	ldr	r2, [pc, #124]	@ (8000ef0 <HAL_UART_MspInit+0x168>)
 8000e72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000e76:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef0 <HAL_UART_MspInit+0x168>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <HAL_UART_MspInit+0x170>)
 8000e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000efc <HAL_UART_MspInit+0x174>)
 8000e80:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000e82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <HAL_UART_MspInit+0x170>)
 8000e84:	2223      	movs	r2, #35	@ 0x23
 8000e86:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <HAL_UART_MspInit+0x170>)
 8000e8a:	2210      	movs	r2, #16
 8000e8c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <HAL_UART_MspInit+0x170>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e94:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <HAL_UART_MspInit+0x170>)
 8000e96:	2280      	movs	r2, #128	@ 0x80
 8000e98:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <HAL_UART_MspInit+0x170>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_UART_MspInit+0x170>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <HAL_UART_MspInit+0x170>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_UART_MspInit+0x170>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000eb2:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <HAL_UART_MspInit+0x170>)
 8000eb4:	f000 fac2 	bl	800143c <HAL_DMA_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000ebe:	f7ff ff39 	bl	8000d34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef8 <HAL_UART_MspInit+0x170>)
 8000ec6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef8 <HAL_UART_MspInit+0x170>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	205b      	movs	r0, #91	@ 0x5b
 8000ed4:	f000 fa7d 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000ed8:	205b      	movs	r0, #91	@ 0x5b
 8000eda:	f000 fa94 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3778      	adds	r7, #120	@ 0x78
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40008000 	.word	0x40008000
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	20000114 	.word	0x20000114
 8000ef4:	40020008 	.word	0x40020008
 8000ef8:	20000174 	.word	0x20000174
 8000efc:	4002001c 	.word	0x4002001c

08000f00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f8c <HAL_SPI_MspInit+0x8c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d130      	bne.n	8000f84 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f22:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <HAL_SPI_MspInit+0x90>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f26:	4a1a      	ldr	r2, [pc, #104]	@ (8000f90 <HAL_SPI_MspInit+0x90>)
 8000f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f2e:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <HAL_SPI_MspInit+0x90>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_SPI_MspInit+0x90>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <HAL_SPI_MspInit+0x90>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_SPI_MspInit+0x90>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000f52:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f64:	2306      	movs	r3, #6
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <HAL_SPI_MspInit+0x94>)
 8000f70:	f000 fcde 	bl	8001930 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	2033      	movs	r0, #51	@ 0x33
 8000f7a:	f000 fa2a 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000f7e:	2033      	movs	r0, #51	@ 0x33
 8000f80:	f000 fa41 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	@ 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40003c00 	.word	0x40003c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	48000800 	.word	0x48000800

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <NMI_Handler+0x4>

08000fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <MemManage_Handler+0x4>

08000fb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fee:	f000 f8f7 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <DMA1_Channel1_IRQHandler+0x10>)
 8000ffe:	f000 fb85 	bl	800170c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000114 	.word	0x20000114

0800100c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <DMA1_Channel2_IRQHandler+0x10>)
 8001012:	f000 fb7b 	bl	800170c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000174 	.word	0x20000174

08001020 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001024:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001028:	f000 fe34 	bl	8001c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <SPI3_IRQHandler+0x10>)
 8001036:	f001 ffdb 	bl	8002ff0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001d4 	.word	0x200001d4

08001044 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001048:	4802      	ldr	r0, [pc, #8]	@ (8001054 <LPUART1_IRQHandler+0x10>)
 800104a:	f002 fd45 	bl	8003ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000080 	.word	0x20000080

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	@ (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f003 ff10 	bl	8004eac <__errno>
 800108c:	4603      	mov	r3, r0
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20020000 	.word	0x20020000
 80010b8:	00000400 	.word	0x00000400
 80010bc:	200002ac 	.word	0x200002ac
 80010c0:	20000400 	.word	0x20000400

080010c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <SystemInit+0x20>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ce:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <SystemInit+0x20>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010e8:	480d      	ldr	r0, [pc, #52]	@ (8001120 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010ec:	f7ff ffea 	bl	80010c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f0:	480c      	ldr	r0, [pc, #48]	@ (8001124 <LoopForever+0x6>)
  ldr r1, =_edata
 80010f2:	490d      	ldr	r1, [pc, #52]	@ (8001128 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <LoopForever+0xe>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001108:	4c0a      	ldr	r4, [pc, #40]	@ (8001134 <LoopForever+0x16>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001116:	f003 fecf 	bl	8004eb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800111a:	f7ff fa51 	bl	80005c0 <main>

0800111e <LoopForever>:

LoopForever:
    b LoopForever
 800111e:	e7fe      	b.n	800111e <LoopForever>
  ldr   r0, =_estack
 8001120:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800112c:	080059dc 	.word	0x080059dc
  ldr r2, =_sbss
 8001130:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001134:	200003fc 	.word	0x200003fc

08001138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC1_2_IRQHandler>

0800113a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 f939 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f80e 	bl	800116c <HAL_InitTick>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	e001      	b.n	8001160 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800115c:	f7ff fdf0 	bl	8000d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001160:	79fb      	ldrb	r3, [r7, #7]

}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <HAL_InitTick+0x68>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d022      	beq.n	80011c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_InitTick+0x6c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <HAL_InitTick+0x68>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800118c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001190:	fbb2 f3f3 	udiv	r3, r2, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f944 	bl	8001422 <HAL_SYSTICK_Config>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10f      	bne.n	80011c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	d809      	bhi.n	80011ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a6:	2200      	movs	r2, #0
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	f04f 30ff 	mov.w	r0, #4294967295
 80011ae:	f000 f910 	bl	80013d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_InitTick+0x70>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	e007      	b.n	80011ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e004      	b.n	80011ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e001      	b.n	80011ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000010 	.word	0x20000010
 80011d8:	20000008 	.word	0x20000008
 80011dc:	2000000c 	.word	0x2000000c

080011e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_IncTick+0x1c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <HAL_IncTick+0x20>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a03      	ldr	r2, [pc, #12]	@ (80011fc <HAL_IncTick+0x1c>)
 80011f0:	6013      	str	r3, [r2, #0]
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200002b0 	.word	0x200002b0
 8001200:	20000010 	.word	0x20000010

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	@ (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	200002b0 	.word	0x200002b0

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	@ (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	@ (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	@ (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	@ 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff29 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff40 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ff90 	bl	8001310 <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff5f 	bl	80012bc <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff33 	bl	8001280 <__NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa4 	bl	8001378 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e08d      	b.n	800156a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	4b47      	ldr	r3, [pc, #284]	@ (8001574 <HAL_DMA_Init+0x138>)
 8001456:	429a      	cmp	r2, r3
 8001458:	d80f      	bhi.n	800147a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	4b45      	ldr	r3, [pc, #276]	@ (8001578 <HAL_DMA_Init+0x13c>)
 8001462:	4413      	add	r3, r2
 8001464:	4a45      	ldr	r2, [pc, #276]	@ (800157c <HAL_DMA_Init+0x140>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	009a      	lsls	r2, r3, #2
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a42      	ldr	r2, [pc, #264]	@ (8001580 <HAL_DMA_Init+0x144>)
 8001476:	641a      	str	r2, [r3, #64]	@ 0x40
 8001478:	e00e      	b.n	8001498 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	4b40      	ldr	r3, [pc, #256]	@ (8001584 <HAL_DMA_Init+0x148>)
 8001482:	4413      	add	r3, r2
 8001484:	4a3d      	ldr	r2, [pc, #244]	@ (800157c <HAL_DMA_Init+0x140>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	009a      	lsls	r2, r3, #2
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a3c      	ldr	r2, [pc, #240]	@ (8001588 <HAL_DMA_Init+0x14c>)
 8001496:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2202      	movs	r2, #2
 800149c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80014ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f9be 	bl	800186c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014f8:	d102      	bne.n	8001500 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001514:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d010      	beq.n	8001540 <HAL_DMA_Init+0x104>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b04      	cmp	r3, #4
 8001524:	d80c      	bhi.n	8001540 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f9de 	bl	80018e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	e008      	b.n	8001552 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40020407 	.word	0x40020407
 8001578:	bffdfff8 	.word	0xbffdfff8
 800157c:	cccccccd 	.word	0xcccccccd
 8001580:	40020000 	.word	0x40020000
 8001584:	bffdfbf8 	.word	0xbffdfbf8
 8001588:	40020400 	.word	0x40020400

0800158c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d005      	beq.n	80015b0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2204      	movs	r2, #4
 80015a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	e037      	b.n	8001620 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 020e 	bic.w	r2, r2, #14
 80015be:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015ce:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015fc:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00c      	beq.n	8001620 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001614:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800161e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d00d      	beq.n	8001672 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2204      	movs	r2, #4
 800165a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e047      	b.n	8001702 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 020e 	bic.w	r2, r2, #14
 8001680:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0201 	bic.w	r2, r2, #1
 8001690:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	f003 021f 	and.w	r2, r3, #31
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	2101      	movs	r1, #1
 80016b0:	fa01 f202 	lsl.w	r2, r1, r2
 80016b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00c      	beq.n	80016e2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	4798      	blx	r3
    }
  }
  return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	2204      	movs	r2, #4
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d026      	beq.n	8001786 <HAL_DMA_IRQHandler+0x7a>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	d021      	beq.n	8001786 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0320 	and.w	r3, r3, #32
 800174c:	2b00      	cmp	r3, #0
 800174e:	d107      	bne.n	8001760 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0204 	bic.w	r2, r2, #4
 800175e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	2104      	movs	r1, #4
 800176e:	fa01 f202 	lsl.w	r2, r1, r2
 8001772:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001778:	2b00      	cmp	r3, #0
 800177a:	d071      	beq.n	8001860 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001784:	e06c      	b.n	8001860 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	2202      	movs	r2, #2
 8001790:	409a      	lsls	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d02e      	beq.n	80017f8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d029      	beq.n	80017f8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0320 	and.w	r3, r3, #32
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10b      	bne.n	80017ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 020a 	bic.w	r2, r2, #10
 80017c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f003 021f 	and.w	r2, r3, #31
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	2102      	movs	r1, #2
 80017d8:	fa01 f202 	lsl.w	r2, r1, r2
 80017dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d038      	beq.n	8001860 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017f6:	e033      	b.n	8001860 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	2208      	movs	r2, #8
 8001802:	409a      	lsls	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d02a      	beq.n	8001862 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d025      	beq.n	8001862 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 020e 	bic.w	r2, r2, #14
 8001824:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182a:	f003 021f 	and.w	r2, r3, #31
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001854:	2b00      	cmp	r3, #0
 8001856:	d004      	beq.n	8001862 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001860:	bf00      	nop
 8001862:	bf00      	nop
}
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800187c:	429a      	cmp	r2, r3
 800187e:	d802      	bhi.n	8001886 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e001      	b.n	800188a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001888:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	3b08      	subs	r3, #8
 8001896:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	009a      	lsls	r2, r3, #2
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4413      	add	r3, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a0b      	ldr	r2, [pc, #44]	@ (80018e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80018b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	2201      	movs	r2, #1
 80018c0:	409a      	lsls	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40020407 	.word	0x40020407
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020820 	.word	0x40020820
 80018e0:	cccccccd 	.word	0xcccccccd
 80018e4:	40020880 	.word	0x40020880

080018e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	461a      	mov	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a08      	ldr	r2, [pc, #32]	@ (800192c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800190a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3b01      	subs	r3, #1
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	2201      	movs	r2, #1
 8001916:	409a      	lsls	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	1000823f 	.word	0x1000823f
 800192c:	40020940 	.word	0x40020940

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800193e:	e15a      	b.n	8001bf6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2101      	movs	r1, #1
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 814c 	beq.w	8001bf0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d005      	beq.n	8001970 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800196c:	2b02      	cmp	r3, #2
 800196e:	d130      	bne.n	80019d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019a6:	2201      	movs	r2, #1
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	f003 0201 	and.w	r2, r3, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d017      	beq.n	8001a0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d123      	bne.n	8001a62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3208      	adds	r2, #8
 8001a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	220f      	movs	r2, #15
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	6939      	ldr	r1, [r7, #16]
 8001a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0203 	and.w	r2, r3, #3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80a6 	beq.w	8001bf0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c14 <HAL_GPIO_Init+0x2e4>)
 8001aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8001c14 <HAL_GPIO_Init+0x2e4>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ab0:	4b58      	ldr	r3, [pc, #352]	@ (8001c14 <HAL_GPIO_Init+0x2e4>)
 8001ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001abc:	4a56      	ldr	r2, [pc, #344]	@ (8001c18 <HAL_GPIO_Init+0x2e8>)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ae6:	d01f      	beq.n	8001b28 <HAL_GPIO_Init+0x1f8>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a4c      	ldr	r2, [pc, #304]	@ (8001c1c <HAL_GPIO_Init+0x2ec>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d019      	beq.n	8001b24 <HAL_GPIO_Init+0x1f4>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a4b      	ldr	r2, [pc, #300]	@ (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_GPIO_Init+0x1f0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a4a      	ldr	r2, [pc, #296]	@ (8001c24 <HAL_GPIO_Init+0x2f4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00d      	beq.n	8001b1c <HAL_GPIO_Init+0x1ec>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a49      	ldr	r2, [pc, #292]	@ (8001c28 <HAL_GPIO_Init+0x2f8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d007      	beq.n	8001b18 <HAL_GPIO_Init+0x1e8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a48      	ldr	r2, [pc, #288]	@ (8001c2c <HAL_GPIO_Init+0x2fc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_GPIO_Init+0x1e4>
 8001b10:	2305      	movs	r3, #5
 8001b12:	e00a      	b.n	8001b2a <HAL_GPIO_Init+0x1fa>
 8001b14:	2306      	movs	r3, #6
 8001b16:	e008      	b.n	8001b2a <HAL_GPIO_Init+0x1fa>
 8001b18:	2304      	movs	r3, #4
 8001b1a:	e006      	b.n	8001b2a <HAL_GPIO_Init+0x1fa>
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e004      	b.n	8001b2a <HAL_GPIO_Init+0x1fa>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e002      	b.n	8001b2a <HAL_GPIO_Init+0x1fa>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_GPIO_Init+0x1fa>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	f002 0203 	and.w	r2, r2, #3
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	4093      	lsls	r3, r2
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b3a:	4937      	ldr	r1, [pc, #220]	@ (8001c18 <HAL_GPIO_Init+0x2e8>)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b48:	4b39      	ldr	r3, [pc, #228]	@ (8001c30 <HAL_GPIO_Init+0x300>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b6c:	4a30      	ldr	r2, [pc, #192]	@ (8001c30 <HAL_GPIO_Init+0x300>)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b72:	4b2f      	ldr	r3, [pc, #188]	@ (8001c30 <HAL_GPIO_Init+0x300>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b96:	4a26      	ldr	r2, [pc, #152]	@ (8001c30 <HAL_GPIO_Init+0x300>)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b9c:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <HAL_GPIO_Init+0x300>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c30 <HAL_GPIO_Init+0x300>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <HAL_GPIO_Init+0x300>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bea:	4a11      	ldr	r2, [pc, #68]	@ (8001c30 <HAL_GPIO_Init+0x300>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f47f ae9d 	bne.w	8001940 <HAL_GPIO_Init+0x10>
  }
}
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	48000400 	.word	0x48000400
 8001c20:	48000800 	.word	0x48000800
 8001c24:	48000c00 	.word	0x48000c00
 8001c28:	48001000 	.word	0x48001000
 8001c2c:	48001400 	.word	0x48001400
 8001c30:	40010400 	.word	0x40010400

08001c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e001      	b.n	8001c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
 8001c70:	4613      	mov	r3, r2
 8001c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c74:	787b      	ldrb	r3, [r7, #1]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c80:	e002      	b.n	8001c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d006      	beq.n	8001cb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f806 	bl	8001cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d141      	bne.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cea:	4b4b      	ldr	r3, [pc, #300]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cf6:	d131      	bne.n	8001d5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cf8:	4b47      	ldr	r3, [pc, #284]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cfe:	4a46      	ldr	r2, [pc, #280]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d08:	4b43      	ldr	r3, [pc, #268]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d10:	4a41      	ldr	r2, [pc, #260]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d18:	4b40      	ldr	r3, [pc, #256]	@ (8001e1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2232      	movs	r2, #50	@ 0x32
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	4a3f      	ldr	r2, [pc, #252]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	0c9b      	lsrs	r3, r3, #18
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d2e:	e002      	b.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d36:	4b38      	ldr	r3, [pc, #224]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d42:	d102      	bne.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f2      	bne.n	8001d30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d4a:	4b33      	ldr	r3, [pc, #204]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d56:	d158      	bne.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e057      	b.n	8001e0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d62:	4a2d      	ldr	r2, [pc, #180]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d6c:	e04d      	b.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d74:	d141      	bne.n	8001dfa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d76:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d82:	d131      	bne.n	8001de8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d84:	4b24      	ldr	r3, [pc, #144]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d8a:	4a23      	ldr	r2, [pc, #140]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d94:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001da2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2232      	movs	r2, #50	@ 0x32
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	4a1c      	ldr	r2, [pc, #112]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	0c9b      	lsrs	r3, r3, #18
 8001db6:	3301      	adds	r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dba:	e002      	b.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dc2:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dce:	d102      	bne.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f2      	bne.n	8001dbc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001de2:	d112      	bne.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e011      	b.n	8001e0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001de8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001df8:	e007      	b.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dfa:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e02:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	431bde83 	.word	0x431bde83

08001e24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a04      	ldr	r2, [pc, #16]	@ (8001e40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e32:	6093      	str	r3, [r2, #8]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40007000 	.word	0x40007000

08001e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e2fe      	b.n	8002454 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d075      	beq.n	8001f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e62:	4b97      	ldr	r3, [pc, #604]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e6c:	4b94      	ldr	r3, [pc, #592]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d102      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3e>
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d002      	beq.n	8001e88 <HAL_RCC_OscConfig+0x44>
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d10b      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	4b8d      	ldr	r3, [pc, #564]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d05b      	beq.n	8001f4c <HAL_RCC_OscConfig+0x108>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d157      	bne.n	8001f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e2d9      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea8:	d106      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x74>
 8001eaa:	4b85      	ldr	r3, [pc, #532]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a84      	ldr	r2, [pc, #528]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e01d      	b.n	8001ef4 <HAL_RCC_OscConfig+0xb0>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x98>
 8001ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a7e      	ldr	r2, [pc, #504]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b7c      	ldr	r3, [pc, #496]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7b      	ldr	r2, [pc, #492]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xb0>
 8001edc:	4b78      	ldr	r3, [pc, #480]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a77      	ldr	r2, [pc, #476]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b75      	ldr	r3, [pc, #468]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a74      	ldr	r2, [pc, #464]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff f982 	bl	8001204 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff f97e 	bl	8001204 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	@ 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e29e      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f16:	4b6a      	ldr	r3, [pc, #424]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0xc0>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff f96e 	bl	8001204 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7ff f96a 	bl	8001204 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	@ 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e28a      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f3e:	4b60      	ldr	r3, [pc, #384]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0xe8>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d075      	beq.n	8002046 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5a:	4b59      	ldr	r3, [pc, #356]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f64:	4b56      	ldr	r3, [pc, #344]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b0c      	cmp	r3, #12
 8001f72:	d102      	bne.n	8001f7a <HAL_RCC_OscConfig+0x136>
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_OscConfig+0x13c>
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d11f      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f80:	4b4f      	ldr	r3, [pc, #316]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_OscConfig+0x154>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e25d      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f98:	4b49      	ldr	r3, [pc, #292]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	061b      	lsls	r3, r3, #24
 8001fa6:	4946      	ldr	r1, [pc, #280]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fac:	4b45      	ldr	r3, [pc, #276]	@ (80020c4 <HAL_RCC_OscConfig+0x280>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff f8db 	bl	800116c <HAL_InitTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d043      	beq.n	8002044 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e249      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d023      	beq.n	8002010 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a3c      	ldr	r2, [pc, #240]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7ff f916 	bl	8001204 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7ff f912 	bl	8001204 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e232      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fee:	4b34      	ldr	r3, [pc, #208]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b31      	ldr	r3, [pc, #196]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	061b      	lsls	r3, r3, #24
 8002008:	492d      	ldr	r1, [pc, #180]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
 800200e:	e01a      	b.n	8002046 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002010:	4b2b      	ldr	r3, [pc, #172]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a2a      	ldr	r2, [pc, #168]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8002016:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800201a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff f8f2 	bl	8001204 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002024:	f7ff f8ee 	bl	8001204 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e20e      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002036:	4b22      	ldr	r3, [pc, #136]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x1e0>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002044:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d041      	beq.n	80020d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d01c      	beq.n	8002094 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205a:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 800205c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002060:	4a17      	ldr	r2, [pc, #92]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206a:	f7ff f8cb 	bl	8001204 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002072:	f7ff f8c7 	bl	8001204 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e1e7      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002084:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8002086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0ef      	beq.n	8002072 <HAL_RCC_OscConfig+0x22e>
 8002092:	e020      	b.n	80020d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002094:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8002096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800209a:	4a09      	ldr	r2, [pc, #36]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7ff f8ae 	bl	8001204 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020aa:	e00d      	b.n	80020c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ac:	f7ff f8aa 	bl	8001204 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d906      	bls.n	80020c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e1ca      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020c8:	4b8c      	ldr	r3, [pc, #560]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 80020ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1ea      	bne.n	80020ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80a6 	beq.w	8002230 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e4:	2300      	movs	r3, #0
 80020e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020e8:	4b84      	ldr	r3, [pc, #528]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_OscConfig+0x2b4>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x2b6>
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00d      	beq.n	800211a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	4b7f      	ldr	r3, [pc, #508]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002102:	4a7e      	ldr	r2, [pc, #504]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002108:	6593      	str	r3, [r2, #88]	@ 0x58
 800210a:	4b7c      	ldr	r3, [pc, #496]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002116:	2301      	movs	r3, #1
 8002118:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211a:	4b79      	ldr	r3, [pc, #484]	@ (8002300 <HAL_RCC_OscConfig+0x4bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d118      	bne.n	8002158 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002126:	4b76      	ldr	r3, [pc, #472]	@ (8002300 <HAL_RCC_OscConfig+0x4bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a75      	ldr	r2, [pc, #468]	@ (8002300 <HAL_RCC_OscConfig+0x4bc>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002132:	f7ff f867 	bl	8001204 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213a:	f7ff f863 	bl	8001204 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e183      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214c:	4b6c      	ldr	r3, [pc, #432]	@ (8002300 <HAL_RCC_OscConfig+0x4bc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d108      	bne.n	8002172 <HAL_RCC_OscConfig+0x32e>
 8002160:	4b66      	ldr	r3, [pc, #408]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002166:	4a65      	ldr	r2, [pc, #404]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002170:	e024      	b.n	80021bc <HAL_RCC_OscConfig+0x378>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d110      	bne.n	800219c <HAL_RCC_OscConfig+0x358>
 800217a:	4b60      	ldr	r3, [pc, #384]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002180:	4a5e      	ldr	r2, [pc, #376]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 8002182:	f043 0304 	orr.w	r3, r3, #4
 8002186:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800218a:	4b5c      	ldr	r3, [pc, #368]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002190:	4a5a      	ldr	r2, [pc, #360]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800219a:	e00f      	b.n	80021bc <HAL_RCC_OscConfig+0x378>
 800219c:	4b57      	ldr	r3, [pc, #348]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a2:	4a56      	ldr	r2, [pc, #344]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021ac:	4b53      	ldr	r3, [pc, #332]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b2:	4a52      	ldr	r2, [pc, #328]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d016      	beq.n	80021f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7ff f81e 	bl	8001204 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7ff f81a 	bl	8001204 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e138      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e2:	4b46      	ldr	r3, [pc, #280]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0ed      	beq.n	80021cc <HAL_RCC_OscConfig+0x388>
 80021f0:	e015      	b.n	800221e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f2:	f7ff f807 	bl	8001204 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7ff f803 	bl	8001204 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e121      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002210:	4b3a      	ldr	r3, [pc, #232]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1ed      	bne.n	80021fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800221e:	7ffb      	ldrb	r3, [r7, #31]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002224:	4b35      	ldr	r3, [pc, #212]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	4a34      	ldr	r2, [pc, #208]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 800222a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800222e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	2b00      	cmp	r3, #0
 800223a:	d03c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01c      	beq.n	800227e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002244:	4b2d      	ldr	r3, [pc, #180]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 8002246:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800224a:	4a2c      	ldr	r2, [pc, #176]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002254:	f7fe ffd6 	bl	8001204 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800225c:	f7fe ffd2 	bl	8001204 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e0f2      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800226e:	4b23      	ldr	r3, [pc, #140]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 8002270:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ef      	beq.n	800225c <HAL_RCC_OscConfig+0x418>
 800227c:	e01b      	b.n	80022b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800227e:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 8002280:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002284:	4a1d      	ldr	r2, [pc, #116]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228e:	f7fe ffb9 	bl	8001204 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002296:	f7fe ffb5 	bl	8001204 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e0d5      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022a8:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 80022aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1ef      	bne.n	8002296 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80c9 	beq.w	8002452 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022c0:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b0c      	cmp	r3, #12
 80022ca:	f000 8083 	beq.w	80023d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d15e      	bne.n	8002394 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a08      	ldr	r2, [pc, #32]	@ (80022fc <HAL_RCC_OscConfig+0x4b8>)
 80022dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e2:	f7fe ff8f 	bl	8001204 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e8:	e00c      	b.n	8002304 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7fe ff8b 	bl	8001204 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d905      	bls.n	8002304 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0ab      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
 80022fc:	40021000 	.word	0x40021000
 8002300:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	4b55      	ldr	r3, [pc, #340]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1ec      	bne.n	80022ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002310:	4b52      	ldr	r3, [pc, #328]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	4b52      	ldr	r3, [pc, #328]	@ (8002460 <HAL_RCC_OscConfig+0x61c>)
 8002316:	4013      	ands	r3, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6a11      	ldr	r1, [r2, #32]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002320:	3a01      	subs	r2, #1
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	4311      	orrs	r1, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800232a:	0212      	lsls	r2, r2, #8
 800232c:	4311      	orrs	r1, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002332:	0852      	lsrs	r2, r2, #1
 8002334:	3a01      	subs	r2, #1
 8002336:	0552      	lsls	r2, r2, #21
 8002338:	4311      	orrs	r1, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800233e:	0852      	lsrs	r2, r2, #1
 8002340:	3a01      	subs	r2, #1
 8002342:	0652      	lsls	r2, r2, #25
 8002344:	4311      	orrs	r1, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800234a:	06d2      	lsls	r2, r2, #27
 800234c:	430a      	orrs	r2, r1
 800234e:	4943      	ldr	r1, [pc, #268]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 8002350:	4313      	orrs	r3, r2
 8002352:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002354:	4b41      	ldr	r3, [pc, #260]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a40      	ldr	r2, [pc, #256]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 800235a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800235e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002360:	4b3e      	ldr	r3, [pc, #248]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a3d      	ldr	r2, [pc, #244]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 8002366:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800236a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe ff4a 	bl	8001204 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002374:	f7fe ff46 	bl	8001204 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e066      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002386:	4b35      	ldr	r3, [pc, #212]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x530>
 8002392:	e05e      	b.n	8002452 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002394:	4b31      	ldr	r3, [pc, #196]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a30      	ldr	r2, [pc, #192]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 800239a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800239e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe ff30 	bl	8001204 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fe ff2c 	bl	8001204 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e04c      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ba:	4b28      	ldr	r3, [pc, #160]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023c6:	4b25      	ldr	r3, [pc, #148]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	4924      	ldr	r1, [pc, #144]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 80023cc:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <HAL_RCC_OscConfig+0x620>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	60cb      	str	r3, [r1, #12]
 80023d2:	e03e      	b.n	8002452 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e039      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023e0:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <HAL_RCC_OscConfig+0x618>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d12c      	bne.n	800244e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	3b01      	subs	r3, #1
 8002400:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d123      	bne.n	800244e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d11b      	bne.n	800244e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d113      	bne.n	800244e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002430:	085b      	lsrs	r3, r3, #1
 8002432:	3b01      	subs	r3, #1
 8002434:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d109      	bne.n	800244e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	3b01      	subs	r3, #1
 8002448:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	019f800c 	.word	0x019f800c
 8002464:	feeefffc 	.word	0xfeeefffc

08002468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e11e      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b91      	ldr	r3, [pc, #580]	@ (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b8e      	ldr	r3, [pc, #568]	@ (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 020f 	bic.w	r2, r3, #15
 8002496:	498c      	ldr	r1, [pc, #560]	@ (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b8a      	ldr	r3, [pc, #552]	@ (80026c8 <HAL_RCC_ClockConfig+0x260>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e106      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d073      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d129      	bne.n	8002518 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c4:	4b81      	ldr	r3, [pc, #516]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0f4      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024d4:	f000 f99e 	bl	8002814 <RCC_GetSysClockFreqFromPLLSource>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4a7c      	ldr	r2, [pc, #496]	@ (80026d0 <HAL_RCC_ClockConfig+0x268>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d93f      	bls.n	8002562 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024e2:	4b7a      	ldr	r3, [pc, #488]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d033      	beq.n	8002562 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d12f      	bne.n	8002562 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002502:	4b72      	ldr	r3, [pc, #456]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800250a:	4a70      	ldr	r2, [pc, #448]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 800250c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002510:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e024      	b.n	8002562 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d107      	bne.n	8002530 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002520:	4b6a      	ldr	r3, [pc, #424]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0c6      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002530:	4b66      	ldr	r3, [pc, #408]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0be      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002540:	f000 f8ce 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 8002544:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4a61      	ldr	r2, [pc, #388]	@ (80026d0 <HAL_RCC_ClockConfig+0x268>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d909      	bls.n	8002562 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800254e:	4b5f      	ldr	r3, [pc, #380]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002556:	4a5d      	ldr	r2, [pc, #372]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800255c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b5a      	ldr	r3, [pc, #360]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4957      	ldr	r1, [pc, #348]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002574:	f7fe fe46 	bl	8001204 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7fe fe42 	bl	8001204 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e095      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b4e      	ldr	r3, [pc, #312]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d023      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025bc:	4b43      	ldr	r3, [pc, #268]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a42      	ldr	r2, [pc, #264]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 80025c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025d4:	4b3d      	ldr	r3, [pc, #244]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80025dc:	4a3b      	ldr	r2, [pc, #236]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 80025de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e4:	4b39      	ldr	r3, [pc, #228]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4936      	ldr	r1, [pc, #216]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
 80025f6:	e008      	b.n	800260a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b80      	cmp	r3, #128	@ 0x80
 80025fc:	d105      	bne.n	800260a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025fe:	4b33      	ldr	r3, [pc, #204]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	4a32      	ldr	r2, [pc, #200]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002604:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002608:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800260a:	4b2f      	ldr	r3, [pc, #188]	@ (80026c8 <HAL_RCC_ClockConfig+0x260>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d21d      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002618:	4b2b      	ldr	r3, [pc, #172]	@ (80026c8 <HAL_RCC_ClockConfig+0x260>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 020f 	bic.w	r2, r3, #15
 8002620:	4929      	ldr	r1, [pc, #164]	@ (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002628:	f7fe fdec 	bl	8001204 <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	e00a      	b.n	8002646 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002630:	f7fe fde8 	bl	8001204 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e03b      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d1ed      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4917      	ldr	r1, [pc, #92]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267e:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	490f      	ldr	r1, [pc, #60]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002692:	f000 f825 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 8002696:	4602      	mov	r2, r0
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <HAL_RCC_ClockConfig+0x264>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	490c      	ldr	r1, [pc, #48]	@ (80026d4 <HAL_RCC_ClockConfig+0x26c>)
 80026a4:	5ccb      	ldrb	r3, [r1, r3]
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	4a0a      	ldr	r2, [pc, #40]	@ (80026d8 <HAL_RCC_ClockConfig+0x270>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026b2:	4b0a      	ldr	r3, [pc, #40]	@ (80026dc <HAL_RCC_ClockConfig+0x274>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fd58 	bl	800116c <HAL_InitTick>
 80026bc:	4603      	mov	r3, r0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	04c4b400 	.word	0x04c4b400
 80026d4:	08005958 	.word	0x08005958
 80026d8:	20000008 	.word	0x20000008
 80026dc:	2000000c 	.word	0x2000000c

080026e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d102      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	@ (800279c <HAL_RCC_GetSysClockFreq+0xbc>)
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	e047      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026f8:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d102      	bne.n	800270a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002704:	4b26      	ldr	r3, [pc, #152]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	e03e      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800270a:	4b23      	ldr	r3, [pc, #140]	@ (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d136      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002716:	4b20      	ldr	r3, [pc, #128]	@ (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002720:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3301      	adds	r3, #1
 800272c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d10c      	bne.n	800274e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002734:	4a1a      	ldr	r2, [pc, #104]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	4a16      	ldr	r2, [pc, #88]	@ (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800273e:	68d2      	ldr	r2, [r2, #12]
 8002740:	0a12      	lsrs	r2, r2, #8
 8002742:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
      break;
 800274c:	e00c      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800274e:	4a13      	ldr	r2, [pc, #76]	@ (800279c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	4a10      	ldr	r2, [pc, #64]	@ (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002758:	68d2      	ldr	r2, [r2, #12]
 800275a:	0a12      	lsrs	r2, r2, #8
 800275c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
      break;
 8002766:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0e5b      	lsrs	r3, r3, #25
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	3301      	adds	r3, #1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	e001      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002788:	693b      	ldr	r3, [r7, #16]
}
 800278a:	4618      	mov	r0, r3
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	00f42400 	.word	0x00f42400
 80027a0:	016e3600 	.word	0x016e3600

080027a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a8:	4b03      	ldr	r3, [pc, #12]	@ (80027b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000008 	.word	0x20000008

080027bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027c0:	f7ff fff0 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4904      	ldr	r1, [pc, #16]	@ (80027e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08005968 	.word	0x08005968

080027e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027ec:	f7ff ffda 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0adb      	lsrs	r3, r3, #11
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4904      	ldr	r1, [pc, #16]	@ (8002810 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	08005968 	.word	0x08005968

08002814 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800281a:	4b1e      	ldr	r3, [pc, #120]	@ (8002894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002824:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3301      	adds	r3, #1
 8002830:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d10c      	bne.n	8002852 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002838:	4a17      	ldr	r2, [pc, #92]	@ (8002898 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	4a14      	ldr	r2, [pc, #80]	@ (8002894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002842:	68d2      	ldr	r2, [r2, #12]
 8002844:	0a12      	lsrs	r2, r2, #8
 8002846:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
    break;
 8002850:	e00c      	b.n	800286c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	4a0e      	ldr	r2, [pc, #56]	@ (8002894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800285c:	68d2      	ldr	r2, [r2, #12]
 800285e:	0a12      	lsrs	r2, r2, #8
 8002860:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
    break;
 800286a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800286c:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0e5b      	lsrs	r3, r3, #25
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	3301      	adds	r3, #1
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	fbb2 f3f3 	udiv	r3, r2, r3
 8002884:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002886:	687b      	ldr	r3, [r7, #4]
}
 8002888:	4618      	mov	r0, r3
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40021000 	.word	0x40021000
 8002898:	016e3600 	.word	0x016e3600
 800289c:	00f42400 	.word	0x00f42400

080028a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028a8:	2300      	movs	r3, #0
 80028aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028ac:	2300      	movs	r3, #0
 80028ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8098 	beq.w	80029ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c2:	4b43      	ldr	r3, [pc, #268]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10d      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	4b40      	ldr	r3, [pc, #256]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d2:	4a3f      	ldr	r2, [pc, #252]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028da:	4b3d      	ldr	r3, [pc, #244]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e6:	2301      	movs	r3, #1
 80028e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ea:	4b3a      	ldr	r3, [pc, #232]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a39      	ldr	r2, [pc, #228]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f6:	f7fe fc85 	bl	8001204 <HAL_GetTick>
 80028fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028fc:	e009      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fe:	f7fe fc81 	bl	8001204 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d902      	bls.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	74fb      	strb	r3, [r7, #19]
        break;
 8002910:	e005      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002912:	4b30      	ldr	r3, [pc, #192]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0ef      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d159      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002924:	4b2a      	ldr	r3, [pc, #168]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800292e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d01e      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	429a      	cmp	r2, r3
 800293e:	d019      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002940:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800294a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800294c:	4b20      	ldr	r3, [pc, #128]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002952:	4a1f      	ldr	r2, [pc, #124]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800295c:	4b1c      	ldr	r3, [pc, #112]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002962:	4a1b      	ldr	r2, [pc, #108]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800296c:	4a18      	ldr	r2, [pc, #96]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fc41 	bl	8001204 <HAL_GetTick>
 8002982:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002984:	e00b      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe fc3d 	bl	8001204 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d902      	bls.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	74fb      	strb	r3, [r7, #19]
            break;
 800299c:	e006      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299e:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0ec      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10b      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b2:	4b07      	ldr	r3, [pc, #28]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029c0:	4903      	ldr	r1, [pc, #12]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029c8:	e008      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	74bb      	strb	r3, [r7, #18]
 80029ce:	e005      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029dc:	7c7b      	ldrb	r3, [r7, #17]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e2:	4ba7      	ldr	r3, [pc, #668]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e6:	4aa6      	ldr	r2, [pc, #664]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029fa:	4ba1      	ldr	r3, [pc, #644]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a00:	f023 0203 	bic.w	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	499d      	ldr	r1, [pc, #628]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a1c:	4b98      	ldr	r3, [pc, #608]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a22:	f023 020c 	bic.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	4995      	ldr	r1, [pc, #596]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a3e:	4b90      	ldr	r3, [pc, #576]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a44:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	498c      	ldr	r1, [pc, #560]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a60:	4b87      	ldr	r3, [pc, #540]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	4984      	ldr	r1, [pc, #528]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a82:	4b7f      	ldr	r3, [pc, #508]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	497b      	ldr	r1, [pc, #492]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aa4:	4b76      	ldr	r3, [pc, #472]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aaa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	4973      	ldr	r1, [pc, #460]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002acc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	496a      	ldr	r1, [pc, #424]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ae8:	4b65      	ldr	r3, [pc, #404]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4962      	ldr	r1, [pc, #392]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	4959      	ldr	r1, [pc, #356]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b2c:	4b54      	ldr	r3, [pc, #336]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3a:	4951      	ldr	r1, [pc, #324]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	4948      	ldr	r1, [pc, #288]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d015      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b70:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	4940      	ldr	r1, [pc, #256]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b90:	4b3b      	ldr	r3, [pc, #236]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a3a      	ldr	r2, [pc, #232]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ba8:	4b35      	ldr	r3, [pc, #212]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb6:	4932      	ldr	r1, [pc, #200]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bd2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d015      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002be0:	4b27      	ldr	r3, [pc, #156]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bee:	4924      	ldr	r1, [pc, #144]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c00:	4b1f      	ldr	r3, [pc, #124]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a1e      	ldr	r2, [pc, #120]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d015      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c18:	4b19      	ldr	r3, [pc, #100]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c26:	4916      	ldr	r1, [pc, #88]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c36:	d105      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a10      	ldr	r2, [pc, #64]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d019      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	4908      	ldr	r1, [pc, #32]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c6e:	d109      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c70:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a02      	ldr	r2, [pc, #8]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c7a:	60d3      	str	r3, [r2, #12]
 8002c7c:	e002      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d015      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c90:	4b29      	ldr	r3, [pc, #164]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	4926      	ldr	r1, [pc, #152]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cae:	d105      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cb0:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4a20      	ldr	r2, [pc, #128]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd6:	4918      	ldr	r1, [pc, #96]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ce8:	4b13      	ldr	r3, [pc, #76]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d015      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d00:	4b0d      	ldr	r3, [pc, #52]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0e:	490a      	ldr	r1, [pc, #40]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d20:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a04      	ldr	r2, [pc, #16]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000

08002d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e09d      	b.n	8002e8a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d108      	bne.n	8002d68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d5e:	d009      	beq.n	8002d74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
 8002d66:	e005      	b.n	8002d74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe f8b6 	bl	8000f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002daa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002db4:	d902      	bls.n	8002dbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e002      	b.n	8002dc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002dbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002dca:	d007      	beq.n	8002ddc <HAL_SPI_Init+0xa0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dd4:	d002      	beq.n	8002ddc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1e:	ea42 0103 	orr.w	r1, r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	f003 0204 	and.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e58:	ea42 0103 	orr.w	r1, r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002eac:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002eb4:	7dbb      	ldrb	r3, [r7, #22]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d00d      	beq.n	8002ed6 <HAL_SPI_TransmitReceive_IT+0x42>
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ec0:	d106      	bne.n	8002ed0 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <HAL_SPI_TransmitReceive_IT+0x3c>
 8002eca:	7dbb      	ldrb	r3, [r7, #22]
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d002      	beq.n	8002ed6 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ed4:	e07d      	b.n	8002fd2 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_SPI_TransmitReceive_IT+0x54>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_SPI_TransmitReceive_IT+0x54>
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d102      	bne.n	8002eee <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e071      	b.n	8002fd2 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_SPI_TransmitReceive_IT+0x68>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e06b      	b.n	8002fd4 <HAL_SPI_TransmitReceive_IT+0x140>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d003      	beq.n	8002f18 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2205      	movs	r2, #5
 8002f14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	887a      	ldrh	r2, [r7, #2]
 8002f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	887a      	ldrh	r2, [r7, #2]
 8002f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	887a      	ldrh	r2, [r7, #2]
 8002f42:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f4e:	d906      	bls.n	8002f5e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a23      	ldr	r2, [pc, #140]	@ (8002fe0 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002f54:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a22      	ldr	r2, [pc, #136]	@ (8002fe4 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002f5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f5c:	e005      	b.n	8002f6a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a21      	ldr	r2, [pc, #132]	@ (8002fe8 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002f62:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4a21      	ldr	r2, [pc, #132]	@ (8002fec <HAL_SPI_TransmitReceive_IT+0x158>)
 8002f68:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f72:	d802      	bhi.n	8002f7a <HAL_SPI_TransmitReceive_IT+0xe6>
 8002f74:	887b      	ldrh	r3, [r7, #2]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d908      	bls.n	8002f8c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	e007      	b.n	8002f9c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f9a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa6:	2b40      	cmp	r3, #64	@ 0x40
 8002fa8:	d007      	beq.n	8002fba <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8002fd0:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	371c      	adds	r7, #28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	0800337b 	.word	0x0800337b
 8002fe4:	080033e1 	.word	0x080033e1
 8002fe8:	0800322b 	.word	0x0800322b
 8002fec:	080032e9 	.word	0x080032e9

08002ff0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10e      	bne.n	8003030 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d004      	beq.n	8003030 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
    return;
 800302e:	e0ce      	b.n	80031ce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_SPI_IRQHandler+0x5e>
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
    return;
 800304c:	e0bf      	b.n	80031ce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <HAL_SPI_IRQHandler+0x7e>
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80b0 	beq.w	80031ce <HAL_SPI_IRQHandler+0x1de>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80aa 	beq.w	80031ce <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	d023      	beq.n	80030cc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b03      	cmp	r3, #3
 800308e:	d011      	beq.n	80030b4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003094:	f043 0204 	orr.w	r2, r3, #4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	e00b      	b.n	80030cc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030b4:	2300      	movs	r3, #0
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
        return;
 80030ca:	e080      	b.n	80031ce <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d014      	beq.n	8003100 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310e:	f043 0208 	orr.w	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003128:	2b00      	cmp	r3, #0
 800312a:	d04f      	beq.n	80031cc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800313a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <HAL_SPI_IRQHandler+0x168>
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d034      	beq.n	80031c2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0203 	bic.w	r2, r2, #3
 8003166:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316c:	2b00      	cmp	r3, #0
 800316e:	d011      	beq.n	8003194 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	4a17      	ldr	r2, [pc, #92]	@ (80031d4 <HAL_SPI_IRQHandler+0x1e4>)
 8003176:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe fa5e 	bl	800163e <HAL_DMA_Abort_IT>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003198:	2b00      	cmp	r3, #0
 800319a:	d016      	beq.n	80031ca <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a0:	4a0c      	ldr	r2, [pc, #48]	@ (80031d4 <HAL_SPI_IRQHandler+0x1e4>)
 80031a2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe fa48 	bl	800163e <HAL_DMA_Abort_IT>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80031c0:	e003      	b.n	80031ca <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f812 	bl	80031ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80031c8:	e000      	b.n	80031cc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80031ca:	bf00      	nop
    return;
 80031cc:	bf00      	nop
  }
}
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	08003201 	.word	0x08003201

080031d8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f7ff ffe5 	bl	80031ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d923      	bls.n	8003286 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	b292      	uxth	r2, r2
 800324a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	1c9a      	adds	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b02      	subs	r3, #2
 8003260:	b29a      	uxth	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d11f      	bne.n	80032b4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	e016      	b.n	80032b4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f103 020c 	add.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	7812      	ldrb	r2, [r2, #0]
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10f      	bne.n	80032e0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032ce:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa14 	bl	8003708 <SPI_CloseRxTx_ISR>
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d912      	bls.n	8003320 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fe:	881a      	ldrh	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330a:	1c9a      	adds	r2, r3, #2
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b02      	subs	r3, #2
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800331e:	e012      	b.n	8003346 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	7812      	ldrb	r2, [r2, #0]
 800332c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d110      	bne.n	8003372 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800335e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f9cb 	bl	8003708 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	b292      	uxth	r2, r2
 800338e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	1c9a      	adds	r2, r3, #2
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10f      	bne.n	80033d8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033c6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f998 	bl	8003708 <SPI_CloseRxTx_ISR>
    }
  }
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ec:	881a      	ldrh	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	1c9a      	adds	r2, r3, #2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d110      	bne.n	8003438 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003424:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f968 	bl	8003708 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003450:	f7fd fed8 	bl	8001204 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	4413      	add	r3, r2
 800345e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003460:	f7fd fed0 	bl	8001204 <HAL_GetTick>
 8003464:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003466:	4b39      	ldr	r3, [pc, #228]	@ (800354c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	015b      	lsls	r3, r3, #5
 800346c:	0d1b      	lsrs	r3, r3, #20
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	fb02 f303 	mul.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003476:	e054      	b.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d050      	beq.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003480:	f7fd fec0 	bl	8001204 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	429a      	cmp	r2, r3
 800348e:	d902      	bls.n	8003496 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d13d      	bne.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ae:	d111      	bne.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034b8:	d004      	beq.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c2:	d107      	bne.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034dc:	d10f      	bne.n	80034fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e017      	b.n	8003542 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3b01      	subs	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4013      	ands	r3, r2
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	429a      	cmp	r2, r3
 8003530:	bf0c      	ite	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	2300      	movne	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	429a      	cmp	r2, r3
 800353e:	d19b      	bne.n	8003478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000008 	.word	0x20000008

08003550 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	@ 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003562:	f7fd fe4f 	bl	8001204 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	4413      	add	r3, r2
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003572:	f7fd fe47 	bl	8001204 <HAL_GetTick>
 8003576:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	330c      	adds	r3, #12
 800357e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003580:	4b3d      	ldr	r3, [pc, #244]	@ (8003678 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00da      	lsls	r2, r3, #3
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	0d1b      	lsrs	r3, r3, #20
 8003590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003598:	e060      	b.n	800365c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035a0:	d107      	bne.n	80035b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d104      	bne.n	80035b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d050      	beq.n	800365c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035ba:	f7fd fe23 	bl	8001204 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d902      	bls.n	80035d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d13d      	bne.n	800364c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035e8:	d111      	bne.n	800360e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035f2:	d004      	beq.n	80035fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035fc:	d107      	bne.n	800360e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800360c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003616:	d10f      	bne.n	8003638 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003636:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e010      	b.n	800366e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	3b01      	subs	r3, #1
 800365a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4013      	ands	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d196      	bne.n	800359a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3728      	adds	r7, #40	@ 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000008 	.word	0x20000008

0800367c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2200      	movs	r2, #0
 8003690:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff ff5b 	bl	8003550 <SPI_WaitFifoStateUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e027      	b.n	8003700 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2180      	movs	r1, #128	@ 0x80
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff fec0 	bl	8003440 <SPI_WaitFlagStateUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d007      	beq.n	80036d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e014      	b.n	8003700 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2200      	movs	r2, #0
 80036de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff ff34 	bl	8003550 <SPI_WaitFifoStateUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e000      	b.n	8003700 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003710:	f7fd fd78 	bl	8001204 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0220 	bic.w	r2, r2, #32
 8003724:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	2164      	movs	r1, #100	@ 0x64
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ffa6 	bl	800367c <SPI_EndRxTxTransaction>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373a:	f043 0220 	orr.w	r2, r3, #32
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003746:	2b00      	cmp	r3, #0
 8003748:	d115      	bne.n	8003776 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b04      	cmp	r3, #4
 8003754:	d107      	bne.n	8003766 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff fd3a 	bl	80031d8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003764:	e00e      	b.n	8003784 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd f980 	bl	8000a74 <HAL_SPI_TxRxCpltCallback>
}
 8003774:	e006      	b.n	8003784 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff fd34 	bl	80031ec <HAL_SPI_ErrorCallback>
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e042      	b.n	8003824 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fd fae9 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2224      	movs	r2, #36	@ 0x24
 80037ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 ffbe 	bl	8004758 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fcbf 	bl	8004160 <UART_SetConfig>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e01b      	b.n	8003824 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800380a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f001 f83d 	bl	800489c <UART_CheckIdleState>
 8003822:	4603      	mov	r3, r0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	@ 0x28
 8003830:	af02      	add	r7, sp, #8
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003842:	2b20      	cmp	r3, #32
 8003844:	d17b      	bne.n	800393e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_UART_Transmit+0x26>
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e074      	b.n	8003940 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2221      	movs	r2, #33	@ 0x21
 8003862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003866:	f7fd fccd 	bl	8001204 <HAL_GetTick>
 800386a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	88fa      	ldrh	r2, [r7, #6]
 8003878:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003884:	d108      	bne.n	8003898 <HAL_UART_Transmit+0x6c>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d104      	bne.n	8003898 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	e003      	b.n	80038a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038a0:	e030      	b.n	8003904 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2200      	movs	r2, #0
 80038aa:	2180      	movs	r1, #128	@ 0x80
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f001 f89f 	bl	80049f0 <UART_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e03d      	b.n	8003940 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10b      	bne.n	80038e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	3302      	adds	r3, #2
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	e007      	b.n	80038f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	3301      	adds	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1c8      	bne.n	80038a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	2140      	movs	r1, #64	@ 0x40
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f001 f868 	bl	80049f0 <UART_WaitOnFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e006      	b.n	8003940 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	@ 0x28
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800395e:	2b20      	cmp	r3, #32
 8003960:	f040 80b5 	bne.w	8003ace <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_UART_Receive+0x28>
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0ad      	b.n	8003ad0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2222      	movs	r2, #34	@ 0x22
 8003980:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398a:	f7fd fc3b 	bl	8001204 <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039a8:	d10e      	bne.n	80039c8 <HAL_UART_Receive+0x80>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <HAL_UART_Receive+0x76>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80039b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80039bc:	e02d      	b.n	8003a1a <HAL_UART_Receive+0xd2>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	22ff      	movs	r2, #255	@ 0xff
 80039c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80039c6:	e028      	b.n	8003a1a <HAL_UART_Receive+0xd2>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10d      	bne.n	80039ec <HAL_UART_Receive+0xa4>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <HAL_UART_Receive+0x9a>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	22ff      	movs	r2, #255	@ 0xff
 80039dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80039e0:	e01b      	b.n	8003a1a <HAL_UART_Receive+0xd2>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	227f      	movs	r2, #127	@ 0x7f
 80039e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80039ea:	e016      	b.n	8003a1a <HAL_UART_Receive+0xd2>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039f4:	d10d      	bne.n	8003a12 <HAL_UART_Receive+0xca>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d104      	bne.n	8003a08 <HAL_UART_Receive+0xc0>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	227f      	movs	r2, #127	@ 0x7f
 8003a02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a06:	e008      	b.n	8003a1a <HAL_UART_Receive+0xd2>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	223f      	movs	r2, #63	@ 0x3f
 8003a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a10:	e003      	b.n	8003a1a <HAL_UART_Receive+0xd2>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003a20:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a2a:	d108      	bne.n	8003a3e <HAL_UART_Receive+0xf6>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	e003      	b.n	8003a46 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a46:	e036      	b.n	8003ab6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2120      	movs	r1, #32
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 ffcc 	bl	80049f0 <UART_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e032      	b.n	8003ad0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10c      	bne.n	8003a8a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	8a7b      	ldrh	r3, [r7, #18]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	3302      	adds	r3, #2
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	e00c      	b.n	8003aa4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	8a7b      	ldrh	r3, [r7, #18]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	4013      	ands	r3, r2
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1c2      	bne.n	8003a48 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e000      	b.n	8003ad0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003ace:	2302      	movs	r3, #2
  }
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3720      	adds	r7, #32
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b0ba      	sub	sp, #232	@ 0xe8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003afe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003b02:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003b06:	4013      	ands	r3, r2
 8003b08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003b0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d11b      	bne.n	8003b4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d015      	beq.n	8003b4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d009      	beq.n	8003b4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 82e3 	beq.w	8004108 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4798      	blx	r3
      }
      return;
 8003b4a:	e2dd      	b.n	8004108 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8123 	beq.w	8003d9c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003b56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8003d90 <HAL_UART_IRQHandler+0x2b8>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003b62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003b66:	4b8b      	ldr	r3, [pc, #556]	@ (8003d94 <HAL_UART_IRQHandler+0x2bc>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8116 	beq.w	8003d9c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d011      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xc8>
 8003b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d011      	beq.n	8003bd0 <HAL_UART_IRQHandler+0xf8>
 8003bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc6:	f043 0204 	orr.w	r2, r3, #4
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d011      	beq.n	8003c00 <HAL_UART_IRQHandler+0x128>
 8003bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2204      	movs	r2, #4
 8003bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf6:	f043 0202 	orr.w	r2, r3, #2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d017      	beq.n	8003c3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003c18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003c1c:	4b5c      	ldr	r3, [pc, #368]	@ (8003d90 <HAL_UART_IRQHandler+0x2b8>)
 8003c1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	f043 0208 	orr.w	r2, r3, #8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <HAL_UART_IRQHandler+0x196>
 8003c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00c      	beq.n	8003c6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8249 	beq.w	800410c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d013      	beq.n	8003cae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d105      	bne.n	8003c9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc2:	2b40      	cmp	r3, #64	@ 0x40
 8003cc4:	d005      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d054      	beq.n	8003d7c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fef9 	bl	8004aca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d146      	bne.n	8003d74 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3308      	adds	r3, #8
 8003cec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1d9      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d017      	beq.n	8003d6c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d42:	4a15      	ldr	r2, [pc, #84]	@ (8003d98 <HAL_UART_IRQHandler+0x2c0>)
 8003d44:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fd fc76 	bl	800163e <HAL_DMA_Abort_IT>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d019      	beq.n	8003d8c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003d66:	4610      	mov	r0, r2
 8003d68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6a:	e00f      	b.n	8003d8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f9e1 	bl	8004134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d72:	e00b      	b.n	8003d8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f9dd 	bl	8004134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7a:	e007      	b.n	8003d8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f9d9 	bl	8004134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003d8a:	e1bf      	b.n	800410c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d8c:	bf00      	nop
    return;
 8003d8e:	e1bd      	b.n	800410c <HAL_UART_IRQHandler+0x634>
 8003d90:	10000001 	.word	0x10000001
 8003d94:	04000120 	.word	0x04000120
 8003d98:	08004b97 	.word	0x08004b97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	f040 8153 	bne.w	800404c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 814c 	beq.w	800404c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8145 	beq.w	800404c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd4:	2b40      	cmp	r3, #64	@ 0x40
 8003dd6:	f040 80bb 	bne.w	8003f50 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003de8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 818f 	beq.w	8004110 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003df8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	f080 8187 	bcs.w	8004110 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 8087 	bne.w	8003f2e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e4e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1da      	bne.n	8003e20 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3308      	adds	r3, #8
 8003e8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e1      	bne.n	8003e6a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003eca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ed0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ed8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e3      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003efc:	f023 0310 	bic.w	r3, r3, #16
 8003f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e4      	bne.n	8003eec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fd fb2f 	bl	800158c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2202      	movs	r2, #2
 8003f32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	4619      	mov	r1, r3
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8fd 	bl	8004148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f4e:	e0df      	b.n	8004110 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80d1 	beq.w	8004114 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003f72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80cc 	beq.w	8004114 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fa0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e4      	bne.n	8003f7c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003fda:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e1      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0310 	bic.w	r3, r3, #16
 8004016:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	69b9      	ldr	r1, [r7, #24]
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	617b      	str	r3, [r7, #20]
   return(result);
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e4      	bne.n	8004002 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800403e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f87f 	bl	8004148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800404a:	e063      	b.n	8004114 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800404c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004050:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00e      	beq.n	8004076 <HAL_UART_IRQHandler+0x59e>
 8004058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800405c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800406c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fdd2 	bl	8004c18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004074:	e051      	b.n	800411a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800407a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d014      	beq.n	80040ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	d105      	bne.n	800409a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800408e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d03a      	beq.n	8004118 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
    }
    return;
 80040aa:	e035      	b.n	8004118 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d009      	beq.n	80040cc <HAL_UART_IRQHandler+0x5f4>
 80040b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fd7c 	bl	8004bc2 <UART_EndTransmit_IT>
    return;
 80040ca:	e026      	b.n	800411a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80040cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d009      	beq.n	80040ec <HAL_UART_IRQHandler+0x614>
 80040d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fdab 	bl	8004c40 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040ea:	e016      	b.n	800411a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <HAL_UART_IRQHandler+0x642>
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	da0c      	bge.n	800411a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fd93 	bl	8004c2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004106:	e008      	b.n	800411a <HAL_UART_IRQHandler+0x642>
      return;
 8004108:	bf00      	nop
 800410a:	e006      	b.n	800411a <HAL_UART_IRQHandler+0x642>
    return;
 800410c:	bf00      	nop
 800410e:	e004      	b.n	800411a <HAL_UART_IRQHandler+0x642>
      return;
 8004110:	bf00      	nop
 8004112:	e002      	b.n	800411a <HAL_UART_IRQHandler+0x642>
      return;
 8004114:	bf00      	nop
 8004116:	e000      	b.n	800411a <HAL_UART_IRQHandler+0x642>
    return;
 8004118:	bf00      	nop
  }
}
 800411a:	37e8      	adds	r7, #232	@ 0xe8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004164:	b08c      	sub	sp, #48	@ 0x30
 8004166:	af00      	add	r7, sp, #0
 8004168:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	431a      	orrs	r2, r3
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	431a      	orrs	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	4313      	orrs	r3, r2
 8004186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4baa      	ldr	r3, [pc, #680]	@ (8004438 <UART_SetConfig+0x2d8>)
 8004190:	4013      	ands	r3, r2
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004198:	430b      	orrs	r3, r1
 800419a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a9f      	ldr	r2, [pc, #636]	@ (800443c <UART_SetConfig+0x2dc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041c8:	4313      	orrs	r3, r2
 80041ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80041d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	f023 010f 	bic.w	r1, r3, #15
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a90      	ldr	r2, [pc, #576]	@ (8004440 <UART_SetConfig+0x2e0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d125      	bne.n	8004250 <UART_SetConfig+0xf0>
 8004204:	4b8f      	ldr	r3, [pc, #572]	@ (8004444 <UART_SetConfig+0x2e4>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b03      	cmp	r3, #3
 8004210:	d81a      	bhi.n	8004248 <UART_SetConfig+0xe8>
 8004212:	a201      	add	r2, pc, #4	@ (adr r2, 8004218 <UART_SetConfig+0xb8>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	08004229 	.word	0x08004229
 800421c:	08004239 	.word	0x08004239
 8004220:	08004231 	.word	0x08004231
 8004224:	08004241 	.word	0x08004241
 8004228:	2301      	movs	r3, #1
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800422e:	e116      	b.n	800445e <UART_SetConfig+0x2fe>
 8004230:	2302      	movs	r3, #2
 8004232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004236:	e112      	b.n	800445e <UART_SetConfig+0x2fe>
 8004238:	2304      	movs	r3, #4
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800423e:	e10e      	b.n	800445e <UART_SetConfig+0x2fe>
 8004240:	2308      	movs	r3, #8
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004246:	e10a      	b.n	800445e <UART_SetConfig+0x2fe>
 8004248:	2310      	movs	r3, #16
 800424a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800424e:	e106      	b.n	800445e <UART_SetConfig+0x2fe>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a7c      	ldr	r2, [pc, #496]	@ (8004448 <UART_SetConfig+0x2e8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d138      	bne.n	80042cc <UART_SetConfig+0x16c>
 800425a:	4b7a      	ldr	r3, [pc, #488]	@ (8004444 <UART_SetConfig+0x2e4>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b0c      	cmp	r3, #12
 8004266:	d82d      	bhi.n	80042c4 <UART_SetConfig+0x164>
 8004268:	a201      	add	r2, pc, #4	@ (adr r2, 8004270 <UART_SetConfig+0x110>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	080042a5 	.word	0x080042a5
 8004274:	080042c5 	.word	0x080042c5
 8004278:	080042c5 	.word	0x080042c5
 800427c:	080042c5 	.word	0x080042c5
 8004280:	080042b5 	.word	0x080042b5
 8004284:	080042c5 	.word	0x080042c5
 8004288:	080042c5 	.word	0x080042c5
 800428c:	080042c5 	.word	0x080042c5
 8004290:	080042ad 	.word	0x080042ad
 8004294:	080042c5 	.word	0x080042c5
 8004298:	080042c5 	.word	0x080042c5
 800429c:	080042c5 	.word	0x080042c5
 80042a0:	080042bd 	.word	0x080042bd
 80042a4:	2300      	movs	r3, #0
 80042a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042aa:	e0d8      	b.n	800445e <UART_SetConfig+0x2fe>
 80042ac:	2302      	movs	r3, #2
 80042ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042b2:	e0d4      	b.n	800445e <UART_SetConfig+0x2fe>
 80042b4:	2304      	movs	r3, #4
 80042b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ba:	e0d0      	b.n	800445e <UART_SetConfig+0x2fe>
 80042bc:	2308      	movs	r3, #8
 80042be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042c2:	e0cc      	b.n	800445e <UART_SetConfig+0x2fe>
 80042c4:	2310      	movs	r3, #16
 80042c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ca:	e0c8      	b.n	800445e <UART_SetConfig+0x2fe>
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a5e      	ldr	r2, [pc, #376]	@ (800444c <UART_SetConfig+0x2ec>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d125      	bne.n	8004322 <UART_SetConfig+0x1c2>
 80042d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004444 <UART_SetConfig+0x2e4>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042e0:	2b30      	cmp	r3, #48	@ 0x30
 80042e2:	d016      	beq.n	8004312 <UART_SetConfig+0x1b2>
 80042e4:	2b30      	cmp	r3, #48	@ 0x30
 80042e6:	d818      	bhi.n	800431a <UART_SetConfig+0x1ba>
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d00a      	beq.n	8004302 <UART_SetConfig+0x1a2>
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	d814      	bhi.n	800431a <UART_SetConfig+0x1ba>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <UART_SetConfig+0x19a>
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d008      	beq.n	800430a <UART_SetConfig+0x1aa>
 80042f8:	e00f      	b.n	800431a <UART_SetConfig+0x1ba>
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004300:	e0ad      	b.n	800445e <UART_SetConfig+0x2fe>
 8004302:	2302      	movs	r3, #2
 8004304:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004308:	e0a9      	b.n	800445e <UART_SetConfig+0x2fe>
 800430a:	2304      	movs	r3, #4
 800430c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004310:	e0a5      	b.n	800445e <UART_SetConfig+0x2fe>
 8004312:	2308      	movs	r3, #8
 8004314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004318:	e0a1      	b.n	800445e <UART_SetConfig+0x2fe>
 800431a:	2310      	movs	r3, #16
 800431c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004320:	e09d      	b.n	800445e <UART_SetConfig+0x2fe>
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a4a      	ldr	r2, [pc, #296]	@ (8004450 <UART_SetConfig+0x2f0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d125      	bne.n	8004378 <UART_SetConfig+0x218>
 800432c:	4b45      	ldr	r3, [pc, #276]	@ (8004444 <UART_SetConfig+0x2e4>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004332:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004336:	2bc0      	cmp	r3, #192	@ 0xc0
 8004338:	d016      	beq.n	8004368 <UART_SetConfig+0x208>
 800433a:	2bc0      	cmp	r3, #192	@ 0xc0
 800433c:	d818      	bhi.n	8004370 <UART_SetConfig+0x210>
 800433e:	2b80      	cmp	r3, #128	@ 0x80
 8004340:	d00a      	beq.n	8004358 <UART_SetConfig+0x1f8>
 8004342:	2b80      	cmp	r3, #128	@ 0x80
 8004344:	d814      	bhi.n	8004370 <UART_SetConfig+0x210>
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <UART_SetConfig+0x1f0>
 800434a:	2b40      	cmp	r3, #64	@ 0x40
 800434c:	d008      	beq.n	8004360 <UART_SetConfig+0x200>
 800434e:	e00f      	b.n	8004370 <UART_SetConfig+0x210>
 8004350:	2300      	movs	r3, #0
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004356:	e082      	b.n	800445e <UART_SetConfig+0x2fe>
 8004358:	2302      	movs	r3, #2
 800435a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435e:	e07e      	b.n	800445e <UART_SetConfig+0x2fe>
 8004360:	2304      	movs	r3, #4
 8004362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004366:	e07a      	b.n	800445e <UART_SetConfig+0x2fe>
 8004368:	2308      	movs	r3, #8
 800436a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800436e:	e076      	b.n	800445e <UART_SetConfig+0x2fe>
 8004370:	2310      	movs	r3, #16
 8004372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004376:	e072      	b.n	800445e <UART_SetConfig+0x2fe>
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a35      	ldr	r2, [pc, #212]	@ (8004454 <UART_SetConfig+0x2f4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d12a      	bne.n	80043d8 <UART_SetConfig+0x278>
 8004382:	4b30      	ldr	r3, [pc, #192]	@ (8004444 <UART_SetConfig+0x2e4>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800438c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004390:	d01a      	beq.n	80043c8 <UART_SetConfig+0x268>
 8004392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004396:	d81b      	bhi.n	80043d0 <UART_SetConfig+0x270>
 8004398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800439c:	d00c      	beq.n	80043b8 <UART_SetConfig+0x258>
 800439e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a2:	d815      	bhi.n	80043d0 <UART_SetConfig+0x270>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <UART_SetConfig+0x250>
 80043a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ac:	d008      	beq.n	80043c0 <UART_SetConfig+0x260>
 80043ae:	e00f      	b.n	80043d0 <UART_SetConfig+0x270>
 80043b0:	2300      	movs	r3, #0
 80043b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043b6:	e052      	b.n	800445e <UART_SetConfig+0x2fe>
 80043b8:	2302      	movs	r3, #2
 80043ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043be:	e04e      	b.n	800445e <UART_SetConfig+0x2fe>
 80043c0:	2304      	movs	r3, #4
 80043c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043c6:	e04a      	b.n	800445e <UART_SetConfig+0x2fe>
 80043c8:	2308      	movs	r3, #8
 80043ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ce:	e046      	b.n	800445e <UART_SetConfig+0x2fe>
 80043d0:	2310      	movs	r3, #16
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d6:	e042      	b.n	800445e <UART_SetConfig+0x2fe>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a17      	ldr	r2, [pc, #92]	@ (800443c <UART_SetConfig+0x2dc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d13a      	bne.n	8004458 <UART_SetConfig+0x2f8>
 80043e2:	4b18      	ldr	r3, [pc, #96]	@ (8004444 <UART_SetConfig+0x2e4>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043f0:	d01a      	beq.n	8004428 <UART_SetConfig+0x2c8>
 80043f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043f6:	d81b      	bhi.n	8004430 <UART_SetConfig+0x2d0>
 80043f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043fc:	d00c      	beq.n	8004418 <UART_SetConfig+0x2b8>
 80043fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004402:	d815      	bhi.n	8004430 <UART_SetConfig+0x2d0>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <UART_SetConfig+0x2b0>
 8004408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800440c:	d008      	beq.n	8004420 <UART_SetConfig+0x2c0>
 800440e:	e00f      	b.n	8004430 <UART_SetConfig+0x2d0>
 8004410:	2300      	movs	r3, #0
 8004412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004416:	e022      	b.n	800445e <UART_SetConfig+0x2fe>
 8004418:	2302      	movs	r3, #2
 800441a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441e:	e01e      	b.n	800445e <UART_SetConfig+0x2fe>
 8004420:	2304      	movs	r3, #4
 8004422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004426:	e01a      	b.n	800445e <UART_SetConfig+0x2fe>
 8004428:	2308      	movs	r3, #8
 800442a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442e:	e016      	b.n	800445e <UART_SetConfig+0x2fe>
 8004430:	2310      	movs	r3, #16
 8004432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004436:	e012      	b.n	800445e <UART_SetConfig+0x2fe>
 8004438:	cfff69f3 	.word	0xcfff69f3
 800443c:	40008000 	.word	0x40008000
 8004440:	40013800 	.word	0x40013800
 8004444:	40021000 	.word	0x40021000
 8004448:	40004400 	.word	0x40004400
 800444c:	40004800 	.word	0x40004800
 8004450:	40004c00 	.word	0x40004c00
 8004454:	40005000 	.word	0x40005000
 8004458:	2310      	movs	r3, #16
 800445a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4aae      	ldr	r2, [pc, #696]	@ (800471c <UART_SetConfig+0x5bc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	f040 8097 	bne.w	8004598 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800446a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800446e:	2b08      	cmp	r3, #8
 8004470:	d823      	bhi.n	80044ba <UART_SetConfig+0x35a>
 8004472:	a201      	add	r2, pc, #4	@ (adr r2, 8004478 <UART_SetConfig+0x318>)
 8004474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004478:	0800449d 	.word	0x0800449d
 800447c:	080044bb 	.word	0x080044bb
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044bb 	.word	0x080044bb
 8004488:	080044ab 	.word	0x080044ab
 800448c:	080044bb 	.word	0x080044bb
 8004490:	080044bb 	.word	0x080044bb
 8004494:	080044bb 	.word	0x080044bb
 8004498:	080044b3 	.word	0x080044b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800449c:	f7fe f98e 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 80044a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044a2:	e010      	b.n	80044c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a4:	4b9e      	ldr	r3, [pc, #632]	@ (8004720 <UART_SetConfig+0x5c0>)
 80044a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044a8:	e00d      	b.n	80044c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044aa:	f7fe f919 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 80044ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044b0:	e009      	b.n	80044c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044b8:	e005      	b.n	80044c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8130 	beq.w	800472e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	4a94      	ldr	r2, [pc, #592]	@ (8004724 <UART_SetConfig+0x5c4>)
 80044d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044d8:	461a      	mov	r2, r3
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d305      	bcc.n	80044fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d903      	bls.n	8004506 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004504:	e113      	b.n	800472e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	2200      	movs	r2, #0
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	60fa      	str	r2, [r7, #12]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	4a84      	ldr	r2, [pc, #528]	@ (8004724 <UART_SetConfig+0x5c4>)
 8004514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004518:	b29b      	uxth	r3, r3
 800451a:	2200      	movs	r2, #0
 800451c:	603b      	str	r3, [r7, #0]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004524:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004528:	f7fb fed2 	bl	80002d0 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	020b      	lsls	r3, r1, #8
 800453e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004542:	0202      	lsls	r2, r0, #8
 8004544:	6979      	ldr	r1, [r7, #20]
 8004546:	6849      	ldr	r1, [r1, #4]
 8004548:	0849      	lsrs	r1, r1, #1
 800454a:	2000      	movs	r0, #0
 800454c:	460c      	mov	r4, r1
 800454e:	4605      	mov	r5, r0
 8004550:	eb12 0804 	adds.w	r8, r2, r4
 8004554:	eb43 0905 	adc.w	r9, r3, r5
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	469a      	mov	sl, r3
 8004560:	4693      	mov	fp, r2
 8004562:	4652      	mov	r2, sl
 8004564:	465b      	mov	r3, fp
 8004566:	4640      	mov	r0, r8
 8004568:	4649      	mov	r1, r9
 800456a:	f7fb feb1 	bl	80002d0 <__aeabi_uldivmod>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4613      	mov	r3, r2
 8004574:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800457c:	d308      	bcc.n	8004590 <UART_SetConfig+0x430>
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004584:	d204      	bcs.n	8004590 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a3a      	ldr	r2, [r7, #32]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	e0ce      	b.n	800472e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004596:	e0ca      	b.n	800472e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045a0:	d166      	bne.n	8004670 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80045a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d827      	bhi.n	80045fa <UART_SetConfig+0x49a>
 80045aa:	a201      	add	r2, pc, #4	@ (adr r2, 80045b0 <UART_SetConfig+0x450>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	080045dd 	.word	0x080045dd
 80045b8:	080045e5 	.word	0x080045e5
 80045bc:	080045fb 	.word	0x080045fb
 80045c0:	080045eb 	.word	0x080045eb
 80045c4:	080045fb 	.word	0x080045fb
 80045c8:	080045fb 	.word	0x080045fb
 80045cc:	080045fb 	.word	0x080045fb
 80045d0:	080045f3 	.word	0x080045f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d4:	f7fe f8f2 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 80045d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045da:	e014      	b.n	8004606 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045dc:	f7fe f904 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 80045e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045e2:	e010      	b.n	8004606 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004720 <UART_SetConfig+0x5c0>)
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045e8:	e00d      	b.n	8004606 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ea:	f7fe f879 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 80045ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045f0:	e009      	b.n	8004606 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045f8:	e005      	b.n	8004606 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004604:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8090 	beq.w	800472e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	4a44      	ldr	r2, [pc, #272]	@ (8004724 <UART_SetConfig+0x5c4>)
 8004614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004618:	461a      	mov	r2, r3
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004620:	005a      	lsls	r2, r3, #1
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	441a      	add	r2, r3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	d916      	bls.n	8004668 <UART_SetConfig+0x508>
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004640:	d212      	bcs.n	8004668 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f023 030f 	bic.w	r3, r3, #15
 800464a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	b29b      	uxth	r3, r3
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	b29a      	uxth	r2, r3
 8004658:	8bfb      	ldrh	r3, [r7, #30]
 800465a:	4313      	orrs	r3, r2
 800465c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	8bfa      	ldrh	r2, [r7, #30]
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	e062      	b.n	800472e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800466e:	e05e      	b.n	800472e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004670:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004674:	2b08      	cmp	r3, #8
 8004676:	d828      	bhi.n	80046ca <UART_SetConfig+0x56a>
 8004678:	a201      	add	r2, pc, #4	@ (adr r2, 8004680 <UART_SetConfig+0x520>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046b5 	.word	0x080046b5
 800468c:	080046cb 	.word	0x080046cb
 8004690:	080046bb 	.word	0x080046bb
 8004694:	080046cb 	.word	0x080046cb
 8004698:	080046cb 	.word	0x080046cb
 800469c:	080046cb 	.word	0x080046cb
 80046a0:	080046c3 	.word	0x080046c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a4:	f7fe f88a 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 80046a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046aa:	e014      	b.n	80046d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ac:	f7fe f89c 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 80046b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046b2:	e010      	b.n	80046d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004720 <UART_SetConfig+0x5c0>)
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046b8:	e00d      	b.n	80046d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ba:	f7fe f811 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 80046be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046c0:	e009      	b.n	80046d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046c8:	e005      	b.n	80046d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046d4:	bf00      	nop
    }

    if (pclk != 0U)
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d028      	beq.n	800472e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	4a10      	ldr	r2, [pc, #64]	@ (8004724 <UART_SetConfig+0x5c4>)
 80046e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046e6:	461a      	mov	r2, r3
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	441a      	add	r2, r3
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	2b0f      	cmp	r3, #15
 8004704:	d910      	bls.n	8004728 <UART_SetConfig+0x5c8>
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470c:	d20c      	bcs.n	8004728 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	b29a      	uxth	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60da      	str	r2, [r3, #12]
 8004718:	e009      	b.n	800472e <UART_SetConfig+0x5ce>
 800471a:	bf00      	nop
 800471c:	40008000 	.word	0x40008000
 8004720:	00f42400 	.word	0x00f42400
 8004724:	08005970 	.word	0x08005970
      }
      else
      {
        ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2201      	movs	r2, #1
 8004732:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2201      	movs	r2, #1
 800473a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2200      	movs	r2, #0
 8004742:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2200      	movs	r2, #0
 8004748:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800474a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800474e:	4618      	mov	r0, r3
 8004750:	3730      	adds	r7, #48	@ 0x30
 8004752:	46bd      	mov	sp, r7
 8004754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01a      	beq.n	800486e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004856:	d10a      	bne.n	800486e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	605a      	str	r2, [r3, #4]
  }
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b098      	sub	sp, #96	@ 0x60
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048ac:	f7fc fcaa 	bl	8001204 <HAL_GetTick>
 80048b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d12f      	bne.n	8004920 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c8:	2200      	movs	r2, #0
 80048ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f88e 	bl	80049f0 <UART_WaitOnFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d022      	beq.n	8004920 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e6      	bne.n	80048da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e063      	b.n	80049e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b04      	cmp	r3, #4
 800492c:	d149      	bne.n	80049c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800492e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004936:	2200      	movs	r2, #0
 8004938:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f857 	bl	80049f0 <UART_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d03c      	beq.n	80049c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	623b      	str	r3, [r7, #32]
   return(result);
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800495c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004966:	633b      	str	r3, [r7, #48]	@ 0x30
 8004968:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800496c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e6      	bne.n	8004948 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3308      	adds	r3, #8
 8004980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	60fb      	str	r3, [r7, #12]
   return(result);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3308      	adds	r3, #8
 8004998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800499a:	61fa      	str	r2, [r7, #28]
 800499c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	69b9      	ldr	r1, [r7, #24]
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	617b      	str	r3, [r7, #20]
   return(result);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e5      	bne.n	800497a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e012      	b.n	80049e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3758      	adds	r7, #88	@ 0x58
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a00:	e04f      	b.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d04b      	beq.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0a:	f7fc fbfb 	bl	8001204 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d302      	bcc.n	8004a20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e04e      	b.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d037      	beq.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b80      	cmp	r3, #128	@ 0x80
 8004a36:	d034      	beq.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b40      	cmp	r3, #64	@ 0x40
 8004a3c:	d031      	beq.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d110      	bne.n	8004a6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2208      	movs	r2, #8
 8004a52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f838 	bl	8004aca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e029      	b.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a7c:	d111      	bne.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f81e 	bl	8004aca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e00f      	b.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	2300      	movne	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d0a0      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b095      	sub	sp, #84	@ 0x54
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004af0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004af2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004af6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e6      	bne.n	8004ad2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3308      	adds	r3, #8
 8004b26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e3      	bne.n	8004b04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d118      	bne.n	8004b76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f023 0310 	bic.w	r3, r3, #16
 8004b58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6979      	ldr	r1, [r7, #20]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e6      	bne.n	8004b44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b8a:	bf00      	nop
 8004b8c:	3754      	adds	r7, #84	@ 0x54
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7ff fabd 	bl	8004134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b088      	sub	sp, #32
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6979      	ldr	r1, [r7, #20]
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e6      	bne.n	8004bca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fa88 	bl	8004120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c10:	bf00      	nop
 8004c12:	3720      	adds	r7, #32
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_UARTEx_DisableFifoMode+0x16>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e027      	b.n	8004cba <HAL_UARTEx_DisableFifoMode+0x66>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2224      	movs	r2, #36	@ 0x24
 8004c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0201 	bic.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004c98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e02d      	b.n	8004d3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2224      	movs	r2, #36	@ 0x24
 8004cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f850 	bl	8004dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e02d      	b.n	8004db6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2224      	movs	r2, #36	@ 0x24
 8004d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f812 	bl	8004dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d108      	bne.n	8004de2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004de0:	e031      	b.n	8004e46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004de2:	2308      	movs	r3, #8
 8004de4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004de6:	2308      	movs	r3, #8
 8004de8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	0e5b      	lsrs	r3, r3, #25
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	0f5b      	lsrs	r3, r3, #29
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e0a:	7bbb      	ldrb	r3, [r7, #14]
 8004e0c:	7b3a      	ldrb	r2, [r7, #12]
 8004e0e:	4911      	ldr	r1, [pc, #68]	@ (8004e54 <UARTEx_SetNbDataToProcess+0x94>)
 8004e10:	5c8a      	ldrb	r2, [r1, r2]
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e16:	7b3a      	ldrb	r2, [r7, #12]
 8004e18:	490f      	ldr	r1, [pc, #60]	@ (8004e58 <UARTEx_SetNbDataToProcess+0x98>)
 8004e1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	7b7a      	ldrb	r2, [r7, #13]
 8004e2c:	4909      	ldr	r1, [pc, #36]	@ (8004e54 <UARTEx_SetNbDataToProcess+0x94>)
 8004e2e:	5c8a      	ldrb	r2, [r1, r2]
 8004e30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e34:	7b7a      	ldrb	r2, [r7, #13]
 8004e36:	4908      	ldr	r1, [pc, #32]	@ (8004e58 <UARTEx_SetNbDataToProcess+0x98>)
 8004e38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	08005988 	.word	0x08005988
 8004e58:	08005990 	.word	0x08005990

08004e5c <siprintf>:
 8004e5c:	b40e      	push	{r1, r2, r3}
 8004e5e:	b500      	push	{lr}
 8004e60:	b09c      	sub	sp, #112	@ 0x70
 8004e62:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e64:	9002      	str	r0, [sp, #8]
 8004e66:	9006      	str	r0, [sp, #24]
 8004e68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e6c:	4809      	ldr	r0, [pc, #36]	@ (8004e94 <siprintf+0x38>)
 8004e6e:	9107      	str	r1, [sp, #28]
 8004e70:	9104      	str	r1, [sp, #16]
 8004e72:	4909      	ldr	r1, [pc, #36]	@ (8004e98 <siprintf+0x3c>)
 8004e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e78:	9105      	str	r1, [sp, #20]
 8004e7a:	6800      	ldr	r0, [r0, #0]
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	a902      	add	r1, sp, #8
 8004e80:	f000 f994 	bl	80051ac <_svfiprintf_r>
 8004e84:	9b02      	ldr	r3, [sp, #8]
 8004e86:	2200      	movs	r2, #0
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	b01c      	add	sp, #112	@ 0x70
 8004e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e90:	b003      	add	sp, #12
 8004e92:	4770      	bx	lr
 8004e94:	20000014 	.word	0x20000014
 8004e98:	ffff0208 	.word	0xffff0208

08004e9c <memset>:
 8004e9c:	4402      	add	r2, r0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d100      	bne.n	8004ea6 <memset+0xa>
 8004ea4:	4770      	bx	lr
 8004ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eaa:	e7f9      	b.n	8004ea0 <memset+0x4>

08004eac <__errno>:
 8004eac:	4b01      	ldr	r3, [pc, #4]	@ (8004eb4 <__errno+0x8>)
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20000014 	.word	0x20000014

08004eb8 <__libc_init_array>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	4d0d      	ldr	r5, [pc, #52]	@ (8004ef0 <__libc_init_array+0x38>)
 8004ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8004ef4 <__libc_init_array+0x3c>)
 8004ebe:	1b64      	subs	r4, r4, r5
 8004ec0:	10a4      	asrs	r4, r4, #2
 8004ec2:	2600      	movs	r6, #0
 8004ec4:	42a6      	cmp	r6, r4
 8004ec6:	d109      	bne.n	8004edc <__libc_init_array+0x24>
 8004ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8004ef8 <__libc_init_array+0x40>)
 8004eca:	4c0c      	ldr	r4, [pc, #48]	@ (8004efc <__libc_init_array+0x44>)
 8004ecc:	f000 fc66 	bl	800579c <_init>
 8004ed0:	1b64      	subs	r4, r4, r5
 8004ed2:	10a4      	asrs	r4, r4, #2
 8004ed4:	2600      	movs	r6, #0
 8004ed6:	42a6      	cmp	r6, r4
 8004ed8:	d105      	bne.n	8004ee6 <__libc_init_array+0x2e>
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee0:	4798      	blx	r3
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	e7ee      	b.n	8004ec4 <__libc_init_array+0xc>
 8004ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eea:	4798      	blx	r3
 8004eec:	3601      	adds	r6, #1
 8004eee:	e7f2      	b.n	8004ed6 <__libc_init_array+0x1e>
 8004ef0:	080059d4 	.word	0x080059d4
 8004ef4:	080059d4 	.word	0x080059d4
 8004ef8:	080059d4 	.word	0x080059d4
 8004efc:	080059d8 	.word	0x080059d8

08004f00 <__retarget_lock_acquire_recursive>:
 8004f00:	4770      	bx	lr

08004f02 <__retarget_lock_release_recursive>:
 8004f02:	4770      	bx	lr

08004f04 <_free_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4605      	mov	r5, r0
 8004f08:	2900      	cmp	r1, #0
 8004f0a:	d041      	beq.n	8004f90 <_free_r+0x8c>
 8004f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f10:	1f0c      	subs	r4, r1, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bfb8      	it	lt
 8004f16:	18e4      	addlt	r4, r4, r3
 8004f18:	f000 f8e0 	bl	80050dc <__malloc_lock>
 8004f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f94 <_free_r+0x90>)
 8004f1e:	6813      	ldr	r3, [r2, #0]
 8004f20:	b933      	cbnz	r3, 8004f30 <_free_r+0x2c>
 8004f22:	6063      	str	r3, [r4, #4]
 8004f24:	6014      	str	r4, [r2, #0]
 8004f26:	4628      	mov	r0, r5
 8004f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f2c:	f000 b8dc 	b.w	80050e8 <__malloc_unlock>
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	d908      	bls.n	8004f46 <_free_r+0x42>
 8004f34:	6820      	ldr	r0, [r4, #0]
 8004f36:	1821      	adds	r1, r4, r0
 8004f38:	428b      	cmp	r3, r1
 8004f3a:	bf01      	itttt	eq
 8004f3c:	6819      	ldreq	r1, [r3, #0]
 8004f3e:	685b      	ldreq	r3, [r3, #4]
 8004f40:	1809      	addeq	r1, r1, r0
 8004f42:	6021      	streq	r1, [r4, #0]
 8004f44:	e7ed      	b.n	8004f22 <_free_r+0x1e>
 8004f46:	461a      	mov	r2, r3
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	b10b      	cbz	r3, 8004f50 <_free_r+0x4c>
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	d9fa      	bls.n	8004f46 <_free_r+0x42>
 8004f50:	6811      	ldr	r1, [r2, #0]
 8004f52:	1850      	adds	r0, r2, r1
 8004f54:	42a0      	cmp	r0, r4
 8004f56:	d10b      	bne.n	8004f70 <_free_r+0x6c>
 8004f58:	6820      	ldr	r0, [r4, #0]
 8004f5a:	4401      	add	r1, r0
 8004f5c:	1850      	adds	r0, r2, r1
 8004f5e:	4283      	cmp	r3, r0
 8004f60:	6011      	str	r1, [r2, #0]
 8004f62:	d1e0      	bne.n	8004f26 <_free_r+0x22>
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	6053      	str	r3, [r2, #4]
 8004f6a:	4408      	add	r0, r1
 8004f6c:	6010      	str	r0, [r2, #0]
 8004f6e:	e7da      	b.n	8004f26 <_free_r+0x22>
 8004f70:	d902      	bls.n	8004f78 <_free_r+0x74>
 8004f72:	230c      	movs	r3, #12
 8004f74:	602b      	str	r3, [r5, #0]
 8004f76:	e7d6      	b.n	8004f26 <_free_r+0x22>
 8004f78:	6820      	ldr	r0, [r4, #0]
 8004f7a:	1821      	adds	r1, r4, r0
 8004f7c:	428b      	cmp	r3, r1
 8004f7e:	bf04      	itt	eq
 8004f80:	6819      	ldreq	r1, [r3, #0]
 8004f82:	685b      	ldreq	r3, [r3, #4]
 8004f84:	6063      	str	r3, [r4, #4]
 8004f86:	bf04      	itt	eq
 8004f88:	1809      	addeq	r1, r1, r0
 8004f8a:	6021      	streq	r1, [r4, #0]
 8004f8c:	6054      	str	r4, [r2, #4]
 8004f8e:	e7ca      	b.n	8004f26 <_free_r+0x22>
 8004f90:	bd38      	pop	{r3, r4, r5, pc}
 8004f92:	bf00      	nop
 8004f94:	200003f8 	.word	0x200003f8

08004f98 <sbrk_aligned>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8004fd8 <sbrk_aligned+0x40>)
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	6831      	ldr	r1, [r6, #0]
 8004fa0:	4605      	mov	r5, r0
 8004fa2:	b911      	cbnz	r1, 8004faa <sbrk_aligned+0x12>
 8004fa4:	f000 fba6 	bl	80056f4 <_sbrk_r>
 8004fa8:	6030      	str	r0, [r6, #0]
 8004faa:	4621      	mov	r1, r4
 8004fac:	4628      	mov	r0, r5
 8004fae:	f000 fba1 	bl	80056f4 <_sbrk_r>
 8004fb2:	1c43      	adds	r3, r0, #1
 8004fb4:	d103      	bne.n	8004fbe <sbrk_aligned+0x26>
 8004fb6:	f04f 34ff 	mov.w	r4, #4294967295
 8004fba:	4620      	mov	r0, r4
 8004fbc:	bd70      	pop	{r4, r5, r6, pc}
 8004fbe:	1cc4      	adds	r4, r0, #3
 8004fc0:	f024 0403 	bic.w	r4, r4, #3
 8004fc4:	42a0      	cmp	r0, r4
 8004fc6:	d0f8      	beq.n	8004fba <sbrk_aligned+0x22>
 8004fc8:	1a21      	subs	r1, r4, r0
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f000 fb92 	bl	80056f4 <_sbrk_r>
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d1f2      	bne.n	8004fba <sbrk_aligned+0x22>
 8004fd4:	e7ef      	b.n	8004fb6 <sbrk_aligned+0x1e>
 8004fd6:	bf00      	nop
 8004fd8:	200003f4 	.word	0x200003f4

08004fdc <_malloc_r>:
 8004fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe0:	1ccd      	adds	r5, r1, #3
 8004fe2:	f025 0503 	bic.w	r5, r5, #3
 8004fe6:	3508      	adds	r5, #8
 8004fe8:	2d0c      	cmp	r5, #12
 8004fea:	bf38      	it	cc
 8004fec:	250c      	movcc	r5, #12
 8004fee:	2d00      	cmp	r5, #0
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	db01      	blt.n	8004ff8 <_malloc_r+0x1c>
 8004ff4:	42a9      	cmp	r1, r5
 8004ff6:	d904      	bls.n	8005002 <_malloc_r+0x26>
 8004ff8:	230c      	movs	r3, #12
 8004ffa:	6033      	str	r3, [r6, #0]
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050d8 <_malloc_r+0xfc>
 8005006:	f000 f869 	bl	80050dc <__malloc_lock>
 800500a:	f8d8 3000 	ldr.w	r3, [r8]
 800500e:	461c      	mov	r4, r3
 8005010:	bb44      	cbnz	r4, 8005064 <_malloc_r+0x88>
 8005012:	4629      	mov	r1, r5
 8005014:	4630      	mov	r0, r6
 8005016:	f7ff ffbf 	bl	8004f98 <sbrk_aligned>
 800501a:	1c43      	adds	r3, r0, #1
 800501c:	4604      	mov	r4, r0
 800501e:	d158      	bne.n	80050d2 <_malloc_r+0xf6>
 8005020:	f8d8 4000 	ldr.w	r4, [r8]
 8005024:	4627      	mov	r7, r4
 8005026:	2f00      	cmp	r7, #0
 8005028:	d143      	bne.n	80050b2 <_malloc_r+0xd6>
 800502a:	2c00      	cmp	r4, #0
 800502c:	d04b      	beq.n	80050c6 <_malloc_r+0xea>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	4639      	mov	r1, r7
 8005032:	4630      	mov	r0, r6
 8005034:	eb04 0903 	add.w	r9, r4, r3
 8005038:	f000 fb5c 	bl	80056f4 <_sbrk_r>
 800503c:	4581      	cmp	r9, r0
 800503e:	d142      	bne.n	80050c6 <_malloc_r+0xea>
 8005040:	6821      	ldr	r1, [r4, #0]
 8005042:	1a6d      	subs	r5, r5, r1
 8005044:	4629      	mov	r1, r5
 8005046:	4630      	mov	r0, r6
 8005048:	f7ff ffa6 	bl	8004f98 <sbrk_aligned>
 800504c:	3001      	adds	r0, #1
 800504e:	d03a      	beq.n	80050c6 <_malloc_r+0xea>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	442b      	add	r3, r5
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	f8d8 3000 	ldr.w	r3, [r8]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	bb62      	cbnz	r2, 80050b8 <_malloc_r+0xdc>
 800505e:	f8c8 7000 	str.w	r7, [r8]
 8005062:	e00f      	b.n	8005084 <_malloc_r+0xa8>
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	1b52      	subs	r2, r2, r5
 8005068:	d420      	bmi.n	80050ac <_malloc_r+0xd0>
 800506a:	2a0b      	cmp	r2, #11
 800506c:	d917      	bls.n	800509e <_malloc_r+0xc2>
 800506e:	1961      	adds	r1, r4, r5
 8005070:	42a3      	cmp	r3, r4
 8005072:	6025      	str	r5, [r4, #0]
 8005074:	bf18      	it	ne
 8005076:	6059      	strne	r1, [r3, #4]
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	bf08      	it	eq
 800507c:	f8c8 1000 	streq.w	r1, [r8]
 8005080:	5162      	str	r2, [r4, r5]
 8005082:	604b      	str	r3, [r1, #4]
 8005084:	4630      	mov	r0, r6
 8005086:	f000 f82f 	bl	80050e8 <__malloc_unlock>
 800508a:	f104 000b 	add.w	r0, r4, #11
 800508e:	1d23      	adds	r3, r4, #4
 8005090:	f020 0007 	bic.w	r0, r0, #7
 8005094:	1ac2      	subs	r2, r0, r3
 8005096:	bf1c      	itt	ne
 8005098:	1a1b      	subne	r3, r3, r0
 800509a:	50a3      	strne	r3, [r4, r2]
 800509c:	e7af      	b.n	8004ffe <_malloc_r+0x22>
 800509e:	6862      	ldr	r2, [r4, #4]
 80050a0:	42a3      	cmp	r3, r4
 80050a2:	bf0c      	ite	eq
 80050a4:	f8c8 2000 	streq.w	r2, [r8]
 80050a8:	605a      	strne	r2, [r3, #4]
 80050aa:	e7eb      	b.n	8005084 <_malloc_r+0xa8>
 80050ac:	4623      	mov	r3, r4
 80050ae:	6864      	ldr	r4, [r4, #4]
 80050b0:	e7ae      	b.n	8005010 <_malloc_r+0x34>
 80050b2:	463c      	mov	r4, r7
 80050b4:	687f      	ldr	r7, [r7, #4]
 80050b6:	e7b6      	b.n	8005026 <_malloc_r+0x4a>
 80050b8:	461a      	mov	r2, r3
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	42a3      	cmp	r3, r4
 80050be:	d1fb      	bne.n	80050b8 <_malloc_r+0xdc>
 80050c0:	2300      	movs	r3, #0
 80050c2:	6053      	str	r3, [r2, #4]
 80050c4:	e7de      	b.n	8005084 <_malloc_r+0xa8>
 80050c6:	230c      	movs	r3, #12
 80050c8:	6033      	str	r3, [r6, #0]
 80050ca:	4630      	mov	r0, r6
 80050cc:	f000 f80c 	bl	80050e8 <__malloc_unlock>
 80050d0:	e794      	b.n	8004ffc <_malloc_r+0x20>
 80050d2:	6005      	str	r5, [r0, #0]
 80050d4:	e7d6      	b.n	8005084 <_malloc_r+0xa8>
 80050d6:	bf00      	nop
 80050d8:	200003f8 	.word	0x200003f8

080050dc <__malloc_lock>:
 80050dc:	4801      	ldr	r0, [pc, #4]	@ (80050e4 <__malloc_lock+0x8>)
 80050de:	f7ff bf0f 	b.w	8004f00 <__retarget_lock_acquire_recursive>
 80050e2:	bf00      	nop
 80050e4:	200003f0 	.word	0x200003f0

080050e8 <__malloc_unlock>:
 80050e8:	4801      	ldr	r0, [pc, #4]	@ (80050f0 <__malloc_unlock+0x8>)
 80050ea:	f7ff bf0a 	b.w	8004f02 <__retarget_lock_release_recursive>
 80050ee:	bf00      	nop
 80050f0:	200003f0 	.word	0x200003f0

080050f4 <__ssputs_r>:
 80050f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f8:	688e      	ldr	r6, [r1, #8]
 80050fa:	461f      	mov	r7, r3
 80050fc:	42be      	cmp	r6, r7
 80050fe:	680b      	ldr	r3, [r1, #0]
 8005100:	4682      	mov	sl, r0
 8005102:	460c      	mov	r4, r1
 8005104:	4690      	mov	r8, r2
 8005106:	d82d      	bhi.n	8005164 <__ssputs_r+0x70>
 8005108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800510c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005110:	d026      	beq.n	8005160 <__ssputs_r+0x6c>
 8005112:	6965      	ldr	r5, [r4, #20]
 8005114:	6909      	ldr	r1, [r1, #16]
 8005116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800511a:	eba3 0901 	sub.w	r9, r3, r1
 800511e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005122:	1c7b      	adds	r3, r7, #1
 8005124:	444b      	add	r3, r9
 8005126:	106d      	asrs	r5, r5, #1
 8005128:	429d      	cmp	r5, r3
 800512a:	bf38      	it	cc
 800512c:	461d      	movcc	r5, r3
 800512e:	0553      	lsls	r3, r2, #21
 8005130:	d527      	bpl.n	8005182 <__ssputs_r+0x8e>
 8005132:	4629      	mov	r1, r5
 8005134:	f7ff ff52 	bl	8004fdc <_malloc_r>
 8005138:	4606      	mov	r6, r0
 800513a:	b360      	cbz	r0, 8005196 <__ssputs_r+0xa2>
 800513c:	6921      	ldr	r1, [r4, #16]
 800513e:	464a      	mov	r2, r9
 8005140:	f000 fae8 	bl	8005714 <memcpy>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800514a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514e:	81a3      	strh	r3, [r4, #12]
 8005150:	6126      	str	r6, [r4, #16]
 8005152:	6165      	str	r5, [r4, #20]
 8005154:	444e      	add	r6, r9
 8005156:	eba5 0509 	sub.w	r5, r5, r9
 800515a:	6026      	str	r6, [r4, #0]
 800515c:	60a5      	str	r5, [r4, #8]
 800515e:	463e      	mov	r6, r7
 8005160:	42be      	cmp	r6, r7
 8005162:	d900      	bls.n	8005166 <__ssputs_r+0x72>
 8005164:	463e      	mov	r6, r7
 8005166:	6820      	ldr	r0, [r4, #0]
 8005168:	4632      	mov	r2, r6
 800516a:	4641      	mov	r1, r8
 800516c:	f000 faa8 	bl	80056c0 <memmove>
 8005170:	68a3      	ldr	r3, [r4, #8]
 8005172:	1b9b      	subs	r3, r3, r6
 8005174:	60a3      	str	r3, [r4, #8]
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	4433      	add	r3, r6
 800517a:	6023      	str	r3, [r4, #0]
 800517c:	2000      	movs	r0, #0
 800517e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005182:	462a      	mov	r2, r5
 8005184:	f000 fad4 	bl	8005730 <_realloc_r>
 8005188:	4606      	mov	r6, r0
 800518a:	2800      	cmp	r0, #0
 800518c:	d1e0      	bne.n	8005150 <__ssputs_r+0x5c>
 800518e:	6921      	ldr	r1, [r4, #16]
 8005190:	4650      	mov	r0, sl
 8005192:	f7ff feb7 	bl	8004f04 <_free_r>
 8005196:	230c      	movs	r3, #12
 8005198:	f8ca 3000 	str.w	r3, [sl]
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051a2:	81a3      	strh	r3, [r4, #12]
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	e7e9      	b.n	800517e <__ssputs_r+0x8a>
	...

080051ac <_svfiprintf_r>:
 80051ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	4698      	mov	r8, r3
 80051b2:	898b      	ldrh	r3, [r1, #12]
 80051b4:	061b      	lsls	r3, r3, #24
 80051b6:	b09d      	sub	sp, #116	@ 0x74
 80051b8:	4607      	mov	r7, r0
 80051ba:	460d      	mov	r5, r1
 80051bc:	4614      	mov	r4, r2
 80051be:	d510      	bpl.n	80051e2 <_svfiprintf_r+0x36>
 80051c0:	690b      	ldr	r3, [r1, #16]
 80051c2:	b973      	cbnz	r3, 80051e2 <_svfiprintf_r+0x36>
 80051c4:	2140      	movs	r1, #64	@ 0x40
 80051c6:	f7ff ff09 	bl	8004fdc <_malloc_r>
 80051ca:	6028      	str	r0, [r5, #0]
 80051cc:	6128      	str	r0, [r5, #16]
 80051ce:	b930      	cbnz	r0, 80051de <_svfiprintf_r+0x32>
 80051d0:	230c      	movs	r3, #12
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	f04f 30ff 	mov.w	r0, #4294967295
 80051d8:	b01d      	add	sp, #116	@ 0x74
 80051da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051de:	2340      	movs	r3, #64	@ 0x40
 80051e0:	616b      	str	r3, [r5, #20]
 80051e2:	2300      	movs	r3, #0
 80051e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80051e6:	2320      	movs	r3, #32
 80051e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80051f0:	2330      	movs	r3, #48	@ 0x30
 80051f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005390 <_svfiprintf_r+0x1e4>
 80051f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051fa:	f04f 0901 	mov.w	r9, #1
 80051fe:	4623      	mov	r3, r4
 8005200:	469a      	mov	sl, r3
 8005202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005206:	b10a      	cbz	r2, 800520c <_svfiprintf_r+0x60>
 8005208:	2a25      	cmp	r2, #37	@ 0x25
 800520a:	d1f9      	bne.n	8005200 <_svfiprintf_r+0x54>
 800520c:	ebba 0b04 	subs.w	fp, sl, r4
 8005210:	d00b      	beq.n	800522a <_svfiprintf_r+0x7e>
 8005212:	465b      	mov	r3, fp
 8005214:	4622      	mov	r2, r4
 8005216:	4629      	mov	r1, r5
 8005218:	4638      	mov	r0, r7
 800521a:	f7ff ff6b 	bl	80050f4 <__ssputs_r>
 800521e:	3001      	adds	r0, #1
 8005220:	f000 80a7 	beq.w	8005372 <_svfiprintf_r+0x1c6>
 8005224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005226:	445a      	add	r2, fp
 8005228:	9209      	str	r2, [sp, #36]	@ 0x24
 800522a:	f89a 3000 	ldrb.w	r3, [sl]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 809f 	beq.w	8005372 <_svfiprintf_r+0x1c6>
 8005234:	2300      	movs	r3, #0
 8005236:	f04f 32ff 	mov.w	r2, #4294967295
 800523a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800523e:	f10a 0a01 	add.w	sl, sl, #1
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	9307      	str	r3, [sp, #28]
 8005246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800524a:	931a      	str	r3, [sp, #104]	@ 0x68
 800524c:	4654      	mov	r4, sl
 800524e:	2205      	movs	r2, #5
 8005250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005254:	484e      	ldr	r0, [pc, #312]	@ (8005390 <_svfiprintf_r+0x1e4>)
 8005256:	f7fa ffeb 	bl	8000230 <memchr>
 800525a:	9a04      	ldr	r2, [sp, #16]
 800525c:	b9d8      	cbnz	r0, 8005296 <_svfiprintf_r+0xea>
 800525e:	06d0      	lsls	r0, r2, #27
 8005260:	bf44      	itt	mi
 8005262:	2320      	movmi	r3, #32
 8005264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005268:	0711      	lsls	r1, r2, #28
 800526a:	bf44      	itt	mi
 800526c:	232b      	movmi	r3, #43	@ 0x2b
 800526e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005272:	f89a 3000 	ldrb.w	r3, [sl]
 8005276:	2b2a      	cmp	r3, #42	@ 0x2a
 8005278:	d015      	beq.n	80052a6 <_svfiprintf_r+0xfa>
 800527a:	9a07      	ldr	r2, [sp, #28]
 800527c:	4654      	mov	r4, sl
 800527e:	2000      	movs	r0, #0
 8005280:	f04f 0c0a 	mov.w	ip, #10
 8005284:	4621      	mov	r1, r4
 8005286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800528a:	3b30      	subs	r3, #48	@ 0x30
 800528c:	2b09      	cmp	r3, #9
 800528e:	d94b      	bls.n	8005328 <_svfiprintf_r+0x17c>
 8005290:	b1b0      	cbz	r0, 80052c0 <_svfiprintf_r+0x114>
 8005292:	9207      	str	r2, [sp, #28]
 8005294:	e014      	b.n	80052c0 <_svfiprintf_r+0x114>
 8005296:	eba0 0308 	sub.w	r3, r0, r8
 800529a:	fa09 f303 	lsl.w	r3, r9, r3
 800529e:	4313      	orrs	r3, r2
 80052a0:	9304      	str	r3, [sp, #16]
 80052a2:	46a2      	mov	sl, r4
 80052a4:	e7d2      	b.n	800524c <_svfiprintf_r+0xa0>
 80052a6:	9b03      	ldr	r3, [sp, #12]
 80052a8:	1d19      	adds	r1, r3, #4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	9103      	str	r1, [sp, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bfbb      	ittet	lt
 80052b2:	425b      	neglt	r3, r3
 80052b4:	f042 0202 	orrlt.w	r2, r2, #2
 80052b8:	9307      	strge	r3, [sp, #28]
 80052ba:	9307      	strlt	r3, [sp, #28]
 80052bc:	bfb8      	it	lt
 80052be:	9204      	strlt	r2, [sp, #16]
 80052c0:	7823      	ldrb	r3, [r4, #0]
 80052c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80052c4:	d10a      	bne.n	80052dc <_svfiprintf_r+0x130>
 80052c6:	7863      	ldrb	r3, [r4, #1]
 80052c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80052ca:	d132      	bne.n	8005332 <_svfiprintf_r+0x186>
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	1d1a      	adds	r2, r3, #4
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	9203      	str	r2, [sp, #12]
 80052d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052d8:	3402      	adds	r4, #2
 80052da:	9305      	str	r3, [sp, #20]
 80052dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80053a0 <_svfiprintf_r+0x1f4>
 80052e0:	7821      	ldrb	r1, [r4, #0]
 80052e2:	2203      	movs	r2, #3
 80052e4:	4650      	mov	r0, sl
 80052e6:	f7fa ffa3 	bl	8000230 <memchr>
 80052ea:	b138      	cbz	r0, 80052fc <_svfiprintf_r+0x150>
 80052ec:	9b04      	ldr	r3, [sp, #16]
 80052ee:	eba0 000a 	sub.w	r0, r0, sl
 80052f2:	2240      	movs	r2, #64	@ 0x40
 80052f4:	4082      	lsls	r2, r0
 80052f6:	4313      	orrs	r3, r2
 80052f8:	3401      	adds	r4, #1
 80052fa:	9304      	str	r3, [sp, #16]
 80052fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005300:	4824      	ldr	r0, [pc, #144]	@ (8005394 <_svfiprintf_r+0x1e8>)
 8005302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005306:	2206      	movs	r2, #6
 8005308:	f7fa ff92 	bl	8000230 <memchr>
 800530c:	2800      	cmp	r0, #0
 800530e:	d036      	beq.n	800537e <_svfiprintf_r+0x1d2>
 8005310:	4b21      	ldr	r3, [pc, #132]	@ (8005398 <_svfiprintf_r+0x1ec>)
 8005312:	bb1b      	cbnz	r3, 800535c <_svfiprintf_r+0x1b0>
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	3307      	adds	r3, #7
 8005318:	f023 0307 	bic.w	r3, r3, #7
 800531c:	3308      	adds	r3, #8
 800531e:	9303      	str	r3, [sp, #12]
 8005320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005322:	4433      	add	r3, r6
 8005324:	9309      	str	r3, [sp, #36]	@ 0x24
 8005326:	e76a      	b.n	80051fe <_svfiprintf_r+0x52>
 8005328:	fb0c 3202 	mla	r2, ip, r2, r3
 800532c:	460c      	mov	r4, r1
 800532e:	2001      	movs	r0, #1
 8005330:	e7a8      	b.n	8005284 <_svfiprintf_r+0xd8>
 8005332:	2300      	movs	r3, #0
 8005334:	3401      	adds	r4, #1
 8005336:	9305      	str	r3, [sp, #20]
 8005338:	4619      	mov	r1, r3
 800533a:	f04f 0c0a 	mov.w	ip, #10
 800533e:	4620      	mov	r0, r4
 8005340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005344:	3a30      	subs	r2, #48	@ 0x30
 8005346:	2a09      	cmp	r2, #9
 8005348:	d903      	bls.n	8005352 <_svfiprintf_r+0x1a6>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0c6      	beq.n	80052dc <_svfiprintf_r+0x130>
 800534e:	9105      	str	r1, [sp, #20]
 8005350:	e7c4      	b.n	80052dc <_svfiprintf_r+0x130>
 8005352:	fb0c 2101 	mla	r1, ip, r1, r2
 8005356:	4604      	mov	r4, r0
 8005358:	2301      	movs	r3, #1
 800535a:	e7f0      	b.n	800533e <_svfiprintf_r+0x192>
 800535c:	ab03      	add	r3, sp, #12
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	462a      	mov	r2, r5
 8005362:	4b0e      	ldr	r3, [pc, #56]	@ (800539c <_svfiprintf_r+0x1f0>)
 8005364:	a904      	add	r1, sp, #16
 8005366:	4638      	mov	r0, r7
 8005368:	f3af 8000 	nop.w
 800536c:	1c42      	adds	r2, r0, #1
 800536e:	4606      	mov	r6, r0
 8005370:	d1d6      	bne.n	8005320 <_svfiprintf_r+0x174>
 8005372:	89ab      	ldrh	r3, [r5, #12]
 8005374:	065b      	lsls	r3, r3, #25
 8005376:	f53f af2d 	bmi.w	80051d4 <_svfiprintf_r+0x28>
 800537a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800537c:	e72c      	b.n	80051d8 <_svfiprintf_r+0x2c>
 800537e:	ab03      	add	r3, sp, #12
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	462a      	mov	r2, r5
 8005384:	4b05      	ldr	r3, [pc, #20]	@ (800539c <_svfiprintf_r+0x1f0>)
 8005386:	a904      	add	r1, sp, #16
 8005388:	4638      	mov	r0, r7
 800538a:	f000 f879 	bl	8005480 <_printf_i>
 800538e:	e7ed      	b.n	800536c <_svfiprintf_r+0x1c0>
 8005390:	08005998 	.word	0x08005998
 8005394:	080059a2 	.word	0x080059a2
 8005398:	00000000 	.word	0x00000000
 800539c:	080050f5 	.word	0x080050f5
 80053a0:	0800599e 	.word	0x0800599e

080053a4 <_printf_common>:
 80053a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a8:	4616      	mov	r6, r2
 80053aa:	4698      	mov	r8, r3
 80053ac:	688a      	ldr	r2, [r1, #8]
 80053ae:	690b      	ldr	r3, [r1, #16]
 80053b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053b4:	4293      	cmp	r3, r2
 80053b6:	bfb8      	it	lt
 80053b8:	4613      	movlt	r3, r2
 80053ba:	6033      	str	r3, [r6, #0]
 80053bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053c0:	4607      	mov	r7, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	b10a      	cbz	r2, 80053ca <_printf_common+0x26>
 80053c6:	3301      	adds	r3, #1
 80053c8:	6033      	str	r3, [r6, #0]
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	0699      	lsls	r1, r3, #26
 80053ce:	bf42      	ittt	mi
 80053d0:	6833      	ldrmi	r3, [r6, #0]
 80053d2:	3302      	addmi	r3, #2
 80053d4:	6033      	strmi	r3, [r6, #0]
 80053d6:	6825      	ldr	r5, [r4, #0]
 80053d8:	f015 0506 	ands.w	r5, r5, #6
 80053dc:	d106      	bne.n	80053ec <_printf_common+0x48>
 80053de:	f104 0a19 	add.w	sl, r4, #25
 80053e2:	68e3      	ldr	r3, [r4, #12]
 80053e4:	6832      	ldr	r2, [r6, #0]
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	42ab      	cmp	r3, r5
 80053ea:	dc26      	bgt.n	800543a <_printf_common+0x96>
 80053ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	3b00      	subs	r3, #0
 80053f4:	bf18      	it	ne
 80053f6:	2301      	movne	r3, #1
 80053f8:	0692      	lsls	r2, r2, #26
 80053fa:	d42b      	bmi.n	8005454 <_printf_common+0xb0>
 80053fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005400:	4641      	mov	r1, r8
 8005402:	4638      	mov	r0, r7
 8005404:	47c8      	blx	r9
 8005406:	3001      	adds	r0, #1
 8005408:	d01e      	beq.n	8005448 <_printf_common+0xa4>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	6922      	ldr	r2, [r4, #16]
 800540e:	f003 0306 	and.w	r3, r3, #6
 8005412:	2b04      	cmp	r3, #4
 8005414:	bf02      	ittt	eq
 8005416:	68e5      	ldreq	r5, [r4, #12]
 8005418:	6833      	ldreq	r3, [r6, #0]
 800541a:	1aed      	subeq	r5, r5, r3
 800541c:	68a3      	ldr	r3, [r4, #8]
 800541e:	bf0c      	ite	eq
 8005420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005424:	2500      	movne	r5, #0
 8005426:	4293      	cmp	r3, r2
 8005428:	bfc4      	itt	gt
 800542a:	1a9b      	subgt	r3, r3, r2
 800542c:	18ed      	addgt	r5, r5, r3
 800542e:	2600      	movs	r6, #0
 8005430:	341a      	adds	r4, #26
 8005432:	42b5      	cmp	r5, r6
 8005434:	d11a      	bne.n	800546c <_printf_common+0xc8>
 8005436:	2000      	movs	r0, #0
 8005438:	e008      	b.n	800544c <_printf_common+0xa8>
 800543a:	2301      	movs	r3, #1
 800543c:	4652      	mov	r2, sl
 800543e:	4641      	mov	r1, r8
 8005440:	4638      	mov	r0, r7
 8005442:	47c8      	blx	r9
 8005444:	3001      	adds	r0, #1
 8005446:	d103      	bne.n	8005450 <_printf_common+0xac>
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005450:	3501      	adds	r5, #1
 8005452:	e7c6      	b.n	80053e2 <_printf_common+0x3e>
 8005454:	18e1      	adds	r1, r4, r3
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	2030      	movs	r0, #48	@ 0x30
 800545a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800545e:	4422      	add	r2, r4
 8005460:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005464:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005468:	3302      	adds	r3, #2
 800546a:	e7c7      	b.n	80053fc <_printf_common+0x58>
 800546c:	2301      	movs	r3, #1
 800546e:	4622      	mov	r2, r4
 8005470:	4641      	mov	r1, r8
 8005472:	4638      	mov	r0, r7
 8005474:	47c8      	blx	r9
 8005476:	3001      	adds	r0, #1
 8005478:	d0e6      	beq.n	8005448 <_printf_common+0xa4>
 800547a:	3601      	adds	r6, #1
 800547c:	e7d9      	b.n	8005432 <_printf_common+0x8e>
	...

08005480 <_printf_i>:
 8005480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005484:	7e0f      	ldrb	r7, [r1, #24]
 8005486:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005488:	2f78      	cmp	r7, #120	@ 0x78
 800548a:	4691      	mov	r9, r2
 800548c:	4680      	mov	r8, r0
 800548e:	460c      	mov	r4, r1
 8005490:	469a      	mov	sl, r3
 8005492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005496:	d807      	bhi.n	80054a8 <_printf_i+0x28>
 8005498:	2f62      	cmp	r7, #98	@ 0x62
 800549a:	d80a      	bhi.n	80054b2 <_printf_i+0x32>
 800549c:	2f00      	cmp	r7, #0
 800549e:	f000 80d2 	beq.w	8005646 <_printf_i+0x1c6>
 80054a2:	2f58      	cmp	r7, #88	@ 0x58
 80054a4:	f000 80b9 	beq.w	800561a <_printf_i+0x19a>
 80054a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054b0:	e03a      	b.n	8005528 <_printf_i+0xa8>
 80054b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054b6:	2b15      	cmp	r3, #21
 80054b8:	d8f6      	bhi.n	80054a8 <_printf_i+0x28>
 80054ba:	a101      	add	r1, pc, #4	@ (adr r1, 80054c0 <_printf_i+0x40>)
 80054bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c0:	08005519 	.word	0x08005519
 80054c4:	0800552d 	.word	0x0800552d
 80054c8:	080054a9 	.word	0x080054a9
 80054cc:	080054a9 	.word	0x080054a9
 80054d0:	080054a9 	.word	0x080054a9
 80054d4:	080054a9 	.word	0x080054a9
 80054d8:	0800552d 	.word	0x0800552d
 80054dc:	080054a9 	.word	0x080054a9
 80054e0:	080054a9 	.word	0x080054a9
 80054e4:	080054a9 	.word	0x080054a9
 80054e8:	080054a9 	.word	0x080054a9
 80054ec:	0800562d 	.word	0x0800562d
 80054f0:	08005557 	.word	0x08005557
 80054f4:	080055e7 	.word	0x080055e7
 80054f8:	080054a9 	.word	0x080054a9
 80054fc:	080054a9 	.word	0x080054a9
 8005500:	0800564f 	.word	0x0800564f
 8005504:	080054a9 	.word	0x080054a9
 8005508:	08005557 	.word	0x08005557
 800550c:	080054a9 	.word	0x080054a9
 8005510:	080054a9 	.word	0x080054a9
 8005514:	080055ef 	.word	0x080055ef
 8005518:	6833      	ldr	r3, [r6, #0]
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6032      	str	r2, [r6, #0]
 8005520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005528:	2301      	movs	r3, #1
 800552a:	e09d      	b.n	8005668 <_printf_i+0x1e8>
 800552c:	6833      	ldr	r3, [r6, #0]
 800552e:	6820      	ldr	r0, [r4, #0]
 8005530:	1d19      	adds	r1, r3, #4
 8005532:	6031      	str	r1, [r6, #0]
 8005534:	0606      	lsls	r6, r0, #24
 8005536:	d501      	bpl.n	800553c <_printf_i+0xbc>
 8005538:	681d      	ldr	r5, [r3, #0]
 800553a:	e003      	b.n	8005544 <_printf_i+0xc4>
 800553c:	0645      	lsls	r5, r0, #25
 800553e:	d5fb      	bpl.n	8005538 <_printf_i+0xb8>
 8005540:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005544:	2d00      	cmp	r5, #0
 8005546:	da03      	bge.n	8005550 <_printf_i+0xd0>
 8005548:	232d      	movs	r3, #45	@ 0x2d
 800554a:	426d      	negs	r5, r5
 800554c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005550:	4859      	ldr	r0, [pc, #356]	@ (80056b8 <_printf_i+0x238>)
 8005552:	230a      	movs	r3, #10
 8005554:	e011      	b.n	800557a <_printf_i+0xfa>
 8005556:	6821      	ldr	r1, [r4, #0]
 8005558:	6833      	ldr	r3, [r6, #0]
 800555a:	0608      	lsls	r0, r1, #24
 800555c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005560:	d402      	bmi.n	8005568 <_printf_i+0xe8>
 8005562:	0649      	lsls	r1, r1, #25
 8005564:	bf48      	it	mi
 8005566:	b2ad      	uxthmi	r5, r5
 8005568:	2f6f      	cmp	r7, #111	@ 0x6f
 800556a:	4853      	ldr	r0, [pc, #332]	@ (80056b8 <_printf_i+0x238>)
 800556c:	6033      	str	r3, [r6, #0]
 800556e:	bf14      	ite	ne
 8005570:	230a      	movne	r3, #10
 8005572:	2308      	moveq	r3, #8
 8005574:	2100      	movs	r1, #0
 8005576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800557a:	6866      	ldr	r6, [r4, #4]
 800557c:	60a6      	str	r6, [r4, #8]
 800557e:	2e00      	cmp	r6, #0
 8005580:	bfa2      	ittt	ge
 8005582:	6821      	ldrge	r1, [r4, #0]
 8005584:	f021 0104 	bicge.w	r1, r1, #4
 8005588:	6021      	strge	r1, [r4, #0]
 800558a:	b90d      	cbnz	r5, 8005590 <_printf_i+0x110>
 800558c:	2e00      	cmp	r6, #0
 800558e:	d04b      	beq.n	8005628 <_printf_i+0x1a8>
 8005590:	4616      	mov	r6, r2
 8005592:	fbb5 f1f3 	udiv	r1, r5, r3
 8005596:	fb03 5711 	mls	r7, r3, r1, r5
 800559a:	5dc7      	ldrb	r7, [r0, r7]
 800559c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055a0:	462f      	mov	r7, r5
 80055a2:	42bb      	cmp	r3, r7
 80055a4:	460d      	mov	r5, r1
 80055a6:	d9f4      	bls.n	8005592 <_printf_i+0x112>
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d10b      	bne.n	80055c4 <_printf_i+0x144>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	07df      	lsls	r7, r3, #31
 80055b0:	d508      	bpl.n	80055c4 <_printf_i+0x144>
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	6861      	ldr	r1, [r4, #4]
 80055b6:	4299      	cmp	r1, r3
 80055b8:	bfde      	ittt	le
 80055ba:	2330      	movle	r3, #48	@ 0x30
 80055bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055c4:	1b92      	subs	r2, r2, r6
 80055c6:	6122      	str	r2, [r4, #16]
 80055c8:	f8cd a000 	str.w	sl, [sp]
 80055cc:	464b      	mov	r3, r9
 80055ce:	aa03      	add	r2, sp, #12
 80055d0:	4621      	mov	r1, r4
 80055d2:	4640      	mov	r0, r8
 80055d4:	f7ff fee6 	bl	80053a4 <_printf_common>
 80055d8:	3001      	adds	r0, #1
 80055da:	d14a      	bne.n	8005672 <_printf_i+0x1f2>
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295
 80055e0:	b004      	add	sp, #16
 80055e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	f043 0320 	orr.w	r3, r3, #32
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	4833      	ldr	r0, [pc, #204]	@ (80056bc <_printf_i+0x23c>)
 80055f0:	2778      	movs	r7, #120	@ 0x78
 80055f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	6831      	ldr	r1, [r6, #0]
 80055fa:	061f      	lsls	r7, r3, #24
 80055fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005600:	d402      	bmi.n	8005608 <_printf_i+0x188>
 8005602:	065f      	lsls	r7, r3, #25
 8005604:	bf48      	it	mi
 8005606:	b2ad      	uxthmi	r5, r5
 8005608:	6031      	str	r1, [r6, #0]
 800560a:	07d9      	lsls	r1, r3, #31
 800560c:	bf44      	itt	mi
 800560e:	f043 0320 	orrmi.w	r3, r3, #32
 8005612:	6023      	strmi	r3, [r4, #0]
 8005614:	b11d      	cbz	r5, 800561e <_printf_i+0x19e>
 8005616:	2310      	movs	r3, #16
 8005618:	e7ac      	b.n	8005574 <_printf_i+0xf4>
 800561a:	4827      	ldr	r0, [pc, #156]	@ (80056b8 <_printf_i+0x238>)
 800561c:	e7e9      	b.n	80055f2 <_printf_i+0x172>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	f023 0320 	bic.w	r3, r3, #32
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	e7f6      	b.n	8005616 <_printf_i+0x196>
 8005628:	4616      	mov	r6, r2
 800562a:	e7bd      	b.n	80055a8 <_printf_i+0x128>
 800562c:	6833      	ldr	r3, [r6, #0]
 800562e:	6825      	ldr	r5, [r4, #0]
 8005630:	6961      	ldr	r1, [r4, #20]
 8005632:	1d18      	adds	r0, r3, #4
 8005634:	6030      	str	r0, [r6, #0]
 8005636:	062e      	lsls	r6, r5, #24
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	d501      	bpl.n	8005640 <_printf_i+0x1c0>
 800563c:	6019      	str	r1, [r3, #0]
 800563e:	e002      	b.n	8005646 <_printf_i+0x1c6>
 8005640:	0668      	lsls	r0, r5, #25
 8005642:	d5fb      	bpl.n	800563c <_printf_i+0x1bc>
 8005644:	8019      	strh	r1, [r3, #0]
 8005646:	2300      	movs	r3, #0
 8005648:	6123      	str	r3, [r4, #16]
 800564a:	4616      	mov	r6, r2
 800564c:	e7bc      	b.n	80055c8 <_printf_i+0x148>
 800564e:	6833      	ldr	r3, [r6, #0]
 8005650:	1d1a      	adds	r2, r3, #4
 8005652:	6032      	str	r2, [r6, #0]
 8005654:	681e      	ldr	r6, [r3, #0]
 8005656:	6862      	ldr	r2, [r4, #4]
 8005658:	2100      	movs	r1, #0
 800565a:	4630      	mov	r0, r6
 800565c:	f7fa fde8 	bl	8000230 <memchr>
 8005660:	b108      	cbz	r0, 8005666 <_printf_i+0x1e6>
 8005662:	1b80      	subs	r0, r0, r6
 8005664:	6060      	str	r0, [r4, #4]
 8005666:	6863      	ldr	r3, [r4, #4]
 8005668:	6123      	str	r3, [r4, #16]
 800566a:	2300      	movs	r3, #0
 800566c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005670:	e7aa      	b.n	80055c8 <_printf_i+0x148>
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	4632      	mov	r2, r6
 8005676:	4649      	mov	r1, r9
 8005678:	4640      	mov	r0, r8
 800567a:	47d0      	blx	sl
 800567c:	3001      	adds	r0, #1
 800567e:	d0ad      	beq.n	80055dc <_printf_i+0x15c>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	079b      	lsls	r3, r3, #30
 8005684:	d413      	bmi.n	80056ae <_printf_i+0x22e>
 8005686:	68e0      	ldr	r0, [r4, #12]
 8005688:	9b03      	ldr	r3, [sp, #12]
 800568a:	4298      	cmp	r0, r3
 800568c:	bfb8      	it	lt
 800568e:	4618      	movlt	r0, r3
 8005690:	e7a6      	b.n	80055e0 <_printf_i+0x160>
 8005692:	2301      	movs	r3, #1
 8005694:	4632      	mov	r2, r6
 8005696:	4649      	mov	r1, r9
 8005698:	4640      	mov	r0, r8
 800569a:	47d0      	blx	sl
 800569c:	3001      	adds	r0, #1
 800569e:	d09d      	beq.n	80055dc <_printf_i+0x15c>
 80056a0:	3501      	adds	r5, #1
 80056a2:	68e3      	ldr	r3, [r4, #12]
 80056a4:	9903      	ldr	r1, [sp, #12]
 80056a6:	1a5b      	subs	r3, r3, r1
 80056a8:	42ab      	cmp	r3, r5
 80056aa:	dcf2      	bgt.n	8005692 <_printf_i+0x212>
 80056ac:	e7eb      	b.n	8005686 <_printf_i+0x206>
 80056ae:	2500      	movs	r5, #0
 80056b0:	f104 0619 	add.w	r6, r4, #25
 80056b4:	e7f5      	b.n	80056a2 <_printf_i+0x222>
 80056b6:	bf00      	nop
 80056b8:	080059a9 	.word	0x080059a9
 80056bc:	080059ba 	.word	0x080059ba

080056c0 <memmove>:
 80056c0:	4288      	cmp	r0, r1
 80056c2:	b510      	push	{r4, lr}
 80056c4:	eb01 0402 	add.w	r4, r1, r2
 80056c8:	d902      	bls.n	80056d0 <memmove+0x10>
 80056ca:	4284      	cmp	r4, r0
 80056cc:	4623      	mov	r3, r4
 80056ce:	d807      	bhi.n	80056e0 <memmove+0x20>
 80056d0:	1e43      	subs	r3, r0, #1
 80056d2:	42a1      	cmp	r1, r4
 80056d4:	d008      	beq.n	80056e8 <memmove+0x28>
 80056d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056de:	e7f8      	b.n	80056d2 <memmove+0x12>
 80056e0:	4402      	add	r2, r0
 80056e2:	4601      	mov	r1, r0
 80056e4:	428a      	cmp	r2, r1
 80056e6:	d100      	bne.n	80056ea <memmove+0x2a>
 80056e8:	bd10      	pop	{r4, pc}
 80056ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056f2:	e7f7      	b.n	80056e4 <memmove+0x24>

080056f4 <_sbrk_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4d06      	ldr	r5, [pc, #24]	@ (8005710 <_sbrk_r+0x1c>)
 80056f8:	2300      	movs	r3, #0
 80056fa:	4604      	mov	r4, r0
 80056fc:	4608      	mov	r0, r1
 80056fe:	602b      	str	r3, [r5, #0]
 8005700:	f7fb fcaa 	bl	8001058 <_sbrk>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	d102      	bne.n	800570e <_sbrk_r+0x1a>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	b103      	cbz	r3, 800570e <_sbrk_r+0x1a>
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	200003ec 	.word	0x200003ec

08005714 <memcpy>:
 8005714:	440a      	add	r2, r1
 8005716:	4291      	cmp	r1, r2
 8005718:	f100 33ff 	add.w	r3, r0, #4294967295
 800571c:	d100      	bne.n	8005720 <memcpy+0xc>
 800571e:	4770      	bx	lr
 8005720:	b510      	push	{r4, lr}
 8005722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800572a:	4291      	cmp	r1, r2
 800572c:	d1f9      	bne.n	8005722 <memcpy+0xe>
 800572e:	bd10      	pop	{r4, pc}

08005730 <_realloc_r>:
 8005730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005734:	4680      	mov	r8, r0
 8005736:	4615      	mov	r5, r2
 8005738:	460c      	mov	r4, r1
 800573a:	b921      	cbnz	r1, 8005746 <_realloc_r+0x16>
 800573c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005740:	4611      	mov	r1, r2
 8005742:	f7ff bc4b 	b.w	8004fdc <_malloc_r>
 8005746:	b92a      	cbnz	r2, 8005754 <_realloc_r+0x24>
 8005748:	f7ff fbdc 	bl	8004f04 <_free_r>
 800574c:	2400      	movs	r4, #0
 800574e:	4620      	mov	r0, r4
 8005750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005754:	f000 f81a 	bl	800578c <_malloc_usable_size_r>
 8005758:	4285      	cmp	r5, r0
 800575a:	4606      	mov	r6, r0
 800575c:	d802      	bhi.n	8005764 <_realloc_r+0x34>
 800575e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005762:	d8f4      	bhi.n	800574e <_realloc_r+0x1e>
 8005764:	4629      	mov	r1, r5
 8005766:	4640      	mov	r0, r8
 8005768:	f7ff fc38 	bl	8004fdc <_malloc_r>
 800576c:	4607      	mov	r7, r0
 800576e:	2800      	cmp	r0, #0
 8005770:	d0ec      	beq.n	800574c <_realloc_r+0x1c>
 8005772:	42b5      	cmp	r5, r6
 8005774:	462a      	mov	r2, r5
 8005776:	4621      	mov	r1, r4
 8005778:	bf28      	it	cs
 800577a:	4632      	movcs	r2, r6
 800577c:	f7ff ffca 	bl	8005714 <memcpy>
 8005780:	4621      	mov	r1, r4
 8005782:	4640      	mov	r0, r8
 8005784:	f7ff fbbe 	bl	8004f04 <_free_r>
 8005788:	463c      	mov	r4, r7
 800578a:	e7e0      	b.n	800574e <_realloc_r+0x1e>

0800578c <_malloc_usable_size_r>:
 800578c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005790:	1f18      	subs	r0, r3, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	bfbc      	itt	lt
 8005796:	580b      	ldrlt	r3, [r1, r0]
 8005798:	18c0      	addlt	r0, r0, r3
 800579a:	4770      	bx	lr

0800579c <_init>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr

080057a8 <_fini>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr
