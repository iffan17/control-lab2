
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080084a8  080084a8  000094a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084e8  080084e8  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  080084e8  080084e8  000094e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084f0  080084f0  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084f0  080084f0  000094f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084f4  080084f4  000094f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080084f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000010  08008508  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08008508  0000a508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001895f  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cdb  00000000  00000000  0002299f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  00025680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001072  00000000  00000000  00026b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fae  00000000  00000000  00027bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a90  00000000  00000000  00050ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114788  00000000  00000000  00069638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017ddc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b28  00000000  00000000  0017de04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0018392c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008490 	.word	0x08008490

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08008490 	.word	0x08008490

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 f97e 	bl	800180e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f9d1 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fd33 	bl	8000f80 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fd07 	bl	8000f2c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 faa1 	bl	8000a64 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 fa15 	bl	8000950 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 fbe5 	bl	8000cf4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052a:	f000 fc31 	bl	8000d90 <MX_TIM4_Init>
  MX_TIM5_Init();
 800052e:	f000 fca7 	bl	8000e80 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000532:	f000 fb91 	bl	8000c58 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000536:	f000 fadf 	bl	8000af8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 800053a:	22c8      	movs	r2, #200	@ 0xc8
 800053c:	49b1      	ldr	r1, [pc, #708]	@ (8000804 <main+0x2fc>)
 800053e:	48b2      	ldr	r0, [pc, #712]	@ (8000808 <main+0x300>)
 8000540:	f001 fdd2 	bl	80020e8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000544:	48b1      	ldr	r0, [pc, #708]	@ (800080c <main+0x304>)
 8000546:	f004 fe97 	bl	8005278 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800054a:	48b1      	ldr	r0, [pc, #708]	@ (8000810 <main+0x308>)
 800054c:	f004 fe94 	bl	8005278 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000550:	48b0      	ldr	r0, [pc, #704]	@ (8000814 <main+0x30c>)
 8000552:	f004 ff01 	bl	8005358 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	48af      	ldr	r0, [pc, #700]	@ (8000818 <main+0x310>)
 800055a:	f004 ffd7 	bl	800550c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800055e:	2100      	movs	r1, #0
 8000560:	48ab      	ldr	r0, [pc, #684]	@ (8000810 <main+0x308>)
 8000562:	f004 ffd3 	bl	800550c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 8000566:	213c      	movs	r1, #60	@ 0x3c
 8000568:	48ac      	ldr	r0, [pc, #688]	@ (800081c <main+0x314>)
 800056a:	f005 f987 	bl	800587c <HAL_TIM_Encoder_Start>



  PID.Kp =0.1;
 800056e:	4bac      	ldr	r3, [pc, #688]	@ (8000820 <main+0x318>)
 8000570:	4aac      	ldr	r2, [pc, #688]	@ (8000824 <main+0x31c>)
 8000572:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 8000574:	4baa      	ldr	r3, [pc, #680]	@ (8000820 <main+0x318>)
 8000576:	f04f 0200 	mov.w	r2, #0
 800057a:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 800057c:	4ba8      	ldr	r3, [pc, #672]	@ (8000820 <main+0x318>)
 800057e:	f04f 0200 	mov.w	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  set_pos = 0;
 8000584:	4ba8      	ldr	r3, [pc, #672]	@ (8000828 <main+0x320>)
 8000586:	f04f 0200 	mov.w	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
  z = 0;
 800058c:	4ba7      	ldr	r3, [pc, #668]	@ (800082c <main+0x324>)
 800058e:	2200      	movs	r2, #0
 8000590:	801a      	strh	r2, [r3, #0]
  mode = 0;
 8000592:	4ba7      	ldr	r3, [pc, #668]	@ (8000830 <main+0x328>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
  arm_pid_init_f32(&PID, 0);
 8000598:	2100      	movs	r1, #0
 800059a:	48a1      	ldr	r0, [pc, #644]	@ (8000820 <main+0x318>)
 800059c:	f007 ff16 	bl	80083cc <arm_pid_init_f32>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
/////////  ADC READ ////////////////////////////////////////////////////
	  for (uint16_t i =0; i < 100;i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	83fb      	strh	r3, [r7, #30]
 80005a4:	e019      	b.n	80005da <main+0xd2>
	  {
		  x += ADC_RawRead[(i*2)];
 80005a6:	8bfb      	ldrh	r3, [r7, #30]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	4a96      	ldr	r2, [pc, #600]	@ (8000804 <main+0x2fc>)
 80005ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4ba0      	ldr	r3, [pc, #640]	@ (8000834 <main+0x32c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a9e      	ldr	r2, [pc, #632]	@ (8000834 <main+0x32c>)
 80005ba:	6013      	str	r3, [r2, #0]
		  y += ADC_RawRead[(i*2)+1];
 80005bc:	8bfb      	ldrh	r3, [r7, #30]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	3301      	adds	r3, #1
 80005c2:	4a90      	ldr	r2, [pc, #576]	@ (8000804 <main+0x2fc>)
 80005c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b9b      	ldr	r3, [pc, #620]	@ (8000838 <main+0x330>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a99      	ldr	r2, [pc, #612]	@ (8000838 <main+0x330>)
 80005d2:	6013      	str	r3, [r2, #0]
	  for (uint16_t i =0; i < 100;i++)
 80005d4:	8bfb      	ldrh	r3, [r7, #30]
 80005d6:	3301      	adds	r3, #1
 80005d8:	83fb      	strh	r3, [r7, #30]
 80005da:	8bfb      	ldrh	r3, [r7, #30]
 80005dc:	2b63      	cmp	r3, #99	@ 0x63
 80005de:	d9e2      	bls.n	80005a6 <main+0x9e>
	  }
	  posADC = x*360/(409600); // 4096*10 to degree
 80005e0:	4b94      	ldr	r3, [pc, #592]	@ (8000834 <main+0x32c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80005e8:	fb02 f303 	mul.w	r3, r2, r3
 80005ec:	4a93      	ldr	r2, [pc, #588]	@ (800083c <main+0x334>)
 80005ee:	fba2 2303 	umull	r2, r3, r2, r3
 80005f2:	0c5b      	lsrs	r3, r3, #17
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b92      	ldr	r3, [pc, #584]	@ (8000840 <main+0x338>)
 80005f8:	601a      	str	r2, [r3, #0]
	  setADC = y*360/(409600);
 80005fa:	4b8f      	ldr	r3, [pc, #572]	@ (8000838 <main+0x330>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000602:	fb02 f303 	mul.w	r3, r2, r3
 8000606:	4a8d      	ldr	r2, [pc, #564]	@ (800083c <main+0x334>)
 8000608:	fba2 2303 	umull	r2, r3, r2, r3
 800060c:	0c5b      	lsrs	r3, r3, #17
 800060e:	461a      	mov	r2, r3
 8000610:	4b8c      	ldr	r3, [pc, #560]	@ (8000844 <main+0x33c>)
 8000612:	601a      	str	r2, [r3, #0]
	  x = 0;
 8000614:	4b87      	ldr	r3, [pc, #540]	@ (8000834 <main+0x32c>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
	  y = 0;
 800061a:	4b87      	ldr	r3, [pc, #540]	@ (8000838 <main+0x330>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
/////////  MODE CHANGE  ////////////////////////////////////////////////////
	  if(mode == 0){
 8000620:	4b83      	ldr	r3, [pc, #524]	@ (8000830 <main+0x328>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d155      	bne.n	80006d4 <main+0x1cc>
	  	  pos = posADC;
 8000628:	4b85      	ldr	r3, [pc, #532]	@ (8000840 <main+0x338>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a86      	ldr	r2, [pc, #536]	@ (8000848 <main+0x340>)
 800062e:	6013      	str	r3, [r2, #0]
		  set_pos = setADC;
 8000630:	4b84      	ldr	r3, [pc, #528]	@ (8000844 <main+0x33c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	ee07 3a90 	vmov	s15, r3
 8000638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800063c:	4b7a      	ldr	r3, [pc, #488]	@ (8000828 <main+0x320>)
 800063e:	edc3 7a00 	vstr	s15, [r3]
		  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/360;
 8000642:	4b79      	ldr	r3, [pc, #484]	@ (8000828 <main+0x320>)
 8000644:	ed93 7a00 	vldr	s14, [r3]
 8000648:	4b7f      	ldr	r3, [pc, #508]	@ (8000848 <main+0x340>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	ee07 3a90 	vmov	s15, r3
 8000650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000658:	4b71      	ldr	r3, [pc, #452]	@ (8000820 <main+0x318>)
 800065a:	61bb      	str	r3, [r7, #24]
 800065c:	edc7 7a05 	vstr	s15, [r7, #20]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	ed93 7a00 	vldr	s14, [r3]
 8000666:	edd7 7a05 	vldr	s15, [r7, #20]
 800066a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	edd3 6a01 	vldr	s13, [r3, #4]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	edd3 7a03 	vldr	s15, [r3, #12]
 800067a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800067e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	edd3 6a02 	vldr	s13, [r3, #8]
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	edd3 7a04 	vldr	s15, [r3, #16]
 800068e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800069c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a0:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Update state */
    S->state[1] = S->state[0];
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	68da      	ldr	r2, [r3, #12]
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80006b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80006bc:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800084c <main+0x344>
 80006c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006c4:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8000850 <main+0x348>
 80006c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006cc:	4b61      	ldr	r3, [pc, #388]	@ (8000854 <main+0x34c>)
 80006ce:	edc3 7a00 	vstr	s15, [r3]
 80006d2:	e071      	b.n	80007b8 <main+0x2b0>
  	  }
	  else if(mode == 1){
 80006d4:	4b56      	ldr	r3, [pc, #344]	@ (8000830 <main+0x328>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d15f      	bne.n	800079c <main+0x294>
		  pos = posQEI*360/3072;
 80006dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000858 <main+0x350>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80006e4:	fb02 f303 	mul.w	r3, r2, r3
 80006e8:	4a5c      	ldr	r2, [pc, #368]	@ (800085c <main+0x354>)
 80006ea:	fb82 1203 	smull	r1, r2, r2, r3
 80006ee:	1252      	asrs	r2, r2, #9
 80006f0:	17db      	asrs	r3, r3, #31
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	4a54      	ldr	r2, [pc, #336]	@ (8000848 <main+0x340>)
 80006f6:	6013      	str	r3, [r2, #0]
		  set_pos = setADC;
 80006f8:	4b52      	ldr	r3, [pc, #328]	@ (8000844 <main+0x33c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	ee07 3a90 	vmov	s15, r3
 8000700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000704:	4b48      	ldr	r3, [pc, #288]	@ (8000828 <main+0x320>)
 8000706:	edc3 7a00 	vstr	s15, [r3]
		  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/360;
 800070a:	4b47      	ldr	r3, [pc, #284]	@ (8000828 <main+0x320>)
 800070c:	ed93 7a00 	vldr	s14, [r3]
 8000710:	4b4d      	ldr	r3, [pc, #308]	@ (8000848 <main+0x340>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800071c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000720:	4b3f      	ldr	r3, [pc, #252]	@ (8000820 <main+0x318>)
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	ed93 7a00 	vldr	s14, [r3]
 800072e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000732:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	edd3 6a01 	vldr	s13, [r3, #4]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000742:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000746:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	edd3 6a02 	vldr	s13, [r3, #8]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	edd3 7a04 	vldr	s15, [r3, #16]
 8000756:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800075a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000768:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	68da      	ldr	r2, [r3, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	615a      	str	r2, [r3, #20]
    return (out);
 8000780:	edd7 7a01 	vldr	s15, [r7, #4]
 8000784:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800084c <main+0x344>
 8000788:	ee27 7a87 	vmul.f32	s14, s15, s14
 800078c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8000850 <main+0x348>
 8000790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000794:	4b2f      	ldr	r3, [pc, #188]	@ (8000854 <main+0x34c>)
 8000796:	edc3 7a00 	vstr	s15, [r3]
 800079a:	e00d      	b.n	80007b8 <main+0x2b0>
	  }
	  else if(mode == 2){
 800079c:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <main+0x328>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d109      	bne.n	80007b8 <main+0x2b0>
		  Vfeedback = rxBuffer[2];
 80007a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000860 <main+0x358>)
 80007a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007aa:	ee07 3a90 	vmov	s15, r3
 80007ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007b2:	4b28      	ldr	r3, [pc, #160]	@ (8000854 <main+0x34c>)
 80007b4:	edc3 7a00 	vstr	s15, [r3]
	  }
/////////  PWM OC  ////////////////////////////////////////////////////////
	  if(Vfeedback > 0){
 80007b8:	4b26      	ldr	r3, [pc, #152]	@ (8000854 <main+0x34c>)
 80007ba:	edd3 7a00 	vldr	s15, [r3]
 80007be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c6:	dd08      	ble.n	80007da <main+0x2d2>
		  PWM1 = Vfeedback;
 80007c8:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <main+0x34c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a25      	ldr	r2, [pc, #148]	@ (8000864 <main+0x35c>)
 80007ce:	6013      	str	r3, [r2, #0]
		  PWM2 = 0;
 80007d0:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <main+0x360>)
 80007d2:	f04f 0200 	mov.w	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	e050      	b.n	800087c <main+0x374>
	  }
	  else if(Vfeedback < 0){
 80007da:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <main+0x34c>)
 80007dc:	edd3 7a00 	vldr	s15, [r3]
 80007e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e8:	d540      	bpl.n	800086c <main+0x364>
		  PWM1 = 0;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <main+0x35c>)
 80007ec:	f04f 0200 	mov.w	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
		  PWM2 = Vfeedback * -1;
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <main+0x34c>)
 80007f4:	edd3 7a00 	vldr	s15, [r3]
 80007f8:	eef1 7a67 	vneg.f32	s15, s15
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <main+0x360>)
 80007fe:	edc3 7a00 	vstr	s15, [r3]
 8000802:	e03b      	b.n	800087c <main+0x374>
 8000804:	20000324 	.word	0x20000324
 8000808:	2000002c 	.word	0x2000002c
 800080c:	20000224 	.word	0x20000224
 8000810:	20000270 	.word	0x20000270
 8000814:	200001d8 	.word	0x200001d8
 8000818:	2000018c 	.word	0x2000018c
 800081c:	200002bc 	.word	0x200002bc
 8000820:	200004b4 	.word	0x200004b4
 8000824:	3dcccccd 	.word	0x3dcccccd
 8000828:	200004e8 	.word	0x200004e8
 800082c:	20000310 	.word	0x20000310
 8000830:	20000500 	.word	0x20000500
 8000834:	20000308 	.word	0x20000308
 8000838:	2000030c 	.word	0x2000030c
 800083c:	51eb851f 	.word	0x51eb851f
 8000840:	200004d8 	.word	0x200004d8
 8000844:	200004dc 	.word	0x200004dc
 8000848:	200004e4 	.word	0x200004e4
 800084c:	46ff4800 	.word	0x46ff4800
 8000850:	43b40000 	.word	0x43b40000
 8000854:	200004ec 	.word	0x200004ec
 8000858:	200004e0 	.word	0x200004e0
 800085c:	2aaaaaab 	.word	0x2aaaaaab
 8000860:	200004f8 	.word	0x200004f8
 8000864:	20000314 	.word	0x20000314
 8000868:	20000318 	.word	0x20000318
	  }
	  else{
		  PWM1 = 0;
 800086c:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <main+0x3a0>)
 800086e:	f04f 0200 	mov.w	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
		  PWM2 = 0;
 8000874:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <main+0x3a4>)
 8000876:	f04f 0200 	mov.w	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM1);
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <main+0x3a0>)
 800087e:	edd3 7a00 	vldr	s15, [r3]
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <main+0x3a8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800088a:	ee17 2a90 	vmov	r2, s15
 800088e:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <main+0x3a4>)
 8000892:	edd3 7a00 	vldr	s15, [r3]
 8000896:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <main+0x3ac>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800089e:	ee17 2a90 	vmov	r2, s15
 80008a2:	635a      	str	r2, [r3, #52]	@ 0x34
	  for (uint16_t i =0; i < 100;i++)
 80008a4:	e67c      	b.n	80005a0 <main+0x98>
 80008a6:	bf00      	nop
 80008a8:	20000314 	.word	0x20000314
 80008ac:	20000318 	.word	0x20000318
 80008b0:	20000270 	.word	0x20000270
 80008b4:	2000018c 	.word	0x2000018c

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	@ 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	2238      	movs	r2, #56	@ 0x38
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f007 fdb6 	bl	8008438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008da:	2000      	movs	r0, #0
 80008dc:	f003 fc44 	bl	8004168 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ea:	2340      	movs	r3, #64	@ 0x40
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f2:	2302      	movs	r3, #2
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008f6:	2304      	movs	r3, #4
 80008f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008fa:	2355      	movs	r3, #85	@ 0x55
 80008fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000902:	2302      	movs	r3, #2
 8000904:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000906:	2302      	movs	r3, #2
 8000908:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	4618      	mov	r0, r3
 8000910:	f003 fcde 	bl	80042d0 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800091a:	f000 fc97 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2303      	movs	r3, #3
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2104      	movs	r1, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f003 ffdc 	bl	80048f4 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000942:	f000 fc83 	bl	800124c <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3750      	adds	r7, #80	@ 0x50
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	@ 0x30
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2220      	movs	r2, #32
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f007 fd65 	bl	8008438 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800096e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a58 <MX_ADC1_Init+0x108>)
 8000970:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000974:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000976:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <MX_ADC1_Init+0x108>)
 8000978:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800097c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800097e:	4b36      	ldr	r3, [pc, #216]	@ (8000a58 <MX_ADC1_Init+0x108>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000984:	4b34      	ldr	r3, [pc, #208]	@ (8000a58 <MX_ADC1_Init+0x108>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800098a:	4b33      	ldr	r3, [pc, #204]	@ (8000a58 <MX_ADC1_Init+0x108>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000990:	4b31      	ldr	r3, [pc, #196]	@ (8000a58 <MX_ADC1_Init+0x108>)
 8000992:	2201      	movs	r2, #1
 8000994:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000996:	4b30      	ldr	r3, [pc, #192]	@ (8000a58 <MX_ADC1_Init+0x108>)
 8000998:	2204      	movs	r2, #4
 800099a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800099c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a58 <MX_ADC1_Init+0x108>)
 800099e:	2200      	movs	r2, #0
 80009a0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a58 <MX_ADC1_Init+0x108>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80009a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a58 <MX_ADC1_Init+0x108>)
 80009aa:	2202      	movs	r2, #2
 80009ac:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <MX_ADC1_Init+0x108>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80009b6:	4b28      	ldr	r3, [pc, #160]	@ (8000a58 <MX_ADC1_Init+0x108>)
 80009b8:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80009bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009be:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <MX_ADC1_Init+0x108>)
 80009c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009c6:	4b24      	ldr	r3, [pc, #144]	@ (8000a58 <MX_ADC1_Init+0x108>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ce:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <MX_ADC1_Init+0x108>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009d4:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <MX_ADC1_Init+0x108>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009dc:	481e      	ldr	r0, [pc, #120]	@ (8000a58 <MX_ADC1_Init+0x108>)
 80009de:	f001 f9c7 	bl	8001d70 <HAL_ADC_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80009e8:	f000 fc30 	bl	800124c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	4818      	ldr	r0, [pc, #96]	@ (8000a58 <MX_ADC1_Init+0x108>)
 80009f8:	f002 fc94 	bl	8003324 <HAL_ADCEx_MultiModeConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a02:	f000 fc23 	bl	800124c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <MX_ADC1_Init+0x10c>)
 8000a08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0a:	2306      	movs	r3, #6
 8000a0c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a12:	237f      	movs	r3, #127	@ 0x7f
 8000a14:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a16:	2304      	movs	r3, #4
 8000a18:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <MX_ADC1_Init+0x108>)
 8000a24:	f001 febc 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000a2e:	f000 fc0d 	bl	800124c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <MX_ADC1_Init+0x110>)
 8000a34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a36:	230c      	movs	r3, #12
 8000a38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <MX_ADC1_Init+0x108>)
 8000a40:	f001 feae 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000a4a:	f000 fbff 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3730      	adds	r7, #48	@ 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000002c 	.word	0x2000002c
 8000a5c:	04300002 	.word	0x04300002
 8000a60:	08600004 	.word	0x08600004

08000a64 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a68:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000a6a:	4a22      	ldr	r2, [pc, #136]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a6e:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b1e      	ldr	r3, [pc, #120]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa0:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000aa6:	4812      	ldr	r0, [pc, #72]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000aa8:	f006 f928 	bl	8006cfc <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ab2:	f000 fbcb 	bl	800124c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000aba:	f007 fbbc 	bl	8008236 <HAL_UARTEx_SetTxFifoThreshold>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000ac4:	f000 fbc2 	bl	800124c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4809      	ldr	r0, [pc, #36]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000acc:	f007 fbf1 	bl	80082b2 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000ad6:	f000 fbb9 	bl	800124c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000adc:	f007 fb72 	bl	80081c4 <HAL_UARTEx_DisableFifoMode>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000ae6:	f000 fbb1 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000f8 	.word	0x200000f8
 8000af4:	40008000 	.word	0x40008000

08000af8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09c      	sub	sp, #112	@ 0x70
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
 8000b28:	615a      	str	r2, [r3, #20]
 8000b2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2234      	movs	r2, #52	@ 0x34
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f007 fc80 	bl	8008438 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b38:	4b45      	ldr	r3, [pc, #276]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000b3a:	4a46      	ldr	r2, [pc, #280]	@ (8000c54 <MX_TIM1_Init+0x15c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000b3e:	4b44      	ldr	r3, [pc, #272]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000b40:	22a9      	movs	r2, #169	@ 0xa9
 8000b42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b42      	ldr	r3, [pc, #264]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32675;
 8000b4a:	4b41      	ldr	r3, [pc, #260]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000b4c:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000b50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b3f      	ldr	r3, [pc, #252]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b58:	4b3d      	ldr	r3, [pc, #244]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b64:	483a      	ldr	r0, [pc, #232]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000b66:	f004 fb2f 	bl	80051c8 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b70:	f000 fb6c 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b78:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b7a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4833      	ldr	r0, [pc, #204]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000b82:	f005 f96d 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b8c:	f000 fb5e 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b90:	482f      	ldr	r0, [pc, #188]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000b92:	f004 fc59 	bl	8005448 <HAL_TIM_PWM_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b9c:	f000 fb56 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4827      	ldr	r0, [pc, #156]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000bb4:	f005 ff32 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000bbe:	f000 fb45 	bl	800124c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc2:	2360      	movs	r3, #96	@ 0x60
 8000bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000be2:	2200      	movs	r2, #0
 8000be4:	4619      	mov	r1, r3
 8000be6:	481a      	ldr	r0, [pc, #104]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000be8:	f005 f826 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000bf2:	f000 fb2b 	bl	800124c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	4807      	ldr	r0, [pc, #28]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000c34:	f005 ff88 	bl	8006b48 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000c3e:	f000 fb05 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c42:	4803      	ldr	r0, [pc, #12]	@ (8000c50 <MX_TIM1_Init+0x158>)
 8000c44:	f000 fce0 	bl	8001608 <HAL_TIM_MspPostInit>

}
 8000c48:	bf00      	nop
 8000c4a:	3770      	adds	r7, #112	@ 0x70
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000018c 	.word	0x2000018c
 8000c54:	40012c00 	.word	0x40012c00

08000c58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <MX_TIM2_Init+0x98>)
 8000c78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <MX_TIM2_Init+0x98>)
 8000c80:	22a9      	movs	r2, #169	@ 0xa9
 8000c82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <MX_TIM2_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <MX_TIM2_Init+0x98>)
 8000c8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c92:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <MX_TIM2_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c98:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <MX_TIM2_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c9e:	4814      	ldr	r0, [pc, #80]	@ (8000cf0 <MX_TIM2_Init+0x98>)
 8000ca0:	f004 fa92 	bl	80051c8 <HAL_TIM_Base_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000caa:	f000 facf 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <MX_TIM2_Init+0x98>)
 8000cbc:	f005 f8d0 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cc6:	f000 fac1 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	@ (8000cf0 <MX_TIM2_Init+0x98>)
 8000cd8:	f005 fea0 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ce2:	f000 fab3 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200001d8 	.word	0x200001d8

08000cf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <MX_TIM3_Init+0x94>)
 8000d14:	4a1d      	ldr	r2, [pc, #116]	@ (8000d8c <MX_TIM3_Init+0x98>)
 8000d16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <MX_TIM3_Init+0x94>)
 8000d1a:	22a9      	movs	r2, #169	@ 0xa9
 8000d1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <MX_TIM3_Init+0x94>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d24:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <MX_TIM3_Init+0x94>)
 8000d26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <MX_TIM3_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <MX_TIM3_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d38:	4813      	ldr	r0, [pc, #76]	@ (8000d88 <MX_TIM3_Init+0x94>)
 8000d3a:	f004 fa45 	bl	80051c8 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d44:	f000 fa82 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	4619      	mov	r1, r3
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <MX_TIM3_Init+0x94>)
 8000d56:	f005 f883 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d60:	f000 fa74 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d64:	2320      	movs	r3, #32
 8000d66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_TIM3_Init+0x94>)
 8000d72:	f005 fe53 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 fa66 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000224 	.word	0x20000224
 8000d8c:	40000400 	.word	0x40000400

08000d90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08e      	sub	sp, #56	@ 0x38
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db0:	463b      	mov	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
 8000dbe:	615a      	str	r2, [r3, #20]
 8000dc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e78 <MX_TIM4_Init+0xe8>)
 8000dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8000e7c <MX_TIM4_Init+0xec>)
 8000dc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e78 <MX_TIM4_Init+0xe8>)
 8000dca:	22a9      	movs	r2, #169	@ 0xa9
 8000dcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b2a      	ldr	r3, [pc, #168]	@ (8000e78 <MX_TIM4_Init+0xe8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32675;
 8000dd4:	4b28      	ldr	r3, [pc, #160]	@ (8000e78 <MX_TIM4_Init+0xe8>)
 8000dd6:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000dda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b26      	ldr	r3, [pc, #152]	@ (8000e78 <MX_TIM4_Init+0xe8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b25      	ldr	r3, [pc, #148]	@ (8000e78 <MX_TIM4_Init+0xe8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000de8:	4823      	ldr	r0, [pc, #140]	@ (8000e78 <MX_TIM4_Init+0xe8>)
 8000dea:	f004 f9ed 	bl	80051c8 <HAL_TIM_Base_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000df4:	f000 fa2a 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e02:	4619      	mov	r1, r3
 8000e04:	481c      	ldr	r0, [pc, #112]	@ (8000e78 <MX_TIM4_Init+0xe8>)
 8000e06:	f005 f82b 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e10:	f000 fa1c 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e14:	4818      	ldr	r0, [pc, #96]	@ (8000e78 <MX_TIM4_Init+0xe8>)
 8000e16:	f004 fb17 	bl	8005448 <HAL_TIM_PWM_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e20:	f000 fa14 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4811      	ldr	r0, [pc, #68]	@ (8000e78 <MX_TIM4_Init+0xe8>)
 8000e34:	f005 fdf2 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e3e:	f000 fa05 	bl	800124c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e42:	2360      	movs	r3, #96	@ 0x60
 8000e44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000e46:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4807      	ldr	r0, [pc, #28]	@ (8000e78 <MX_TIM4_Init+0xe8>)
 8000e5c:	f004 feec 	bl	8005c38 <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000e66:	f000 f9f1 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e6a:	4803      	ldr	r0, [pc, #12]	@ (8000e78 <MX_TIM4_Init+0xe8>)
 8000e6c:	f000 fbcc 	bl	8001608 <HAL_TIM_MspPostInit>

}
 8000e70:	bf00      	nop
 8000e72:	3738      	adds	r7, #56	@ 0x38
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000270 	.word	0x20000270
 8000e7c:	40000800 	.word	0x40000800

08000e80 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	@ 0x30
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2224      	movs	r2, #36	@ 0x24
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f007 fad2 	bl	8008438 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	463b      	mov	r3, r7
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <MX_TIM5_Init+0xa4>)
 8000ea0:	4a21      	ldr	r2, [pc, #132]	@ (8000f28 <MX_TIM5_Init+0xa8>)
 8000ea2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <MX_TIM5_Init+0xa4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <MX_TIM5_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <MX_TIM5_Init+0xa4>)
 8000eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eb6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_TIM5_Init+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <MX_TIM5_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000edc:	2301      	movs	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <MX_TIM5_Init+0xa4>)
 8000ef0:	f004 fc1e 	bl	8005730 <HAL_TIM_Encoder_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000efa:	f000 f9a7 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <MX_TIM5_Init+0xa4>)
 8000f0c:	f005 fd86 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f16:	f000 f999 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	3730      	adds	r7, #48	@ 0x30
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200002bc 	.word	0x200002bc
 8000f28:	40000c00 	.word	0x40000c00

08000f2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <MX_DMA_Init+0x50>)
 8000f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f36:	4a11      	ldr	r2, [pc, #68]	@ (8000f7c <MX_DMA_Init+0x50>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <MX_DMA_Init+0x50>)
 8000f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <MX_DMA_Init+0x50>)
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <MX_DMA_Init+0x50>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <MX_DMA_Init+0x50>)
 8000f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	200b      	movs	r0, #11
 8000f68:	f002 fbbf 	bl	80036ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f6c:	200b      	movs	r0, #11
 8000f6e:	f002 fbd6 	bl	800371e <HAL_NVIC_EnableIRQ>

}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4b39      	ldr	r3, [pc, #228]	@ (800107c <MX_GPIO_Init+0xfc>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a38      	ldr	r2, [pc, #224]	@ (800107c <MX_GPIO_Init+0xfc>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b36      	ldr	r3, [pc, #216]	@ (800107c <MX_GPIO_Init+0xfc>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fae:	4b33      	ldr	r3, [pc, #204]	@ (800107c <MX_GPIO_Init+0xfc>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	4a32      	ldr	r2, [pc, #200]	@ (800107c <MX_GPIO_Init+0xfc>)
 8000fb4:	f043 0320 	orr.w	r3, r3, #32
 8000fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fba:	4b30      	ldr	r3, [pc, #192]	@ (800107c <MX_GPIO_Init+0xfc>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <MX_GPIO_Init+0xfc>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	4a2c      	ldr	r2, [pc, #176]	@ (800107c <MX_GPIO_Init+0xfc>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <MX_GPIO_Init+0xfc>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b27      	ldr	r3, [pc, #156]	@ (800107c <MX_GPIO_Init+0xfc>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a26      	ldr	r2, [pc, #152]	@ (800107c <MX_GPIO_Init+0xfc>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <MX_GPIO_Init+0xfc>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2130      	movs	r1, #48	@ 0x30
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffe:	f003 f85d 	bl	80040bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2101      	movs	r1, #1
 8001006:	481e      	ldr	r0, [pc, #120]	@ (8001080 <MX_GPIO_Init+0x100>)
 8001008:	f003 f858 	bl	80040bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800100c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001012:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4818      	ldr	r0, [pc, #96]	@ (8001084 <MX_GPIO_Init+0x104>)
 8001024:	f002 fec8 	bl	8003db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001028:	2330      	movs	r3, #48	@ 0x30
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001042:	f002 feb9 	bl	8003db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001046:	2301      	movs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4808      	ldr	r0, [pc, #32]	@ (8001080 <MX_GPIO_Init+0x100>)
 800105e:	f002 feab 	bl	8003db8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2028      	movs	r0, #40	@ 0x28
 8001068:	f002 fb3f 	bl	80036ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800106c:	2028      	movs	r0, #40	@ 0x28
 800106e:	f002 fb56 	bl	800371e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	@ 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	48000400 	.word	0x48000400
 8001084:	48000800 	.word	0x48000800

08001088 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 )
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a5c      	ldr	r2, [pc, #368]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	f040 80b1 	bne.w	80011fc <HAL_TIM_PeriodElapsedCallback+0x174>
  {
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 800109a:	4b5b      	ldr	r3, [pc, #364]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a8:	4b58      	ldr	r3, [pc, #352]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80010aa:	edc3 7a00 	vstr	s15, [r3]
	  //spd =  QEIReadRaw * 1000 / 250 * 8;
	  if(QEIReadRaw > 32678)
 80010ae:	4b57      	ldr	r3, [pc, #348]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001210 <HAL_TIM_PeriodElapsedCallback+0x188>
 80010b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c0:	dd18      	ble.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x6c>
	  {
		  posQEI -= (65536-QEIReadRaw);
 80010c2:	4b54      	ldr	r3, [pc, #336]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ce:	4b4f      	ldr	r3, [pc, #316]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8001218 <HAL_TIM_PeriodElapsedCallback+0x190>
 80010d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e4:	ee17 2a90 	vmov	r2, s15
 80010e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010ea:	601a      	str	r2, [r3, #0]
		  z = 1;
 80010ec:	4b4b      	ldr	r3, [pc, #300]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	801a      	strh	r2, [r3, #0]
 80010f2:	e013      	b.n	800111c <HAL_TIM_PeriodElapsedCallback+0x94>
	  }
	  else
	  {
		  posQEI += QEIReadRaw;
 80010f4:	4b47      	ldr	r3, [pc, #284]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001100:	4b42      	ldr	r3, [pc, #264]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800110e:	ee17 2a90 	vmov	r2, s15
 8001112:	4b40      	ldr	r3, [pc, #256]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001114:	601a      	str	r2, [r3, #0]
		  z = 2;
 8001116:	4b41      	ldr	r3, [pc, #260]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001118:	2202      	movs	r2, #2
 800111a:	801a      	strh	r2, [r3, #0]
	  }
	  QEIReadOld = QEIReadRaw;
 800111c:	4b3b      	ldr	r3, [pc, #236]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x184>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a3f      	ldr	r2, [pc, #252]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001122:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8001124:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	@ 0x24

//////////////////////////////UART//////////////////////////

	  a = a+1;
 800112c:	4b3d      	ldr	r3, [pc, #244]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4b3b      	ldr	r3, [pc, #236]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001136:	701a      	strb	r2, [r3, #0]
	  a = a % 5;
 8001138:	4b3a      	ldr	r3, [pc, #232]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800113a:	781a      	ldrb	r2, [r3, #0]
 800113c:	4b3a      	ldr	r3, [pc, #232]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800113e:	fba3 1302 	umull	r1, r3, r3, r2
 8001142:	0899      	lsrs	r1, r3, #2
 8001144:	460b      	mov	r3, r1
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b35      	ldr	r3, [pc, #212]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001150:	701a      	strb	r2, [r3, #0]
	  if (a == 0)
 8001152:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d104      	bne.n	8001164 <HAL_TIM_PeriodElapsedCallback+0xdc>
	  {
	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800115a:	2120      	movs	r1, #32
 800115c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001160:	f002 ffc4 	bl	80040ec <HAL_GPIO_TogglePin>
	  }

	  b = b+1;
 8001164:	4b31      	ldr	r3, [pc, #196]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800116e:	701a      	strb	r2, [r3, #0]
	  b = b % 1000;
 8001170:	4b2e      	ldr	r3, [pc, #184]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b2e      	ldr	r3, [pc, #184]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001178:	fb83 1302 	smull	r1, r3, r3, r2
 800117c:	1199      	asrs	r1, r3, #6
 800117e:	17d3      	asrs	r3, r2, #31
 8001180:	1acb      	subs	r3, r1, r3
 8001182:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001186:	fb01 f303 	mul.w	r3, r1, r3
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b27      	ldr	r3, [pc, #156]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001190:	701a      	strb	r2, [r3, #0]
	  if (b == 0)
 8001192:	4b26      	ldr	r3, [pc, #152]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d130      	bne.n	80011fc <HAL_TIM_PeriodElapsedCallback+0x174>
	  {
		  ADCst = (uint8_t)(set_ADC & 0xFF);
 800119a:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80011a2:	701a      	strb	r2, [r3, #0]
		  ADCnd = (uint8_t)((set_ADC >> 8) & 0xFF);
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80011b0:	701a      	strb	r2, [r3, #0]
		  txBuffer[0] = 69;
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80011b4:	2245      	movs	r2, #69	@ 0x45
 80011b6:	701a      	strb	r2, [r3, #0]
		  txBuffer[1] = ADCst ;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80011be:	705a      	strb	r2, [r3, #1]
		  txBuffer[2] = ADCnd ;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80011c2:	781a      	ldrb	r2, [r3, #0]
 80011c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80011c6:	709a      	strb	r2, [r3, #2]
		  txBuffer[3] = '\n';
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80011ca:	220a      	movs	r2, #10
 80011cc:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit(&hlpuart1, txBuffer, 4, 100);
 80011ce:	2364      	movs	r3, #100	@ 0x64
 80011d0:	2204      	movs	r2, #4
 80011d2:	491b      	ldr	r1, [pc, #108]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80011d4:	481b      	ldr	r0, [pc, #108]	@ (8001244 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80011d6:	f005 fde1 	bl	8006d9c <HAL_UART_Transmit>
		  HAL_UART_Receive(&hlpuart1, rxBuffer, 4, 100);
 80011da:	2364      	movs	r3, #100	@ 0x64
 80011dc:	2204      	movs	r2, #4
 80011de:	491a      	ldr	r1, [pc, #104]	@ (8001248 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80011e0:	4818      	ldr	r0, [pc, #96]	@ (8001244 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80011e2:	f005 fe69 	bl	8006eb8 <HAL_UART_Receive>
		  rxBuffer[2] = (rxBuffer[0]-69)/256;
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	3b45      	subs	r3, #69	@ 0x45
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da00      	bge.n	80011f4 <HAL_TIM_PeriodElapsedCallback+0x16c>
 80011f2:	33ff      	adds	r3, #255	@ 0xff
 80011f4:	121b      	asrs	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80011fa:	809a      	strh	r2, [r3, #4]
	  }

	  }
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001d8 	.word	0x200001d8
 8001208:	200002bc 	.word	0x200002bc
 800120c:	2000031c 	.word	0x2000031c
 8001210:	46ff4c00 	.word	0x46ff4c00
 8001214:	200004e0 	.word	0x200004e0
 8001218:	47800000 	.word	0x47800000
 800121c:	20000310 	.word	0x20000310
 8001220:	20000320 	.word	0x20000320
 8001224:	200004f0 	.word	0x200004f0
 8001228:	cccccccd 	.word	0xcccccccd
 800122c:	200004f1 	.word	0x200004f1
 8001230:	10624dd3 	.word	0x10624dd3
 8001234:	20000000 	.word	0x20000000
 8001238:	200004f2 	.word	0x200004f2
 800123c:	200004f3 	.word	0x200004f3
 8001240:	200004f4 	.word	0x200004f4
 8001244:	200000f8 	.word	0x200000f8
 8001248:	200004f8 	.word	0x200004f8

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <Error_Handler+0x8>

08001258 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <HAL_MspInit+0x44>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001262:	4a0e      	ldr	r2, [pc, #56]	@ (800129c <HAL_MspInit+0x44>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6613      	str	r3, [r2, #96]	@ 0x60
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <HAL_MspInit+0x44>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <HAL_MspInit+0x44>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127a:	4a08      	ldr	r2, [pc, #32]	@ (800129c <HAL_MspInit+0x44>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001280:	6593      	str	r3, [r2, #88]	@ 0x58
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_MspInit+0x44>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800128e:	f003 f80f 	bl	80042b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b09e      	sub	sp, #120	@ 0x78
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	2254      	movs	r2, #84	@ 0x54
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f007 f8b9 	bl	8008438 <memset>
  if(hadc->Instance==ADC1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ce:	d167      	bne.n	80013a0 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012d6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012da:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fd23 	bl	8004d2c <HAL_RCCEx_PeriphCLKConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012ec:	f7ff ffae 	bl	800124c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012f0:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <HAL_ADC_MspInit+0x108>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f4:	4a2c      	ldr	r2, [pc, #176]	@ (80013a8 <HAL_ADC_MspInit+0x108>)
 80012f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fc:	4b2a      	ldr	r3, [pc, #168]	@ (80013a8 <HAL_ADC_MspInit+0x108>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	4b27      	ldr	r3, [pc, #156]	@ (80013a8 <HAL_ADC_MspInit+0x108>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130c:	4a26      	ldr	r2, [pc, #152]	@ (80013a8 <HAL_ADC_MspInit+0x108>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001314:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <HAL_ADC_MspInit+0x108>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001320:	2303      	movs	r3, #3
 8001322:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001324:	2303      	movs	r3, #3
 8001326:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001336:	f002 fd3f 	bl	8003db8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800133a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <HAL_ADC_MspInit+0x10c>)
 800133c:	4a1c      	ldr	r2, [pc, #112]	@ (80013b0 <HAL_ADC_MspInit+0x110>)
 800133e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <HAL_ADC_MspInit+0x10c>)
 8001342:	2205      	movs	r2, #5
 8001344:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001346:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <HAL_ADC_MspInit+0x10c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800134c:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <HAL_ADC_MspInit+0x10c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <HAL_ADC_MspInit+0x10c>)
 8001354:	2280      	movs	r2, #128	@ 0x80
 8001356:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <HAL_ADC_MspInit+0x10c>)
 800135a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800135e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_ADC_MspInit+0x10c>)
 8001362:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001366:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_ADC_MspInit+0x10c>)
 800136a:	2220      	movs	r2, #32
 800136c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_ADC_MspInit+0x10c>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001374:	480d      	ldr	r0, [pc, #52]	@ (80013ac <HAL_ADC_MspInit+0x10c>)
 8001376:	f002 f9ed 	bl	8003754 <HAL_DMA_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001380:	f7ff ff64 	bl	800124c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <HAL_ADC_MspInit+0x10c>)
 8001388:	655a      	str	r2, [r3, #84]	@ 0x54
 800138a:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <HAL_ADC_MspInit+0x10c>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	2012      	movs	r0, #18
 8001396:	f002 f9a8 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800139a:	2012      	movs	r0, #18
 800139c:	f002 f9bf 	bl	800371e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013a0:	bf00      	nop
 80013a2:	3778      	adds	r7, #120	@ 0x78
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	20000098 	.word	0x20000098
 80013b0:	40020008 	.word	0x40020008

080013b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b09e      	sub	sp, #120	@ 0x78
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	2254      	movs	r2, #84	@ 0x54
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f007 f82f 	bl	8008438 <memset>
  if(huart->Instance==LPUART1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a23      	ldr	r2, [pc, #140]	@ (800146c <HAL_UART_MspInit+0xb8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d13e      	bne.n	8001462 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80013e4:	2320      	movs	r3, #32
 80013e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 fc9b 	bl	8004d2c <HAL_RCCEx_PeriphCLKConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013fc:	f7ff ff26 	bl	800124c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <HAL_UART_MspInit+0xbc>)
 8001402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001404:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <HAL_UART_MspInit+0xbc>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <HAL_UART_MspInit+0xbc>)
 800140e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_UART_MspInit+0xbc>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141c:	4a14      	ldr	r2, [pc, #80]	@ (8001470 <HAL_UART_MspInit+0xbc>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_UART_MspInit+0xbc>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001430:	230c      	movs	r3, #12
 8001432:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001440:	230c      	movs	r3, #12
 8001442:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001448:	4619      	mov	r1, r3
 800144a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144e:	f002 fcb3 	bl	8003db8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	205b      	movs	r0, #91	@ 0x5b
 8001458:	f002 f947 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800145c:	205b      	movs	r0, #91	@ 0x5b
 800145e:	f002 f95e 	bl	800371e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3778      	adds	r7, #120	@ 0x78
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40008000 	.word	0x40008000
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2c      	ldr	r2, [pc, #176]	@ (8001534 <HAL_TIM_Base_MspInit+0xc0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d10c      	bne.n	80014a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001486:	4b2c      	ldr	r3, [pc, #176]	@ (8001538 <HAL_TIM_Base_MspInit+0xc4>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148a:	4a2b      	ldr	r2, [pc, #172]	@ (8001538 <HAL_TIM_Base_MspInit+0xc4>)
 800148c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001490:	6613      	str	r3, [r2, #96]	@ 0x60
 8001492:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <HAL_TIM_Base_MspInit+0xc4>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800149e:	e044      	b.n	800152a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014a8:	d114      	bne.n	80014d4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014aa:	4b23      	ldr	r3, [pc, #140]	@ (8001538 <HAL_TIM_Base_MspInit+0xc4>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ae:	4a22      	ldr	r2, [pc, #136]	@ (8001538 <HAL_TIM_Base_MspInit+0xc4>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014b6:	4b20      	ldr	r3, [pc, #128]	@ (8001538 <HAL_TIM_Base_MspInit+0xc4>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	201c      	movs	r0, #28
 80014c8:	f002 f90f 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014cc:	201c      	movs	r0, #28
 80014ce:	f002 f926 	bl	800371e <HAL_NVIC_EnableIRQ>
}
 80014d2:	e02a      	b.n	800152a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a18      	ldr	r2, [pc, #96]	@ (800153c <HAL_TIM_Base_MspInit+0xc8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d114      	bne.n	8001508 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014de:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <HAL_TIM_Base_MspInit+0xc4>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e2:	4a15      	ldr	r2, [pc, #84]	@ (8001538 <HAL_TIM_Base_MspInit+0xc4>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ea:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <HAL_TIM_Base_MspInit+0xc4>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	201d      	movs	r0, #29
 80014fc:	f002 f8f5 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001500:	201d      	movs	r0, #29
 8001502:	f002 f90c 	bl	800371e <HAL_NVIC_EnableIRQ>
}
 8001506:	e010      	b.n	800152a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0c      	ldr	r2, [pc, #48]	@ (8001540 <HAL_TIM_Base_MspInit+0xcc>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d10b      	bne.n	800152a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_TIM_Base_MspInit+0xc4>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	4a08      	ldr	r2, [pc, #32]	@ (8001538 <HAL_TIM_Base_MspInit+0xc4>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6593      	str	r3, [r2, #88]	@ 0x58
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_TIM_Base_MspInit+0xc4>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40012c00 	.word	0x40012c00
 8001538:	40021000 	.word	0x40021000
 800153c:	40000400 	.word	0x40000400
 8001540:	40000800 	.word	0x40000800

08001544 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a25      	ldr	r2, [pc, #148]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d144      	bne.n	80015f0 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001566:	4b25      	ldr	r3, [pc, #148]	@ (80015fc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	4a24      	ldr	r2, [pc, #144]	@ (80015fc <HAL_TIM_Encoder_MspInit+0xb8>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	6593      	str	r3, [r2, #88]	@ 0x58
 8001572:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	4a1e      	ldr	r2, [pc, #120]	@ (80015fc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158a:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <HAL_TIM_Encoder_MspInit+0xb8>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	4a18      	ldr	r2, [pc, #96]	@ (80015fc <HAL_TIM_Encoder_MspInit+0xb8>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a2:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <HAL_TIM_Encoder_MspInit+0xb8>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ae:	2304      	movs	r3, #4
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015be:	2302      	movs	r3, #2
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	480d      	ldr	r0, [pc, #52]	@ (8001600 <HAL_TIM_Encoder_MspInit+0xbc>)
 80015ca:	f002 fbf5 	bl	8003db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80015e0:	2301      	movs	r3, #1
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	@ (8001604 <HAL_TIM_Encoder_MspInit+0xc0>)
 80015ec:	f002 fbe4 	bl	8003db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	@ 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40000c00 	.word	0x40000c00
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000400 	.word	0x48000400
 8001604:	48000800 	.word	0x48000800

08001608 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	@ 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a23      	ldr	r2, [pc, #140]	@ (80016b4 <HAL_TIM_MspPostInit+0xac>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d11c      	bne.n	8001664 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <HAL_TIM_MspPostInit+0xb0>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	4a22      	ldr	r2, [pc, #136]	@ (80016b8 <HAL_TIM_MspPostInit+0xb0>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_TIM_MspPostInit+0xb0>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001652:	2302      	movs	r3, #2
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4817      	ldr	r0, [pc, #92]	@ (80016bc <HAL_TIM_MspPostInit+0xb4>)
 800165e:	f002 fbab 	bl	8003db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001662:	e022      	b.n	80016aa <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a15      	ldr	r2, [pc, #84]	@ (80016c0 <HAL_TIM_MspPostInit+0xb8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d11d      	bne.n	80016aa <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_TIM_MspPostInit+0xb0>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	4a11      	ldr	r2, [pc, #68]	@ (80016b8 <HAL_TIM_MspPostInit+0xb0>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167a:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <HAL_TIM_MspPostInit+0xb0>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001686:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001698:	230a      	movs	r3, #10
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a6:	f002 fb87 	bl	8003db8 <HAL_GPIO_Init>
}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	@ 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40012c00 	.word	0x40012c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	48000800 	.word	0x48000800
 80016c0:	40000800 	.word	0x40000800

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <NMI_Handler+0x4>

080016cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <MemManage_Handler+0x4>

080016dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171a:	f000 f8cb 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <DMA1_Channel1_IRQHandler+0x10>)
 800172a:	f002 f9f6 	bl	8003b1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000098 	.word	0x20000098

08001738 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <ADC1_2_IRQHandler+0x10>)
 800173e:	f000 fda7 	bl	8002290 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000002c 	.word	0x2000002c

0800174c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <TIM2_IRQHandler+0x10>)
 8001752:	f004 f921 	bl	8005998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200001d8 	.word	0x200001d8

08001760 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <TIM3_IRQHandler+0x10>)
 8001766:	f004 f917 	bl	8005998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000224 	.word	0x20000224

08001774 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001778:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800177c:	f002 fcd0 	bl	8004120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <LPUART1_IRQHandler+0x10>)
 800178a:	f005 fc5d 	bl	8007048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200000f8 	.word	0x200000f8

08001798 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017bc:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c0:	f7ff ffea 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	@ (80017fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <LoopForever+0xe>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001808 <LoopForever+0x16>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ea:	f006 fe2d 	bl	8008448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ee:	f7fe fe8b 	bl	8000508 <main>

080017f2 <LoopForever>:

LoopForever:
    b LoopForever
 80017f2:	e7fe      	b.n	80017f2 <LoopForever>
  ldr   r0, =_estack
 80017f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001800:	080084f8 	.word	0x080084f8
  ldr r2, =_sbss
 8001804:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001808:	20000508 	.word	0x20000508

0800180c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC3_IRQHandler>

0800180e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f001 ff5b 	bl	80036d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f80e 	bl	8001840 <HAL_InitTick>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	71fb      	strb	r3, [r7, #7]
 800182e:	e001      	b.n	8001834 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001830:	f7ff fd12 	bl	8001258 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001834:	79fb      	ldrb	r3, [r7, #7]

}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <HAL_InitTick+0x68>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d022      	beq.n	800189a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_InitTick+0x6c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <HAL_InitTick+0x68>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001860:	fbb1 f3f3 	udiv	r3, r1, r3
 8001864:	fbb2 f3f3 	udiv	r3, r2, r3
 8001868:	4618      	mov	r0, r3
 800186a:	f001 ff66 	bl	800373a <HAL_SYSTICK_Config>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10f      	bne.n	8001894 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b0f      	cmp	r3, #15
 8001878:	d809      	bhi.n	800188e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187a:	2200      	movs	r2, #0
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	f04f 30ff 	mov.w	r0, #4294967295
 8001882:	f001 ff32 	bl	80036ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <HAL_InitTick+0x70>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	e007      	b.n	800189e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e004      	b.n	800189e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
 8001898:	e001      	b.n	800189e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	2000000c 	.word	0x2000000c
 80018ac:	20000004 	.word	0x20000004
 80018b0:	20000008 	.word	0x20000008

080018b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <HAL_IncTick+0x1c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_IncTick+0x20>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a03      	ldr	r2, [pc, #12]	@ (80018d0 <HAL_IncTick+0x1c>)
 80018c4:	6013      	str	r3, [r2, #0]
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	20000504 	.word	0x20000504
 80018d4:	2000000c 	.word	0x2000000c

080018d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <HAL_GetTick+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000504 	.word	0x20000504

080018f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	609a      	str	r2, [r3, #8]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3360      	adds	r3, #96	@ 0x60
 800196a:	461a      	mov	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <LL_ADC_SetOffset+0x44>)
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	4313      	orrs	r3, r2
 8001988:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	03fff000 	.word	0x03fff000

080019a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3360      	adds	r3, #96	@ 0x60
 80019ae:	461a      	mov	r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3360      	adds	r3, #96	@ 0x60
 80019dc:	461a      	mov	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019f6:	bf00      	nop
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b087      	sub	sp, #28
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3360      	adds	r3, #96	@ 0x60
 8001a12:	461a      	mov	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	431a      	orrs	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a2c:	bf00      	nop
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3360      	adds	r3, #96	@ 0x60
 8001a48:	461a      	mov	r2, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	615a      	str	r2, [r3, #20]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b087      	sub	sp, #28
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3330      	adds	r3, #48	@ 0x30
 8001aca:	461a      	mov	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	4413      	add	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	211f      	movs	r1, #31
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	401a      	ands	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0e9b      	lsrs	r3, r3, #26
 8001af2:	f003 011f 	and.w	r1, r3, #31
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	431a      	orrs	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b06:	bf00      	nop
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3314      	adds	r3, #20
 8001b48:	461a      	mov	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	0e5b      	lsrs	r3, r3, #25
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	0d1b      	lsrs	r3, r3, #20
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	2107      	movs	r1, #7
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	0d1b      	lsrs	r3, r3, #20
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0318 	and.w	r3, r3, #24
 8001bb2:	4908      	ldr	r1, [pc, #32]	@ (8001bd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bb4:	40d9      	lsrs	r1, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	400b      	ands	r3, r1
 8001bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	0007ffff 	.word	0x0007ffff

08001bd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 031f 	and.w	r3, r3, #31
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6093      	str	r3, [r2, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c48:	d101      	bne.n	8001c4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c98:	d101      	bne.n	8001c9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <LL_ADC_IsEnabled+0x18>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <LL_ADC_IsEnabled+0x1a>
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d0e:	f043 0204 	orr.w	r2, r3, #4
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e1a9      	b.n	80020de <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fa81 	bl	80012a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff3f 	bl	8001c34 <LL_ADC_IsDeepPowerDownEnabled>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff25 	bl	8001c10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff5a 	bl	8001c84 <LL_ADC_IsInternalRegulatorEnabled>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d115      	bne.n	8001e02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff3e 	bl	8001c5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001de0:	4b9c      	ldr	r3, [pc, #624]	@ (8002054 <HAL_ADC_Init+0x2e4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	099b      	lsrs	r3, r3, #6
 8001de6:	4a9c      	ldr	r2, [pc, #624]	@ (8002058 <HAL_ADC_Init+0x2e8>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	3301      	adds	r3, #1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001df4:	e002      	b.n	8001dfc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f9      	bne.n	8001df6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff3c 	bl	8001c84 <LL_ADC_IsInternalRegulatorEnabled>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10d      	bne.n	8001e2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff75 	bl	8001d22 <LL_ADC_REG_IsConversionOngoing>
 8001e38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 8142 	bne.w	80020cc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 813e 	bne.w	80020cc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e54:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e58:	f043 0202 	orr.w	r2, r3, #2
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff35 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d141      	bne.n	8001ef4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e78:	d004      	beq.n	8001e84 <HAL_ADC_Init+0x114>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a77      	ldr	r2, [pc, #476]	@ (800205c <HAL_ADC_Init+0x2ec>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d10f      	bne.n	8001ea4 <HAL_ADC_Init+0x134>
 8001e84:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e88:	f7ff ff24 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	4873      	ldr	r0, [pc, #460]	@ (800205c <HAL_ADC_Init+0x2ec>)
 8001e90:	f7ff ff20 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4323      	orrs	r3, r4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e012      	b.n	8001eca <HAL_ADC_Init+0x15a>
 8001ea4:	486e      	ldr	r0, [pc, #440]	@ (8002060 <HAL_ADC_Init+0x2f0>)
 8001ea6:	f7ff ff15 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001eaa:	4604      	mov	r4, r0
 8001eac:	486d      	ldr	r0, [pc, #436]	@ (8002064 <HAL_ADC_Init+0x2f4>)
 8001eae:	f7ff ff11 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	431c      	orrs	r4, r3
 8001eb6:	486c      	ldr	r0, [pc, #432]	@ (8002068 <HAL_ADC_Init+0x2f8>)
 8001eb8:	f7ff ff0c 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4323      	orrs	r3, r4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d012      	beq.n	8001ef4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ed6:	d004      	beq.n	8001ee2 <HAL_ADC_Init+0x172>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a5f      	ldr	r2, [pc, #380]	@ (800205c <HAL_ADC_Init+0x2ec>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_Init+0x176>
 8001ee2:	4a62      	ldr	r2, [pc, #392]	@ (800206c <HAL_ADC_Init+0x2fc>)
 8001ee4:	e000      	b.n	8001ee8 <HAL_ADC_Init+0x178>
 8001ee6:	4a62      	ldr	r2, [pc, #392]	@ (8002070 <HAL_ADC_Init+0x300>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4619      	mov	r1, r3
 8001eee:	4610      	mov	r0, r2
 8001ef0:	f7ff fcfe 	bl	80018f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7f5b      	ldrb	r3, [r3, #29]
 8001ef8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001efe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f04:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f0a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f12:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d106      	bne.n	8001f30 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f26:	3b01      	subs	r3, #1
 8001f28:	045b      	lsls	r3, r3, #17
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d009      	beq.n	8001f4c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f44:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	4b48      	ldr	r3, [pc, #288]	@ (8002074 <HAL_ADC_Init+0x304>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fee4 	bl	8001d48 <LL_ADC_INJ_IsConversionOngoing>
 8001f80:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d17f      	bne.n	8002088 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d17c      	bne.n	8002088 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f92:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f9a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001faa:	f023 0302 	bic.w	r3, r3, #2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	69b9      	ldr	r1, [r7, #24]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d017      	beq.n	8001ff0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001fce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001fd8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001fdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6911      	ldr	r1, [r2, #16]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001fee:	e013      	b.n	8002018 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ffe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002010:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002014:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800201e:	2b01      	cmp	r3, #1
 8002020:	d12a      	bne.n	8002078 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800202c:	f023 0304 	bic.w	r3, r3, #4
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002038:	4311      	orrs	r1, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800203e:	4311      	orrs	r1, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002044:	430a      	orrs	r2, r1
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	611a      	str	r2, [r3, #16]
 8002052:	e019      	b.n	8002088 <HAL_ADC_Init+0x318>
 8002054:	20000004 	.word	0x20000004
 8002058:	053e2d63 	.word	0x053e2d63
 800205c:	50000100 	.word	0x50000100
 8002060:	50000400 	.word	0x50000400
 8002064:	50000500 	.word	0x50000500
 8002068:	50000600 	.word	0x50000600
 800206c:	50000300 	.word	0x50000300
 8002070:	50000700 	.word	0x50000700
 8002074:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d10c      	bne.n	80020aa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	f023 010f 	bic.w	r1, r3, #15
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	1e5a      	subs	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80020a8:	e007      	b.n	80020ba <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 020f 	bic.w	r2, r2, #15
 80020b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020ca:	e007      	b.n	80020dc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	f043 0210 	orr.w	r2, r3, #16
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	@ 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd90      	pop	{r4, r7, pc}
 80020e6:	bf00      	nop

080020e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020fc:	d004      	beq.n	8002108 <HAL_ADC_Start_DMA+0x20>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a5a      	ldr	r2, [pc, #360]	@ (800226c <HAL_ADC_Start_DMA+0x184>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d101      	bne.n	800210c <HAL_ADC_Start_DMA+0x24>
 8002108:	4b59      	ldr	r3, [pc, #356]	@ (8002270 <HAL_ADC_Start_DMA+0x188>)
 800210a:	e000      	b.n	800210e <HAL_ADC_Start_DMA+0x26>
 800210c:	4b59      	ldr	r3, [pc, #356]	@ (8002274 <HAL_ADC_Start_DMA+0x18c>)
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fd62 	bl	8001bd8 <LL_ADC_GetMultimode>
 8002114:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fe01 	bl	8001d22 <LL_ADC_REG_IsConversionOngoing>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 809b 	bne.w	800225e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_ADC_Start_DMA+0x4e>
 8002132:	2302      	movs	r3, #2
 8002134:	e096      	b.n	8002264 <HAL_ADC_Start_DMA+0x17c>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a4d      	ldr	r2, [pc, #308]	@ (8002278 <HAL_ADC_Start_DMA+0x190>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d008      	beq.n	800215a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b05      	cmp	r3, #5
 8002152:	d002      	beq.n	800215a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b09      	cmp	r3, #9
 8002158:	d17a      	bne.n	8002250 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 ff60 	bl	8003020 <ADC_Enable>
 8002160:	4603      	mov	r3, r0
 8002162:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d16d      	bne.n	8002246 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a3a      	ldr	r2, [pc, #232]	@ (800226c <HAL_ADC_Start_DMA+0x184>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d009      	beq.n	800219c <HAL_ADC_Start_DMA+0xb4>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3b      	ldr	r2, [pc, #236]	@ (800227c <HAL_ADC_Start_DMA+0x194>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d002      	beq.n	8002198 <HAL_ADC_Start_DMA+0xb0>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	e003      	b.n	80021a0 <HAL_ADC_Start_DMA+0xb8>
 8002198:	4b39      	ldr	r3, [pc, #228]	@ (8002280 <HAL_ADC_Start_DMA+0x198>)
 800219a:	e001      	b.n	80021a0 <HAL_ADC_Start_DMA+0xb8>
 800219c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d002      	beq.n	80021ae <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d105      	bne.n	80021ba <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	f023 0206 	bic.w	r2, r3, #6
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	661a      	str	r2, [r3, #96]	@ 0x60
 80021d2:	e002      	b.n	80021da <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021de:	4a29      	ldr	r2, [pc, #164]	@ (8002284 <HAL_ADC_Start_DMA+0x19c>)
 80021e0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e6:	4a28      	ldr	r2, [pc, #160]	@ (8002288 <HAL_ADC_Start_DMA+0x1a0>)
 80021e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ee:	4a27      	ldr	r2, [pc, #156]	@ (800228c <HAL_ADC_Start_DMA+0x1a4>)
 80021f0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	221c      	movs	r2, #28
 80021f8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0210 	orr.w	r2, r2, #16
 8002210:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0201 	orr.w	r2, r2, #1
 8002220:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	3340      	adds	r3, #64	@ 0x40
 800222c:	4619      	mov	r1, r3
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f001 fb37 	bl	80038a4 <HAL_DMA_Start_IT>
 8002236:	4603      	mov	r3, r0
 8002238:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fd5b 	bl	8001cfa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002244:	e00d      	b.n	8002262 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800224e:	e008      	b.n	8002262 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800225c:	e001      	b.n	8002262 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800225e:	2302      	movs	r3, #2
 8002260:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002262:	7dfb      	ldrb	r3, [r7, #23]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	50000100 	.word	0x50000100
 8002270:	50000300 	.word	0x50000300
 8002274:	50000700 	.word	0x50000700
 8002278:	50000600 	.word	0x50000600
 800227c:	50000500 	.word	0x50000500
 8002280:	50000400 	.word	0x50000400
 8002284:	0800314d 	.word	0x0800314d
 8002288:	08003225 	.word	0x08003225
 800228c:	08003241 	.word	0x08003241

08002290 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002298:	2300      	movs	r3, #0
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022b4:	d004      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x30>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a8e      	ldr	r2, [pc, #568]	@ (80024f4 <HAL_ADC_IRQHandler+0x264>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x34>
 80022c0:	4b8d      	ldr	r3, [pc, #564]	@ (80024f8 <HAL_ADC_IRQHandler+0x268>)
 80022c2:	e000      	b.n	80022c6 <HAL_ADC_IRQHandler+0x36>
 80022c4:	4b8d      	ldr	r3, [pc, #564]	@ (80024fc <HAL_ADC_IRQHandler+0x26c>)
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fc86 	bl	8001bd8 <LL_ADC_GetMultimode>
 80022cc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d017      	beq.n	8002308 <HAL_ADC_IRQHandler+0x78>
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d012      	beq.n	8002308 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d105      	bne.n	80022fa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f001 f808 	bl	8003310 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2202      	movs	r2, #2
 8002306:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d004      	beq.n	800231c <HAL_ADC_IRQHandler+0x8c>
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10b      	bne.n	8002334 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8094 	beq.w	8002450 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 808e 	beq.w	8002450 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002344:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fb9f 	bl	8001a94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d072      	beq.n	8002442 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a64      	ldr	r2, [pc, #400]	@ (80024f4 <HAL_ADC_IRQHandler+0x264>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d009      	beq.n	800237a <HAL_ADC_IRQHandler+0xea>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a65      	ldr	r2, [pc, #404]	@ (8002500 <HAL_ADC_IRQHandler+0x270>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d002      	beq.n	8002376 <HAL_ADC_IRQHandler+0xe6>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	e003      	b.n	800237e <HAL_ADC_IRQHandler+0xee>
 8002376:	4b63      	ldr	r3, [pc, #396]	@ (8002504 <HAL_ADC_IRQHandler+0x274>)
 8002378:	e001      	b.n	800237e <HAL_ADC_IRQHandler+0xee>
 800237a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	4293      	cmp	r3, r2
 8002384:	d008      	beq.n	8002398 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b05      	cmp	r3, #5
 8002390:	d002      	beq.n	8002398 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b09      	cmp	r3, #9
 8002396:	d104      	bne.n	80023a2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	e014      	b.n	80023cc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a53      	ldr	r2, [pc, #332]	@ (80024f4 <HAL_ADC_IRQHandler+0x264>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d009      	beq.n	80023c0 <HAL_ADC_IRQHandler+0x130>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a53      	ldr	r2, [pc, #332]	@ (8002500 <HAL_ADC_IRQHandler+0x270>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d002      	beq.n	80023bc <HAL_ADC_IRQHandler+0x12c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	e003      	b.n	80023c4 <HAL_ADC_IRQHandler+0x134>
 80023bc:	4b51      	ldr	r3, [pc, #324]	@ (8002504 <HAL_ADC_IRQHandler+0x274>)
 80023be:	e001      	b.n	80023c4 <HAL_ADC_IRQHandler+0x134>
 80023c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023c4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d135      	bne.n	8002442 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d12e      	bne.n	8002442 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fc9a 	bl	8001d22 <LL_ADC_REG_IsConversionOngoing>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d11a      	bne.n	800242a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 020c 	bic.w	r2, r2, #12
 8002402:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002408:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d112      	bne.n	8002442 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002428:	e00b      	b.n	8002442 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	f043 0210 	orr.w	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f984 	bl	8002750 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	220c      	movs	r2, #12
 800244e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d004      	beq.n	8002464 <HAL_ADC_IRQHandler+0x1d4>
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10b      	bne.n	800247c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80b3 	beq.w	80025d6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80ad 	beq.w	80025d6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fb3a 	bl	8001b12 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800249e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff faf5 	bl	8001a94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024aa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a10      	ldr	r2, [pc, #64]	@ (80024f4 <HAL_ADC_IRQHandler+0x264>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d009      	beq.n	80024ca <HAL_ADC_IRQHandler+0x23a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a11      	ldr	r2, [pc, #68]	@ (8002500 <HAL_ADC_IRQHandler+0x270>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d002      	beq.n	80024c6 <HAL_ADC_IRQHandler+0x236>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	e003      	b.n	80024ce <HAL_ADC_IRQHandler+0x23e>
 80024c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <HAL_ADC_IRQHandler+0x274>)
 80024c8:	e001      	b.n	80024ce <HAL_ADC_IRQHandler+0x23e>
 80024ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d008      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d002      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b07      	cmp	r3, #7
 80024e6:	d10f      	bne.n	8002508 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	623b      	str	r3, [r7, #32]
 80024f0:	e01f      	b.n	8002532 <HAL_ADC_IRQHandler+0x2a2>
 80024f2:	bf00      	nop
 80024f4:	50000100 	.word	0x50000100
 80024f8:	50000300 	.word	0x50000300
 80024fc:	50000700 	.word	0x50000700
 8002500:	50000500 	.word	0x50000500
 8002504:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a8b      	ldr	r2, [pc, #556]	@ (800273c <HAL_ADC_IRQHandler+0x4ac>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_ADC_IRQHandler+0x296>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a8a      	ldr	r2, [pc, #552]	@ (8002740 <HAL_ADC_IRQHandler+0x4b0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d002      	beq.n	8002522 <HAL_ADC_IRQHandler+0x292>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	e003      	b.n	800252a <HAL_ADC_IRQHandler+0x29a>
 8002522:	4b88      	ldr	r3, [pc, #544]	@ (8002744 <HAL_ADC_IRQHandler+0x4b4>)
 8002524:	e001      	b.n	800252a <HAL_ADC_IRQHandler+0x29a>
 8002526:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800252a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d047      	beq.n	80025c8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <HAL_ADC_IRQHandler+0x2c2>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d03f      	beq.n	80025c8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800254e:	2b00      	cmp	r3, #0
 8002550:	d13a      	bne.n	80025c8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255c:	2b40      	cmp	r3, #64	@ 0x40
 800255e:	d133      	bne.n	80025c8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d12e      	bne.n	80025c8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fbea 	bl	8001d48 <LL_ADC_INJ_IsConversionOngoing>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d11a      	bne.n	80025b0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002588:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d112      	bne.n	80025c8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025ae:	e00b      	b.n	80025c8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b4:	f043 0210 	orr.w	r2, r3, #16
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fe79 	bl	80032c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2260      	movs	r2, #96	@ 0x60
 80025d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d011      	beq.n	8002604 <HAL_ADC_IRQHandler+0x374>
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00c      	beq.n	8002604 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f8be 	bl	8002778 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2280      	movs	r2, #128	@ 0x80
 8002602:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d012      	beq.n	8002634 <HAL_ADC_IRQHandler+0x3a4>
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00d      	beq.n	8002634 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fe5f 	bl	80032e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800263a:	2b00      	cmp	r3, #0
 800263c:	d012      	beq.n	8002664 <HAL_ADC_IRQHandler+0x3d4>
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fe51 	bl	80032fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002662:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	d043      	beq.n	80026f6 <HAL_ADC_IRQHandler+0x466>
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b00      	cmp	r3, #0
 8002676:	d03e      	beq.n	80026f6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002680:	2301      	movs	r3, #1
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
 8002684:	e021      	b.n	80026ca <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d015      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002694:	d004      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x410>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a28      	ldr	r2, [pc, #160]	@ (800273c <HAL_ADC_IRQHandler+0x4ac>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_IRQHandler+0x414>
 80026a0:	4b29      	ldr	r3, [pc, #164]	@ (8002748 <HAL_ADC_IRQHandler+0x4b8>)
 80026a2:	e000      	b.n	80026a6 <HAL_ADC_IRQHandler+0x416>
 80026a4:	4b29      	ldr	r3, [pc, #164]	@ (800274c <HAL_ADC_IRQHandler+0x4bc>)
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff faa4 	bl	8001bf4 <LL_ADC_GetMultiDMATransfer>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80026b2:	2301      	movs	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b6:	e008      	b.n	80026ca <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80026c6:	2301      	movs	r3, #1
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10e      	bne.n	80026ee <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e0:	f043 0202 	orr.w	r2, r3, #2
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f84f 	bl	800278c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2210      	movs	r2, #16
 80026f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d018      	beq.n	8002732 <HAL_ADC_IRQHandler+0x4a2>
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002706:	2b00      	cmp	r3, #0
 8002708:	d013      	beq.n	8002732 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271a:	f043 0208 	orr.w	r2, r3, #8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800272a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fdd1 	bl	80032d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	@ 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	50000100 	.word	0x50000100
 8002740:	50000500 	.word	0x50000500
 8002744:	50000400 	.word	0x50000400
 8002748:	50000300 	.word	0x50000300
 800274c:	50000700 	.word	0x50000700

08002750 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b0b6      	sub	sp, #216	@ 0xd8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d102      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x24>
 80027be:	2302      	movs	r3, #2
 80027c0:	f000 bc13 	b.w	8002fea <HAL_ADC_ConfigChannel+0x84a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff faa6 	bl	8001d22 <LL_ADC_REG_IsConversionOngoing>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f040 83f3 	bne.w	8002fc4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6859      	ldr	r1, [r3, #4]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	f7ff f965 	bl	8001aba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fa94 	bl	8001d22 <LL_ADC_REG_IsConversionOngoing>
 80027fa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff faa0 	bl	8001d48 <LL_ADC_INJ_IsConversionOngoing>
 8002808:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800280c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 81d9 	bne.w	8002bc8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002816:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 81d4 	bne.w	8002bc8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002828:	d10f      	bne.n	800284a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	4619      	mov	r1, r3
 8002836:	f7ff f97f 	bl	8001b38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff f913 	bl	8001a6e <LL_ADC_SetSamplingTimeCommonConfig>
 8002848:	e00e      	b.n	8002868 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	461a      	mov	r2, r3
 8002858:	f7ff f96e 	bl	8001b38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f903 	bl	8001a6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	08db      	lsrs	r3, r3, #3
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d022      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6919      	ldr	r1, [r3, #16]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800289a:	f7ff f85d 	bl	8001958 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6919      	ldr	r1, [r3, #16]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f7ff f8a9 	bl	8001a02 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d102      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x126>
 80028c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028c4:	e000      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x128>
 80028c6:	2300      	movs	r3, #0
 80028c8:	461a      	mov	r2, r3
 80028ca:	f7ff f8b5 	bl	8001a38 <LL_ADC_SetOffsetSaturation>
 80028ce:	e17b      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff f862 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x15c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff f857 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	0e9b      	lsrs	r3, r3, #26
 80028f6:	f003 021f 	and.w	r2, r3, #31
 80028fa:	e01e      	b.n	800293a <HAL_ADC_ConfigChannel+0x19a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff f84c 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002908:	4603      	mov	r3, r0
 800290a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800291a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800291e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e004      	b.n	8002938 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800292e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x1b2>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	0e9b      	lsrs	r3, r3, #26
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	e018      	b.n	8002984 <HAL_ADC_ConfigChannel+0x1e4>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800296a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800296e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e004      	b.n	8002984 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800297a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002984:	429a      	cmp	r2, r3
 8002986:	d106      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2200      	movs	r2, #0
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff f81b 	bl	80019cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2101      	movs	r1, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe ffff 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10a      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x222>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fff4 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80029b8:	4603      	mov	r3, r0
 80029ba:	0e9b      	lsrs	r3, r3, #26
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	e01e      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x260>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2101      	movs	r1, #1
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe ffe9 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80029e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80029e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e004      	b.n	80029fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80029f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x278>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	e018      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x2aa>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	e004      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d106      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2101      	movs	r1, #1
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe ffb8 	bl	80019cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2102      	movs	r1, #2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe ff9c 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10a      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x2e8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2102      	movs	r1, #2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe ff91 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	0e9b      	lsrs	r3, r3, #26
 8002a82:	f003 021f 	and.w	r2, r3, #31
 8002a86:	e01e      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x326>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe ff86 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002aaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e004      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002aba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x33e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	0e9b      	lsrs	r3, r3, #26
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	e016      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x36c>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002af0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002af2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002af6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002afe:	2320      	movs	r3, #32
 8002b00:	e004      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d106      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2200      	movs	r2, #0
 8002b16:	2102      	movs	r1, #2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe ff57 	bl	80019cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2103      	movs	r1, #3
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe ff3b 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x3aa>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2103      	movs	r1, #3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe ff30 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002b40:	4603      	mov	r3, r0
 8002b42:	0e9b      	lsrs	r3, r3, #26
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	e017      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x3da>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2103      	movs	r1, #3
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe ff25 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002b56:	4603      	mov	r3, r0
 8002b58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b64:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002b66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e003      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002b70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x3f2>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0e9b      	lsrs	r3, r3, #26
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	e011      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x416>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002ba0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002baa:	2320      	movs	r3, #32
 8002bac:	e003      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d106      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2103      	movs	r1, #3
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe ff02 	bl	80019cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff f881 	bl	8001cd4 <LL_ADC_IsEnabled>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 813d 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	461a      	mov	r2, r3
 8002be8:	f7fe ffd2 	bl	8001b90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4aa2      	ldr	r2, [pc, #648]	@ (8002e7c <HAL_ADC_ConfigChannel+0x6dc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	f040 812e 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10b      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x480>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2b09      	cmp	r3, #9
 8002c16:	bf94      	ite	ls
 8002c18:	2301      	movls	r3, #1
 8002c1a:	2300      	movhi	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	e019      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x4b4>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c30:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c38:	2320      	movs	r3, #32
 8002c3a:	e003      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	3301      	adds	r3, #1
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	2b09      	cmp	r3, #9
 8002c4c:	bf94      	ite	ls
 8002c4e:	2301      	movls	r3, #1
 8002c50:	2300      	movhi	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d079      	beq.n	8002d4c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d107      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x4d4>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	069b      	lsls	r3, r3, #26
 8002c6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c72:	e015      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x500>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c84:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	069b      	lsls	r3, r3, #26
 8002c9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d109      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x520>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2101      	movs	r1, #1
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	e017      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x550>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	e003      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	ea42 0103 	orr.w	r1, r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x576>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e9b      	lsrs	r3, r3, #26
 8002d06:	3301      	adds	r3, #1
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	051b      	lsls	r3, r3, #20
 8002d14:	e018      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x5a8>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d2e:	2320      	movs	r3, #32
 8002d30:	e003      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	e07e      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d107      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x5c8>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0e9b      	lsrs	r3, r3, #26
 8002d5e:	3301      	adds	r3, #1
 8002d60:	069b      	lsls	r3, r3, #26
 8002d62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d66:	e015      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x5f4>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d78:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002d80:	2320      	movs	r3, #32
 8002d82:	e003      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	069b      	lsls	r3, r3, #26
 8002d90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x614>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	0e9b      	lsrs	r3, r3, #26
 8002da6:	3301      	adds	r3, #1
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	2101      	movs	r1, #1
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	e017      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x644>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	61fb      	str	r3, [r7, #28]
  return result;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002dcc:	2320      	movs	r3, #32
 8002dce:	e003      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	ea42 0103 	orr.w	r1, r2, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10d      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x670>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	4613      	mov	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	3b1e      	subs	r3, #30
 8002e08:	051b      	lsls	r3, r3, #20
 8002e0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	e01b      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x6a8>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	613b      	str	r3, [r7, #16]
  return result;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e28:	2320      	movs	r3, #32
 8002e2a:	e003      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3301      	adds	r3, #1
 8002e36:	f003 021f 	and.w	r2, r3, #31
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	3b1e      	subs	r3, #30
 8002e42:	051b      	lsls	r3, r3, #20
 8002e44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e48:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f7fe fe72 	bl	8001b38 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <HAL_ADC_ConfigChannel+0x6e0>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80be 	beq.w	8002fde <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e6a:	d004      	beq.n	8002e76 <HAL_ADC_ConfigChannel+0x6d6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <HAL_ADC_ConfigChannel+0x6e4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10a      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x6ec>
 8002e76:	4b04      	ldr	r3, [pc, #16]	@ (8002e88 <HAL_ADC_ConfigChannel+0x6e8>)
 8002e78:	e009      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x6ee>
 8002e7a:	bf00      	nop
 8002e7c:	407f0000 	.word	0x407f0000
 8002e80:	80080000 	.word	0x80080000
 8002e84:	50000100 	.word	0x50000100
 8002e88:	50000300 	.word	0x50000300
 8002e8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x854>)
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fd54 	bl	800193c <LL_ADC_GetCommonPathInternalCh>
 8002e94:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a56      	ldr	r2, [pc, #344]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x858>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x70c>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a55      	ldr	r2, [pc, #340]	@ (8002ffc <HAL_ADC_ConfigChannel+0x85c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d13a      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d134      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ec0:	d005      	beq.n	8002ece <HAL_ADC_ConfigChannel+0x72e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a4e      	ldr	r2, [pc, #312]	@ (8003000 <HAL_ADC_ConfigChannel+0x860>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	f040 8085 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ed6:	d004      	beq.n	8002ee2 <HAL_ADC_ConfigChannel+0x742>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a49      	ldr	r2, [pc, #292]	@ (8003004 <HAL_ADC_ConfigChannel+0x864>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x746>
 8002ee2:	4a49      	ldr	r2, [pc, #292]	@ (8003008 <HAL_ADC_ConfigChannel+0x868>)
 8002ee4:	e000      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x748>
 8002ee6:	4a43      	ldr	r2, [pc, #268]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x854>)
 8002ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	f7fe fd0f 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ef8:	4b44      	ldr	r3, [pc, #272]	@ (800300c <HAL_ADC_ConfigChannel+0x86c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	4a44      	ldr	r2, [pc, #272]	@ (8003010 <HAL_ADC_ConfigChannel+0x870>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	099b      	lsrs	r3, r3, #6
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f12:	e002      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f9      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f20:	e05a      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a3b      	ldr	r2, [pc, #236]	@ (8003014 <HAL_ADC_ConfigChannel+0x874>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d125      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11f      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a31      	ldr	r2, [pc, #196]	@ (8003004 <HAL_ADC_ConfigChannel+0x864>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d104      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x7ac>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a34      	ldr	r2, [pc, #208]	@ (8003018 <HAL_ADC_ConfigChannel+0x878>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d047      	beq.n	8002fdc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f54:	d004      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x7c0>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003004 <HAL_ADC_ConfigChannel+0x864>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x7c4>
 8002f60:	4a29      	ldr	r2, [pc, #164]	@ (8003008 <HAL_ADC_ConfigChannel+0x868>)
 8002f62:	e000      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x7c6>
 8002f64:	4a23      	ldr	r2, [pc, #140]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x854>)
 8002f66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f7fe fcd0 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f76:	e031      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a27      	ldr	r2, [pc, #156]	@ (800301c <HAL_ADC_ConfigChannel+0x87c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d12d      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d127      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <HAL_ADC_ConfigChannel+0x864>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fa0:	d004      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x80c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a17      	ldr	r2, [pc, #92]	@ (8003004 <HAL_ADC_ConfigChannel+0x864>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x810>
 8002fac:	4a16      	ldr	r2, [pc, #88]	@ (8003008 <HAL_ADC_ConfigChannel+0x868>)
 8002fae:	e000      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x812>
 8002fb0:	4a10      	ldr	r2, [pc, #64]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x854>)
 8002fb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fb6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f7fe fcaa 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
 8002fc2:	e00c      	b.n	8002fde <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc8:	f043 0220 	orr.w	r2, r3, #32
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002fd6:	e002      	b.n	8002fde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fd8:	bf00      	nop
 8002fda:	e000      	b.n	8002fde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fe6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	37d8      	adds	r7, #216	@ 0xd8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	50000700 	.word	0x50000700
 8002ff8:	c3210000 	.word	0xc3210000
 8002ffc:	90c00010 	.word	0x90c00010
 8003000:	50000600 	.word	0x50000600
 8003004:	50000100 	.word	0x50000100
 8003008:	50000300 	.word	0x50000300
 800300c:	20000004 	.word	0x20000004
 8003010:	053e2d63 	.word	0x053e2d63
 8003014:	c7520000 	.word	0xc7520000
 8003018:	50000500 	.word	0x50000500
 800301c:	cb840000 	.word	0xcb840000

08003020 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe fe4f 	bl	8001cd4 <LL_ADC_IsEnabled>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d176      	bne.n	800312a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	4b3c      	ldr	r3, [pc, #240]	@ (8003134 <ADC_Enable+0x114>)
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e062      	b.n	800312c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe fe1e 	bl	8001cac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003078:	d004      	beq.n	8003084 <ADC_Enable+0x64>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2e      	ldr	r2, [pc, #184]	@ (8003138 <ADC_Enable+0x118>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d101      	bne.n	8003088 <ADC_Enable+0x68>
 8003084:	4b2d      	ldr	r3, [pc, #180]	@ (800313c <ADC_Enable+0x11c>)
 8003086:	e000      	b.n	800308a <ADC_Enable+0x6a>
 8003088:	4b2d      	ldr	r3, [pc, #180]	@ (8003140 <ADC_Enable+0x120>)
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fc56 	bl	800193c <LL_ADC_GetCommonPathInternalCh>
 8003090:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003096:	2b00      	cmp	r3, #0
 8003098:	d013      	beq.n	80030c2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800309a:	4b2a      	ldr	r3, [pc, #168]	@ (8003144 <ADC_Enable+0x124>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	099b      	lsrs	r3, r3, #6
 80030a0:	4a29      	ldr	r2, [pc, #164]	@ (8003148 <ADC_Enable+0x128>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030b4:	e002      	b.n	80030bc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f9      	bne.n	80030b6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030c2:	f7fe fc09 	bl	80018d8 <HAL_GetTick>
 80030c6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c8:	e028      	b.n	800311c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fe00 	bl	8001cd4 <LL_ADC_IsEnabled>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fde4 	bl	8001cac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030e4:	f7fe fbf8 	bl	80018d8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d914      	bls.n	800311c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d00d      	beq.n	800311c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003104:	f043 0210 	orr.w	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e007      	b.n	800312c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d1cf      	bne.n	80030ca <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	8000003f 	.word	0x8000003f
 8003138:	50000100 	.word	0x50000100
 800313c:	50000300 	.word	0x50000300
 8003140:	50000700 	.word	0x50000700
 8003144:	20000004 	.word	0x20000004
 8003148:	053e2d63 	.word	0x053e2d63

0800314c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003162:	2b00      	cmp	r3, #0
 8003164:	d14b      	bne.n	80031fe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d021      	beq.n	80031c4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe fc85 	bl	8001a94 <LL_ADC_REG_IsTriggerSourceSWStart>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d032      	beq.n	80031f6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d12b      	bne.n	80031f6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11f      	bne.n	80031f6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ba:	f043 0201 	orr.w	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031c2:	e018      	b.n	80031f6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d111      	bne.n	80031f6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d105      	bne.n	80031f6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff faaa 	bl	8002750 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031fc:	e00e      	b.n	800321c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff fabe 	bl	800278c <HAL_ADC_ErrorCallback>
}
 8003210:	e004      	b.n	800321c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003230:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff fa96 	bl	8002764 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003252:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325e:	f043 0204 	orr.w	r2, r3, #4
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff fa90 	bl	800278c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <LL_ADC_IsEnabled>:
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <LL_ADC_IsEnabled+0x18>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <LL_ADC_IsEnabled+0x1a>
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_ADC_REG_IsConversionOngoing>:
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d101      	bne.n	80032b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b0a1      	sub	sp, #132	@ 0x84
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800333e:	2302      	movs	r3, #2
 8003340:	e0e7      	b.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800334a:	2300      	movs	r3, #0
 800334c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800334e:	2300      	movs	r3, #0
 8003350:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800335a:	d102      	bne.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800335c:	4b6f      	ldr	r3, [pc, #444]	@ (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	e009      	b.n	8003376 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6e      	ldr	r2, [pc, #440]	@ (8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d102      	bne.n	8003372 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800336c:	4b6d      	ldr	r3, [pc, #436]	@ (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	e001      	b.n	8003376 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0be      	b.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ff7f 	bl	800329a <LL_ADC_REG_IsConversionOngoing>
 800339c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff79 	bl	800329a <LL_ADC_REG_IsConversionOngoing>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 80a0 	bne.w	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80033b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 809c 	bne.w	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033c0:	d004      	beq.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a55      	ldr	r2, [pc, #340]	@ (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80033cc:	4b56      	ldr	r3, [pc, #344]	@ (8003528 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80033ce:	e000      	b.n	80033d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80033d0:	4b56      	ldr	r3, [pc, #344]	@ (800352c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80033d2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d04b      	beq.n	8003474 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033ee:	035b      	lsls	r3, r3, #13
 80033f0:	430b      	orrs	r3, r1
 80033f2:	431a      	orrs	r2, r3
 80033f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003400:	d004      	beq.n	800340c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a45      	ldr	r2, [pc, #276]	@ (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10f      	bne.n	800342c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800340c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003410:	f7ff ff30 	bl	8003274 <LL_ADC_IsEnabled>
 8003414:	4604      	mov	r4, r0
 8003416:	4841      	ldr	r0, [pc, #260]	@ (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003418:	f7ff ff2c 	bl	8003274 <LL_ADC_IsEnabled>
 800341c:	4603      	mov	r3, r0
 800341e:	4323      	orrs	r3, r4
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e012      	b.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800342c:	483c      	ldr	r0, [pc, #240]	@ (8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800342e:	f7ff ff21 	bl	8003274 <LL_ADC_IsEnabled>
 8003432:	4604      	mov	r4, r0
 8003434:	483b      	ldr	r0, [pc, #236]	@ (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003436:	f7ff ff1d 	bl	8003274 <LL_ADC_IsEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	431c      	orrs	r4, r3
 800343e:	483c      	ldr	r0, [pc, #240]	@ (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003440:	f7ff ff18 	bl	8003274 <LL_ADC_IsEnabled>
 8003444:	4603      	mov	r3, r0
 8003446:	4323      	orrs	r3, r4
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d056      	beq.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003456:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800345e:	f023 030f 	bic.w	r3, r3, #15
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	6811      	ldr	r1, [r2, #0]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	6892      	ldr	r2, [r2, #8]
 800346a:	430a      	orrs	r2, r1
 800346c:	431a      	orrs	r2, r3
 800346e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003470:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003472:	e047      	b.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800347c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800347e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003488:	d004      	beq.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a23      	ldr	r2, [pc, #140]	@ (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10f      	bne.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003494:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003498:	f7ff feec 	bl	8003274 <LL_ADC_IsEnabled>
 800349c:	4604      	mov	r4, r0
 800349e:	481f      	ldr	r0, [pc, #124]	@ (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034a0:	f7ff fee8 	bl	8003274 <LL_ADC_IsEnabled>
 80034a4:	4603      	mov	r3, r0
 80034a6:	4323      	orrs	r3, r4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	e012      	b.n	80034da <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80034b4:	481a      	ldr	r0, [pc, #104]	@ (8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034b6:	f7ff fedd 	bl	8003274 <LL_ADC_IsEnabled>
 80034ba:	4604      	mov	r4, r0
 80034bc:	4819      	ldr	r0, [pc, #100]	@ (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034be:	f7ff fed9 	bl	8003274 <LL_ADC_IsEnabled>
 80034c2:	4603      	mov	r3, r0
 80034c4:	431c      	orrs	r4, r3
 80034c6:	481a      	ldr	r0, [pc, #104]	@ (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80034c8:	f7ff fed4 	bl	8003274 <LL_ADC_IsEnabled>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4323      	orrs	r3, r4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d012      	beq.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034e6:	f023 030f 	bic.w	r3, r3, #15
 80034ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034ec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034ee:	e009      	b.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003502:	e000      	b.n	8003506 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003504:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800350e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003512:	4618      	mov	r0, r3
 8003514:	3784      	adds	r7, #132	@ 0x84
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}
 800351a:	bf00      	nop
 800351c:	50000100 	.word	0x50000100
 8003520:	50000400 	.word	0x50000400
 8003524:	50000500 	.word	0x50000500
 8003528:	50000300 	.word	0x50000300
 800352c:	50000700 	.word	0x50000700
 8003530:	50000600 	.word	0x50000600

08003534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003544:	4b0c      	ldr	r3, [pc, #48]	@ (8003578 <__NVIC_SetPriorityGrouping+0x44>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003550:	4013      	ands	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800355c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003566:	4a04      	ldr	r2, [pc, #16]	@ (8003578 <__NVIC_SetPriorityGrouping+0x44>)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	60d3      	str	r3, [r2, #12]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003580:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <__NVIC_GetPriorityGrouping+0x18>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	f003 0307 	and.w	r3, r3, #7
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	db0b      	blt.n	80035c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	f003 021f 	and.w	r2, r3, #31
 80035b0:	4907      	ldr	r1, [pc, #28]	@ (80035d0 <__NVIC_EnableIRQ+0x38>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2001      	movs	r0, #1
 80035ba:	fa00 f202 	lsl.w	r2, r0, r2
 80035be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	e000e100 	.word	0xe000e100

080035d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	db0a      	blt.n	80035fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	490c      	ldr	r1, [pc, #48]	@ (8003620 <__NVIC_SetPriority+0x4c>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	440b      	add	r3, r1
 80035f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035fc:	e00a      	b.n	8003614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4908      	ldr	r1, [pc, #32]	@ (8003624 <__NVIC_SetPriority+0x50>)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	3b04      	subs	r3, #4
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	440b      	add	r3, r1
 8003612:	761a      	strb	r2, [r3, #24]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000e100 	.word	0xe000e100
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	@ 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f1c3 0307 	rsb	r3, r3, #7
 8003642:	2b04      	cmp	r3, #4
 8003644:	bf28      	it	cs
 8003646:	2304      	movcs	r3, #4
 8003648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3304      	adds	r3, #4
 800364e:	2b06      	cmp	r3, #6
 8003650:	d902      	bls.n	8003658 <NVIC_EncodePriority+0x30>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3b03      	subs	r3, #3
 8003656:	e000      	b.n	800365a <NVIC_EncodePriority+0x32>
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800365c:	f04f 32ff 	mov.w	r2, #4294967295
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	401a      	ands	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003670:	f04f 31ff 	mov.w	r1, #4294967295
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	43d9      	mvns	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	4313      	orrs	r3, r2
         );
}
 8003682:	4618      	mov	r0, r3
 8003684:	3724      	adds	r7, #36	@ 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a0:	d301      	bcc.n	80036a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036a2:	2301      	movs	r3, #1
 80036a4:	e00f      	b.n	80036c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a6:	4a0a      	ldr	r2, [pc, #40]	@ (80036d0 <SysTick_Config+0x40>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ae:	210f      	movs	r1, #15
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	f7ff ff8e 	bl	80035d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b8:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <SysTick_Config+0x40>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036be:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <SysTick_Config+0x40>)
 80036c0:	2207      	movs	r2, #7
 80036c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	e000e010 	.word	0xe000e010

080036d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff29 	bl	8003534 <__NVIC_SetPriorityGrouping>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	4603      	mov	r3, r0
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036f8:	f7ff ff40 	bl	800357c <__NVIC_GetPriorityGrouping>
 80036fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	6978      	ldr	r0, [r7, #20]
 8003704:	f7ff ff90 	bl	8003628 <NVIC_EncodePriority>
 8003708:	4602      	mov	r2, r0
 800370a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff5f 	bl	80035d4 <__NVIC_SetPriority>
}
 8003716:	bf00      	nop
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	4603      	mov	r3, r0
 8003726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff33 	bl	8003598 <__NVIC_EnableIRQ>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff ffa4 	bl	8003690 <SysTick_Config>
 8003748:	4603      	mov	r3, r0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e08d      	b.n	8003882 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	4b47      	ldr	r3, [pc, #284]	@ (800388c <HAL_DMA_Init+0x138>)
 800376e:	429a      	cmp	r2, r3
 8003770:	d80f      	bhi.n	8003792 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	4b45      	ldr	r3, [pc, #276]	@ (8003890 <HAL_DMA_Init+0x13c>)
 800377a:	4413      	add	r3, r2
 800377c:	4a45      	ldr	r2, [pc, #276]	@ (8003894 <HAL_DMA_Init+0x140>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	009a      	lsls	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a42      	ldr	r2, [pc, #264]	@ (8003898 <HAL_DMA_Init+0x144>)
 800378e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003790:	e00e      	b.n	80037b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	4b40      	ldr	r3, [pc, #256]	@ (800389c <HAL_DMA_Init+0x148>)
 800379a:	4413      	add	r3, r2
 800379c:	4a3d      	ldr	r2, [pc, #244]	@ (8003894 <HAL_DMA_Init+0x140>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	009a      	lsls	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a3c      	ldr	r2, [pc, #240]	@ (80038a0 <HAL_DMA_Init+0x14c>)
 80037ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80037c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fa76 	bl	8003cf4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003810:	d102      	bne.n	8003818 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800382c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d010      	beq.n	8003858 <HAL_DMA_Init+0x104>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b04      	cmp	r3, #4
 800383c:	d80c      	bhi.n	8003858 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa96 	bl	8003d70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003854:	605a      	str	r2, [r3, #4]
 8003856:	e008      	b.n	800386a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40020407 	.word	0x40020407
 8003890:	bffdfff8 	.word	0xbffdfff8
 8003894:	cccccccd 	.word	0xcccccccd
 8003898:	40020000 	.word	0x40020000
 800389c:	bffdfbf8 	.word	0xbffdfbf8
 80038a0:	40020400 	.word	0x40020400

080038a4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_DMA_Start_IT+0x20>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e066      	b.n	8003992 <HAL_DMA_Start_IT+0xee>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d155      	bne.n	8003984 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f9bb 	bl	8003c78 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 020e 	orr.w	r2, r2, #14
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e00f      	b.n	800393c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0204 	bic.w	r2, r2, #4
 800392a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 020a 	orr.w	r2, r2, #10
 800393a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003954:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003958:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003970:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e005      	b.n	8003990 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800398c:	2302      	movs	r3, #2
 800398e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003990:	7dfb      	ldrb	r3, [r7, #23]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800399a:	b480      	push	{r7}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d005      	beq.n	80039be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2204      	movs	r2, #4
 80039b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e037      	b.n	8003a2e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 020e 	bic.w	r2, r2, #14
 80039cc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039dc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f2:	f003 021f 	and.w	r2, r3, #31
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	2101      	movs	r1, #1
 80039fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003a00:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a0a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00c      	beq.n	8003a2e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a22:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a2c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d00d      	beq.n	8003a80 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2204      	movs	r2, #4
 8003a68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
 8003a7e:	e047      	b.n	8003b10 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 020e 	bic.w	r2, r2, #14
 8003a8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab4:	f003 021f 	and.w	r2, r3, #31
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abc:	2101      	movs	r1, #1
 8003abe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003acc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003aee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4798      	blx	r3
    }
  }
  return status;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b36:	f003 031f 	and.w	r3, r3, #31
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d026      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x7a>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d021      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d107      	bne.n	8003b6e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0204 	bic.w	r2, r2, #4
 8003b6c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	f003 021f 	and.w	r2, r3, #31
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d071      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b92:	e06c      	b.n	8003c6e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d02e      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d029      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 020a 	bic.w	r2, r2, #10
 8003bce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bdc:	f003 021f 	and.w	r2, r3, #31
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	2102      	movs	r1, #2
 8003be6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d038      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c04:	e033      	b.n	8003c6e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2208      	movs	r2, #8
 8003c10:	409a      	lsls	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d02a      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d025      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 020e 	bic.w	r2, r2, #14
 8003c32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c38:	f003 021f 	and.w	r2, r3, #31
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	2101      	movs	r1, #1
 8003c42:	fa01 f202 	lsl.w	r2, r1, r2
 8003c46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c6e:	bf00      	nop
 8003c70:	bf00      	nop
}
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c8e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ca0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	f003 021f 	and.w	r2, r3, #31
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	2101      	movs	r1, #1
 8003cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d108      	bne.n	8003cd8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cd6:	e007      	b.n	8003ce8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	60da      	str	r2, [r3, #12]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b16      	ldr	r3, [pc, #88]	@ (8003d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d802      	bhi.n	8003d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003d08:	4b15      	ldr	r3, [pc, #84]	@ (8003d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	e001      	b.n	8003d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003d0e:	4b15      	ldr	r3, [pc, #84]	@ (8003d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d10:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	3b08      	subs	r3, #8
 8003d1e:	4a12      	ldr	r2, [pc, #72]	@ (8003d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2c:	089b      	lsrs	r3, r3, #2
 8003d2e:	009a      	lsls	r2, r3, #2
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	461a      	mov	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 031f 	and.w	r3, r3, #31
 8003d46:	2201      	movs	r2, #1
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40020407 	.word	0x40020407
 8003d60:	40020800 	.word	0x40020800
 8003d64:	40020820 	.word	0x40020820
 8003d68:	cccccccd 	.word	0xcccccccd
 8003d6c:	40020880 	.word	0x40020880

08003d70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4b0b      	ldr	r3, [pc, #44]	@ (8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a08      	ldr	r2, [pc, #32]	@ (8003db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d92:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	1000823f 	.word	0x1000823f
 8003db4:	40020940 	.word	0x40020940

08003db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dc6:	e15a      	b.n	800407e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 814c 	beq.w	8004078 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d005      	beq.n	8003df8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d130      	bne.n	8003e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	2203      	movs	r2, #3
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e2e:	2201      	movs	r2, #1
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 0201 	and.w	r2, r3, #1
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d017      	beq.n	8003e96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	2203      	movs	r2, #3
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d123      	bne.n	8003eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	08da      	lsrs	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3208      	adds	r2, #8
 8003eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	220f      	movs	r2, #15
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	08da      	lsrs	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3208      	adds	r2, #8
 8003ee4:	6939      	ldr	r1, [r7, #16]
 8003ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4013      	ands	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0203 	and.w	r2, r3, #3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80a6 	beq.w	8004078 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2c:	4b5b      	ldr	r3, [pc, #364]	@ (800409c <HAL_GPIO_Init+0x2e4>)
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f30:	4a5a      	ldr	r2, [pc, #360]	@ (800409c <HAL_GPIO_Init+0x2e4>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f38:	4b58      	ldr	r3, [pc, #352]	@ (800409c <HAL_GPIO_Init+0x2e4>)
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f44:	4a56      	ldr	r2, [pc, #344]	@ (80040a0 <HAL_GPIO_Init+0x2e8>)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	3302      	adds	r3, #2
 8003f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	220f      	movs	r2, #15
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4013      	ands	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f6e:	d01f      	beq.n	8003fb0 <HAL_GPIO_Init+0x1f8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a4c      	ldr	r2, [pc, #304]	@ (80040a4 <HAL_GPIO_Init+0x2ec>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d019      	beq.n	8003fac <HAL_GPIO_Init+0x1f4>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a4b      	ldr	r2, [pc, #300]	@ (80040a8 <HAL_GPIO_Init+0x2f0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d013      	beq.n	8003fa8 <HAL_GPIO_Init+0x1f0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a4a      	ldr	r2, [pc, #296]	@ (80040ac <HAL_GPIO_Init+0x2f4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00d      	beq.n	8003fa4 <HAL_GPIO_Init+0x1ec>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a49      	ldr	r2, [pc, #292]	@ (80040b0 <HAL_GPIO_Init+0x2f8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <HAL_GPIO_Init+0x1e8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a48      	ldr	r2, [pc, #288]	@ (80040b4 <HAL_GPIO_Init+0x2fc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d101      	bne.n	8003f9c <HAL_GPIO_Init+0x1e4>
 8003f98:	2305      	movs	r3, #5
 8003f9a:	e00a      	b.n	8003fb2 <HAL_GPIO_Init+0x1fa>
 8003f9c:	2306      	movs	r3, #6
 8003f9e:	e008      	b.n	8003fb2 <HAL_GPIO_Init+0x1fa>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	e006      	b.n	8003fb2 <HAL_GPIO_Init+0x1fa>
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e004      	b.n	8003fb2 <HAL_GPIO_Init+0x1fa>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e002      	b.n	8003fb2 <HAL_GPIO_Init+0x1fa>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <HAL_GPIO_Init+0x1fa>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	f002 0203 	and.w	r2, r2, #3
 8003fb8:	0092      	lsls	r2, r2, #2
 8003fba:	4093      	lsls	r3, r2
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fc2:	4937      	ldr	r1, [pc, #220]	@ (80040a0 <HAL_GPIO_Init+0x2e8>)
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	089b      	lsrs	r3, r3, #2
 8003fc8:	3302      	adds	r3, #2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fd0:	4b39      	ldr	r3, [pc, #228]	@ (80040b8 <HAL_GPIO_Init+0x300>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ff4:	4a30      	ldr	r2, [pc, #192]	@ (80040b8 <HAL_GPIO_Init+0x300>)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80040b8 <HAL_GPIO_Init+0x300>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	43db      	mvns	r3, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800401e:	4a26      	ldr	r2, [pc, #152]	@ (80040b8 <HAL_GPIO_Init+0x300>)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004024:	4b24      	ldr	r3, [pc, #144]	@ (80040b8 <HAL_GPIO_Init+0x300>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	43db      	mvns	r3, r3
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4013      	ands	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004048:	4a1b      	ldr	r2, [pc, #108]	@ (80040b8 <HAL_GPIO_Init+0x300>)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800404e:	4b1a      	ldr	r3, [pc, #104]	@ (80040b8 <HAL_GPIO_Init+0x300>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	43db      	mvns	r3, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004072:	4a11      	ldr	r2, [pc, #68]	@ (80040b8 <HAL_GPIO_Init+0x300>)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	3301      	adds	r3, #1
 800407c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	f47f ae9d 	bne.w	8003dc8 <HAL_GPIO_Init+0x10>
  }
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40021000 	.word	0x40021000
 80040a0:	40010000 	.word	0x40010000
 80040a4:	48000400 	.word	0x48000400
 80040a8:	48000800 	.word	0x48000800
 80040ac:	48000c00 	.word	0x48000c00
 80040b0:	48001000 	.word	0x48001000
 80040b4:	48001400 	.word	0x48001400
 80040b8:	40010400 	.word	0x40010400

080040bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	807b      	strh	r3, [r7, #2]
 80040c8:	4613      	mov	r3, r2
 80040ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040cc:	787b      	ldrb	r3, [r7, #1]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040d2:	887a      	ldrh	r2, [r7, #2]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040d8:	e002      	b.n	80040e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040fe:	887a      	ldrh	r2, [r7, #2]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4013      	ands	r3, r2
 8004104:	041a      	lsls	r2, r3, #16
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	43d9      	mvns	r1, r3
 800410a:	887b      	ldrh	r3, [r7, #2]
 800410c:	400b      	ands	r3, r1
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	619a      	str	r2, [r3, #24]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800412a:	4b08      	ldr	r3, [pc, #32]	@ (800414c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d006      	beq.n	8004144 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004136:	4a05      	ldr	r2, [pc, #20]	@ (800414c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004138:	88fb      	ldrh	r3, [r7, #6]
 800413a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f806 	bl	8004150 <HAL_GPIO_EXTI_Callback>
  }
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40010400 	.word	0x40010400

08004150 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d141      	bne.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004176:	4b4b      	ldr	r3, [pc, #300]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800417e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004182:	d131      	bne.n	80041e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004184:	4b47      	ldr	r3, [pc, #284]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800418a:	4a46      	ldr	r2, [pc, #280]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004190:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004194:	4b43      	ldr	r3, [pc, #268]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800419c:	4a41      	ldr	r2, [pc, #260]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041a4:	4b40      	ldr	r3, [pc, #256]	@ (80042a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2232      	movs	r2, #50	@ 0x32
 80041aa:	fb02 f303 	mul.w	r3, r2, r3
 80041ae:	4a3f      	ldr	r2, [pc, #252]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	0c9b      	lsrs	r3, r3, #18
 80041b6:	3301      	adds	r3, #1
 80041b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ba:	e002      	b.n	80041c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3b01      	subs	r3, #1
 80041c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041c2:	4b38      	ldr	r3, [pc, #224]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ce:	d102      	bne.n	80041d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f2      	bne.n	80041bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041d6:	4b33      	ldr	r3, [pc, #204]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e2:	d158      	bne.n	8004296 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e057      	b.n	8004298 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041e8:	4b2e      	ldr	r3, [pc, #184]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ee:	4a2d      	ldr	r2, [pc, #180]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80041f8:	e04d      	b.n	8004296 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004200:	d141      	bne.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004202:	4b28      	ldr	r3, [pc, #160]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800420a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800420e:	d131      	bne.n	8004274 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004210:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004216:	4a23      	ldr	r2, [pc, #140]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004220:	4b20      	ldr	r3, [pc, #128]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004228:	4a1e      	ldr	r2, [pc, #120]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800422e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004230:	4b1d      	ldr	r3, [pc, #116]	@ (80042a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2232      	movs	r2, #50	@ 0x32
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	0c9b      	lsrs	r3, r3, #18
 8004242:	3301      	adds	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004246:	e002      	b.n	800424e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3b01      	subs	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800424e:	4b15      	ldr	r3, [pc, #84]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425a:	d102      	bne.n	8004262 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f2      	bne.n	8004248 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004262:	4b10      	ldr	r3, [pc, #64]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800426e:	d112      	bne.n	8004296 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e011      	b.n	8004298 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004274:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800427a:	4a0a      	ldr	r2, [pc, #40]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004280:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004284:	e007      	b.n	8004296 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004286:	4b07      	ldr	r3, [pc, #28]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800428e:	4a05      	ldr	r2, [pc, #20]	@ (80042a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004290:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004294:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	40007000 	.word	0x40007000
 80042a8:	20000004 	.word	0x20000004
 80042ac:	431bde83 	.word	0x431bde83

080042b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80042b4:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	4a04      	ldr	r2, [pc, #16]	@ (80042cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80042ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042be:	6093      	str	r3, [r2, #8]
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40007000 	.word	0x40007000

080042d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e2fe      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d075      	beq.n	80043da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ee:	4b97      	ldr	r3, [pc, #604]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042f8:	4b94      	ldr	r3, [pc, #592]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b0c      	cmp	r3, #12
 8004306:	d102      	bne.n	800430e <HAL_RCC_OscConfig+0x3e>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d002      	beq.n	8004314 <HAL_RCC_OscConfig+0x44>
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d10b      	bne.n	800432c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	4b8d      	ldr	r3, [pc, #564]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d05b      	beq.n	80043d8 <HAL_RCC_OscConfig+0x108>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d157      	bne.n	80043d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e2d9      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004334:	d106      	bne.n	8004344 <HAL_RCC_OscConfig+0x74>
 8004336:	4b85      	ldr	r3, [pc, #532]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a84      	ldr	r2, [pc, #528]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 800433c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	e01d      	b.n	8004380 <HAL_RCC_OscConfig+0xb0>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800434c:	d10c      	bne.n	8004368 <HAL_RCC_OscConfig+0x98>
 800434e:	4b7f      	ldr	r3, [pc, #508]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a7e      	ldr	r2, [pc, #504]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	4b7c      	ldr	r3, [pc, #496]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a7b      	ldr	r2, [pc, #492]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e00b      	b.n	8004380 <HAL_RCC_OscConfig+0xb0>
 8004368:	4b78      	ldr	r3, [pc, #480]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a77      	ldr	r2, [pc, #476]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 800436e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	4b75      	ldr	r3, [pc, #468]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a74      	ldr	r2, [pc, #464]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 800437a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800437e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d013      	beq.n	80043b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fd faa6 	bl	80018d8 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004390:	f7fd faa2 	bl	80018d8 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	@ 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e29e      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a2:	4b6a      	ldr	r3, [pc, #424]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0xc0>
 80043ae:	e014      	b.n	80043da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fd fa92 	bl	80018d8 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b8:	f7fd fa8e 	bl	80018d8 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b64      	cmp	r3, #100	@ 0x64
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e28a      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ca:	4b60      	ldr	r3, [pc, #384]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0xe8>
 80043d6:	e000      	b.n	80043da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d075      	beq.n	80044d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e6:	4b59      	ldr	r3, [pc, #356]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f0:	4b56      	ldr	r3, [pc, #344]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	d102      	bne.n	8004406 <HAL_RCC_OscConfig+0x136>
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d002      	beq.n	800440c <HAL_RCC_OscConfig+0x13c>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d11f      	bne.n	800444c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800440c:	4b4f      	ldr	r3, [pc, #316]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_OscConfig+0x154>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e25d      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b49      	ldr	r3, [pc, #292]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	4946      	ldr	r1, [pc, #280]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004438:	4b45      	ldr	r3, [pc, #276]	@ (8004550 <HAL_RCC_OscConfig+0x280>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fd f9ff 	bl	8001840 <HAL_InitTick>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d043      	beq.n	80044d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e249      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d023      	beq.n	800449c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004454:	4b3d      	ldr	r3, [pc, #244]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3c      	ldr	r2, [pc, #240]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 800445a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800445e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd fa3a 	bl	80018d8 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004468:	f7fd fa36 	bl	80018d8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e232      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800447a:	4b34      	ldr	r3, [pc, #208]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	4b31      	ldr	r3, [pc, #196]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	492d      	ldr	r1, [pc, #180]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004496:	4313      	orrs	r3, r2
 8004498:	604b      	str	r3, [r1, #4]
 800449a:	e01a      	b.n	80044d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449c:	4b2b      	ldr	r3, [pc, #172]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a2a      	ldr	r2, [pc, #168]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 80044a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fd fa16 	bl	80018d8 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b0:	f7fd fa12 	bl	80018d8 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e20e      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c2:	4b22      	ldr	r3, [pc, #136]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x1e0>
 80044ce:	e000      	b.n	80044d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d041      	beq.n	8004562 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01c      	beq.n	8004520 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e6:	4b19      	ldr	r3, [pc, #100]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 80044e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ec:	4a17      	ldr	r2, [pc, #92]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fd f9ef 	bl	80018d8 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fe:	f7fd f9eb 	bl	80018d8 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e1e7      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004510:	4b0e      	ldr	r3, [pc, #56]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0ef      	beq.n	80044fe <HAL_RCC_OscConfig+0x22e>
 800451e:	e020      	b.n	8004562 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004520:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004526:	4a09      	ldr	r2, [pc, #36]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004530:	f7fd f9d2 	bl	80018d8 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004536:	e00d      	b.n	8004554 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004538:	f7fd f9ce 	bl	80018d8 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d906      	bls.n	8004554 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e1ca      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000
 8004550:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004554:	4b8c      	ldr	r3, [pc, #560]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1ea      	bne.n	8004538 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80a6 	beq.w	80046bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004570:	2300      	movs	r3, #0
 8004572:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004574:	4b84      	ldr	r3, [pc, #528]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_OscConfig+0x2b4>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x2b6>
 8004584:	2300      	movs	r3, #0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	4b7f      	ldr	r3, [pc, #508]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458e:	4a7e      	ldr	r2, [pc, #504]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004594:	6593      	str	r3, [r2, #88]	@ 0x58
 8004596:	4b7c      	ldr	r3, [pc, #496]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045a2:	2301      	movs	r3, #1
 80045a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a6:	4b79      	ldr	r3, [pc, #484]	@ (800478c <HAL_RCC_OscConfig+0x4bc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d118      	bne.n	80045e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b2:	4b76      	ldr	r3, [pc, #472]	@ (800478c <HAL_RCC_OscConfig+0x4bc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a75      	ldr	r2, [pc, #468]	@ (800478c <HAL_RCC_OscConfig+0x4bc>)
 80045b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045be:	f7fd f98b 	bl	80018d8 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c6:	f7fd f987 	bl	80018d8 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e183      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d8:	4b6c      	ldr	r3, [pc, #432]	@ (800478c <HAL_RCC_OscConfig+0x4bc>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d108      	bne.n	80045fe <HAL_RCC_OscConfig+0x32e>
 80045ec:	4b66      	ldr	r3, [pc, #408]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f2:	4a65      	ldr	r2, [pc, #404]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045fc:	e024      	b.n	8004648 <HAL_RCC_OscConfig+0x378>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b05      	cmp	r3, #5
 8004604:	d110      	bne.n	8004628 <HAL_RCC_OscConfig+0x358>
 8004606:	4b60      	ldr	r3, [pc, #384]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460c:	4a5e      	ldr	r2, [pc, #376]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800460e:	f043 0304 	orr.w	r3, r3, #4
 8004612:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004616:	4b5c      	ldr	r3, [pc, #368]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461c:	4a5a      	ldr	r2, [pc, #360]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004626:	e00f      	b.n	8004648 <HAL_RCC_OscConfig+0x378>
 8004628:	4b57      	ldr	r3, [pc, #348]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462e:	4a56      	ldr	r2, [pc, #344]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004638:	4b53      	ldr	r3, [pc, #332]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463e:	4a52      	ldr	r2, [pc, #328]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004640:	f023 0304 	bic.w	r3, r3, #4
 8004644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d016      	beq.n	800467e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004650:	f7fd f942 	bl	80018d8 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004656:	e00a      	b.n	800466e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004658:	f7fd f93e 	bl	80018d8 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e138      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466e:	4b46      	ldr	r3, [pc, #280]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0ed      	beq.n	8004658 <HAL_RCC_OscConfig+0x388>
 800467c:	e015      	b.n	80046aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fd f92b 	bl	80018d8 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004684:	e00a      	b.n	800469c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fd f927 	bl	80018d8 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004694:	4293      	cmp	r3, r2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e121      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800469c:	4b3a      	ldr	r3, [pc, #232]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1ed      	bne.n	8004686 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046aa:	7ffb      	ldrb	r3, [r7, #31]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d105      	bne.n	80046bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b0:	4b35      	ldr	r3, [pc, #212]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b4:	4a34      	ldr	r2, [pc, #208]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80046b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d03c      	beq.n	8004742 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01c      	beq.n	800470a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80046d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fd f8fa 	bl	80018d8 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046e8:	f7fd f8f6 	bl	80018d8 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0f2      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046fa:	4b23      	ldr	r3, [pc, #140]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80046fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0ef      	beq.n	80046e8 <HAL_RCC_OscConfig+0x418>
 8004708:	e01b      	b.n	8004742 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800470a:	4b1f      	ldr	r3, [pc, #124]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800470c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004710:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fd f8dd 	bl	80018d8 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004722:	f7fd f8d9 	bl	80018d8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e0d5      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004734:	4b14      	ldr	r3, [pc, #80]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1ef      	bne.n	8004722 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80c9 	beq.w	80048de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800474c:	4b0e      	ldr	r3, [pc, #56]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b0c      	cmp	r3, #12
 8004756:	f000 8083 	beq.w	8004860 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d15e      	bne.n	8004820 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004762:	4b09      	ldr	r3, [pc, #36]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a08      	ldr	r2, [pc, #32]	@ (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004768:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800476c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fd f8b3 	bl	80018d8 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004774:	e00c      	b.n	8004790 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004776:	f7fd f8af 	bl	80018d8 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d905      	bls.n	8004790 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e0ab      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
 8004788:	40021000 	.word	0x40021000
 800478c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	4b55      	ldr	r3, [pc, #340]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ec      	bne.n	8004776 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800479c:	4b52      	ldr	r3, [pc, #328]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	4b52      	ldr	r3, [pc, #328]	@ (80048ec <HAL_RCC_OscConfig+0x61c>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6a11      	ldr	r1, [r2, #32]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ac:	3a01      	subs	r2, #1
 80047ae:	0112      	lsls	r2, r2, #4
 80047b0:	4311      	orrs	r1, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80047b6:	0212      	lsls	r2, r2, #8
 80047b8:	4311      	orrs	r1, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047be:	0852      	lsrs	r2, r2, #1
 80047c0:	3a01      	subs	r2, #1
 80047c2:	0552      	lsls	r2, r2, #21
 80047c4:	4311      	orrs	r1, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047ca:	0852      	lsrs	r2, r2, #1
 80047cc:	3a01      	subs	r2, #1
 80047ce:	0652      	lsls	r2, r2, #25
 80047d0:	4311      	orrs	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80047d6:	06d2      	lsls	r2, r2, #27
 80047d8:	430a      	orrs	r2, r1
 80047da:	4943      	ldr	r1, [pc, #268]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e0:	4b41      	ldr	r3, [pc, #260]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a40      	ldr	r2, [pc, #256]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 80047e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047ec:	4b3e      	ldr	r3, [pc, #248]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a3d      	ldr	r2, [pc, #244]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 80047f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd f86e 	bl	80018d8 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004800:	f7fd f86a 	bl	80018d8 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e066      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004812:	4b35      	ldr	r3, [pc, #212]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCC_OscConfig+0x530>
 800481e:	e05e      	b.n	80048de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004820:	4b31      	ldr	r3, [pc, #196]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a30      	ldr	r2, [pc, #192]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800482a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482c:	f7fd f854 	bl	80018d8 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004834:	f7fd f850 	bl	80018d8 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e04c      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004846:	4b28      	ldr	r3, [pc, #160]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004852:	4b25      	ldr	r3, [pc, #148]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	4924      	ldr	r1, [pc, #144]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 8004858:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <HAL_RCC_OscConfig+0x620>)
 800485a:	4013      	ands	r3, r2
 800485c:	60cb      	str	r3, [r1, #12]
 800485e:	e03e      	b.n	80048de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e039      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800486c:	4b1e      	ldr	r3, [pc, #120]	@ (80048e8 <HAL_RCC_OscConfig+0x618>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f003 0203 	and.w	r2, r3, #3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	429a      	cmp	r2, r3
 800487e:	d12c      	bne.n	80048da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	3b01      	subs	r3, #1
 800488c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d123      	bne.n	80048da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d11b      	bne.n	80048da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d113      	bne.n	80048da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	3b01      	subs	r3, #1
 80048c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d109      	bne.n	80048da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	3b01      	subs	r3, #1
 80048d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000
 80048ec:	019f800c 	.word	0x019f800c
 80048f0:	feeefffc 	.word	0xfeeefffc

080048f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e11e      	b.n	8004b4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800490c:	4b91      	ldr	r3, [pc, #580]	@ (8004b54 <HAL_RCC_ClockConfig+0x260>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d910      	bls.n	800493c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	4b8e      	ldr	r3, [pc, #568]	@ (8004b54 <HAL_RCC_ClockConfig+0x260>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 020f 	bic.w	r2, r3, #15
 8004922:	498c      	ldr	r1, [pc, #560]	@ (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800492a:	4b8a      	ldr	r3, [pc, #552]	@ (8004b54 <HAL_RCC_ClockConfig+0x260>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e106      	b.n	8004b4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d073      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b03      	cmp	r3, #3
 800494e:	d129      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004950:	4b81      	ldr	r3, [pc, #516]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0f4      	b.n	8004b4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004960:	f000 f99e 	bl	8004ca0 <RCC_GetSysClockFreqFromPLLSource>
 8004964:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4a7c      	ldr	r2, [pc, #496]	@ (8004b5c <HAL_RCC_ClockConfig+0x268>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d93f      	bls.n	80049ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800496e:	4b7a      	ldr	r3, [pc, #488]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004982:	2b00      	cmp	r3, #0
 8004984:	d033      	beq.n	80049ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800498a:	2b00      	cmp	r3, #0
 800498c:	d12f      	bne.n	80049ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800498e:	4b72      	ldr	r3, [pc, #456]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004996:	4a70      	ldr	r2, [pc, #448]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800499c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800499e:	2380      	movs	r3, #128	@ 0x80
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e024      	b.n	80049ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d107      	bne.n	80049bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0c6      	b.n	8004b4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049bc:	4b66      	ldr	r3, [pc, #408]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0be      	b.n	8004b4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80049cc:	f000 f8ce 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 80049d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4a61      	ldr	r2, [pc, #388]	@ (8004b5c <HAL_RCC_ClockConfig+0x268>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d909      	bls.n	80049ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049da:	4b5f      	ldr	r3, [pc, #380]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 80049e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80049ea:	2380      	movs	r3, #128	@ 0x80
 80049ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049ee:	4b5a      	ldr	r3, [pc, #360]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f023 0203 	bic.w	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4957      	ldr	r1, [pc, #348]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a00:	f7fc ff6a 	bl	80018d8 <HAL_GetTick>
 8004a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a08:	f7fc ff66 	bl	80018d8 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e095      	b.n	8004b4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 020c 	and.w	r2, r3, #12
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d1eb      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d023      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a48:	4b43      	ldr	r3, [pc, #268]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	4a42      	ldr	r2, [pc, #264]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004a4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a60:	4b3d      	ldr	r3, [pc, #244]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004a68:	4a3b      	ldr	r2, [pc, #236]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004a6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a70:	4b39      	ldr	r3, [pc, #228]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	4936      	ldr	r1, [pc, #216]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b80      	cmp	r3, #128	@ 0x80
 8004a88:	d105      	bne.n	8004a96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a8a:	4b33      	ldr	r3, [pc, #204]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	4a32      	ldr	r2, [pc, #200]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004a90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a96:	4b2f      	ldr	r3, [pc, #188]	@ (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d21d      	bcs.n	8004ae0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 020f 	bic.w	r2, r3, #15
 8004aac:	4929      	ldr	r1, [pc, #164]	@ (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ab4:	f7fc ff10 	bl	80018d8 <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004abc:	f7fc ff0c 	bl	80018d8 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e03b      	b.n	8004b4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b20      	ldr	r3, [pc, #128]	@ (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d1ed      	bne.n	8004abc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aec:	4b1a      	ldr	r3, [pc, #104]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	4917      	ldr	r1, [pc, #92]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b0a:	4b13      	ldr	r3, [pc, #76]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	490f      	ldr	r1, [pc, #60]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b1e:	f000 f825 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8004b22:	4602      	mov	r2, r0
 8004b24:	4b0c      	ldr	r3, [pc, #48]	@ (8004b58 <HAL_RCC_ClockConfig+0x264>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	490c      	ldr	r1, [pc, #48]	@ (8004b60 <HAL_RCC_ClockConfig+0x26c>)
 8004b30:	5ccb      	ldrb	r3, [r1, r3]
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b64 <HAL_RCC_ClockConfig+0x270>)
 8004b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <HAL_RCC_ClockConfig+0x274>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fc fe7c 	bl	8001840 <HAL_InitTick>
 8004b48:	4603      	mov	r3, r0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40022000 	.word	0x40022000
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	04c4b400 	.word	0x04c4b400
 8004b60:	080084a8 	.word	0x080084a8
 8004b64:	20000004 	.word	0x20000004
 8004b68:	20000008 	.word	0x20000008

08004b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b72:	4b2c      	ldr	r3, [pc, #176]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d102      	bne.n	8004b84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	e047      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b84:	4b27      	ldr	r3, [pc, #156]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d102      	bne.n	8004b96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b90:	4b26      	ldr	r3, [pc, #152]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	e03e      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b96:	4b23      	ldr	r3, [pc, #140]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d136      	bne.n	8004c10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ba2:	4b20      	ldr	r3, [pc, #128]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bac:	4b1d      	ldr	r3, [pc, #116]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d10c      	bne.n	8004bda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	4a16      	ldr	r2, [pc, #88]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bca:	68d2      	ldr	r2, [r2, #12]
 8004bcc:	0a12      	lsrs	r2, r2, #8
 8004bce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bd2:	fb02 f303 	mul.w	r3, r2, r3
 8004bd6:	617b      	str	r3, [r7, #20]
      break;
 8004bd8:	e00c      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bda:	4a13      	ldr	r2, [pc, #76]	@ (8004c28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	4a10      	ldr	r2, [pc, #64]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004be4:	68d2      	ldr	r2, [r2, #12]
 8004be6:	0a12      	lsrs	r2, r2, #8
 8004be8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bec:	fb02 f303 	mul.w	r3, r2, r3
 8004bf0:	617b      	str	r3, [r7, #20]
      break;
 8004bf2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	0e5b      	lsrs	r3, r3, #25
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	3301      	adds	r3, #1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	e001      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c14:	693b      	ldr	r3, [r7, #16]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40021000 	.word	0x40021000
 8004c28:	00f42400 	.word	0x00f42400
 8004c2c:	016e3600 	.word	0x016e3600

08004c30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c34:	4b03      	ldr	r3, [pc, #12]	@ (8004c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c36:	681b      	ldr	r3, [r3, #0]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20000004 	.word	0x20000004

08004c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c4c:	f7ff fff0 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	0a1b      	lsrs	r3, r3, #8
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	4904      	ldr	r1, [pc, #16]	@ (8004c70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	080084b8 	.word	0x080084b8

08004c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c78:	f7ff ffda 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4b06      	ldr	r3, [pc, #24]	@ (8004c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	0adb      	lsrs	r3, r3, #11
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	4904      	ldr	r1, [pc, #16]	@ (8004c9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c8a:	5ccb      	ldrb	r3, [r1, r3]
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	080084b8 	.word	0x080084b8

08004ca0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	3301      	adds	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d10c      	bne.n	8004cde <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cc4:	4a17      	ldr	r2, [pc, #92]	@ (8004d24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	4a14      	ldr	r2, [pc, #80]	@ (8004d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cce:	68d2      	ldr	r2, [r2, #12]
 8004cd0:	0a12      	lsrs	r2, r2, #8
 8004cd2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	617b      	str	r3, [r7, #20]
    break;
 8004cdc:	e00c      	b.n	8004cf8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cde:	4a12      	ldr	r2, [pc, #72]	@ (8004d28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8004d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ce8:	68d2      	ldr	r2, [r2, #12]
 8004cea:	0a12      	lsrs	r2, r2, #8
 8004cec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004cf0:	fb02 f303 	mul.w	r3, r2, r3
 8004cf4:	617b      	str	r3, [r7, #20]
    break;
 8004cf6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cf8:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	0e5b      	lsrs	r3, r3, #25
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	3301      	adds	r3, #1
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004d12:	687b      	ldr	r3, [r7, #4]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	40021000 	.word	0x40021000
 8004d24:	016e3600 	.word	0x016e3600
 8004d28:	00f42400 	.word	0x00f42400

08004d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d34:	2300      	movs	r3, #0
 8004d36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d38:	2300      	movs	r3, #0
 8004d3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8098 	beq.w	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4e:	4b43      	ldr	r3, [pc, #268]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10d      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5a:	4b40      	ldr	r3, [pc, #256]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5e:	4a3f      	ldr	r2, [pc, #252]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d66:	4b3d      	ldr	r3, [pc, #244]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d72:	2301      	movs	r3, #1
 8004d74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d76:	4b3a      	ldr	r3, [pc, #232]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a39      	ldr	r2, [pc, #228]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d82:	f7fc fda9 	bl	80018d8 <HAL_GetTick>
 8004d86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d88:	e009      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8a:	f7fc fda5 	bl	80018d8 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d902      	bls.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	74fb      	strb	r3, [r7, #19]
        break;
 8004d9c:	e005      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d9e:	4b30      	ldr	r3, [pc, #192]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0ef      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004daa:	7cfb      	ldrb	r3, [r7, #19]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d159      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004db0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01e      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d019      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dcc:	4b23      	ldr	r3, [pc, #140]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dd8:	4b20      	ldr	r3, [pc, #128]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dde:	4a1f      	ldr	r2, [pc, #124]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004de8:	4b1c      	ldr	r3, [pc, #112]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dee:	4a1b      	ldr	r2, [pc, #108]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004df8:	4a18      	ldr	r2, [pc, #96]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0a:	f7fc fd65 	bl	80018d8 <HAL_GetTick>
 8004e0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e10:	e00b      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e12:	f7fc fd61 	bl	80018d8 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d902      	bls.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	74fb      	strb	r3, [r7, #19]
            break;
 8004e28:	e006      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0ec      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e3e:	4b07      	ldr	r3, [pc, #28]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e4c:	4903      	ldr	r1, [pc, #12]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e54:	e008      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e56:	7cfb      	ldrb	r3, [r7, #19]
 8004e58:	74bb      	strb	r3, [r7, #18]
 8004e5a:	e005      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e64:	7cfb      	ldrb	r3, [r7, #19]
 8004e66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e68:	7c7b      	ldrb	r3, [r7, #17]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d105      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6e:	4ba7      	ldr	r3, [pc, #668]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e72:	4aa6      	ldr	r2, [pc, #664]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e86:	4ba1      	ldr	r3, [pc, #644]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8c:	f023 0203 	bic.w	r2, r3, #3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	499d      	ldr	r1, [pc, #628]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ea8:	4b98      	ldr	r3, [pc, #608]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eae:	f023 020c 	bic.w	r2, r3, #12
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	4995      	ldr	r1, [pc, #596]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004eca:	4b90      	ldr	r3, [pc, #576]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	498c      	ldr	r1, [pc, #560]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004eec:	4b87      	ldr	r3, [pc, #540]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	4984      	ldr	r1, [pc, #528]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0310 	and.w	r3, r3, #16
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	497b      	ldr	r1, [pc, #492]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f30:	4b76      	ldr	r3, [pc, #472]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	4973      	ldr	r1, [pc, #460]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f52:	4b6e      	ldr	r3, [pc, #440]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	496a      	ldr	r1, [pc, #424]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f74:	4b65      	ldr	r3, [pc, #404]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	4962      	ldr	r1, [pc, #392]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f96:	4b5d      	ldr	r3, [pc, #372]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa4:	4959      	ldr	r1, [pc, #356]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fb8:	4b54      	ldr	r3, [pc, #336]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fbe:	f023 0203 	bic.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc6:	4951      	ldr	r1, [pc, #324]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fda:	4b4c      	ldr	r3, [pc, #304]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	4948      	ldr	r1, [pc, #288]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d015      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ffc:	4b43      	ldr	r3, [pc, #268]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005002:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500a:	4940      	ldr	r1, [pc, #256]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005016:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800501c:	4b3b      	ldr	r3, [pc, #236]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a3a      	ldr	r2, [pc, #232]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005026:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005034:	4b35      	ldr	r3, [pc, #212]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005042:	4932      	ldr	r1, [pc, #200]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005052:	d105      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005054:	4b2d      	ldr	r3, [pc, #180]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a2c      	ldr	r2, [pc, #176]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800505a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800505e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800506c:	4b27      	ldr	r3, [pc, #156]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005072:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507a:	4924      	ldr	r1, [pc, #144]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005086:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800508a:	d105      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800508c:	4b1f      	ldr	r3, [pc, #124]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4a1e      	ldr	r2, [pc, #120]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005092:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005096:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d015      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050a4:	4b19      	ldr	r3, [pc, #100]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b2:	4916      	ldr	r1, [pc, #88]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050c2:	d105      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c4:	4b11      	ldr	r3, [pc, #68]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4a10      	ldr	r2, [pc, #64]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d019      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050dc:	4b0b      	ldr	r3, [pc, #44]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	4908      	ldr	r1, [pc, #32]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050fa:	d109      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050fc:	4b03      	ldr	r3, [pc, #12]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4a02      	ldr	r2, [pc, #8]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005102:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005106:	60d3      	str	r3, [r2, #12]
 8005108:	e002      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800511c:	4b29      	ldr	r3, [pc, #164]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005122:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512a:	4926      	ldr	r1, [pc, #152]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800513a:	d105      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800513c:	4b21      	ldr	r3, [pc, #132]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4a20      	ldr	r2, [pc, #128]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005146:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d015      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005154:	4b1b      	ldr	r3, [pc, #108]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005162:	4918      	ldr	r1, [pc, #96]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005172:	d105      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005174:	4b13      	ldr	r3, [pc, #76]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	4a12      	ldr	r2, [pc, #72]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800517a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800517e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d015      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800518c:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800518e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005192:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519a:	490a      	ldr	r1, [pc, #40]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051aa:	d105      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ac:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4a04      	ldr	r2, [pc, #16]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80051b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000

080051c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e049      	b.n	800526e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fc f940 	bl	8001474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 ff68 	bl	80060dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	d001      	beq.n	8005290 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e04c      	b.n	800532a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a26      	ldr	r2, [pc, #152]	@ (8005338 <HAL_TIM_Base_Start+0xc0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d022      	beq.n	80052e8 <HAL_TIM_Base_Start+0x70>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052aa:	d01d      	beq.n	80052e8 <HAL_TIM_Base_Start+0x70>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a22      	ldr	r2, [pc, #136]	@ (800533c <HAL_TIM_Base_Start+0xc4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d018      	beq.n	80052e8 <HAL_TIM_Base_Start+0x70>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a21      	ldr	r2, [pc, #132]	@ (8005340 <HAL_TIM_Base_Start+0xc8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d013      	beq.n	80052e8 <HAL_TIM_Base_Start+0x70>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005344 <HAL_TIM_Base_Start+0xcc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00e      	beq.n	80052e8 <HAL_TIM_Base_Start+0x70>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005348 <HAL_TIM_Base_Start+0xd0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d009      	beq.n	80052e8 <HAL_TIM_Base_Start+0x70>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1c      	ldr	r2, [pc, #112]	@ (800534c <HAL_TIM_Base_Start+0xd4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <HAL_TIM_Base_Start+0x70>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005350 <HAL_TIM_Base_Start+0xd8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d115      	bne.n	8005314 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	4b19      	ldr	r3, [pc, #100]	@ (8005354 <HAL_TIM_Base_Start+0xdc>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b06      	cmp	r3, #6
 80052f8:	d015      	beq.n	8005326 <HAL_TIM_Base_Start+0xae>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005300:	d011      	beq.n	8005326 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0201 	orr.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005312:	e008      	b.n	8005326 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	e000      	b.n	8005328 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005326:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40000400 	.word	0x40000400
 8005340:	40000800 	.word	0x40000800
 8005344:	40000c00 	.word	0x40000c00
 8005348:	40013400 	.word	0x40013400
 800534c:	40014000 	.word	0x40014000
 8005350:	40015000 	.word	0x40015000
 8005354:	00010007 	.word	0x00010007

08005358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	d001      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e054      	b.n	800541a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a26      	ldr	r2, [pc, #152]	@ (8005428 <HAL_TIM_Base_Start_IT+0xd0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d022      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800539a:	d01d      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a22      	ldr	r2, [pc, #136]	@ (800542c <HAL_TIM_Base_Start_IT+0xd4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a21      	ldr	r2, [pc, #132]	@ (8005430 <HAL_TIM_Base_Start_IT+0xd8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005434 <HAL_TIM_Base_Start_IT+0xdc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1e      	ldr	r2, [pc, #120]	@ (8005438 <HAL_TIM_Base_Start_IT+0xe0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1c      	ldr	r2, [pc, #112]	@ (800543c <HAL_TIM_Base_Start_IT+0xe4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005440 <HAL_TIM_Base_Start_IT+0xe8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d115      	bne.n	8005404 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	4b19      	ldr	r3, [pc, #100]	@ (8005444 <HAL_TIM_Base_Start_IT+0xec>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d015      	beq.n	8005416 <HAL_TIM_Base_Start_IT+0xbe>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f0:	d011      	beq.n	8005416 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005402:	e008      	b.n	8005416 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	e000      	b.n	8005418 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40012c00 	.word	0x40012c00
 800542c:	40000400 	.word	0x40000400
 8005430:	40000800 	.word	0x40000800
 8005434:	40000c00 	.word	0x40000c00
 8005438:	40013400 	.word	0x40013400
 800543c:	40014000 	.word	0x40014000
 8005440:	40015000 	.word	0x40015000
 8005444:	00010007 	.word	0x00010007

08005448 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e049      	b.n	80054ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f841 	bl	80054f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3304      	adds	r3, #4
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f000 fe28 	bl	80060dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d109      	bne.n	8005530 <HAL_TIM_PWM_Start+0x24>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e03c      	b.n	80055aa <HAL_TIM_PWM_Start+0x9e>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b04      	cmp	r3, #4
 8005534:	d109      	bne.n	800554a <HAL_TIM_PWM_Start+0x3e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b01      	cmp	r3, #1
 8005540:	bf14      	ite	ne
 8005542:	2301      	movne	r3, #1
 8005544:	2300      	moveq	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	e02f      	b.n	80055aa <HAL_TIM_PWM_Start+0x9e>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d109      	bne.n	8005564 <HAL_TIM_PWM_Start+0x58>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e022      	b.n	80055aa <HAL_TIM_PWM_Start+0x9e>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b0c      	cmp	r3, #12
 8005568:	d109      	bne.n	800557e <HAL_TIM_PWM_Start+0x72>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b01      	cmp	r3, #1
 8005574:	bf14      	ite	ne
 8005576:	2301      	movne	r3, #1
 8005578:	2300      	moveq	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	e015      	b.n	80055aa <HAL_TIM_PWM_Start+0x9e>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b10      	cmp	r3, #16
 8005582:	d109      	bne.n	8005598 <HAL_TIM_PWM_Start+0x8c>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	e008      	b.n	80055aa <HAL_TIM_PWM_Start+0x9e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	bf14      	ite	ne
 80055a4:	2301      	movne	r3, #1
 80055a6:	2300      	moveq	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e0a6      	b.n	8005700 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <HAL_TIM_PWM_Start+0xb6>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055c0:	e023      	b.n	800560a <HAL_TIM_PWM_Start+0xfe>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_PWM_Start+0xc6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055d0:	e01b      	b.n	800560a <HAL_TIM_PWM_Start+0xfe>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_PWM_Start+0xd6>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055e0:	e013      	b.n	800560a <HAL_TIM_PWM_Start+0xfe>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b0c      	cmp	r3, #12
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_PWM_Start+0xe6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055f0:	e00b      	b.n	800560a <HAL_TIM_PWM_Start+0xfe>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d104      	bne.n	8005602 <HAL_TIM_PWM_Start+0xf6>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005600:	e003      	b.n	800560a <HAL_TIM_PWM_Start+0xfe>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2201      	movs	r2, #1
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f001 f9dc 	bl	80069d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a3a      	ldr	r2, [pc, #232]	@ (8005708 <HAL_TIM_PWM_Start+0x1fc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d018      	beq.n	8005654 <HAL_TIM_PWM_Start+0x148>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a39      	ldr	r2, [pc, #228]	@ (800570c <HAL_TIM_PWM_Start+0x200>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <HAL_TIM_PWM_Start+0x148>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a37      	ldr	r2, [pc, #220]	@ (8005710 <HAL_TIM_PWM_Start+0x204>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <HAL_TIM_PWM_Start+0x148>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a36      	ldr	r2, [pc, #216]	@ (8005714 <HAL_TIM_PWM_Start+0x208>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d009      	beq.n	8005654 <HAL_TIM_PWM_Start+0x148>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a34      	ldr	r2, [pc, #208]	@ (8005718 <HAL_TIM_PWM_Start+0x20c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_TIM_PWM_Start+0x148>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a33      	ldr	r2, [pc, #204]	@ (800571c <HAL_TIM_PWM_Start+0x210>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <HAL_TIM_PWM_Start+0x14c>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <HAL_TIM_PWM_Start+0x14e>
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800566c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a25      	ldr	r2, [pc, #148]	@ (8005708 <HAL_TIM_PWM_Start+0x1fc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d022      	beq.n	80056be <HAL_TIM_PWM_Start+0x1b2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005680:	d01d      	beq.n	80056be <HAL_TIM_PWM_Start+0x1b2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a26      	ldr	r2, [pc, #152]	@ (8005720 <HAL_TIM_PWM_Start+0x214>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d018      	beq.n	80056be <HAL_TIM_PWM_Start+0x1b2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a24      	ldr	r2, [pc, #144]	@ (8005724 <HAL_TIM_PWM_Start+0x218>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <HAL_TIM_PWM_Start+0x1b2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a23      	ldr	r2, [pc, #140]	@ (8005728 <HAL_TIM_PWM_Start+0x21c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00e      	beq.n	80056be <HAL_TIM_PWM_Start+0x1b2>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a19      	ldr	r2, [pc, #100]	@ (800570c <HAL_TIM_PWM_Start+0x200>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d009      	beq.n	80056be <HAL_TIM_PWM_Start+0x1b2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a18      	ldr	r2, [pc, #96]	@ (8005710 <HAL_TIM_PWM_Start+0x204>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d004      	beq.n	80056be <HAL_TIM_PWM_Start+0x1b2>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a18      	ldr	r2, [pc, #96]	@ (800571c <HAL_TIM_PWM_Start+0x210>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d115      	bne.n	80056ea <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	4b19      	ldr	r3, [pc, #100]	@ (800572c <HAL_TIM_PWM_Start+0x220>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b06      	cmp	r3, #6
 80056ce:	d015      	beq.n	80056fc <HAL_TIM_PWM_Start+0x1f0>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d6:	d011      	beq.n	80056fc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e8:	e008      	b.n	80056fc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e000      	b.n	80056fe <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40013400 	.word	0x40013400
 8005710:	40014000 	.word	0x40014000
 8005714:	40014400 	.word	0x40014400
 8005718:	40014800 	.word	0x40014800
 800571c:	40015000 	.word	0x40015000
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00
 800572c:	00010007 	.word	0x00010007

08005730 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e097      	b.n	8005874 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7fb fef3 	bl	8001544 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2202      	movs	r2, #2
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005774:	f023 0307 	bic.w	r3, r3, #7
 8005778:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3304      	adds	r3, #4
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f000 fca9 	bl	80060dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b2:	f023 0303 	bic.w	r3, r3, #3
 80057b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	4313      	orrs	r3, r2
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80057d0:	f023 030c 	bic.w	r3, r3, #12
 80057d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	4313      	orrs	r3, r2
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	011a      	lsls	r2, r3, #4
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	031b      	lsls	r3, r3, #12
 8005800:	4313      	orrs	r3, r2
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800580e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005816:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	4313      	orrs	r3, r2
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800588c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005894:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800589c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d110      	bne.n	80058ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d102      	bne.n	80058b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058b2:	7b7b      	ldrb	r3, [r7, #13]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d001      	beq.n	80058bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e069      	b.n	8005990 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058cc:	e031      	b.n	8005932 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d110      	bne.n	80058f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d102      	bne.n	80058e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058da:	7b3b      	ldrb	r3, [r7, #12]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d001      	beq.n	80058e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e055      	b.n	8005990 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058f4:	e01d      	b.n	8005932 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d108      	bne.n	800590e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d105      	bne.n	800590e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005902:	7b7b      	ldrb	r3, [r7, #13]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d102      	bne.n	800590e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005908:	7b3b      	ldrb	r3, [r7, #12]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d001      	beq.n	8005912 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e03e      	b.n	8005990 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2202      	movs	r2, #2
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2202      	movs	r2, #2
 8005926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_TIM_Encoder_Start+0xc4>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b04      	cmp	r3, #4
 800593c:	d008      	beq.n	8005950 <HAL_TIM_Encoder_Start+0xd4>
 800593e:	e00f      	b.n	8005960 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2201      	movs	r2, #1
 8005946:	2100      	movs	r1, #0
 8005948:	4618      	mov	r0, r3
 800594a:	f001 f841 	bl	80069d0 <TIM_CCxChannelCmd>
      break;
 800594e:	e016      	b.n	800597e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2201      	movs	r2, #1
 8005956:	2104      	movs	r1, #4
 8005958:	4618      	mov	r0, r3
 800595a:	f001 f839 	bl	80069d0 <TIM_CCxChannelCmd>
      break;
 800595e:	e00e      	b.n	800597e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2201      	movs	r2, #1
 8005966:	2100      	movs	r1, #0
 8005968:	4618      	mov	r0, r3
 800596a:	f001 f831 	bl	80069d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2201      	movs	r2, #1
 8005974:	2104      	movs	r1, #4
 8005976:	4618      	mov	r0, r3
 8005978:	f001 f82a 	bl	80069d0 <TIM_CCxChannelCmd>
      break;
 800597c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0201 	orr.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d020      	beq.n	80059fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01b      	beq.n	80059fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0202 	mvn.w	r2, #2
 80059cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fb5c 	bl	80060a0 <HAL_TIM_IC_CaptureCallback>
 80059e8:	e005      	b.n	80059f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fb4e 	bl	800608c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fb5f 	bl	80060b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d020      	beq.n	8005a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01b      	beq.n	8005a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0204 	mvn.w	r2, #4
 8005a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fb36 	bl	80060a0 <HAL_TIM_IC_CaptureCallback>
 8005a34:	e005      	b.n	8005a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fb28 	bl	800608c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fb39 	bl	80060b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d020      	beq.n	8005a94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d01b      	beq.n	8005a94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0208 	mvn.w	r2, #8
 8005a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2204      	movs	r2, #4
 8005a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fb10 	bl	80060a0 <HAL_TIM_IC_CaptureCallback>
 8005a80:	e005      	b.n	8005a8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fb02 	bl	800608c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fb13 	bl	80060b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d020      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01b      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0210 	mvn.w	r2, #16
 8005ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 faea 	bl	80060a0 <HAL_TIM_IC_CaptureCallback>
 8005acc:	e005      	b.n	8005ada <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fadc 	bl	800608c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 faed 	bl	80060b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00c      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0201 	mvn.w	r2, #1
 8005afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fb fac2 	bl	8001088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00c      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 f8a9 	bl	8006c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00c      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 f8a1 	bl	8006c98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00c      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 faa7 	bl	80060c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00c      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f06f 0220 	mvn.w	r2, #32
 8005b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f001 f869 	bl	8006c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00c      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 f875 	bl	8006cac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00c      	beq.n	8005be6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 f86d 	bl	8006cc0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00c      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 f865 	bl	8006cd4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00c      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d007      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 f85d 	bl	8006ce8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e0ff      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b14      	cmp	r3, #20
 8005c62:	f200 80f0 	bhi.w	8005e46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c66:	a201      	add	r2, pc, #4	@ (adr r2, 8005c6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005cc1 	.word	0x08005cc1
 8005c70:	08005e47 	.word	0x08005e47
 8005c74:	08005e47 	.word	0x08005e47
 8005c78:	08005e47 	.word	0x08005e47
 8005c7c:	08005d01 	.word	0x08005d01
 8005c80:	08005e47 	.word	0x08005e47
 8005c84:	08005e47 	.word	0x08005e47
 8005c88:	08005e47 	.word	0x08005e47
 8005c8c:	08005d43 	.word	0x08005d43
 8005c90:	08005e47 	.word	0x08005e47
 8005c94:	08005e47 	.word	0x08005e47
 8005c98:	08005e47 	.word	0x08005e47
 8005c9c:	08005d83 	.word	0x08005d83
 8005ca0:	08005e47 	.word	0x08005e47
 8005ca4:	08005e47 	.word	0x08005e47
 8005ca8:	08005e47 	.word	0x08005e47
 8005cac:	08005dc5 	.word	0x08005dc5
 8005cb0:	08005e47 	.word	0x08005e47
 8005cb4:	08005e47 	.word	0x08005e47
 8005cb8:	08005e47 	.word	0x08005e47
 8005cbc:	08005e05 	.word	0x08005e05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fabc 	bl	8006244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0208 	orr.w	r2, r2, #8
 8005cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0204 	bic.w	r2, r2, #4
 8005cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6999      	ldr	r1, [r3, #24]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	619a      	str	r2, [r3, #24]
      break;
 8005cfe:	e0a5      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fb36 	bl	8006378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6999      	ldr	r1, [r3, #24]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	021a      	lsls	r2, r3, #8
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	619a      	str	r2, [r3, #24]
      break;
 8005d40:	e084      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fba9 	bl	80064a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0208 	orr.w	r2, r2, #8
 8005d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0204 	bic.w	r2, r2, #4
 8005d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69d9      	ldr	r1, [r3, #28]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	61da      	str	r2, [r3, #28]
      break;
 8005d80:	e064      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68b9      	ldr	r1, [r7, #8]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fc1b 	bl	80065c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69d9      	ldr	r1, [r3, #28]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	021a      	lsls	r2, r3, #8
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	61da      	str	r2, [r3, #28]
      break;
 8005dc2:	e043      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fc8e 	bl	80066ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0208 	orr.w	r2, r2, #8
 8005dde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0204 	bic.w	r2, r2, #4
 8005dee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e02:	e023      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fcd8 	bl	80067c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e2e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	021a      	lsls	r2, r3, #8
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e44:	e002      	b.n	8005e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	75fb      	strb	r3, [r7, #23]
      break;
 8005e4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop

08005e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_TIM_ConfigClockSource+0x1c>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e0f6      	b.n	800606a <HAL_TIM_ConfigClockSource+0x20a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005e9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a6f      	ldr	r2, [pc, #444]	@ (8006074 <HAL_TIM_ConfigClockSource+0x214>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	f000 80c1 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005ebc:	4a6d      	ldr	r2, [pc, #436]	@ (8006074 <HAL_TIM_ConfigClockSource+0x214>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	f200 80c6 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ec4:	4a6c      	ldr	r2, [pc, #432]	@ (8006078 <HAL_TIM_ConfigClockSource+0x218>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	f000 80b9 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005ecc:	4a6a      	ldr	r2, [pc, #424]	@ (8006078 <HAL_TIM_ConfigClockSource+0x218>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	f200 80be 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ed4:	4a69      	ldr	r2, [pc, #420]	@ (800607c <HAL_TIM_ConfigClockSource+0x21c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	f000 80b1 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005edc:	4a67      	ldr	r2, [pc, #412]	@ (800607c <HAL_TIM_ConfigClockSource+0x21c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	f200 80b6 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ee4:	4a66      	ldr	r2, [pc, #408]	@ (8006080 <HAL_TIM_ConfigClockSource+0x220>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	f000 80a9 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005eec:	4a64      	ldr	r2, [pc, #400]	@ (8006080 <HAL_TIM_ConfigClockSource+0x220>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	f200 80ae 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ef4:	4a63      	ldr	r2, [pc, #396]	@ (8006084 <HAL_TIM_ConfigClockSource+0x224>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	f000 80a1 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005efc:	4a61      	ldr	r2, [pc, #388]	@ (8006084 <HAL_TIM_ConfigClockSource+0x224>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	f200 80a6 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f04:	4a60      	ldr	r2, [pc, #384]	@ (8006088 <HAL_TIM_ConfigClockSource+0x228>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f000 8099 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f0c:	4a5e      	ldr	r2, [pc, #376]	@ (8006088 <HAL_TIM_ConfigClockSource+0x228>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	f200 809e 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f18:	f000 8091 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f20:	f200 8096 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f28:	f000 8089 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f30:	f200 808e 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f38:	d03e      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x158>
 8005f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f3e:	f200 8087 	bhi.w	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f46:	f000 8086 	beq.w	8006056 <HAL_TIM_ConfigClockSource+0x1f6>
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f4e:	d87f      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f50:	2b70      	cmp	r3, #112	@ 0x70
 8005f52:	d01a      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0x12a>
 8005f54:	2b70      	cmp	r3, #112	@ 0x70
 8005f56:	d87b      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f58:	2b60      	cmp	r3, #96	@ 0x60
 8005f5a:	d050      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0x19e>
 8005f5c:	2b60      	cmp	r3, #96	@ 0x60
 8005f5e:	d877      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f60:	2b50      	cmp	r3, #80	@ 0x50
 8005f62:	d03c      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x17e>
 8005f64:	2b50      	cmp	r3, #80	@ 0x50
 8005f66:	d873      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f68:	2b40      	cmp	r3, #64	@ 0x40
 8005f6a:	d058      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x1be>
 8005f6c:	2b40      	cmp	r3, #64	@ 0x40
 8005f6e:	d86f      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f70:	2b30      	cmp	r3, #48	@ 0x30
 8005f72:	d064      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f74:	2b30      	cmp	r3, #48	@ 0x30
 8005f76:	d86b      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d060      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d867      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d05c      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d05a      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x1de>
 8005f88:	e062      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f9a:	f000 fcf9 	bl	8006990 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	609a      	str	r2, [r3, #8]
      break;
 8005fb6:	e04f      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc8:	f000 fce2 	bl	8006990 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fda:	609a      	str	r2, [r3, #8]
      break;
 8005fdc:	e03c      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fea:	461a      	mov	r2, r3
 8005fec:	f000 fc54 	bl	8006898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2150      	movs	r1, #80	@ 0x50
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fcad 	bl	8006956 <TIM_ITRx_SetConfig>
      break;
 8005ffc:	e02c      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800600a:	461a      	mov	r2, r3
 800600c:	f000 fc73 	bl	80068f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2160      	movs	r1, #96	@ 0x60
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fc9d 	bl	8006956 <TIM_ITRx_SetConfig>
      break;
 800601c:	e01c      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	461a      	mov	r2, r3
 800602c:	f000 fc34 	bl	8006898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2140      	movs	r1, #64	@ 0x40
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fc8d 	bl	8006956 <TIM_ITRx_SetConfig>
      break;
 800603c:	e00c      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4619      	mov	r1, r3
 8006048:	4610      	mov	r0, r2
 800604a:	f000 fc84 	bl	8006956 <TIM_ITRx_SetConfig>
      break;
 800604e:	e003      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
      break;
 8006054:	e000      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	00100070 	.word	0x00100070
 8006078:	00100060 	.word	0x00100060
 800607c:	00100050 	.word	0x00100050
 8006080:	00100040 	.word	0x00100040
 8006084:	00100030 	.word	0x00100030
 8006088:	00100020 	.word	0x00100020

0800608c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a4c      	ldr	r2, [pc, #304]	@ (8006220 <TIM_Base_SetConfig+0x144>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d017      	beq.n	8006124 <TIM_Base_SetConfig+0x48>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fa:	d013      	beq.n	8006124 <TIM_Base_SetConfig+0x48>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a49      	ldr	r2, [pc, #292]	@ (8006224 <TIM_Base_SetConfig+0x148>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00f      	beq.n	8006124 <TIM_Base_SetConfig+0x48>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a48      	ldr	r2, [pc, #288]	@ (8006228 <TIM_Base_SetConfig+0x14c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00b      	beq.n	8006124 <TIM_Base_SetConfig+0x48>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a47      	ldr	r2, [pc, #284]	@ (800622c <TIM_Base_SetConfig+0x150>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d007      	beq.n	8006124 <TIM_Base_SetConfig+0x48>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a46      	ldr	r2, [pc, #280]	@ (8006230 <TIM_Base_SetConfig+0x154>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <TIM_Base_SetConfig+0x48>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a45      	ldr	r2, [pc, #276]	@ (8006234 <TIM_Base_SetConfig+0x158>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d108      	bne.n	8006136 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a39      	ldr	r2, [pc, #228]	@ (8006220 <TIM_Base_SetConfig+0x144>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d023      	beq.n	8006186 <TIM_Base_SetConfig+0xaa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006144:	d01f      	beq.n	8006186 <TIM_Base_SetConfig+0xaa>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a36      	ldr	r2, [pc, #216]	@ (8006224 <TIM_Base_SetConfig+0x148>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d01b      	beq.n	8006186 <TIM_Base_SetConfig+0xaa>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a35      	ldr	r2, [pc, #212]	@ (8006228 <TIM_Base_SetConfig+0x14c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d017      	beq.n	8006186 <TIM_Base_SetConfig+0xaa>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a34      	ldr	r2, [pc, #208]	@ (800622c <TIM_Base_SetConfig+0x150>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <TIM_Base_SetConfig+0xaa>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a33      	ldr	r2, [pc, #204]	@ (8006230 <TIM_Base_SetConfig+0x154>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00f      	beq.n	8006186 <TIM_Base_SetConfig+0xaa>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a33      	ldr	r2, [pc, #204]	@ (8006238 <TIM_Base_SetConfig+0x15c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00b      	beq.n	8006186 <TIM_Base_SetConfig+0xaa>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a32      	ldr	r2, [pc, #200]	@ (800623c <TIM_Base_SetConfig+0x160>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d007      	beq.n	8006186 <TIM_Base_SetConfig+0xaa>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a31      	ldr	r2, [pc, #196]	@ (8006240 <TIM_Base_SetConfig+0x164>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_Base_SetConfig+0xaa>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a2c      	ldr	r2, [pc, #176]	@ (8006234 <TIM_Base_SetConfig+0x158>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d108      	bne.n	8006198 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800618c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	4313      	orrs	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a18      	ldr	r2, [pc, #96]	@ (8006220 <TIM_Base_SetConfig+0x144>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d013      	beq.n	80061ec <TIM_Base_SetConfig+0x110>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006230 <TIM_Base_SetConfig+0x154>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00f      	beq.n	80061ec <TIM_Base_SetConfig+0x110>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006238 <TIM_Base_SetConfig+0x15c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00b      	beq.n	80061ec <TIM_Base_SetConfig+0x110>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a19      	ldr	r2, [pc, #100]	@ (800623c <TIM_Base_SetConfig+0x160>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d007      	beq.n	80061ec <TIM_Base_SetConfig+0x110>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a18      	ldr	r2, [pc, #96]	@ (8006240 <TIM_Base_SetConfig+0x164>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_Base_SetConfig+0x110>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a13      	ldr	r2, [pc, #76]	@ (8006234 <TIM_Base_SetConfig+0x158>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d103      	bne.n	80061f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b01      	cmp	r3, #1
 8006204:	d105      	bne.n	8006212 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f023 0201 	bic.w	r2, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	611a      	str	r2, [r3, #16]
  }
}
 8006212:	bf00      	nop
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40000400 	.word	0x40000400
 8006228:	40000800 	.word	0x40000800
 800622c:	40000c00 	.word	0x40000c00
 8006230:	40013400 	.word	0x40013400
 8006234:	40015000 	.word	0x40015000
 8006238:	40014000 	.word	0x40014000
 800623c:	40014400 	.word	0x40014400
 8006240:	40014800 	.word	0x40014800

08006244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	f023 0201 	bic.w	r2, r3, #1
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0303 	bic.w	r3, r3, #3
 800627e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f023 0302 	bic.w	r3, r3, #2
 8006290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a30      	ldr	r2, [pc, #192]	@ (8006360 <TIM_OC1_SetConfig+0x11c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d013      	beq.n	80062cc <TIM_OC1_SetConfig+0x88>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a2f      	ldr	r2, [pc, #188]	@ (8006364 <TIM_OC1_SetConfig+0x120>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00f      	beq.n	80062cc <TIM_OC1_SetConfig+0x88>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a2e      	ldr	r2, [pc, #184]	@ (8006368 <TIM_OC1_SetConfig+0x124>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00b      	beq.n	80062cc <TIM_OC1_SetConfig+0x88>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a2d      	ldr	r2, [pc, #180]	@ (800636c <TIM_OC1_SetConfig+0x128>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d007      	beq.n	80062cc <TIM_OC1_SetConfig+0x88>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a2c      	ldr	r2, [pc, #176]	@ (8006370 <TIM_OC1_SetConfig+0x12c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d003      	beq.n	80062cc <TIM_OC1_SetConfig+0x88>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006374 <TIM_OC1_SetConfig+0x130>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d10c      	bne.n	80062e6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0308 	bic.w	r3, r3, #8
 80062d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f023 0304 	bic.w	r3, r3, #4
 80062e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006360 <TIM_OC1_SetConfig+0x11c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d013      	beq.n	8006316 <TIM_OC1_SetConfig+0xd2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006364 <TIM_OC1_SetConfig+0x120>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00f      	beq.n	8006316 <TIM_OC1_SetConfig+0xd2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006368 <TIM_OC1_SetConfig+0x124>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00b      	beq.n	8006316 <TIM_OC1_SetConfig+0xd2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a1a      	ldr	r2, [pc, #104]	@ (800636c <TIM_OC1_SetConfig+0x128>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d007      	beq.n	8006316 <TIM_OC1_SetConfig+0xd2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a19      	ldr	r2, [pc, #100]	@ (8006370 <TIM_OC1_SetConfig+0x12c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_OC1_SetConfig+0xd2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a18      	ldr	r2, [pc, #96]	@ (8006374 <TIM_OC1_SetConfig+0x130>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d111      	bne.n	800633a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800631c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	621a      	str	r2, [r3, #32]
}
 8006354:	bf00      	nop
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	40012c00 	.word	0x40012c00
 8006364:	40013400 	.word	0x40013400
 8006368:	40014000 	.word	0x40014000
 800636c:	40014400 	.word	0x40014400
 8006370:	40014800 	.word	0x40014800
 8006374:	40015000 	.word	0x40015000

08006378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f023 0210 	bic.w	r2, r3, #16
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0320 	bic.w	r3, r3, #32
 80063c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006488 <TIM_OC2_SetConfig+0x110>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d007      	beq.n	80063ec <TIM_OC2_SetConfig+0x74>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a2b      	ldr	r2, [pc, #172]	@ (800648c <TIM_OC2_SetConfig+0x114>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_OC2_SetConfig+0x74>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006490 <TIM_OC2_SetConfig+0x118>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d10d      	bne.n	8006408 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a1f      	ldr	r2, [pc, #124]	@ (8006488 <TIM_OC2_SetConfig+0x110>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d013      	beq.n	8006438 <TIM_OC2_SetConfig+0xc0>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a1e      	ldr	r2, [pc, #120]	@ (800648c <TIM_OC2_SetConfig+0x114>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00f      	beq.n	8006438 <TIM_OC2_SetConfig+0xc0>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a1e      	ldr	r2, [pc, #120]	@ (8006494 <TIM_OC2_SetConfig+0x11c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00b      	beq.n	8006438 <TIM_OC2_SetConfig+0xc0>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a1d      	ldr	r2, [pc, #116]	@ (8006498 <TIM_OC2_SetConfig+0x120>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d007      	beq.n	8006438 <TIM_OC2_SetConfig+0xc0>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a1c      	ldr	r2, [pc, #112]	@ (800649c <TIM_OC2_SetConfig+0x124>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_OC2_SetConfig+0xc0>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a17      	ldr	r2, [pc, #92]	@ (8006490 <TIM_OC2_SetConfig+0x118>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d113      	bne.n	8006460 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800643e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40012c00 	.word	0x40012c00
 800648c:	40013400 	.word	0x40013400
 8006490:	40015000 	.word	0x40015000
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400
 800649c:	40014800 	.word	0x40014800

080064a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0303 	bic.w	r3, r3, #3
 80064da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a2b      	ldr	r2, [pc, #172]	@ (80065ac <TIM_OC3_SetConfig+0x10c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d007      	beq.n	8006512 <TIM_OC3_SetConfig+0x72>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a2a      	ldr	r2, [pc, #168]	@ (80065b0 <TIM_OC3_SetConfig+0x110>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d003      	beq.n	8006512 <TIM_OC3_SetConfig+0x72>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a29      	ldr	r2, [pc, #164]	@ (80065b4 <TIM_OC3_SetConfig+0x114>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d10d      	bne.n	800652e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800652c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a1e      	ldr	r2, [pc, #120]	@ (80065ac <TIM_OC3_SetConfig+0x10c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <TIM_OC3_SetConfig+0xbe>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a1d      	ldr	r2, [pc, #116]	@ (80065b0 <TIM_OC3_SetConfig+0x110>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00f      	beq.n	800655e <TIM_OC3_SetConfig+0xbe>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a1d      	ldr	r2, [pc, #116]	@ (80065b8 <TIM_OC3_SetConfig+0x118>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00b      	beq.n	800655e <TIM_OC3_SetConfig+0xbe>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a1c      	ldr	r2, [pc, #112]	@ (80065bc <TIM_OC3_SetConfig+0x11c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <TIM_OC3_SetConfig+0xbe>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a1b      	ldr	r2, [pc, #108]	@ (80065c0 <TIM_OC3_SetConfig+0x120>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_OC3_SetConfig+0xbe>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a16      	ldr	r2, [pc, #88]	@ (80065b4 <TIM_OC3_SetConfig+0x114>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d113      	bne.n	8006586 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800656c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	621a      	str	r2, [r3, #32]
}
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40013400 	.word	0x40013400
 80065b4:	40015000 	.word	0x40015000
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40014400 	.word	0x40014400
 80065c0:	40014800 	.word	0x40014800

080065c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	031b      	lsls	r3, r3, #12
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a2c      	ldr	r2, [pc, #176]	@ (80066d4 <TIM_OC4_SetConfig+0x110>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d007      	beq.n	8006638 <TIM_OC4_SetConfig+0x74>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a2b      	ldr	r2, [pc, #172]	@ (80066d8 <TIM_OC4_SetConfig+0x114>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d003      	beq.n	8006638 <TIM_OC4_SetConfig+0x74>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a2a      	ldr	r2, [pc, #168]	@ (80066dc <TIM_OC4_SetConfig+0x118>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d10d      	bne.n	8006654 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800663e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	031b      	lsls	r3, r3, #12
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a1f      	ldr	r2, [pc, #124]	@ (80066d4 <TIM_OC4_SetConfig+0x110>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d013      	beq.n	8006684 <TIM_OC4_SetConfig+0xc0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a1e      	ldr	r2, [pc, #120]	@ (80066d8 <TIM_OC4_SetConfig+0x114>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00f      	beq.n	8006684 <TIM_OC4_SetConfig+0xc0>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a1e      	ldr	r2, [pc, #120]	@ (80066e0 <TIM_OC4_SetConfig+0x11c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d00b      	beq.n	8006684 <TIM_OC4_SetConfig+0xc0>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a1d      	ldr	r2, [pc, #116]	@ (80066e4 <TIM_OC4_SetConfig+0x120>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d007      	beq.n	8006684 <TIM_OC4_SetConfig+0xc0>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a1c      	ldr	r2, [pc, #112]	@ (80066e8 <TIM_OC4_SetConfig+0x124>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_OC4_SetConfig+0xc0>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a17      	ldr	r2, [pc, #92]	@ (80066dc <TIM_OC4_SetConfig+0x118>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d113      	bne.n	80066ac <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800668a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006692:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	019b      	lsls	r3, r3, #6
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	019b      	lsls	r3, r3, #6
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	621a      	str	r2, [r3, #32]
}
 80066c6:	bf00      	nop
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40013400 	.word	0x40013400
 80066dc:	40015000 	.word	0x40015000
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40014400 	.word	0x40014400
 80066e8:	40014800 	.word	0x40014800

080066ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800671a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800671e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006730:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	041b      	lsls	r3, r3, #16
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a19      	ldr	r2, [pc, #100]	@ (80067a8 <TIM_OC5_SetConfig+0xbc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <TIM_OC5_SetConfig+0x82>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a18      	ldr	r2, [pc, #96]	@ (80067ac <TIM_OC5_SetConfig+0xc0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d00f      	beq.n	800676e <TIM_OC5_SetConfig+0x82>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a17      	ldr	r2, [pc, #92]	@ (80067b0 <TIM_OC5_SetConfig+0xc4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00b      	beq.n	800676e <TIM_OC5_SetConfig+0x82>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a16      	ldr	r2, [pc, #88]	@ (80067b4 <TIM_OC5_SetConfig+0xc8>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d007      	beq.n	800676e <TIM_OC5_SetConfig+0x82>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a15      	ldr	r2, [pc, #84]	@ (80067b8 <TIM_OC5_SetConfig+0xcc>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_OC5_SetConfig+0x82>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a14      	ldr	r2, [pc, #80]	@ (80067bc <TIM_OC5_SetConfig+0xd0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d109      	bne.n	8006782 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006774:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	621a      	str	r2, [r3, #32]
}
 800679c:	bf00      	nop
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40013400 	.word	0x40013400
 80067b0:	40014000 	.word	0x40014000
 80067b4:	40014400 	.word	0x40014400
 80067b8:	40014800 	.word	0x40014800
 80067bc:	40015000 	.word	0x40015000

080067c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	051b      	lsls	r3, r3, #20
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a1a      	ldr	r2, [pc, #104]	@ (8006880 <TIM_OC6_SetConfig+0xc0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d013      	beq.n	8006844 <TIM_OC6_SetConfig+0x84>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a19      	ldr	r2, [pc, #100]	@ (8006884 <TIM_OC6_SetConfig+0xc4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00f      	beq.n	8006844 <TIM_OC6_SetConfig+0x84>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a18      	ldr	r2, [pc, #96]	@ (8006888 <TIM_OC6_SetConfig+0xc8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00b      	beq.n	8006844 <TIM_OC6_SetConfig+0x84>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a17      	ldr	r2, [pc, #92]	@ (800688c <TIM_OC6_SetConfig+0xcc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d007      	beq.n	8006844 <TIM_OC6_SetConfig+0x84>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a16      	ldr	r2, [pc, #88]	@ (8006890 <TIM_OC6_SetConfig+0xd0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d003      	beq.n	8006844 <TIM_OC6_SetConfig+0x84>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a15      	ldr	r2, [pc, #84]	@ (8006894 <TIM_OC6_SetConfig+0xd4>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d109      	bne.n	8006858 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800684a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	029b      	lsls	r3, r3, #10
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	4313      	orrs	r3, r2
 8006856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40012c00 	.word	0x40012c00
 8006884:	40013400 	.word	0x40013400
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800
 8006894:	40015000 	.word	0x40015000

08006898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	f023 0201 	bic.w	r2, r3, #1
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f023 030a 	bic.w	r3, r3, #10
 80068d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	621a      	str	r2, [r3, #32]
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b087      	sub	sp, #28
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60f8      	str	r0, [r7, #12]
 80068fe:	60b9      	str	r1, [r7, #8]
 8006900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	f023 0210 	bic.w	r2, r3, #16
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006920:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	031b      	lsls	r3, r3, #12
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006932:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	621a      	str	r2, [r3, #32]
}
 800694a:	bf00      	nop
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006956:	b480      	push	{r7}
 8006958:	b085      	sub	sp, #20
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800696c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	f043 0307 	orr.w	r3, r3, #7
 800697c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	609a      	str	r2, [r3, #8]
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	021a      	lsls	r2, r3, #8
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	431a      	orrs	r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	609a      	str	r2, [r3, #8]
}
 80069c4:	bf00      	nop
 80069c6:	371c      	adds	r7, #28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f003 031f 	and.w	r3, r3, #31
 80069e2:	2201      	movs	r2, #1
 80069e4:	fa02 f303 	lsl.w	r3, r2, r3
 80069e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a1a      	ldr	r2, [r3, #32]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	43db      	mvns	r3, r3
 80069f2:	401a      	ands	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6a1a      	ldr	r2, [r3, #32]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	fa01 f303 	lsl.w	r3, r1, r3
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e074      	b.n	8006b1e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a34      	ldr	r2, [pc, #208]	@ (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d009      	beq.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a33      	ldr	r2, [pc, #204]	@ (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d004      	beq.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a31      	ldr	r2, [pc, #196]	@ (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d108      	bne.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a21      	ldr	r2, [pc, #132]	@ (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d022      	beq.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab4:	d01d      	beq.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a1f      	ldr	r2, [pc, #124]	@ (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d018      	beq.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d013      	beq.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a1c      	ldr	r2, [pc, #112]	@ (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00e      	beq.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a15      	ldr	r2, [pc, #84]	@ (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d009      	beq.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a18      	ldr	r2, [pc, #96]	@ (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d004      	beq.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a11      	ldr	r2, [pc, #68]	@ (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d10c      	bne.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	40012c00 	.word	0x40012c00
 8006b30:	40013400 	.word	0x40013400
 8006b34:	40015000 	.word	0x40015000
 8006b38:	40000400 	.word	0x40000400
 8006b3c:	40000800 	.word	0x40000800
 8006b40:	40000c00 	.word	0x40000c00
 8006b44:	40014000 	.word	0x40014000

08006b48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e078      	b.n	8006c56 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	041b      	lsls	r3, r3, #16
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c64 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a19      	ldr	r2, [pc, #100]	@ (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d11c      	bne.n	8006c44 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c14:	051b      	lsls	r3, r3, #20
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40012c00 	.word	0x40012c00
 8006c68:	40013400 	.word	0x40013400
 8006c6c:	40015000 	.word	0x40015000

08006c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e042      	b.n	8006d94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d106      	bne.n	8006d26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7fa fb47 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2224      	movs	r2, #36	@ 0x24
 8006d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 ffbe 	bl	8007cc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fcbf 	bl	80076d0 <UART_SetConfig>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e01b      	b.n	8006d94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 f83d 	bl	8007e0c <UART_CheckIdleState>
 8006d92:	4603      	mov	r3, r0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	@ 0x28
 8006da0:	af02      	add	r7, sp, #8
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d17b      	bne.n	8006eae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <HAL_UART_Transmit+0x26>
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e074      	b.n	8006eb0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2221      	movs	r2, #33	@ 0x21
 8006dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dd6:	f7fa fd7f 	bl	80018d8 <HAL_GetTick>
 8006dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	88fa      	ldrh	r2, [r7, #6]
 8006de8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df4:	d108      	bne.n	8006e08 <HAL_UART_Transmit+0x6c>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d104      	bne.n	8006e08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	e003      	b.n	8006e10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e10:	e030      	b.n	8006e74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2180      	movs	r1, #128	@ 0x80
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f001 f89f 	bl	8007f60 <UART_WaitOnFlagUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e03d      	b.n	8006eb0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10b      	bne.n	8006e52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	3302      	adds	r3, #2
 8006e4e:	61bb      	str	r3, [r7, #24]
 8006e50:	e007      	b.n	8006e62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	781a      	ldrb	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1c8      	bne.n	8006e12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2200      	movs	r2, #0
 8006e88:	2140      	movs	r1, #64	@ 0x40
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f001 f868 	bl	8007f60 <UART_WaitOnFlagUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d005      	beq.n	8006ea2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e006      	b.n	8006eb0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e000      	b.n	8006eb0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006eae:	2302      	movs	r3, #2
  }
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	@ 0x28
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	f040 80b5 	bne.w	800703e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_UART_Receive+0x28>
 8006eda:	88fb      	ldrh	r3, [r7, #6]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e0ad      	b.n	8007040 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2222      	movs	r2, #34	@ 0x22
 8006ef0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006efa:	f7fa fced 	bl	80018d8 <HAL_GetTick>
 8006efe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	88fa      	ldrh	r2, [r7, #6]
 8006f04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	88fa      	ldrh	r2, [r7, #6]
 8006f0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f18:	d10e      	bne.n	8006f38 <HAL_UART_Receive+0x80>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d105      	bne.n	8006f2e <HAL_UART_Receive+0x76>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006f28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f2c:	e02d      	b.n	8006f8a <HAL_UART_Receive+0xd2>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	22ff      	movs	r2, #255	@ 0xff
 8006f32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f36:	e028      	b.n	8006f8a <HAL_UART_Receive+0xd2>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10d      	bne.n	8006f5c <HAL_UART_Receive+0xa4>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d104      	bne.n	8006f52 <HAL_UART_Receive+0x9a>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	22ff      	movs	r2, #255	@ 0xff
 8006f4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f50:	e01b      	b.n	8006f8a <HAL_UART_Receive+0xd2>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	227f      	movs	r2, #127	@ 0x7f
 8006f56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f5a:	e016      	b.n	8006f8a <HAL_UART_Receive+0xd2>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f64:	d10d      	bne.n	8006f82 <HAL_UART_Receive+0xca>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <HAL_UART_Receive+0xc0>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	227f      	movs	r2, #127	@ 0x7f
 8006f72:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f76:	e008      	b.n	8006f8a <HAL_UART_Receive+0xd2>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	223f      	movs	r2, #63	@ 0x3f
 8006f7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f80:	e003      	b.n	8006f8a <HAL_UART_Receive+0xd2>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006f90:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f9a:	d108      	bne.n	8006fae <HAL_UART_Receive+0xf6>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	e003      	b.n	8006fb6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006fb6:	e036      	b.n	8007026 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2120      	movs	r1, #32
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 ffcc 	bl	8007f60 <UART_WaitOnFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e032      	b.n	8007040 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10c      	bne.n	8006ffa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	8a7b      	ldrh	r3, [r7, #18]
 8006fea:	4013      	ands	r3, r2
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	3302      	adds	r3, #2
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	e00c      	b.n	8007014 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007000:	b2da      	uxtb	r2, r3
 8007002:	8a7b      	ldrh	r3, [r7, #18]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	4013      	ands	r3, r2
 8007008:	b2da      	uxtb	r2, r3
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	3301      	adds	r3, #1
 8007012:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1c2      	bne.n	8006fb8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	e000      	b.n	8007040 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800703e:	2302      	movs	r3, #2
  }
}
 8007040:	4618      	mov	r0, r3
 8007042:	3720      	adds	r7, #32
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b0ba      	sub	sp, #232	@ 0xe8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800706e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007072:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007076:	4013      	ands	r3, r2
 8007078:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800707c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d11b      	bne.n	80070bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007088:	f003 0320 	and.w	r3, r3, #32
 800708c:	2b00      	cmp	r3, #0
 800708e:	d015      	beq.n	80070bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800709c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d009      	beq.n	80070bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 82e3 	beq.w	8007678 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
      }
      return;
 80070ba:	e2dd      	b.n	8007678 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8123 	beq.w	800730c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80070c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80070ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007300 <HAL_UART_IRQHandler+0x2b8>)
 80070cc:	4013      	ands	r3, r2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80070d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80070d6:	4b8b      	ldr	r3, [pc, #556]	@ (8007304 <HAL_UART_IRQHandler+0x2bc>)
 80070d8:	4013      	ands	r3, r2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 8116 	beq.w	800730c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d011      	beq.n	8007110 <HAL_UART_IRQHandler+0xc8>
 80070ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00b      	beq.n	8007110 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2201      	movs	r2, #1
 80070fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007106:	f043 0201 	orr.w	r2, r3, #1
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d011      	beq.n	8007140 <HAL_UART_IRQHandler+0xf8>
 800711c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2202      	movs	r2, #2
 800712e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007136:	f043 0204 	orr.w	r2, r3, #4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d011      	beq.n	8007170 <HAL_UART_IRQHandler+0x128>
 800714c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2204      	movs	r2, #4
 800715e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007166:	f043 0202 	orr.w	r2, r3, #2
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b00      	cmp	r3, #0
 800717a:	d017      	beq.n	80071ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b00      	cmp	r3, #0
 8007186:	d105      	bne.n	8007194 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007188:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800718c:	4b5c      	ldr	r3, [pc, #368]	@ (8007300 <HAL_UART_IRQHandler+0x2b8>)
 800718e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2208      	movs	r2, #8
 800719a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071a2:	f043 0208 	orr.w	r2, r3, #8
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d012      	beq.n	80071de <HAL_UART_IRQHandler+0x196>
 80071b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00c      	beq.n	80071de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071d4:	f043 0220 	orr.w	r2, r3, #32
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8249 	beq.w	800767c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d013      	beq.n	800721e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d105      	bne.n	800720e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d007      	beq.n	800721e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007224:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007232:	2b40      	cmp	r3, #64	@ 0x40
 8007234:	d005      	beq.n	8007242 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800723a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800723e:	2b00      	cmp	r3, #0
 8007240:	d054      	beq.n	80072ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fef9 	bl	800803a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007252:	2b40      	cmp	r3, #64	@ 0x40
 8007254:	d146      	bne.n	80072e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3308      	adds	r3, #8
 800725c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800726c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3308      	adds	r3, #8
 800727e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007282:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007286:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800728e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800729a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1d9      	bne.n	8007256 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d017      	beq.n	80072dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072b2:	4a15      	ldr	r2, [pc, #84]	@ (8007308 <HAL_UART_IRQHandler+0x2c0>)
 80072b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fc fbc5 	bl	8003a4c <HAL_DMA_Abort_IT>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d019      	beq.n	80072fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80072d6:	4610      	mov	r0, r2
 80072d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072da:	e00f      	b.n	80072fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f9e1 	bl	80076a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e2:	e00b      	b.n	80072fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f9dd 	bl	80076a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ea:	e007      	b.n	80072fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f9d9 	bl	80076a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80072fa:	e1bf      	b.n	800767c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fc:	bf00      	nop
    return;
 80072fe:	e1bd      	b.n	800767c <HAL_UART_IRQHandler+0x634>
 8007300:	10000001 	.word	0x10000001
 8007304:	04000120 	.word	0x04000120
 8007308:	08008107 	.word	0x08008107

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007310:	2b01      	cmp	r3, #1
 8007312:	f040 8153 	bne.w	80075bc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 814c 	beq.w	80075bc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007328:	f003 0310 	and.w	r3, r3, #16
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8145 	beq.w	80075bc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2210      	movs	r2, #16
 8007338:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007344:	2b40      	cmp	r3, #64	@ 0x40
 8007346:	f040 80bb 	bne.w	80074c0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007358:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 818f 	beq.w	8007680 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007368:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800736c:	429a      	cmp	r2, r3
 800736e:	f080 8187 	bcs.w	8007680 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007378:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	f040 8087 	bne.w	800749e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80073a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80073c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80073d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1da      	bne.n	8007390 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80073ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073ec:	f023 0301 	bic.w	r3, r3, #1
 80073f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3308      	adds	r3, #8
 80073fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80073fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007402:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007406:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007410:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e1      	bne.n	80073da <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3308      	adds	r3, #8
 800741c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800742c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3308      	adds	r3, #8
 8007436:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800743a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800743c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007440:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e3      	bne.n	8007416 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800746a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800746c:	f023 0310 	bic.w	r3, r3, #16
 8007470:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	461a      	mov	r2, r3
 800747a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800747e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007480:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007482:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007484:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800748c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e4      	bne.n	800745c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007498:	4618      	mov	r0, r3
 800749a:	f7fc fa7e 	bl	800399a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2202      	movs	r2, #2
 80074a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f8fd 	bl	80076b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074be:	e0df      	b.n	8007680 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074da:	b29b      	uxth	r3, r3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 80d1 	beq.w	8007684 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80074e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 80cc 	beq.w	8007684 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007500:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800750e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007510:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007514:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800751c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e4      	bne.n	80074ec <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3308      	adds	r3, #8
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	623b      	str	r3, [r7, #32]
   return(result);
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007538:	f023 0301 	bic.w	r3, r3, #1
 800753c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3308      	adds	r3, #8
 8007546:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800754a:	633a      	str	r2, [r7, #48]	@ 0x30
 800754c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e1      	bne.n	8007522 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0310 	bic.w	r3, r3, #16
 8007586:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007594:	61fb      	str	r3, [r7, #28]
 8007596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	69b9      	ldr	r1, [r7, #24]
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	617b      	str	r3, [r7, #20]
   return(result);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e4      	bne.n	8007572 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f87f 	bl	80076b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075ba:	e063      	b.n	8007684 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00e      	beq.n	80075e6 <HAL_UART_IRQHandler+0x59e>
 80075c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d008      	beq.n	80075e6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80075dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fdd2 	bl	8008188 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075e4:	e051      	b.n	800768a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80075e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d014      	beq.n	800761c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80075f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d105      	bne.n	800760a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80075fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007602:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d008      	beq.n	800761c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800760e:	2b00      	cmp	r3, #0
 8007610:	d03a      	beq.n	8007688 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
    }
    return;
 800761a:	e035      	b.n	8007688 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800761c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007624:	2b00      	cmp	r3, #0
 8007626:	d009      	beq.n	800763c <HAL_UART_IRQHandler+0x5f4>
 8007628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800762c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fd7c 	bl	8008132 <UART_EndTransmit_IT>
    return;
 800763a:	e026      	b.n	800768a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800763c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007640:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d009      	beq.n	800765c <HAL_UART_IRQHandler+0x614>
 8007648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800764c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fdab 	bl	80081b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800765a:	e016      	b.n	800768a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800765c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007660:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d010      	beq.n	800768a <HAL_UART_IRQHandler+0x642>
 8007668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800766c:	2b00      	cmp	r3, #0
 800766e:	da0c      	bge.n	800768a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fd93 	bl	800819c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007676:	e008      	b.n	800768a <HAL_UART_IRQHandler+0x642>
      return;
 8007678:	bf00      	nop
 800767a:	e006      	b.n	800768a <HAL_UART_IRQHandler+0x642>
    return;
 800767c:	bf00      	nop
 800767e:	e004      	b.n	800768a <HAL_UART_IRQHandler+0x642>
      return;
 8007680:	bf00      	nop
 8007682:	e002      	b.n	800768a <HAL_UART_IRQHandler+0x642>
      return;
 8007684:	bf00      	nop
 8007686:	e000      	b.n	800768a <HAL_UART_IRQHandler+0x642>
    return;
 8007688:	bf00      	nop
  }
}
 800768a:	37e8      	adds	r7, #232	@ 0xe8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076d4:	b08c      	sub	sp, #48	@ 0x30
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	431a      	orrs	r2, r3
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4baa      	ldr	r3, [pc, #680]	@ (80079a8 <UART_SetConfig+0x2d8>)
 8007700:	4013      	ands	r3, r2
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007708:	430b      	orrs	r3, r1
 800770a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a9f      	ldr	r2, [pc, #636]	@ (80079ac <UART_SetConfig+0x2dc>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d004      	beq.n	800773c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007738:	4313      	orrs	r3, r2
 800773a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007746:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	6812      	ldr	r2, [r2, #0]
 800774e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007750:	430b      	orrs	r3, r1
 8007752:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775a:	f023 010f 	bic.w	r1, r3, #15
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a90      	ldr	r2, [pc, #576]	@ (80079b0 <UART_SetConfig+0x2e0>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d125      	bne.n	80077c0 <UART_SetConfig+0xf0>
 8007774:	4b8f      	ldr	r3, [pc, #572]	@ (80079b4 <UART_SetConfig+0x2e4>)
 8007776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	2b03      	cmp	r3, #3
 8007780:	d81a      	bhi.n	80077b8 <UART_SetConfig+0xe8>
 8007782:	a201      	add	r2, pc, #4	@ (adr r2, 8007788 <UART_SetConfig+0xb8>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	08007799 	.word	0x08007799
 800778c:	080077a9 	.word	0x080077a9
 8007790:	080077a1 	.word	0x080077a1
 8007794:	080077b1 	.word	0x080077b1
 8007798:	2301      	movs	r3, #1
 800779a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800779e:	e116      	b.n	80079ce <UART_SetConfig+0x2fe>
 80077a0:	2302      	movs	r3, #2
 80077a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077a6:	e112      	b.n	80079ce <UART_SetConfig+0x2fe>
 80077a8:	2304      	movs	r3, #4
 80077aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ae:	e10e      	b.n	80079ce <UART_SetConfig+0x2fe>
 80077b0:	2308      	movs	r3, #8
 80077b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b6:	e10a      	b.n	80079ce <UART_SetConfig+0x2fe>
 80077b8:	2310      	movs	r3, #16
 80077ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077be:	e106      	b.n	80079ce <UART_SetConfig+0x2fe>
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a7c      	ldr	r2, [pc, #496]	@ (80079b8 <UART_SetConfig+0x2e8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d138      	bne.n	800783c <UART_SetConfig+0x16c>
 80077ca:	4b7a      	ldr	r3, [pc, #488]	@ (80079b4 <UART_SetConfig+0x2e4>)
 80077cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d0:	f003 030c 	and.w	r3, r3, #12
 80077d4:	2b0c      	cmp	r3, #12
 80077d6:	d82d      	bhi.n	8007834 <UART_SetConfig+0x164>
 80077d8:	a201      	add	r2, pc, #4	@ (adr r2, 80077e0 <UART_SetConfig+0x110>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	08007815 	.word	0x08007815
 80077e4:	08007835 	.word	0x08007835
 80077e8:	08007835 	.word	0x08007835
 80077ec:	08007835 	.word	0x08007835
 80077f0:	08007825 	.word	0x08007825
 80077f4:	08007835 	.word	0x08007835
 80077f8:	08007835 	.word	0x08007835
 80077fc:	08007835 	.word	0x08007835
 8007800:	0800781d 	.word	0x0800781d
 8007804:	08007835 	.word	0x08007835
 8007808:	08007835 	.word	0x08007835
 800780c:	08007835 	.word	0x08007835
 8007810:	0800782d 	.word	0x0800782d
 8007814:	2300      	movs	r3, #0
 8007816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800781a:	e0d8      	b.n	80079ce <UART_SetConfig+0x2fe>
 800781c:	2302      	movs	r3, #2
 800781e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007822:	e0d4      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007824:	2304      	movs	r3, #4
 8007826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800782a:	e0d0      	b.n	80079ce <UART_SetConfig+0x2fe>
 800782c:	2308      	movs	r3, #8
 800782e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007832:	e0cc      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007834:	2310      	movs	r3, #16
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800783a:	e0c8      	b.n	80079ce <UART_SetConfig+0x2fe>
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a5e      	ldr	r2, [pc, #376]	@ (80079bc <UART_SetConfig+0x2ec>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d125      	bne.n	8007892 <UART_SetConfig+0x1c2>
 8007846:	4b5b      	ldr	r3, [pc, #364]	@ (80079b4 <UART_SetConfig+0x2e4>)
 8007848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800784c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007850:	2b30      	cmp	r3, #48	@ 0x30
 8007852:	d016      	beq.n	8007882 <UART_SetConfig+0x1b2>
 8007854:	2b30      	cmp	r3, #48	@ 0x30
 8007856:	d818      	bhi.n	800788a <UART_SetConfig+0x1ba>
 8007858:	2b20      	cmp	r3, #32
 800785a:	d00a      	beq.n	8007872 <UART_SetConfig+0x1a2>
 800785c:	2b20      	cmp	r3, #32
 800785e:	d814      	bhi.n	800788a <UART_SetConfig+0x1ba>
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <UART_SetConfig+0x19a>
 8007864:	2b10      	cmp	r3, #16
 8007866:	d008      	beq.n	800787a <UART_SetConfig+0x1aa>
 8007868:	e00f      	b.n	800788a <UART_SetConfig+0x1ba>
 800786a:	2300      	movs	r3, #0
 800786c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007870:	e0ad      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007872:	2302      	movs	r3, #2
 8007874:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007878:	e0a9      	b.n	80079ce <UART_SetConfig+0x2fe>
 800787a:	2304      	movs	r3, #4
 800787c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007880:	e0a5      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007882:	2308      	movs	r3, #8
 8007884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007888:	e0a1      	b.n	80079ce <UART_SetConfig+0x2fe>
 800788a:	2310      	movs	r3, #16
 800788c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007890:	e09d      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a4a      	ldr	r2, [pc, #296]	@ (80079c0 <UART_SetConfig+0x2f0>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d125      	bne.n	80078e8 <UART_SetConfig+0x218>
 800789c:	4b45      	ldr	r3, [pc, #276]	@ (80079b4 <UART_SetConfig+0x2e4>)
 800789e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80078a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80078a8:	d016      	beq.n	80078d8 <UART_SetConfig+0x208>
 80078aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80078ac:	d818      	bhi.n	80078e0 <UART_SetConfig+0x210>
 80078ae:	2b80      	cmp	r3, #128	@ 0x80
 80078b0:	d00a      	beq.n	80078c8 <UART_SetConfig+0x1f8>
 80078b2:	2b80      	cmp	r3, #128	@ 0x80
 80078b4:	d814      	bhi.n	80078e0 <UART_SetConfig+0x210>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <UART_SetConfig+0x1f0>
 80078ba:	2b40      	cmp	r3, #64	@ 0x40
 80078bc:	d008      	beq.n	80078d0 <UART_SetConfig+0x200>
 80078be:	e00f      	b.n	80078e0 <UART_SetConfig+0x210>
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078c6:	e082      	b.n	80079ce <UART_SetConfig+0x2fe>
 80078c8:	2302      	movs	r3, #2
 80078ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ce:	e07e      	b.n	80079ce <UART_SetConfig+0x2fe>
 80078d0:	2304      	movs	r3, #4
 80078d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d6:	e07a      	b.n	80079ce <UART_SetConfig+0x2fe>
 80078d8:	2308      	movs	r3, #8
 80078da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078de:	e076      	b.n	80079ce <UART_SetConfig+0x2fe>
 80078e0:	2310      	movs	r3, #16
 80078e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e6:	e072      	b.n	80079ce <UART_SetConfig+0x2fe>
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a35      	ldr	r2, [pc, #212]	@ (80079c4 <UART_SetConfig+0x2f4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d12a      	bne.n	8007948 <UART_SetConfig+0x278>
 80078f2:	4b30      	ldr	r3, [pc, #192]	@ (80079b4 <UART_SetConfig+0x2e4>)
 80078f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007900:	d01a      	beq.n	8007938 <UART_SetConfig+0x268>
 8007902:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007906:	d81b      	bhi.n	8007940 <UART_SetConfig+0x270>
 8007908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800790c:	d00c      	beq.n	8007928 <UART_SetConfig+0x258>
 800790e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007912:	d815      	bhi.n	8007940 <UART_SetConfig+0x270>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <UART_SetConfig+0x250>
 8007918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800791c:	d008      	beq.n	8007930 <UART_SetConfig+0x260>
 800791e:	e00f      	b.n	8007940 <UART_SetConfig+0x270>
 8007920:	2300      	movs	r3, #0
 8007922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007926:	e052      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007928:	2302      	movs	r3, #2
 800792a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800792e:	e04e      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007930:	2304      	movs	r3, #4
 8007932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007936:	e04a      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007938:	2308      	movs	r3, #8
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800793e:	e046      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007940:	2310      	movs	r3, #16
 8007942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007946:	e042      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a17      	ldr	r2, [pc, #92]	@ (80079ac <UART_SetConfig+0x2dc>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d13a      	bne.n	80079c8 <UART_SetConfig+0x2f8>
 8007952:	4b18      	ldr	r3, [pc, #96]	@ (80079b4 <UART_SetConfig+0x2e4>)
 8007954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007958:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800795c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007960:	d01a      	beq.n	8007998 <UART_SetConfig+0x2c8>
 8007962:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007966:	d81b      	bhi.n	80079a0 <UART_SetConfig+0x2d0>
 8007968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800796c:	d00c      	beq.n	8007988 <UART_SetConfig+0x2b8>
 800796e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007972:	d815      	bhi.n	80079a0 <UART_SetConfig+0x2d0>
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <UART_SetConfig+0x2b0>
 8007978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800797c:	d008      	beq.n	8007990 <UART_SetConfig+0x2c0>
 800797e:	e00f      	b.n	80079a0 <UART_SetConfig+0x2d0>
 8007980:	2300      	movs	r3, #0
 8007982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007986:	e022      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007988:	2302      	movs	r3, #2
 800798a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800798e:	e01e      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007990:	2304      	movs	r3, #4
 8007992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007996:	e01a      	b.n	80079ce <UART_SetConfig+0x2fe>
 8007998:	2308      	movs	r3, #8
 800799a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799e:	e016      	b.n	80079ce <UART_SetConfig+0x2fe>
 80079a0:	2310      	movs	r3, #16
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a6:	e012      	b.n	80079ce <UART_SetConfig+0x2fe>
 80079a8:	cfff69f3 	.word	0xcfff69f3
 80079ac:	40008000 	.word	0x40008000
 80079b0:	40013800 	.word	0x40013800
 80079b4:	40021000 	.word	0x40021000
 80079b8:	40004400 	.word	0x40004400
 80079bc:	40004800 	.word	0x40004800
 80079c0:	40004c00 	.word	0x40004c00
 80079c4:	40005000 	.word	0x40005000
 80079c8:	2310      	movs	r3, #16
 80079ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4aae      	ldr	r2, [pc, #696]	@ (8007c8c <UART_SetConfig+0x5bc>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	f040 8097 	bne.w	8007b08 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079de:	2b08      	cmp	r3, #8
 80079e0:	d823      	bhi.n	8007a2a <UART_SetConfig+0x35a>
 80079e2:	a201      	add	r2, pc, #4	@ (adr r2, 80079e8 <UART_SetConfig+0x318>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007a2b 	.word	0x08007a2b
 80079f0:	08007a15 	.word	0x08007a15
 80079f4:	08007a2b 	.word	0x08007a2b
 80079f8:	08007a1b 	.word	0x08007a1b
 80079fc:	08007a2b 	.word	0x08007a2b
 8007a00:	08007a2b 	.word	0x08007a2b
 8007a04:	08007a2b 	.word	0x08007a2b
 8007a08:	08007a23 	.word	0x08007a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a0c:	f7fd f91c 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8007a10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a12:	e010      	b.n	8007a36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a14:	4b9e      	ldr	r3, [pc, #632]	@ (8007c90 <UART_SetConfig+0x5c0>)
 8007a16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a18:	e00d      	b.n	8007a36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a1a:	f7fd f8a7 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8007a1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a20:	e009      	b.n	8007a36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a28:	e005      	b.n	8007a36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 8130 	beq.w	8007c9e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a42:	4a94      	ldr	r2, [pc, #592]	@ (8007c94 <UART_SetConfig+0x5c4>)
 8007a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	4613      	mov	r3, r2
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	4413      	add	r3, r2
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d305      	bcc.n	8007a6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d903      	bls.n	8007a76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a74:	e113      	b.n	8007c9e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	2200      	movs	r2, #0
 8007a7a:	60bb      	str	r3, [r7, #8]
 8007a7c:	60fa      	str	r2, [r7, #12]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a82:	4a84      	ldr	r2, [pc, #528]	@ (8007c94 <UART_SetConfig+0x5c4>)
 8007a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	603b      	str	r3, [r7, #0]
 8007a8e:	607a      	str	r2, [r7, #4]
 8007a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a98:	f7f8 fbbe 	bl	8000218 <__aeabi_uldivmod>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	020b      	lsls	r3, r1, #8
 8007aae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ab2:	0202      	lsls	r2, r0, #8
 8007ab4:	6979      	ldr	r1, [r7, #20]
 8007ab6:	6849      	ldr	r1, [r1, #4]
 8007ab8:	0849      	lsrs	r1, r1, #1
 8007aba:	2000      	movs	r0, #0
 8007abc:	460c      	mov	r4, r1
 8007abe:	4605      	mov	r5, r0
 8007ac0:	eb12 0804 	adds.w	r8, r2, r4
 8007ac4:	eb43 0905 	adc.w	r9, r3, r5
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	469a      	mov	sl, r3
 8007ad0:	4693      	mov	fp, r2
 8007ad2:	4652      	mov	r2, sl
 8007ad4:	465b      	mov	r3, fp
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	4649      	mov	r1, r9
 8007ada:	f7f8 fb9d 	bl	8000218 <__aeabi_uldivmod>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aec:	d308      	bcc.n	8007b00 <UART_SetConfig+0x430>
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007af4:	d204      	bcs.n	8007b00 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6a3a      	ldr	r2, [r7, #32]
 8007afc:	60da      	str	r2, [r3, #12]
 8007afe:	e0ce      	b.n	8007c9e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b06:	e0ca      	b.n	8007c9e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b10:	d166      	bne.n	8007be0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007b12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b16:	2b08      	cmp	r3, #8
 8007b18:	d827      	bhi.n	8007b6a <UART_SetConfig+0x49a>
 8007b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b20 <UART_SetConfig+0x450>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007b45 	.word	0x08007b45
 8007b24:	08007b4d 	.word	0x08007b4d
 8007b28:	08007b55 	.word	0x08007b55
 8007b2c:	08007b6b 	.word	0x08007b6b
 8007b30:	08007b5b 	.word	0x08007b5b
 8007b34:	08007b6b 	.word	0x08007b6b
 8007b38:	08007b6b 	.word	0x08007b6b
 8007b3c:	08007b6b 	.word	0x08007b6b
 8007b40:	08007b63 	.word	0x08007b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b44:	f7fd f880 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8007b48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b4a:	e014      	b.n	8007b76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b4c:	f7fd f892 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 8007b50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b52:	e010      	b.n	8007b76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b54:	4b4e      	ldr	r3, [pc, #312]	@ (8007c90 <UART_SetConfig+0x5c0>)
 8007b56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b58:	e00d      	b.n	8007b76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b5a:	f7fd f807 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8007b5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b60:	e009      	b.n	8007b76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b68:	e005      	b.n	8007b76 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 8090 	beq.w	8007c9e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b82:	4a44      	ldr	r2, [pc, #272]	@ (8007c94 <UART_SetConfig+0x5c4>)
 8007b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b90:	005a      	lsls	r2, r3, #1
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	085b      	lsrs	r3, r3, #1
 8007b98:	441a      	add	r2, r3
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	2b0f      	cmp	r3, #15
 8007ba8:	d916      	bls.n	8007bd8 <UART_SetConfig+0x508>
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb0:	d212      	bcs.n	8007bd8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f023 030f 	bic.w	r3, r3, #15
 8007bba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	8bfb      	ldrh	r3, [r7, #30]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	8bfa      	ldrh	r2, [r7, #30]
 8007bd4:	60da      	str	r2, [r3, #12]
 8007bd6:	e062      	b.n	8007c9e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007bde:	e05e      	b.n	8007c9e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007be0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d828      	bhi.n	8007c3a <UART_SetConfig+0x56a>
 8007be8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <UART_SetConfig+0x520>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c15 	.word	0x08007c15
 8007bf4:	08007c1d 	.word	0x08007c1d
 8007bf8:	08007c25 	.word	0x08007c25
 8007bfc:	08007c3b 	.word	0x08007c3b
 8007c00:	08007c2b 	.word	0x08007c2b
 8007c04:	08007c3b 	.word	0x08007c3b
 8007c08:	08007c3b 	.word	0x08007c3b
 8007c0c:	08007c3b 	.word	0x08007c3b
 8007c10:	08007c33 	.word	0x08007c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c14:	f7fd f818 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8007c18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c1a:	e014      	b.n	8007c46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c1c:	f7fd f82a 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 8007c20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c22:	e010      	b.n	8007c46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c24:	4b1a      	ldr	r3, [pc, #104]	@ (8007c90 <UART_SetConfig+0x5c0>)
 8007c26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c28:	e00d      	b.n	8007c46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2a:	f7fc ff9f 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8007c2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c30:	e009      	b.n	8007c46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c38:	e005      	b.n	8007c46 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c44:	bf00      	nop
    }

    if (pclk != 0U)
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d028      	beq.n	8007c9e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c50:	4a10      	ldr	r2, [pc, #64]	@ (8007c94 <UART_SetConfig+0x5c4>)
 8007c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c56:	461a      	mov	r2, r3
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	085b      	lsrs	r3, r3, #1
 8007c64:	441a      	add	r2, r3
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	2b0f      	cmp	r3, #15
 8007c74:	d910      	bls.n	8007c98 <UART_SetConfig+0x5c8>
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c7c:	d20c      	bcs.n	8007c98 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60da      	str	r2, [r3, #12]
 8007c88:	e009      	b.n	8007c9e <UART_SetConfig+0x5ce>
 8007c8a:	bf00      	nop
 8007c8c:	40008000 	.word	0x40008000
 8007c90:	00f42400 	.word	0x00f42400
 8007c94:	080084c0 	.word	0x080084c0
      }
      else
      {
        ret = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007cba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3730      	adds	r7, #48	@ 0x30
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01a      	beq.n	8007dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dc6:	d10a      	bne.n	8007dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	605a      	str	r2, [r3, #4]
  }
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b098      	sub	sp, #96	@ 0x60
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e1c:	f7f9 fd5c 	bl	80018d8 <HAL_GetTick>
 8007e20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d12f      	bne.n	8007e90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f88e 	bl	8007f60 <UART_WaitOnFlagUntilTimeout>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d022      	beq.n	8007e90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e6      	bne.n	8007e4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e063      	b.n	8007f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0304 	and.w	r3, r3, #4
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d149      	bne.n	8007f32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f857 	bl	8007f60 <UART_WaitOnFlagUntilTimeout>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d03c      	beq.n	8007f32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e6      	bne.n	8007eb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f023 0301 	bic.w	r3, r3, #1
 8007f00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f0a:	61fa      	str	r2, [r7, #28]
 8007f0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	69b9      	ldr	r1, [r7, #24]
 8007f10:	69fa      	ldr	r2, [r7, #28]
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	617b      	str	r3, [r7, #20]
   return(result);
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e5      	bne.n	8007eea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e012      	b.n	8007f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3758      	adds	r7, #88	@ 0x58
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f70:	e04f      	b.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f78:	d04b      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f7a:	f7f9 fcad 	bl	80018d8 <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d302      	bcc.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e04e      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d037      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b80      	cmp	r3, #128	@ 0x80
 8007fa6:	d034      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b40      	cmp	r3, #64	@ 0x40
 8007fac:	d031      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d110      	bne.n	8007fde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 f838 	bl	800803a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2208      	movs	r2, #8
 8007fce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e029      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fec:	d111      	bne.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f81e 	bl	800803a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e00f      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69da      	ldr	r2, [r3, #28]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4013      	ands	r3, r2
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	429a      	cmp	r2, r3
 8008020:	bf0c      	ite	eq
 8008022:	2301      	moveq	r3, #1
 8008024:	2300      	movne	r3, #0
 8008026:	b2db      	uxtb	r3, r3
 8008028:	461a      	mov	r2, r3
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	429a      	cmp	r2, r3
 800802e:	d0a0      	beq.n	8007f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800803a:	b480      	push	{r7}
 800803c:	b095      	sub	sp, #84	@ 0x54
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	461a      	mov	r2, r3
 800805e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008060:	643b      	str	r3, [r7, #64]	@ 0x40
 8008062:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800806e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e6      	bne.n	8008042 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3308      	adds	r3, #8
 800807a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	61fb      	str	r3, [r7, #28]
   return(result);
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800808a:	f023 0301 	bic.w	r3, r3, #1
 800808e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3308      	adds	r3, #8
 8008096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008098:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800809a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800809e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080a0:	e841 2300 	strex	r3, r2, [r1]
 80080a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1e3      	bne.n	8008074 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d118      	bne.n	80080e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f023 0310 	bic.w	r3, r3, #16
 80080c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080d2:	61bb      	str	r3, [r7, #24]
 80080d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6979      	ldr	r1, [r7, #20]
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	613b      	str	r3, [r7, #16]
   return(result);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e6      	bne.n	80080b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80080fa:	bf00      	nop
 80080fc:	3754      	adds	r7, #84	@ 0x54
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f7ff fabd 	bl	80076a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b088      	sub	sp, #32
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	e853 3f00 	ldrex	r3, [r3]
 8008146:	60bb      	str	r3, [r7, #8]
   return(result);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800814e:	61fb      	str	r3, [r7, #28]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	461a      	mov	r2, r3
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	61bb      	str	r3, [r7, #24]
 800815a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	6979      	ldr	r1, [r7, #20]
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	613b      	str	r3, [r7, #16]
   return(result);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e6      	bne.n	800813a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2220      	movs	r2, #32
 8008170:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff fa88 	bl	8007690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008180:	bf00      	nop
 8008182:	3720      	adds	r7, #32
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d101      	bne.n	80081da <HAL_UARTEx_DisableFifoMode+0x16>
 80081d6:	2302      	movs	r3, #2
 80081d8:	e027      	b.n	800822a <HAL_UARTEx_DisableFifoMode+0x66>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2224      	movs	r2, #36	@ 0x24
 80081e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f022 0201 	bic.w	r2, r2, #1
 8008200:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008208:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2220      	movs	r2, #32
 800821c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800824a:	2302      	movs	r3, #2
 800824c:	e02d      	b.n	80082aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2224      	movs	r2, #36	@ 0x24
 800825a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0201 	bic.w	r2, r2, #1
 8008274:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f850 	bl	8008330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d101      	bne.n	80082ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e02d      	b.n	8008326 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2224      	movs	r2, #36	@ 0x24
 80082d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0201 	bic.w	r2, r2, #1
 80082f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f812 	bl	8008330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800833c:	2b00      	cmp	r3, #0
 800833e:	d108      	bne.n	8008352 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008350:	e031      	b.n	80083b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008352:	2308      	movs	r3, #8
 8008354:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008356:	2308      	movs	r3, #8
 8008358:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	0e5b      	lsrs	r3, r3, #25
 8008362:	b2db      	uxtb	r3, r3
 8008364:	f003 0307 	and.w	r3, r3, #7
 8008368:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	0f5b      	lsrs	r3, r3, #29
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 0307 	and.w	r3, r3, #7
 8008378:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	7b3a      	ldrb	r2, [r7, #12]
 800837e:	4911      	ldr	r1, [pc, #68]	@ (80083c4 <UARTEx_SetNbDataToProcess+0x94>)
 8008380:	5c8a      	ldrb	r2, [r1, r2]
 8008382:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008386:	7b3a      	ldrb	r2, [r7, #12]
 8008388:	490f      	ldr	r1, [pc, #60]	@ (80083c8 <UARTEx_SetNbDataToProcess+0x98>)
 800838a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800838c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008390:	b29a      	uxth	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	7b7a      	ldrb	r2, [r7, #13]
 800839c:	4909      	ldr	r1, [pc, #36]	@ (80083c4 <UARTEx_SetNbDataToProcess+0x94>)
 800839e:	5c8a      	ldrb	r2, [r1, r2]
 80083a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083a4:	7b7a      	ldrb	r2, [r7, #13]
 80083a6:	4908      	ldr	r1, [pc, #32]	@ (80083c8 <UARTEx_SetNbDataToProcess+0x98>)
 80083a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80083b6:	bf00      	nop
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	080084d8 	.word	0x080084d8
 80083c8:	080084e0 	.word	0x080084e0

080083cc <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	edd3 7a07 	vldr	s15, [r3, #28]
 80083e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80083ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80083fc:	eeb1 7a67 	vneg.f32	s14, s15
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	edd3 7a08 	vldr	s15, [r3, #32]
 8008406:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800840a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1a      	ldr	r2, [r3, #32]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d006      	beq.n	8008430 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	330c      	adds	r3, #12
 8008426:	220c      	movs	r2, #12
 8008428:	2100      	movs	r1, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f000 f804 	bl	8008438 <memset>
  }

}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <memset>:
 8008438:	4402      	add	r2, r0
 800843a:	4603      	mov	r3, r0
 800843c:	4293      	cmp	r3, r2
 800843e:	d100      	bne.n	8008442 <memset+0xa>
 8008440:	4770      	bx	lr
 8008442:	f803 1b01 	strb.w	r1, [r3], #1
 8008446:	e7f9      	b.n	800843c <memset+0x4>

08008448 <__libc_init_array>:
 8008448:	b570      	push	{r4, r5, r6, lr}
 800844a:	4d0d      	ldr	r5, [pc, #52]	@ (8008480 <__libc_init_array+0x38>)
 800844c:	4c0d      	ldr	r4, [pc, #52]	@ (8008484 <__libc_init_array+0x3c>)
 800844e:	1b64      	subs	r4, r4, r5
 8008450:	10a4      	asrs	r4, r4, #2
 8008452:	2600      	movs	r6, #0
 8008454:	42a6      	cmp	r6, r4
 8008456:	d109      	bne.n	800846c <__libc_init_array+0x24>
 8008458:	4d0b      	ldr	r5, [pc, #44]	@ (8008488 <__libc_init_array+0x40>)
 800845a:	4c0c      	ldr	r4, [pc, #48]	@ (800848c <__libc_init_array+0x44>)
 800845c:	f000 f818 	bl	8008490 <_init>
 8008460:	1b64      	subs	r4, r4, r5
 8008462:	10a4      	asrs	r4, r4, #2
 8008464:	2600      	movs	r6, #0
 8008466:	42a6      	cmp	r6, r4
 8008468:	d105      	bne.n	8008476 <__libc_init_array+0x2e>
 800846a:	bd70      	pop	{r4, r5, r6, pc}
 800846c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008470:	4798      	blx	r3
 8008472:	3601      	adds	r6, #1
 8008474:	e7ee      	b.n	8008454 <__libc_init_array+0xc>
 8008476:	f855 3b04 	ldr.w	r3, [r5], #4
 800847a:	4798      	blx	r3
 800847c:	3601      	adds	r6, #1
 800847e:	e7f2      	b.n	8008466 <__libc_init_array+0x1e>
 8008480:	080084f0 	.word	0x080084f0
 8008484:	080084f0 	.word	0x080084f0
 8008488:	080084f0 	.word	0x080084f0
 800848c:	080084f4 	.word	0x080084f4

08008490 <_init>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	bf00      	nop
 8008494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008496:	bc08      	pop	{r3}
 8008498:	469e      	mov	lr, r3
 800849a:	4770      	bx	lr

0800849c <_fini>:
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	bf00      	nop
 80084a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a2:	bc08      	pop	{r3}
 80084a4:	469e      	mov	lr, r3
 80084a6:	4770      	bx	lr
