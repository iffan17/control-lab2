
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e2c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008004  08008004  00009004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008044  08008044  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  08008044  08008044  00009044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800804c  0800804c  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800804c  0800804c  0000904c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008050  08008050  00009050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008054  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  2000000c  08008060  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08008060  0000a4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188a8  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002caf  00000000  00000000  000228e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  00025598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001072  00000000  00000000  00026aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fae  00000000  00000000  00027b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189f4  00000000  00000000  00050ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114781  00000000  00000000  000694b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017dc35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b2c  00000000  00000000  0017dc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001837a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007fec 	.word	0x08007fec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007fec 	.word	0x08007fec

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 f89c 	bl	800164a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f969 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fccb 	bl	8000eb0 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fc9f 	bl	8000e5c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 fa39 	bl	8000994 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 f9ad 	bl	8000880 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 fb7d 	bl	8000c24 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052a:	f000 fbc9 	bl	8000cc0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800052e:	f000 fc3f 	bl	8000db0 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000532:	f000 fb29 	bl	8000b88 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000536:	f000 fa77 	bl	8000a28 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 800053a:	22c8      	movs	r2, #200	@ 0xc8
 800053c:	498e      	ldr	r1, [pc, #568]	@ (8000778 <main+0x270>)
 800053e:	488f      	ldr	r0, [pc, #572]	@ (800077c <main+0x274>)
 8000540:	f001 fcf0 	bl	8001f24 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000544:	488e      	ldr	r0, [pc, #568]	@ (8000780 <main+0x278>)
 8000546:	f004 fd9b 	bl	8005080 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800054a:	488e      	ldr	r0, [pc, #568]	@ (8000784 <main+0x27c>)
 800054c:	f004 fd98 	bl	8005080 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000550:	488d      	ldr	r0, [pc, #564]	@ (8000788 <main+0x280>)
 8000552:	f004 fe05 	bl	8005160 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	488c      	ldr	r0, [pc, #560]	@ (800078c <main+0x284>)
 800055a:	f004 fedb 	bl	8005314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800055e:	2100      	movs	r1, #0
 8000560:	4888      	ldr	r0, [pc, #544]	@ (8000784 <main+0x27c>)
 8000562:	f004 fed7 	bl	8005314 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 8000566:	213c      	movs	r1, #60	@ 0x3c
 8000568:	4889      	ldr	r0, [pc, #548]	@ (8000790 <main+0x288>)
 800056a:	f005 f88b 	bl	8005684 <HAL_TIM_Encoder_Start>



  PID.Kp =2;
 800056e:	4b89      	ldr	r3, [pc, #548]	@ (8000794 <main+0x28c>)
 8000570:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000574:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 8000576:	4b87      	ldr	r3, [pc, #540]	@ (8000794 <main+0x28c>)
 8000578:	f04f 0200 	mov.w	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 800057e:	4b85      	ldr	r3, [pc, #532]	@ (8000794 <main+0x28c>)
 8000580:	f04f 0200 	mov.w	r2, #0
 8000584:	621a      	str	r2, [r3, #32]
  set_pos = 0;
 8000586:	4b84      	ldr	r3, [pc, #528]	@ (8000798 <main+0x290>)
 8000588:	f04f 0200 	mov.w	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
  z = 0;
 800058e:	4b83      	ldr	r3, [pc, #524]	@ (800079c <main+0x294>)
 8000590:	2200      	movs	r2, #0
 8000592:	801a      	strh	r2, [r3, #0]
  arm_pid_init_f32(&PID, 0);
 8000594:	2100      	movs	r1, #0
 8000596:	487f      	ldr	r0, [pc, #508]	@ (8000794 <main+0x28c>)
 8000598:	f007 fcc6 	bl	8007f28 <arm_pid_init_f32>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Degree = (QEIReadRaw/48)*360;
 800059c:	4b80      	ldr	r3, [pc, #512]	@ (80007a0 <main+0x298>)
 800059e:	ed93 7a00 	vldr	s14, [r3]
 80005a2:	eddf 6a80 	vldr	s13, [pc, #512]	@ 80007a4 <main+0x29c>
 80005a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005aa:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80007a8 <main+0x2a0>
 80005ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b2:	4b7e      	ldr	r3, [pc, #504]	@ (80007ac <main+0x2a4>)
 80005b4:	edc3 7a00 	vstr	s15, [r3]
	  for (uint16_t i =0; i < 100;i++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	81fb      	strh	r3, [r7, #14]
 80005bc:	e019      	b.n	80005f2 <main+0xea>
	  {
		  x += ADC_RawRead[(i*2)];
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4a6d      	ldr	r2, [pc, #436]	@ (8000778 <main+0x270>)
 80005c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b79      	ldr	r3, [pc, #484]	@ (80007b0 <main+0x2a8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a77      	ldr	r2, [pc, #476]	@ (80007b0 <main+0x2a8>)
 80005d2:	6013      	str	r3, [r2, #0]
		  y += ADC_RawRead[(i*2)+1];
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	3301      	adds	r3, #1
 80005da:	4a67      	ldr	r2, [pc, #412]	@ (8000778 <main+0x270>)
 80005dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b74      	ldr	r3, [pc, #464]	@ (80007b4 <main+0x2ac>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	4a72      	ldr	r2, [pc, #456]	@ (80007b4 <main+0x2ac>)
 80005ea:	6013      	str	r3, [r2, #0]
	  for (uint16_t i =0; i < 100;i++)
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	3301      	adds	r3, #1
 80005f0:	81fb      	strh	r3, [r7, #14]
 80005f2:	89fb      	ldrh	r3, [r7, #14]
 80005f4:	2b63      	cmp	r3, #99	@ 0x63
 80005f6:	d9e2      	bls.n	80005be <main+0xb6>
	  }
	  posADC = x/(100);
 80005f8:	4b6d      	ldr	r3, [pc, #436]	@ (80007b0 <main+0x2a8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a6e      	ldr	r2, [pc, #440]	@ (80007b8 <main+0x2b0>)
 80005fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000602:	095b      	lsrs	r3, r3, #5
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b6d      	ldr	r3, [pc, #436]	@ (80007bc <main+0x2b4>)
 8000608:	801a      	strh	r2, [r3, #0]
	  setADC = y/(100);
 800060a:	4b6a      	ldr	r3, [pc, #424]	@ (80007b4 <main+0x2ac>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a6a      	ldr	r2, [pc, #424]	@ (80007b8 <main+0x2b0>)
 8000610:	fba2 2303 	umull	r2, r3, r2, r3
 8000614:	095b      	lsrs	r3, r3, #5
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b69      	ldr	r3, [pc, #420]	@ (80007c0 <main+0x2b8>)
 800061a:	801a      	strh	r2, [r3, #0]
	  x = 0;
 800061c:	4b64      	ldr	r3, [pc, #400]	@ (80007b0 <main+0x2a8>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
	  y = 0;
 8000622:	4b64      	ldr	r3, [pc, #400]	@ (80007b4 <main+0x2ac>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]


	  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676*2/3072;
 8000628:	4b5b      	ldr	r3, [pc, #364]	@ (8000798 <main+0x290>)
 800062a:	ed93 7a00 	vldr	s14, [r3]
 800062e:	4b65      	ldr	r3, [pc, #404]	@ (80007c4 <main+0x2bc>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	ee07 3a90 	vmov	s15, r3
 8000636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800063a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800063e:	4b55      	ldr	r3, [pc, #340]	@ (8000794 <main+0x28c>)
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	edc7 7a01 	vstr	s15, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	ed93 7a00 	vldr	s14, [r3]
 800064c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000650:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	edd3 6a01 	vldr	s13, [r3, #4]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000660:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000664:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	edd3 6a02 	vldr	s13, [r3, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	edd3 7a04 	vldr	s15, [r3, #16]
 8000674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000686:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	68da      	ldr	r2, [r3, #12]
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800069e:	edd7 7a00 	vldr	s15, [r7]
 80006a2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80007c8 <main+0x2c0>
 80006a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80006ae:	eddf 6a47 	vldr	s13, [pc, #284]	@ 80007cc <main+0x2c4>
 80006b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b6:	4b46      	ldr	r3, [pc, #280]	@ (80007d0 <main+0x2c8>)
 80006b8:	edc3 7a00 	vstr	s15, [r3]

	  if(Vfeedback > 32676) //ensure smooth speed , maximum speed
 80006bc:	4b44      	ldr	r3, [pc, #272]	@ (80007d0 <main+0x2c8>)
 80006be:	edd3 7a00 	vldr	s15, [r3]
 80006c2:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80007c8 <main+0x2c0>
 80006c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ce:	dd03      	ble.n	80006d8 <main+0x1d0>
	  {
		  Vfeedback = 32676;
 80006d0:	4b3f      	ldr	r3, [pc, #252]	@ (80007d0 <main+0x2c8>)
 80006d2:	4a40      	ldr	r2, [pc, #256]	@ (80007d4 <main+0x2cc>)
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	e00c      	b.n	80006f2 <main+0x1ea>
	  }
	  else if(Vfeedback < -32676)
 80006d8:	4b3d      	ldr	r3, [pc, #244]	@ (80007d0 <main+0x2c8>)
 80006da:	edd3 7a00 	vldr	s15, [r3]
 80006de:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80007d8 <main+0x2d0>
 80006e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ea:	d502      	bpl.n	80006f2 <main+0x1ea>
	  {
		  Vfeedback = -32676;
 80006ec:	4b38      	ldr	r3, [pc, #224]	@ (80007d0 <main+0x2c8>)
 80006ee:	4a3b      	ldr	r2, [pc, #236]	@ (80007dc <main+0x2d4>)
 80006f0:	601a      	str	r2, [r3, #0]
	  }

	  if(Vfeedback > 0)
 80006f2:	4b37      	ldr	r3, [pc, #220]	@ (80007d0 <main+0x2c8>)
 80006f4:	edd3 7a00 	vldr	s15, [r3]
 80006f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000700:	dd08      	ble.n	8000714 <main+0x20c>
	  {
		  //z = 1;
		  PWM1 = Vfeedback;
 8000702:	4b33      	ldr	r3, [pc, #204]	@ (80007d0 <main+0x2c8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a36      	ldr	r2, [pc, #216]	@ (80007e0 <main+0x2d8>)
 8000708:	6013      	str	r3, [r2, #0]
		  PWM2 = 0;
 800070a:	4b36      	ldr	r3, [pc, #216]	@ (80007e4 <main+0x2dc>)
 800070c:	f04f 0200 	mov.w	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	e01c      	b.n	800074e <main+0x246>

	  }
	  else if(Vfeedback < 0)
 8000714:	4b2e      	ldr	r3, [pc, #184]	@ (80007d0 <main+0x2c8>)
 8000716:	edd3 7a00 	vldr	s15, [r3]
 800071a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800071e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000722:	d50c      	bpl.n	800073e <main+0x236>
	  {
		  PWM1 = 0;
 8000724:	4b2e      	ldr	r3, [pc, #184]	@ (80007e0 <main+0x2d8>)
 8000726:	f04f 0200 	mov.w	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
		  PWM2 = Vfeedback * -1;
 800072c:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <main+0x2c8>)
 800072e:	edd3 7a00 	vldr	s15, [r3]
 8000732:	eef1 7a67 	vneg.f32	s15, s15
 8000736:	4b2b      	ldr	r3, [pc, #172]	@ (80007e4 <main+0x2dc>)
 8000738:	edc3 7a00 	vstr	s15, [r3]
 800073c:	e007      	b.n	800074e <main+0x246>
	  }
	  else{
		  PWM1 = 0;
 800073e:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <main+0x2d8>)
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
		  PWM2 = 0;
 8000746:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <main+0x2dc>)
 8000748:	f04f 0200 	mov.w	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM1);
 800074e:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <main+0x2d8>)
 8000750:	edd3 7a00 	vldr	s15, [r3]
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <main+0x27c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800075c:	ee17 2a90 	vmov	r2, s15
 8000760:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 8000762:	4b20      	ldr	r3, [pc, #128]	@ (80007e4 <main+0x2dc>)
 8000764:	edd3 7a00 	vldr	s15, [r3]
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <main+0x284>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000770:	ee17 2a90 	vmov	r2, s15
 8000774:	635a      	str	r2, [r3, #52]	@ 0x34
	  Degree = (QEIReadRaw/48)*360;
 8000776:	e711      	b.n	800059c <main+0x94>
 8000778:	2000032c 	.word	0x2000032c
 800077c:	20000028 	.word	0x20000028
 8000780:	20000220 	.word	0x20000220
 8000784:	2000026c 	.word	0x2000026c
 8000788:	200001d4 	.word	0x200001d4
 800078c:	20000188 	.word	0x20000188
 8000790:	200002b8 	.word	0x200002b8
 8000794:	200004bc 	.word	0x200004bc
 8000798:	20000314 	.word	0x20000314
 800079c:	2000030c 	.word	0x2000030c
 80007a0:	20000320 	.word	0x20000320
 80007a4:	42400000 	.word	0x42400000
 80007a8:	43b40000 	.word	0x43b40000
 80007ac:	20000328 	.word	0x20000328
 80007b0:	20000304 	.word	0x20000304
 80007b4:	20000308 	.word	0x20000308
 80007b8:	51eb851f 	.word	0x51eb851f
 80007bc:	200004e0 	.word	0x200004e0
 80007c0:	200004e2 	.word	0x200004e2
 80007c4:	20000310 	.word	0x20000310
 80007c8:	46ff4800 	.word	0x46ff4800
 80007cc:	45400000 	.word	0x45400000
 80007d0:	200004e4 	.word	0x200004e4
 80007d4:	46ff4800 	.word	0x46ff4800
 80007d8:	c6ff4800 	.word	0xc6ff4800
 80007dc:	c6ff4800 	.word	0xc6ff4800
 80007e0:	20000318 	.word	0x20000318
 80007e4:	2000031c 	.word	0x2000031c

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	@ 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	2238      	movs	r2, #56	@ 0x38
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f007 fbcc 	bl	8007f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800080a:	2000      	movs	r0, #0
 800080c:	f003 fbb0 	bl	8003f70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081a:	2340      	movs	r3, #64	@ 0x40
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000822:	2302      	movs	r3, #2
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000826:	2304      	movs	r3, #4
 8000828:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800082a:	2355      	movs	r3, #85	@ 0x55
 800082c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000836:	2302      	movs	r3, #2
 8000838:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f003 fc4a 	bl	80040d8 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800084a:	f000 fc1d 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2303      	movs	r3, #3
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2104      	movs	r1, #4
 8000866:	4618      	mov	r0, r3
 8000868:	f003 ff48 	bl	80046fc <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000872:	f000 fc09 	bl	8001088 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	@ 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	@ 0x30
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2220      	movs	r2, #32
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f007 fb7b 	bl	8007f94 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800089e:	4b3a      	ldr	r3, [pc, #232]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a6:	4b38      	ldr	r3, [pc, #224]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ae:	4b36      	ldr	r3, [pc, #216]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b4:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008ba:	4b33      	ldr	r3, [pc, #204]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008c0:	4b31      	ldr	r3, [pc, #196]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c6:	4b30      	ldr	r3, [pc, #192]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80008d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008da:	2202      	movs	r2, #2
 80008dc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008de:	4b2a      	ldr	r3, [pc, #168]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80008e6:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008e8:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80008ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008ee:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008f6:	4b24      	ldr	r3, [pc, #144]	@ (8000988 <MX_ADC1_Init+0x108>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008fe:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <MX_ADC1_Init+0x108>)
 8000900:	2200      	movs	r2, #0
 8000902:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000904:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <MX_ADC1_Init+0x108>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800090c:	481e      	ldr	r0, [pc, #120]	@ (8000988 <MX_ADC1_Init+0x108>)
 800090e:	f001 f94d 	bl	8001bac <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000918:	f000 fbb6 	bl	8001088 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	4818      	ldr	r0, [pc, #96]	@ (8000988 <MX_ADC1_Init+0x108>)
 8000928:	f002 fc1a 	bl	8003160 <HAL_ADCEx_MultiModeConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000932:	f000 fba9 	bl	8001088 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_ADC1_Init+0x10c>)
 8000938:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093a:	2306      	movs	r3, #6
 800093c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800093e:	2302      	movs	r3, #2
 8000940:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000942:	237f      	movs	r3, #127	@ 0x7f
 8000944:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000946:	2304      	movs	r3, #4
 8000948:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	@ (8000988 <MX_ADC1_Init+0x108>)
 8000954:	f001 fe42 	bl	80025dc <HAL_ADC_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800095e:	f000 fb93 	bl	8001088 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_ADC1_Init+0x110>)
 8000964:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000966:	230c      	movs	r3, #12
 8000968:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	@ (8000988 <MX_ADC1_Init+0x108>)
 8000970:	f001 fe34 	bl	80025dc <HAL_ADC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800097a:	f000 fb85 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	@ 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000028 	.word	0x20000028
 800098c:	04300002 	.word	0x04300002
 8000990:	08600004 	.word	0x08600004

08000994 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000998:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 800099a:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <MX_LPUART1_UART_Init+0x90>)
 800099c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800099e:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c4:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009d6:	4812      	ldr	r0, [pc, #72]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 80009d8:	f006 f894 	bl	8006b04 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009e2:	f000 fb51 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 80009ea:	f007 f9d2 	bl	8007d92 <HAL_UARTEx_SetTxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80009f4:	f000 fb48 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	4809      	ldr	r0, [pc, #36]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 80009fc:	f007 fa07 	bl	8007e0e <HAL_UARTEx_SetRxFifoThreshold>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a06:	f000 fb3f 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 8000a0c:	f007 f988 	bl	8007d20 <HAL_UARTEx_DisableFifoMode>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a16:	f000 fb37 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000f4 	.word	0x200000f4
 8000a24:	40008000 	.word	0x40008000

08000a28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09c      	sub	sp, #112	@ 0x70
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2234      	movs	r2, #52	@ 0x34
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f007 fa96 	bl	8007f94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a68:	4b45      	ldr	r3, [pc, #276]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000a6a:	4a46      	ldr	r2, [pc, #280]	@ (8000b84 <MX_TIM1_Init+0x15c>)
 8000a6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000a6e:	4b44      	ldr	r3, [pc, #272]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000a70:	22a9      	movs	r2, #169	@ 0xa9
 8000a72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b42      	ldr	r3, [pc, #264]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32675;
 8000a7a:	4b41      	ldr	r3, [pc, #260]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000a7c:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000a80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b3f      	ldr	r3, [pc, #252]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a88:	4b3d      	ldr	r3, [pc, #244]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a94:	483a      	ldr	r0, [pc, #232]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000a96:	f004 fa9b 	bl	8004fd0 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000aa0:	f000 faf2 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aaa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4833      	ldr	r0, [pc, #204]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000ab2:	f005 f8d9 	bl	8005c68 <HAL_TIM_ConfigClockSource>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000abc:	f000 fae4 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ac0:	482f      	ldr	r0, [pc, #188]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000ac2:	f004 fbc5 	bl	8005250 <HAL_TIM_PWM_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000acc:	f000 fadc 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000adc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4827      	ldr	r0, [pc, #156]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000ae4:	f005 fe9e 	bl	8006824 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000aee:	f000 facb 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af2:	2360      	movs	r3, #96	@ 0x60
 8000af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afa:	2300      	movs	r3, #0
 8000afc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000afe:	2300      	movs	r3, #0
 8000b00:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b12:	2200      	movs	r2, #0
 8000b14:	4619      	mov	r1, r3
 8000b16:	481a      	ldr	r0, [pc, #104]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000b18:	f004 ff92 	bl	8005a40 <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b22:	f000 fab1 	bl	8001088 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000b64:	f005 fef4 	bl	8006950 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000b6e:	f000 fa8b 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b72:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <MX_TIM1_Init+0x158>)
 8000b74:	f000 fc66 	bl	8001444 <HAL_TIM_MspPostInit>

}
 8000b78:	bf00      	nop
 8000b7a:	3770      	adds	r7, #112	@ 0x70
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000188 	.word	0x20000188
 8000b84:	40012c00 	.word	0x40012c00

08000b88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c20 <MX_TIM2_Init+0x98>)
 8000ba8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <MX_TIM2_Init+0x98>)
 8000bb0:	22a9      	movs	r2, #169	@ 0xa9
 8000bb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <MX_TIM2_Init+0x98>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000bba:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <MX_TIM2_Init+0x98>)
 8000bbc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <MX_TIM2_Init+0x98>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <MX_TIM2_Init+0x98>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bce:	4814      	ldr	r0, [pc, #80]	@ (8000c20 <MX_TIM2_Init+0x98>)
 8000bd0:	f004 f9fe 	bl	8004fd0 <HAL_TIM_Base_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bda:	f000 fa55 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <MX_TIM2_Init+0x98>)
 8000bec:	f005 f83c 	bl	8005c68 <HAL_TIM_ConfigClockSource>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bf6:	f000 fa47 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <MX_TIM2_Init+0x98>)
 8000c08:	f005 fe0c 	bl	8006824 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c12:	f000 fa39 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	3720      	adds	r7, #32
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200001d4 	.word	0x200001d4

08000c24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c44:	4a1d      	ldr	r2, [pc, #116]	@ (8000cbc <MX_TIM3_Init+0x98>)
 8000c46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c4a:	22a9      	movs	r2, #169	@ 0xa9
 8000c4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c68:	4813      	ldr	r0, [pc, #76]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c6a:	f004 f9b1 	bl	8004fd0 <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c74:	f000 fa08 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c86:	f004 ffef 	bl	8005c68 <HAL_TIM_ConfigClockSource>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c90:	f000 f9fa 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c94:	2320      	movs	r3, #32
 8000c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000ca2:	f005 fdbf 	bl	8006824 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f000 f9ec 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000220 	.word	0x20000220
 8000cbc:	40000400 	.word	0x40000400

08000cc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08e      	sub	sp, #56	@ 0x38
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000da8 <MX_TIM4_Init+0xe8>)
 8000cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8000dac <MX_TIM4_Init+0xec>)
 8000cf6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8000da8 <MX_TIM4_Init+0xe8>)
 8000cfa:	22a9      	movs	r2, #169	@ 0xa9
 8000cfc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000da8 <MX_TIM4_Init+0xe8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32675;
 8000d04:	4b28      	ldr	r3, [pc, #160]	@ (8000da8 <MX_TIM4_Init+0xe8>)
 8000d06:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000d0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b26      	ldr	r3, [pc, #152]	@ (8000da8 <MX_TIM4_Init+0xe8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b25      	ldr	r3, [pc, #148]	@ (8000da8 <MX_TIM4_Init+0xe8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d18:	4823      	ldr	r0, [pc, #140]	@ (8000da8 <MX_TIM4_Init+0xe8>)
 8000d1a:	f004 f959 	bl	8004fd0 <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d24:	f000 f9b0 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d32:	4619      	mov	r1, r3
 8000d34:	481c      	ldr	r0, [pc, #112]	@ (8000da8 <MX_TIM4_Init+0xe8>)
 8000d36:	f004 ff97 	bl	8005c68 <HAL_TIM_ConfigClockSource>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d40:	f000 f9a2 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d44:	4818      	ldr	r0, [pc, #96]	@ (8000da8 <MX_TIM4_Init+0xe8>)
 8000d46:	f004 fa83 	bl	8005250 <HAL_TIM_PWM_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d50:	f000 f99a 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4811      	ldr	r0, [pc, #68]	@ (8000da8 <MX_TIM4_Init+0xe8>)
 8000d64:	f005 fd5e 	bl	8006824 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d6e:	f000 f98b 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d72:	2360      	movs	r3, #96	@ 0x60
 8000d74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000d76:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <MX_TIM4_Init+0xe8>)
 8000d8c:	f004 fe58 	bl	8005a40 <HAL_TIM_PWM_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000d96:	f000 f977 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d9a:	4803      	ldr	r0, [pc, #12]	@ (8000da8 <MX_TIM4_Init+0xe8>)
 8000d9c:	f000 fb52 	bl	8001444 <HAL_TIM_MspPostInit>

}
 8000da0:	bf00      	nop
 8000da2:	3738      	adds	r7, #56	@ 0x38
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000026c 	.word	0x2000026c
 8000dac:	40000800 	.word	0x40000800

08000db0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	@ 0x30
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2224      	movs	r2, #36	@ 0x24
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f007 f8e8 	bl	8007f94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dce:	4b21      	ldr	r3, [pc, #132]	@ (8000e54 <MX_TIM5_Init+0xa4>)
 8000dd0:	4a21      	ldr	r2, [pc, #132]	@ (8000e58 <MX_TIM5_Init+0xa8>)
 8000dd2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <MX_TIM5_Init+0xa4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <MX_TIM5_Init+0xa4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_TIM5_Init+0xa4>)
 8000de2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000de6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_TIM5_Init+0xa4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_TIM5_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000df4:	2303      	movs	r3, #3
 8000df6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <MX_TIM5_Init+0xa4>)
 8000e20:	f004 fb8a 	bl	8005538 <HAL_TIM_Encoder_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000e2a:	f000 f92d 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4806      	ldr	r0, [pc, #24]	@ (8000e54 <MX_TIM5_Init+0xa4>)
 8000e3c:	f005 fcf2 	bl	8006824 <HAL_TIMEx_MasterConfigSynchronization>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000e46:	f000 f91f 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	3730      	adds	r7, #48	@ 0x30
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200002b8 	.word	0x200002b8
 8000e58:	40000c00 	.word	0x40000c00

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e62:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <MX_DMA_Init+0x50>)
 8000e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e66:	4a11      	ldr	r2, [pc, #68]	@ (8000eac <MX_DMA_Init+0x50>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_DMA_Init+0x50>)
 8000e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <MX_DMA_Init+0x50>)
 8000e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000eac <MX_DMA_Init+0x50>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <MX_DMA_Init+0x50>)
 8000e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	200b      	movs	r0, #11
 8000e98:	f002 fb45 	bl	8003526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e9c:	200b      	movs	r0, #11
 8000e9e:	f002 fb5c 	bl	800355a <HAL_NVIC_EnableIRQ>

}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	4b39      	ldr	r3, [pc, #228]	@ (8000fac <MX_GPIO_Init+0xfc>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	4a38      	ldr	r2, [pc, #224]	@ (8000fac <MX_GPIO_Init+0xfc>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed2:	4b36      	ldr	r3, [pc, #216]	@ (8000fac <MX_GPIO_Init+0xfc>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ede:	4b33      	ldr	r3, [pc, #204]	@ (8000fac <MX_GPIO_Init+0xfc>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	4a32      	ldr	r2, [pc, #200]	@ (8000fac <MX_GPIO_Init+0xfc>)
 8000ee4:	f043 0320 	orr.w	r3, r3, #32
 8000ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eea:	4b30      	ldr	r3, [pc, #192]	@ (8000fac <MX_GPIO_Init+0xfc>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	f003 0320 	and.w	r3, r3, #32
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8000fac <MX_GPIO_Init+0xfc>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a2c      	ldr	r2, [pc, #176]	@ (8000fac <MX_GPIO_Init+0xfc>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b2a      	ldr	r3, [pc, #168]	@ (8000fac <MX_GPIO_Init+0xfc>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b27      	ldr	r3, [pc, #156]	@ (8000fac <MX_GPIO_Init+0xfc>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	4a26      	ldr	r2, [pc, #152]	@ (8000fac <MX_GPIO_Init+0xfc>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1a:	4b24      	ldr	r3, [pc, #144]	@ (8000fac <MX_GPIO_Init+0xfc>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2130      	movs	r1, #48	@ 0x30
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2e:	f002 ffe3 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2101      	movs	r1, #1
 8000f36:	481e      	ldr	r0, [pc, #120]	@ (8000fb0 <MX_GPIO_Init+0x100>)
 8000f38:	f002 ffde 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4818      	ldr	r0, [pc, #96]	@ (8000fb4 <MX_GPIO_Init+0x104>)
 8000f54:	f002 fe4e 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000f58:	2330      	movs	r3, #48	@ 0x30
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f72:	f002 fe3f 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f76:	2301      	movs	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <MX_GPIO_Init+0x100>)
 8000f8e:	f002 fe31 	bl	8003bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2028      	movs	r0, #40	@ 0x28
 8000f98:	f002 fac5 	bl	8003526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f9c:	2028      	movs	r0, #40	@ 0x28
 8000f9e:	f002 fadc 	bl	800355a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	@ 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	48000400 	.word	0x48000400
 8000fb4:	48000800 	.word	0x48000800

08000fb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 )
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a29      	ldr	r2, [pc, #164]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d148      	bne.n	800105a <HAL_TIM_PeriodElapsedCallback+0xa2>
  {
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8000fc8:	4b28      	ldr	r3, [pc, #160]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd6:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000fd8:	edc3 7a00 	vstr	s15, [r3]
	  //spd =  QEIReadRaw * 1000 / 250 * 8;
	  if(QEIReadRaw > 32678)
 8000fdc:	4b24      	ldr	r3, [pc, #144]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000fde:	edd3 7a00 	vldr	s15, [r3]
 8000fe2:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001074 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8000fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fee:	dd18      	ble.n	8001022 <HAL_TIM_PeriodElapsedCallback+0x6a>
	  {
		  pos -= (65536-QEIReadRaw);
 8000ff0:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800107c <HAL_TIM_PeriodElapsedCallback+0xc4>
 8001006:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800100a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001012:	ee17 2a90 	vmov	r2, s15
 8001016:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001018:	601a      	str	r2, [r3, #0]
		  z = 1;
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800101c:	2201      	movs	r2, #1
 800101e:	801a      	strh	r2, [r3, #0]
 8001020:	e013      	b.n	800104a <HAL_TIM_PeriodElapsedCallback+0x92>
	  }
	  else
	  {
		  pos += QEIReadRaw;
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103c:	ee17 2a90 	vmov	r2, s15
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001042:	601a      	str	r2, [r3, #0]
		  z = 2;
 8001044:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001046:	2202      	movs	r2, #2
 8001048:	801a      	strh	r2, [r3, #0]
	  }
	  QEIReadOld = QEIReadRaw;
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001050:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	@ 0x24
//		  HAL_UART_Receive(&hlpuart1, rxBuffer, 4, 100);
//		  rxBuffer[2] = (rxBuffer[0]-69)/256;
//	  }

	  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200001d4 	.word	0x200001d4
 800106c:	200002b8 	.word	0x200002b8
 8001070:	20000320 	.word	0x20000320
 8001074:	46ff4c00 	.word	0x46ff4c00
 8001078:	20000310 	.word	0x20000310
 800107c:	47800000 	.word	0x47800000
 8001080:	2000030c 	.word	0x2000030c
 8001084:	20000324 	.word	0x20000324

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <Error_Handler+0x8>

08001094 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <HAL_MspInit+0x44>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_MspInit+0x44>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <HAL_MspInit+0x44>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <HAL_MspInit+0x44>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b6:	4a08      	ldr	r2, [pc, #32]	@ (80010d8 <HAL_MspInit+0x44>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_MspInit+0x44>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010ca:	f002 fff5 	bl	80040b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b09e      	sub	sp, #120	@ 0x78
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	2254      	movs	r2, #84	@ 0x54
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f006 ff49 	bl	8007f94 <memset>
  if(hadc->Instance==ADC1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800110a:	d167      	bne.n	80011dc <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800110c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001110:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001112:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001116:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fd09 	bl	8004b34 <HAL_RCCEx_PeriphCLKConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001128:	f7ff ffae 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800112c:	4b2d      	ldr	r3, [pc, #180]	@ (80011e4 <HAL_ADC_MspInit+0x108>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	4a2c      	ldr	r2, [pc, #176]	@ (80011e4 <HAL_ADC_MspInit+0x108>)
 8001132:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001136:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001138:	4b2a      	ldr	r3, [pc, #168]	@ (80011e4 <HAL_ADC_MspInit+0x108>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <HAL_ADC_MspInit+0x108>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001148:	4a26      	ldr	r2, [pc, #152]	@ (80011e4 <HAL_ADC_MspInit+0x108>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <HAL_ADC_MspInit+0x108>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800115c:	2303      	movs	r3, #3
 800115e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001160:	2303      	movs	r3, #3
 8001162:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800116c:	4619      	mov	r1, r3
 800116e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001172:	f002 fd3f 	bl	8003bf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001176:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <HAL_ADC_MspInit+0x10c>)
 8001178:	4a1c      	ldr	r2, [pc, #112]	@ (80011ec <HAL_ADC_MspInit+0x110>)
 800117a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800117c:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <HAL_ADC_MspInit+0x10c>)
 800117e:	2205      	movs	r2, #5
 8001180:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001182:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <HAL_ADC_MspInit+0x10c>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <HAL_ADC_MspInit+0x10c>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <HAL_ADC_MspInit+0x10c>)
 8001190:	2280      	movs	r2, #128	@ 0x80
 8001192:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <HAL_ADC_MspInit+0x10c>)
 8001196:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800119a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_ADC_MspInit+0x10c>)
 800119e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011a4:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <HAL_ADC_MspInit+0x10c>)
 80011a6:	2220      	movs	r2, #32
 80011a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_ADC_MspInit+0x10c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <HAL_ADC_MspInit+0x10c>)
 80011b2:	f002 f9ed 	bl	8003590 <HAL_DMA_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80011bc:	f7ff ff64 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <HAL_ADC_MspInit+0x10c>)
 80011c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80011c6:	4a08      	ldr	r2, [pc, #32]	@ (80011e8 <HAL_ADC_MspInit+0x10c>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2012      	movs	r0, #18
 80011d2:	f002 f9a8 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011d6:	2012      	movs	r0, #18
 80011d8:	f002 f9bf 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3778      	adds	r7, #120	@ 0x78
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	20000094 	.word	0x20000094
 80011ec:	40020008 	.word	0x40020008

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b09e      	sub	sp, #120	@ 0x78
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	2254      	movs	r2, #84	@ 0x54
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f006 febf 	bl	8007f94 <memset>
  if(huart->Instance==LPUART1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a23      	ldr	r2, [pc, #140]	@ (80012a8 <HAL_UART_MspInit+0xb8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d13e      	bne.n	800129e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001220:	2320      	movs	r3, #32
 8001222:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4618      	mov	r0, r3
 800122e:	f003 fc81 	bl	8004b34 <HAL_RCCEx_PeriphCLKConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001238:	f7ff ff26 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <HAL_UART_MspInit+0xbc>)
 800123e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001240:	4a1a      	ldr	r2, [pc, #104]	@ (80012ac <HAL_UART_MspInit+0xbc>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <HAL_UART_MspInit+0xbc>)
 800124a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_UART_MspInit+0xbc>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001258:	4a14      	ldr	r2, [pc, #80]	@ (80012ac <HAL_UART_MspInit+0xbc>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_UART_MspInit+0xbc>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800126c:	230c      	movs	r3, #12
 800126e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800127c:	230c      	movs	r3, #12
 800127e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128a:	f002 fcb3 	bl	8003bf4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	205b      	movs	r0, #91	@ 0x5b
 8001294:	f002 f947 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001298:	205b      	movs	r0, #91	@ 0x5b
 800129a:	f002 f95e 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3778      	adds	r7, #120	@ 0x78
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40008000 	.word	0x40008000
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001370 <HAL_TIM_Base_MspInit+0xc0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d10c      	bne.n	80012dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001374 <HAL_TIM_Base_MspInit+0xc4>)
 80012c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001374 <HAL_TIM_Base_MspInit+0xc4>)
 80012c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ce:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <HAL_TIM_Base_MspInit+0xc4>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012da:	e044      	b.n	8001366 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012e4:	d114      	bne.n	8001310 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012e6:	4b23      	ldr	r3, [pc, #140]	@ (8001374 <HAL_TIM_Base_MspInit+0xc4>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ea:	4a22      	ldr	r2, [pc, #136]	@ (8001374 <HAL_TIM_Base_MspInit+0xc4>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f2:	4b20      	ldr	r3, [pc, #128]	@ (8001374 <HAL_TIM_Base_MspInit+0xc4>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	201c      	movs	r0, #28
 8001304:	f002 f90f 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001308:	201c      	movs	r0, #28
 800130a:	f002 f926 	bl	800355a <HAL_NVIC_EnableIRQ>
}
 800130e:	e02a      	b.n	8001366 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a18      	ldr	r2, [pc, #96]	@ (8001378 <HAL_TIM_Base_MspInit+0xc8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d114      	bne.n	8001344 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <HAL_TIM_Base_MspInit+0xc4>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <HAL_TIM_Base_MspInit+0xc4>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6593      	str	r3, [r2, #88]	@ 0x58
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <HAL_TIM_Base_MspInit+0xc4>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	201d      	movs	r0, #29
 8001338:	f002 f8f5 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800133c:	201d      	movs	r0, #29
 800133e:	f002 f90c 	bl	800355a <HAL_NVIC_EnableIRQ>
}
 8001342:	e010      	b.n	8001366 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <HAL_TIM_Base_MspInit+0xcc>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10b      	bne.n	8001366 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_TIM_Base_MspInit+0xc4>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <HAL_TIM_Base_MspInit+0xc4>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6593      	str	r3, [r2, #88]	@ 0x58
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_TIM_Base_MspInit+0xc4>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40012c00 	.word	0x40012c00
 8001374:	40021000 	.word	0x40021000
 8001378:	40000400 	.word	0x40000400
 800137c:	40000800 	.word	0x40000800

08001380 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a25      	ldr	r2, [pc, #148]	@ (8001434 <HAL_TIM_Encoder_MspInit+0xb4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d144      	bne.n	800142c <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013a2:	4b25      	ldr	r3, [pc, #148]	@ (8001438 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	4a24      	ldr	r2, [pc, #144]	@ (8001438 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ae:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	4a1e      	ldr	r2, [pc, #120]	@ (8001438 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	4a18      	ldr	r2, [pc, #96]	@ (8001438 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013ea:	2304      	movs	r3, #4
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013fa:	2302      	movs	r3, #2
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	480d      	ldr	r0, [pc, #52]	@ (800143c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001406:	f002 fbf5 	bl	8003bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800140a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800141c:	2301      	movs	r3, #1
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	@ (8001440 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001428:	f002 fbe4 	bl	8003bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	@ 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40000c00 	.word	0x40000c00
 8001438:	40021000 	.word	0x40021000
 800143c:	48000400 	.word	0x48000400
 8001440:	48000800 	.word	0x48000800

08001444 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a23      	ldr	r2, [pc, #140]	@ (80014f0 <HAL_TIM_MspPostInit+0xac>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d11c      	bne.n	80014a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <HAL_TIM_MspPostInit+0xb0>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	4a22      	ldr	r2, [pc, #136]	@ (80014f4 <HAL_TIM_MspPostInit+0xb0>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001472:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <HAL_TIM_MspPostInit+0xb0>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800147e:	2301      	movs	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800148e:	2302      	movs	r3, #2
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4817      	ldr	r0, [pc, #92]	@ (80014f8 <HAL_TIM_MspPostInit+0xb4>)
 800149a:	f002 fbab 	bl	8003bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800149e:	e022      	b.n	80014e6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a15      	ldr	r2, [pc, #84]	@ (80014fc <HAL_TIM_MspPostInit+0xb8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d11d      	bne.n	80014e6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_TIM_MspPostInit+0xb0>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <HAL_TIM_MspPostInit+0xb0>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_TIM_MspPostInit+0xb0>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80014d4:	230a      	movs	r3, #10
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f002 fb87 	bl	8003bf4 <HAL_GPIO_Init>
}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	@ 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40012c00 	.word	0x40012c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	48000800 	.word	0x48000800
 80014fc:	40000800 	.word	0x40000800

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <NMI_Handler+0x4>

08001508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <MemManage_Handler+0x4>

08001518 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <UsageFault_Handler+0x4>

08001528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001556:	f000 f8cb 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <DMA1_Channel1_IRQHandler+0x10>)
 8001566:	f002 f9f6 	bl	8003956 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000094 	.word	0x20000094

08001574 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <ADC1_2_IRQHandler+0x10>)
 800157a:	f000 fda7 	bl	80020cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000028 	.word	0x20000028

08001588 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800158c:	4802      	ldr	r0, [pc, #8]	@ (8001598 <TIM2_IRQHandler+0x10>)
 800158e:	f004 f907 	bl	80057a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200001d4 	.word	0x200001d4

0800159c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <TIM3_IRQHandler+0x10>)
 80015a2:	f004 f8fd 	bl	80057a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000220 	.word	0x20000220

080015b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015b8:	f002 fcb6 	bl	8003f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80015c4:	4802      	ldr	r0, [pc, #8]	@ (80015d0 <LPUART1_IRQHandler+0x10>)
 80015c6:	f005 faed 	bl	8006ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200000f4 	.word	0x200000f4

080015d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015f8:	480d      	ldr	r0, [pc, #52]	@ (8001630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015fc:	f7ff ffea 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <LoopForever+0x6>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	@ (8001638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <LoopForever+0xe>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	@ (8001644 <LoopForever+0x16>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f006 fcbd 	bl	8007fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800162a:	f7fe ff6d 	bl	8000508 <main>

0800162e <LoopForever>:

LoopForever:
    b LoopForever
 800162e:	e7fe      	b.n	800162e <LoopForever>
  ldr   r0, =_estack
 8001630:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800163c:	08008054 	.word	0x08008054
  ldr r2, =_sbss
 8001640:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001644:	200004ec 	.word	0x200004ec

08001648 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC3_IRQHandler>

0800164a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f001 ff5b 	bl	8003510 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800165a:	2000      	movs	r0, #0
 800165c:	f000 f80e 	bl	800167c <HAL_InitTick>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	e001      	b.n	8001670 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800166c:	f7ff fd12 	bl	8001094 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001670:	79fb      	ldrb	r3, [r7, #7]

}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001688:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <HAL_InitTick+0x68>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d022      	beq.n	80016d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001690:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <HAL_InitTick+0x6c>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <HAL_InitTick+0x68>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800169c:	fbb1 f3f3 	udiv	r3, r1, r3
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 ff66 	bl	8003576 <HAL_SYSTICK_Config>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10f      	bne.n	80016d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	d809      	bhi.n	80016ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b6:	2200      	movs	r2, #0
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	f04f 30ff 	mov.w	r0, #4294967295
 80016be:	f001 ff32 	bl	8003526 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c2:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <HAL_InitTick+0x70>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	e007      	b.n	80016da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e004      	b.n	80016da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e001      	b.n	80016da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000008 	.word	0x20000008
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_IncTick+0x1c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <HAL_IncTick+0x20>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	4a03      	ldr	r2, [pc, #12]	@ (800170c <HAL_IncTick+0x1c>)
 8001700:	6013      	str	r3, [r2, #0]
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	200004e8 	.word	0x200004e8
 8001710:	20000008 	.word	0x20000008

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	@ (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	200004e8 	.word	0x200004e8

0800172c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	609a      	str	r2, [r3, #8]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	609a      	str	r2, [r3, #8]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3360      	adds	r3, #96	@ 0x60
 80017a6:	461a      	mov	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <LL_ADC_SetOffset+0x44>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	4313      	orrs	r3, r2
 80017c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017cc:	bf00      	nop
 80017ce:	371c      	adds	r7, #28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	03fff000 	.word	0x03fff000

080017dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3360      	adds	r3, #96	@ 0x60
 80017ea:	461a      	mov	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3360      	adds	r3, #96	@ 0x60
 8001818:	461a      	mov	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001832:	bf00      	nop
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800183e:	b480      	push	{r7}
 8001840:	b087      	sub	sp, #28
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3360      	adds	r3, #96	@ 0x60
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	431a      	orrs	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001868:	bf00      	nop
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3360      	adds	r3, #96	@ 0x60
 8001884:	461a      	mov	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800189e:	bf00      	nop
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	615a      	str	r2, [r3, #20]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b087      	sub	sp, #28
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3330      	adds	r3, #48	@ 0x30
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	4413      	add	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	211f      	movs	r1, #31
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	401a      	ands	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	0e9b      	lsrs	r3, r3, #26
 800192e:	f003 011f 	and.w	r1, r3, #31
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001942:	bf00      	nop
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3314      	adds	r3, #20
 8001984:	461a      	mov	r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	0e5b      	lsrs	r3, r3, #25
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	4413      	add	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	0d1b      	lsrs	r3, r3, #20
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	2107      	movs	r1, #7
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	401a      	ands	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	0d1b      	lsrs	r3, r3, #20
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019be:	bf00      	nop
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0318 	and.w	r3, r3, #24
 80019ee:	4908      	ldr	r1, [pc, #32]	@ (8001a10 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019f0:	40d9      	lsrs	r1, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	400b      	ands	r3, r1
 80019f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fa:	431a      	orrs	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	0007ffff 	.word	0x0007ffff

08001a14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 031f 	and.w	r3, r3, #31
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6093      	str	r3, [r2, #8]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a84:	d101      	bne.n	8001a8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001aa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001aac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001af8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <LL_ADC_IsEnabled+0x18>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <LL_ADC_IsEnabled+0x1a>
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b46:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b4a:	f043 0204 	orr.w	r2, r3, #4
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d101      	bne.n	8001b76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b089      	sub	sp, #36	@ 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e1a9      	b.n	8001f1a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff fa81 	bl	80010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff3f 	bl	8001a70 <LL_ADC_IsDeepPowerDownEnabled>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff25 	bl	8001a4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff5a 	bl	8001ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d115      	bne.n	8001c3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff3e 	bl	8001a98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c1c:	4b9c      	ldr	r3, [pc, #624]	@ (8001e90 <HAL_ADC_Init+0x2e4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	4a9c      	ldr	r2, [pc, #624]	@ (8001e94 <HAL_ADC_Init+0x2e8>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c30:	e002      	b.n	8001c38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f9      	bne.n	8001c32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff3c 	bl	8001ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10d      	bne.n	8001c6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	f043 0210 	orr.w	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff75 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8001c74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 8142 	bne.w	8001f08 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 813e 	bne.w	8001f08 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c90:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c94:	f043 0202 	orr.w	r2, r3, #2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff35 	bl	8001b10 <LL_ADC_IsEnabled>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d141      	bne.n	8001d30 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cb4:	d004      	beq.n	8001cc0 <HAL_ADC_Init+0x114>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a77      	ldr	r2, [pc, #476]	@ (8001e98 <HAL_ADC_Init+0x2ec>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_ADC_Init+0x134>
 8001cc0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001cc4:	f7ff ff24 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cc8:	4604      	mov	r4, r0
 8001cca:	4873      	ldr	r0, [pc, #460]	@ (8001e98 <HAL_ADC_Init+0x2ec>)
 8001ccc:	f7ff ff20 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4323      	orrs	r3, r4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bf0c      	ite	eq
 8001cd8:	2301      	moveq	r3, #1
 8001cda:	2300      	movne	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	e012      	b.n	8001d06 <HAL_ADC_Init+0x15a>
 8001ce0:	486e      	ldr	r0, [pc, #440]	@ (8001e9c <HAL_ADC_Init+0x2f0>)
 8001ce2:	f7ff ff15 	bl	8001b10 <LL_ADC_IsEnabled>
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	486d      	ldr	r0, [pc, #436]	@ (8001ea0 <HAL_ADC_Init+0x2f4>)
 8001cea:	f7ff ff11 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	431c      	orrs	r4, r3
 8001cf2:	486c      	ldr	r0, [pc, #432]	@ (8001ea4 <HAL_ADC_Init+0x2f8>)
 8001cf4:	f7ff ff0c 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4323      	orrs	r3, r4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d012      	beq.n	8001d30 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d12:	d004      	beq.n	8001d1e <HAL_ADC_Init+0x172>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a5f      	ldr	r2, [pc, #380]	@ (8001e98 <HAL_ADC_Init+0x2ec>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_Init+0x176>
 8001d1e:	4a62      	ldr	r2, [pc, #392]	@ (8001ea8 <HAL_ADC_Init+0x2fc>)
 8001d20:	e000      	b.n	8001d24 <HAL_ADC_Init+0x178>
 8001d22:	4a62      	ldr	r2, [pc, #392]	@ (8001eac <HAL_ADC_Init+0x300>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f7ff fcfe 	bl	800172c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7f5b      	ldrb	r3, [r3, #29]
 8001d34:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d3a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d40:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d46:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d4e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d106      	bne.n	8001d6c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d62:	3b01      	subs	r3, #1
 8001d64:	045b      	lsls	r3, r3, #17
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d009      	beq.n	8001d88 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d78:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	4b48      	ldr	r3, [pc, #288]	@ (8001eb0 <HAL_ADC_Init+0x304>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	69b9      	ldr	r1, [r7, #24]
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fee4 	bl	8001b84 <LL_ADC_INJ_IsConversionOngoing>
 8001dbc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d17f      	bne.n	8001ec4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d17c      	bne.n	8001ec4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dd6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001de6:	f023 0302 	bic.w	r3, r3, #2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d017      	beq.n	8001e2c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6911      	ldr	r1, [r2, #16]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001e2a:	e013      	b.n	8001e54 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001e3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e50:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d12a      	bne.n	8001eb4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e74:	4311      	orrs	r1, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e7a:	4311      	orrs	r1, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e80:	430a      	orrs	r2, r1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	e019      	b.n	8001ec4 <HAL_ADC_Init+0x318>
 8001e90:	20000000 	.word	0x20000000
 8001e94:	053e2d63 	.word	0x053e2d63
 8001e98:	50000100 	.word	0x50000100
 8001e9c:	50000400 	.word	0x50000400
 8001ea0:	50000500 	.word	0x50000500
 8001ea4:	50000600 	.word	0x50000600
 8001ea8:	50000300 	.word	0x50000300
 8001eac:	50000700 	.word	0x50000700
 8001eb0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d10c      	bne.n	8001ee6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f023 010f 	bic.w	r1, r3, #15
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	1e5a      	subs	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ee4:	e007      	b.n	8001ef6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 020f 	bic.w	r2, r2, #15
 8001ef4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f06:	e007      	b.n	8001f18 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0c:	f043 0210 	orr.w	r2, r3, #16
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	@ 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}
 8001f22:	bf00      	nop

08001f24 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f38:	d004      	beq.n	8001f44 <HAL_ADC_Start_DMA+0x20>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a5a      	ldr	r2, [pc, #360]	@ (80020a8 <HAL_ADC_Start_DMA+0x184>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_Start_DMA+0x24>
 8001f44:	4b59      	ldr	r3, [pc, #356]	@ (80020ac <HAL_ADC_Start_DMA+0x188>)
 8001f46:	e000      	b.n	8001f4a <HAL_ADC_Start_DMA+0x26>
 8001f48:	4b59      	ldr	r3, [pc, #356]	@ (80020b0 <HAL_ADC_Start_DMA+0x18c>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fd62 	bl	8001a14 <LL_ADC_GetMultimode>
 8001f50:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fe01 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 809b 	bne.w	800209a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_Start_DMA+0x4e>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e096      	b.n	80020a0 <HAL_ADC_Start_DMA+0x17c>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a4d      	ldr	r2, [pc, #308]	@ (80020b4 <HAL_ADC_Start_DMA+0x190>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d008      	beq.n	8001f96 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	d002      	beq.n	8001f96 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b09      	cmp	r3, #9
 8001f94:	d17a      	bne.n	800208c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 ff60 	bl	8002e5c <ADC_Enable>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d16d      	bne.n	8002082 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001faa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a3a      	ldr	r2, [pc, #232]	@ (80020a8 <HAL_ADC_Start_DMA+0x184>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d009      	beq.n	8001fd8 <HAL_ADC_Start_DMA+0xb4>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a3b      	ldr	r2, [pc, #236]	@ (80020b8 <HAL_ADC_Start_DMA+0x194>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d002      	beq.n	8001fd4 <HAL_ADC_Start_DMA+0xb0>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	e003      	b.n	8001fdc <HAL_ADC_Start_DMA+0xb8>
 8001fd4:	4b39      	ldr	r3, [pc, #228]	@ (80020bc <HAL_ADC_Start_DMA+0x198>)
 8001fd6:	e001      	b.n	8001fdc <HAL_ADC_Start_DMA+0xb8>
 8001fd8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d002      	beq.n	8001fea <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d006      	beq.n	8002010 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002006:	f023 0206 	bic.w	r2, r3, #6
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	661a      	str	r2, [r3, #96]	@ 0x60
 800200e:	e002      	b.n	8002016 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201a:	4a29      	ldr	r2, [pc, #164]	@ (80020c0 <HAL_ADC_Start_DMA+0x19c>)
 800201c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002022:	4a28      	ldr	r2, [pc, #160]	@ (80020c4 <HAL_ADC_Start_DMA+0x1a0>)
 8002024:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202a:	4a27      	ldr	r2, [pc, #156]	@ (80020c8 <HAL_ADC_Start_DMA+0x1a4>)
 800202c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	221c      	movs	r2, #28
 8002034:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0210 	orr.w	r2, r2, #16
 800204c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3340      	adds	r3, #64	@ 0x40
 8002068:	4619      	mov	r1, r3
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f001 fb37 	bl	80036e0 <HAL_DMA_Start_IT>
 8002072:	4603      	mov	r3, r0
 8002074:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fd5b 	bl	8001b36 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002080:	e00d      	b.n	800209e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800208a:	e008      	b.n	800209e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002098:	e001      	b.n	800209e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800209a:	2302      	movs	r3, #2
 800209c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800209e:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	50000100 	.word	0x50000100
 80020ac:	50000300 	.word	0x50000300
 80020b0:	50000700 	.word	0x50000700
 80020b4:	50000600 	.word	0x50000600
 80020b8:	50000500 	.word	0x50000500
 80020bc:	50000400 	.word	0x50000400
 80020c0:	08002f89 	.word	0x08002f89
 80020c4:	08003061 	.word	0x08003061
 80020c8:	0800307d 	.word	0x0800307d

080020cc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	@ 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020f0:	d004      	beq.n	80020fc <HAL_ADC_IRQHandler+0x30>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a8e      	ldr	r2, [pc, #568]	@ (8002330 <HAL_ADC_IRQHandler+0x264>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d101      	bne.n	8002100 <HAL_ADC_IRQHandler+0x34>
 80020fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002334 <HAL_ADC_IRQHandler+0x268>)
 80020fe:	e000      	b.n	8002102 <HAL_ADC_IRQHandler+0x36>
 8002100:	4b8d      	ldr	r3, [pc, #564]	@ (8002338 <HAL_ADC_IRQHandler+0x26c>)
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fc86 	bl	8001a14 <LL_ADC_GetMultimode>
 8002108:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d017      	beq.n	8002144 <HAL_ADC_IRQHandler+0x78>
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d012      	beq.n	8002144 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	d105      	bne.n	8002136 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f001 f808 	bl	800314c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2202      	movs	r2, #2
 8002142:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <HAL_ADC_IRQHandler+0x8c>
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10b      	bne.n	8002170 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8094 	beq.w	800228c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 808e 	beq.w	800228c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002180:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fb9f 	bl	80018d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d072      	beq.n	800227e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a64      	ldr	r2, [pc, #400]	@ (8002330 <HAL_ADC_IRQHandler+0x264>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d009      	beq.n	80021b6 <HAL_ADC_IRQHandler+0xea>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a65      	ldr	r2, [pc, #404]	@ (800233c <HAL_ADC_IRQHandler+0x270>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d002      	beq.n	80021b2 <HAL_ADC_IRQHandler+0xe6>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	e003      	b.n	80021ba <HAL_ADC_IRQHandler+0xee>
 80021b2:	4b63      	ldr	r3, [pc, #396]	@ (8002340 <HAL_ADC_IRQHandler+0x274>)
 80021b4:	e001      	b.n	80021ba <HAL_ADC_IRQHandler+0xee>
 80021b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	4293      	cmp	r3, r2
 80021c0:	d008      	beq.n	80021d4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d002      	beq.n	80021d4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b09      	cmp	r3, #9
 80021d2:	d104      	bne.n	80021de <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	623b      	str	r3, [r7, #32]
 80021dc:	e014      	b.n	8002208 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a53      	ldr	r2, [pc, #332]	@ (8002330 <HAL_ADC_IRQHandler+0x264>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d009      	beq.n	80021fc <HAL_ADC_IRQHandler+0x130>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a53      	ldr	r2, [pc, #332]	@ (800233c <HAL_ADC_IRQHandler+0x270>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d002      	beq.n	80021f8 <HAL_ADC_IRQHandler+0x12c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	e003      	b.n	8002200 <HAL_ADC_IRQHandler+0x134>
 80021f8:	4b51      	ldr	r3, [pc, #324]	@ (8002340 <HAL_ADC_IRQHandler+0x274>)
 80021fa:	e001      	b.n	8002200 <HAL_ADC_IRQHandler+0x134>
 80021fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002200:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d135      	bne.n	800227e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b08      	cmp	r3, #8
 800221e:	d12e      	bne.n	800227e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fc9a 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d11a      	bne.n	8002266 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 020c 	bic.w	r2, r2, #12
 800223e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002244:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d112      	bne.n	800227e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225c:	f043 0201 	orr.w	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002264:	e00b      	b.n	800227e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226a:	f043 0210 	orr.w	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f984 	bl	800258c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	220c      	movs	r2, #12
 800228a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b00      	cmp	r3, #0
 8002294:	d004      	beq.n	80022a0 <HAL_ADC_IRQHandler+0x1d4>
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10b      	bne.n	80022b8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80b3 	beq.w	8002412 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80ad 	beq.w	8002412 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fb3a 	bl	800194e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80022da:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff faf5 	bl	80018d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022e6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a10      	ldr	r2, [pc, #64]	@ (8002330 <HAL_ADC_IRQHandler+0x264>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d009      	beq.n	8002306 <HAL_ADC_IRQHandler+0x23a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a11      	ldr	r2, [pc, #68]	@ (800233c <HAL_ADC_IRQHandler+0x270>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d002      	beq.n	8002302 <HAL_ADC_IRQHandler+0x236>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	e003      	b.n	800230a <HAL_ADC_IRQHandler+0x23e>
 8002302:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <HAL_ADC_IRQHandler+0x274>)
 8002304:	e001      	b.n	800230a <HAL_ADC_IRQHandler+0x23e>
 8002306:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	4293      	cmp	r3, r2
 8002310:	d008      	beq.n	8002324 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b06      	cmp	r3, #6
 800231c:	d002      	beq.n	8002324 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b07      	cmp	r3, #7
 8002322:	d10f      	bne.n	8002344 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	623b      	str	r3, [r7, #32]
 800232c:	e01f      	b.n	800236e <HAL_ADC_IRQHandler+0x2a2>
 800232e:	bf00      	nop
 8002330:	50000100 	.word	0x50000100
 8002334:	50000300 	.word	0x50000300
 8002338:	50000700 	.word	0x50000700
 800233c:	50000500 	.word	0x50000500
 8002340:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a8b      	ldr	r2, [pc, #556]	@ (8002578 <HAL_ADC_IRQHandler+0x4ac>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d009      	beq.n	8002362 <HAL_ADC_IRQHandler+0x296>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a8a      	ldr	r2, [pc, #552]	@ (800257c <HAL_ADC_IRQHandler+0x4b0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d002      	beq.n	800235e <HAL_ADC_IRQHandler+0x292>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	e003      	b.n	8002366 <HAL_ADC_IRQHandler+0x29a>
 800235e:	4b88      	ldr	r3, [pc, #544]	@ (8002580 <HAL_ADC_IRQHandler+0x4b4>)
 8002360:	e001      	b.n	8002366 <HAL_ADC_IRQHandler+0x29a>
 8002362:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002366:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d047      	beq.n	8002404 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_ADC_IRQHandler+0x2c2>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d03f      	beq.n	8002404 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800238a:	2b00      	cmp	r3, #0
 800238c:	d13a      	bne.n	8002404 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002398:	2b40      	cmp	r3, #64	@ 0x40
 800239a:	d133      	bne.n	8002404 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d12e      	bne.n	8002404 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fbea 	bl	8001b84 <LL_ADC_INJ_IsConversionOngoing>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d11a      	bne.n	80023ec <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023c4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d112      	bne.n	8002404 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023ea:	e00b      	b.n	8002404 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f0:	f043 0210 	orr.w	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fe79 	bl	80030fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2260      	movs	r2, #96	@ 0x60
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002418:	2b00      	cmp	r3, #0
 800241a:	d011      	beq.n	8002440 <HAL_ADC_IRQHandler+0x374>
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00c      	beq.n	8002440 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f8be 	bl	80025b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2280      	movs	r2, #128	@ 0x80
 800243e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d012      	beq.n	8002470 <HAL_ADC_IRQHandler+0x3a4>
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00d      	beq.n	8002470 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002458:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fe5f 	bl	8003124 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002476:	2b00      	cmp	r3, #0
 8002478:	d012      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x3d4>
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00d      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002488:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fe51 	bl	8003138 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d043      	beq.n	8002532 <HAL_ADC_IRQHandler+0x466>
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03e      	beq.n	8002532 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80024bc:	2301      	movs	r3, #1
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c0:	e021      	b.n	8002506 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d015      	beq.n	80024f4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024d0:	d004      	beq.n	80024dc <HAL_ADC_IRQHandler+0x410>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a28      	ldr	r2, [pc, #160]	@ (8002578 <HAL_ADC_IRQHandler+0x4ac>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x414>
 80024dc:	4b29      	ldr	r3, [pc, #164]	@ (8002584 <HAL_ADC_IRQHandler+0x4b8>)
 80024de:	e000      	b.n	80024e2 <HAL_ADC_IRQHandler+0x416>
 80024e0:	4b29      	ldr	r3, [pc, #164]	@ (8002588 <HAL_ADC_IRQHandler+0x4bc>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff faa4 	bl	8001a30 <LL_ADC_GetMultiDMATransfer>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80024ee:	2301      	movs	r3, #1
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f2:	e008      	b.n	8002506 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002502:	2301      	movs	r3, #1
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10e      	bne.n	800252a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251c:	f043 0202 	orr.w	r2, r3, #2
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f84f 	bl	80025c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2210      	movs	r2, #16
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d018      	beq.n	800256e <HAL_ADC_IRQHandler+0x4a2>
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002542:	2b00      	cmp	r3, #0
 8002544:	d013      	beq.n	800256e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002556:	f043 0208 	orr.w	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002566:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 fdd1 	bl	8003110 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800256e:	bf00      	nop
 8002570:	3728      	adds	r7, #40	@ 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	50000100 	.word	0x50000100
 800257c:	50000500 	.word	0x50000500
 8002580:	50000400 	.word	0x50000400
 8002584:	50000300 	.word	0x50000300
 8002588:	50000700 	.word	0x50000700

0800258c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0b6      	sub	sp, #216	@ 0xd8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x24>
 80025fa:	2302      	movs	r3, #2
 80025fc:	f000 bc13 	b.w	8002e26 <HAL_ADC_ConfigChannel+0x84a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff faa6 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 83f3 	bne.w	8002e00 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	f7ff f965 	bl	80018f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fa94 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8002636:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff faa0 	bl	8001b84 <LL_ADC_INJ_IsConversionOngoing>
 8002644:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002648:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 81d9 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002652:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 81d4 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002664:	d10f      	bne.n	8002686 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	4619      	mov	r1, r3
 8002672:	f7ff f97f 	bl	8001974 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff f913 	bl	80018aa <LL_ADC_SetSamplingTimeCommonConfig>
 8002684:	e00e      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	461a      	mov	r2, r3
 8002694:	f7ff f96e 	bl	8001974 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f903 	bl	80018aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	08db      	lsrs	r3, r3, #3
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d022      	beq.n	800270c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6919      	ldr	r1, [r3, #16]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80026d6:	f7ff f85d 	bl	8001794 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6919      	ldr	r1, [r3, #16]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7ff f8a9 	bl	800183e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d102      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x126>
 80026fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002700:	e000      	b.n	8002704 <HAL_ADC_ConfigChannel+0x128>
 8002702:	2300      	movs	r3, #0
 8002704:	461a      	mov	r2, r3
 8002706:	f7ff f8b5 	bl	8001874 <LL_ADC_SetOffsetSaturation>
 800270a:	e17b      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f862 	bl	80017dc <LL_ADC_GetOffsetChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10a      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x15c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff f857 	bl	80017dc <LL_ADC_GetOffsetChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	f003 021f 	and.w	r2, r3, #31
 8002736:	e01e      	b.n	8002776 <HAL_ADC_ConfigChannel+0x19a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff f84c 	bl	80017dc <LL_ADC_GetOffsetChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800275a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800275e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e004      	b.n	8002774 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800276a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_ADC_ConfigChannel+0x1b2>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	e018      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x1e4>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80027a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80027aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80027b2:	2320      	movs	r3, #32
 80027b4:	e004      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80027b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d106      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2200      	movs	r2, #0
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff f81b 	bl	8001808 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe ffff 	bl	80017dc <LL_ADC_GetOffsetChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x222>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fff4 	bl	80017dc <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	e01e      	b.n	800283c <HAL_ADC_ConfigChannel+0x260>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe ffe9 	bl	80017dc <LL_ADC_GetOffsetChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800281c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800282c:	2320      	movs	r3, #32
 800282e:	e004      	b.n	800283a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x278>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	e018      	b.n	8002886 <HAL_ADC_ConfigChannel+0x2aa>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002868:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800286c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002870:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002878:	2320      	movs	r3, #32
 800287a:	e004      	b.n	8002886 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800287c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002886:	429a      	cmp	r2, r3
 8002888:	d106      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe ffb8 	bl	8001808 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2102      	movs	r1, #2
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe ff9c 	bl	80017dc <LL_ADC_GetOffsetChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10a      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x2e8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2102      	movs	r1, #2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe ff91 	bl	80017dc <LL_ADC_GetOffsetChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	f003 021f 	and.w	r2, r3, #31
 80028c2:	e01e      	b.n	8002902 <HAL_ADC_ConfigChannel+0x326>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2102      	movs	r1, #2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe ff86 	bl	80017dc <LL_ADC_GetOffsetChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80028e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80028ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e004      	b.n	8002900 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80028f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	2b00      	cmp	r3, #0
 800290c:	d105      	bne.n	800291a <HAL_ADC_ConfigChannel+0x33e>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0e9b      	lsrs	r3, r3, #26
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	e016      	b.n	8002948 <HAL_ADC_ConfigChannel+0x36c>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800292c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800292e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002932:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e004      	b.n	8002948 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800293e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002948:	429a      	cmp	r2, r3
 800294a:	d106      	bne.n	800295a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2200      	movs	r2, #0
 8002952:	2102      	movs	r1, #2
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe ff57 	bl	8001808 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2103      	movs	r1, #3
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe ff3b 	bl	80017dc <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x3aa>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2103      	movs	r1, #3
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe ff30 	bl	80017dc <LL_ADC_GetOffsetChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	e017      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x3da>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2103      	movs	r1, #3
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe ff25 	bl	80017dc <LL_ADC_GetOffsetChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800299e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80029a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80029a8:	2320      	movs	r3, #32
 80029aa:	e003      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80029ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x3f2>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	e011      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x416>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80029dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80029e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80029e6:	2320      	movs	r3, #32
 80029e8:	e003      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80029ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d106      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2200      	movs	r2, #0
 80029fc:	2103      	movs	r1, #3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe ff02 	bl	8001808 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff f881 	bl	8001b10 <LL_ADC_IsEnabled>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 813d 	bne.w	8002c90 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f7fe ffd2 	bl	80019cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4aa2      	ldr	r2, [pc, #648]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x6dc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	f040 812e 	bne.w	8002c90 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10b      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x480>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2b09      	cmp	r3, #9
 8002a52:	bf94      	ite	ls
 8002a54:	2301      	movls	r3, #1
 8002a56:	2300      	movhi	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	e019      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x4b4>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a74:	2320      	movs	r3, #32
 8002a76:	e003      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2b09      	cmp	r3, #9
 8002a88:	bf94      	ite	ls
 8002a8a:	2301      	movls	r3, #1
 8002a8c:	2300      	movhi	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d079      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x4d4>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	069b      	lsls	r3, r3, #26
 8002aaa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aae:	e015      	b.n	8002adc <HAL_ADC_ConfigChannel+0x500>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ac0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002ac8:	2320      	movs	r3, #32
 8002aca:	e003      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	069b      	lsls	r3, r3, #26
 8002ad8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x520>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	3301      	adds	r3, #1
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	e017      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x550>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002b14:	2320      	movs	r3, #32
 8002b16:	e003      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002b18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	2101      	movs	r1, #1
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	ea42 0103 	orr.w	r1, r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x576>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	3301      	adds	r3, #1
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	051b      	lsls	r3, r3, #20
 8002b50:	e018      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x5a8>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b84:	430b      	orrs	r3, r1
 8002b86:	e07e      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d107      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x5c8>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	069b      	lsls	r3, r3, #26
 8002b9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ba2:	e015      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x5f4>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e003      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	069b      	lsls	r3, r3, #26
 8002bcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d109      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x614>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	3301      	adds	r3, #1
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2101      	movs	r1, #1
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	e017      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x644>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	61fb      	str	r3, [r7, #28]
  return result;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e003      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	ea42 0103 	orr.w	r1, r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10d      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x670>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0e9b      	lsrs	r3, r3, #26
 8002c36:	3301      	adds	r3, #1
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	3b1e      	subs	r3, #30
 8002c44:	051b      	lsls	r3, r3, #20
 8002c46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c4a:	e01b      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x6a8>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	613b      	str	r3, [r7, #16]
  return result;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e003      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3b1e      	subs	r3, #30
 8002c7e:	051b      	lsls	r3, r3, #20
 8002c80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c84:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f7fe fe72 	bl	8001974 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <HAL_ADC_ConfigChannel+0x6e0>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80be 	beq.w	8002e1a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca6:	d004      	beq.n	8002cb2 <HAL_ADC_ConfigChannel+0x6d6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a04      	ldr	r2, [pc, #16]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x6e4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x6ec>
 8002cb2:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002cb4:	e009      	b.n	8002cca <HAL_ADC_ConfigChannel+0x6ee>
 8002cb6:	bf00      	nop
 8002cb8:	407f0000 	.word	0x407f0000
 8002cbc:	80080000 	.word	0x80080000
 8002cc0:	50000100 	.word	0x50000100
 8002cc4:	50000300 	.word	0x50000300
 8002cc8:	4b59      	ldr	r3, [pc, #356]	@ (8002e30 <HAL_ADC_ConfigChannel+0x854>)
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fd54 	bl	8001778 <LL_ADC_GetCommonPathInternalCh>
 8002cd0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a56      	ldr	r2, [pc, #344]	@ (8002e34 <HAL_ADC_ConfigChannel+0x858>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_ADC_ConfigChannel+0x70c>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a55      	ldr	r2, [pc, #340]	@ (8002e38 <HAL_ADC_ConfigChannel+0x85c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13a      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d134      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cfc:	d005      	beq.n	8002d0a <HAL_ADC_ConfigChannel+0x72e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a4e      	ldr	r2, [pc, #312]	@ (8002e3c <HAL_ADC_ConfigChannel+0x860>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	f040 8085 	bne.w	8002e14 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d12:	d004      	beq.n	8002d1e <HAL_ADC_ConfigChannel+0x742>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a49      	ldr	r2, [pc, #292]	@ (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x746>
 8002d1e:	4a49      	ldr	r2, [pc, #292]	@ (8002e44 <HAL_ADC_ConfigChannel+0x868>)
 8002d20:	e000      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x748>
 8002d22:	4a43      	ldr	r2, [pc, #268]	@ (8002e30 <HAL_ADC_ConfigChannel+0x854>)
 8002d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f7fe fd0f 	bl	8001752 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d34:	4b44      	ldr	r3, [pc, #272]	@ (8002e48 <HAL_ADC_ConfigChannel+0x86c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	4a44      	ldr	r2, [pc, #272]	@ (8002e4c <HAL_ADC_ConfigChannel+0x870>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d4e:	e002      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f9      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d5c:	e05a      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3b      	ldr	r2, [pc, #236]	@ (8002e50 <HAL_ADC_ConfigChannel+0x874>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d125      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d11f      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a31      	ldr	r2, [pc, #196]	@ (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d104      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x7ac>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a34      	ldr	r2, [pc, #208]	@ (8002e54 <HAL_ADC_ConfigChannel+0x878>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d047      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d90:	d004      	beq.n	8002d9c <HAL_ADC_ConfigChannel+0x7c0>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2a      	ldr	r2, [pc, #168]	@ (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x7c4>
 8002d9c:	4a29      	ldr	r2, [pc, #164]	@ (8002e44 <HAL_ADC_ConfigChannel+0x868>)
 8002d9e:	e000      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x7c6>
 8002da0:	4a23      	ldr	r2, [pc, #140]	@ (8002e30 <HAL_ADC_ConfigChannel+0x854>)
 8002da2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	f7fe fcd0 	bl	8001752 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db2:	e031      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a27      	ldr	r2, [pc, #156]	@ (8002e58 <HAL_ADC_ConfigChannel+0x87c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d12d      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d127      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1c      	ldr	r2, [pc, #112]	@ (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d022      	beq.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ddc:	d004      	beq.n	8002de8 <HAL_ADC_ConfigChannel+0x80c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a17      	ldr	r2, [pc, #92]	@ (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x810>
 8002de8:	4a16      	ldr	r2, [pc, #88]	@ (8002e44 <HAL_ADC_ConfigChannel+0x868>)
 8002dea:	e000      	b.n	8002dee <HAL_ADC_ConfigChannel+0x812>
 8002dec:	4a10      	ldr	r2, [pc, #64]	@ (8002e30 <HAL_ADC_ConfigChannel+0x854>)
 8002dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002df2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f7fe fcaa 	bl	8001752 <LL_ADC_SetCommonPathInternalCh>
 8002dfe:	e00c      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e12:	e002      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e22:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	37d8      	adds	r7, #216	@ 0xd8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	50000700 	.word	0x50000700
 8002e34:	c3210000 	.word	0xc3210000
 8002e38:	90c00010 	.word	0x90c00010
 8002e3c:	50000600 	.word	0x50000600
 8002e40:	50000100 	.word	0x50000100
 8002e44:	50000300 	.word	0x50000300
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	053e2d63 	.word	0x053e2d63
 8002e50:	c7520000 	.word	0xc7520000
 8002e54:	50000500 	.word	0x50000500
 8002e58:	cb840000 	.word	0xcb840000

08002e5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe fe4f 	bl	8001b10 <LL_ADC_IsEnabled>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d176      	bne.n	8002f66 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f70 <ADC_Enable+0x114>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8a:	f043 0210 	orr.w	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e062      	b.n	8002f68 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fe1e 	bl	8001ae8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eb4:	d004      	beq.n	8002ec0 <ADC_Enable+0x64>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2e      	ldr	r2, [pc, #184]	@ (8002f74 <ADC_Enable+0x118>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d101      	bne.n	8002ec4 <ADC_Enable+0x68>
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f78 <ADC_Enable+0x11c>)
 8002ec2:	e000      	b.n	8002ec6 <ADC_Enable+0x6a>
 8002ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f7c <ADC_Enable+0x120>)
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fc56 	bl	8001778 <LL_ADC_GetCommonPathInternalCh>
 8002ecc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d013      	beq.n	8002efe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f80 <ADC_Enable+0x124>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	099b      	lsrs	r3, r3, #6
 8002edc:	4a29      	ldr	r2, [pc, #164]	@ (8002f84 <ADC_Enable+0x128>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	099b      	lsrs	r3, r3, #6
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ef0:	e002      	b.n	8002ef8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f9      	bne.n	8002ef2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002efe:	f7fe fc09 	bl	8001714 <HAL_GetTick>
 8002f02:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f04:	e028      	b.n	8002f58 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe fe00 	bl	8001b10 <LL_ADC_IsEnabled>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d104      	bne.n	8002f20 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fde4 	bl	8001ae8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f20:	f7fe fbf8 	bl	8001714 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d914      	bls.n	8002f58 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d00d      	beq.n	8002f58 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f40:	f043 0210 	orr.w	r2, r3, #16
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4c:	f043 0201 	orr.w	r2, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e007      	b.n	8002f68 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d1cf      	bne.n	8002f06 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	8000003f 	.word	0x8000003f
 8002f74:	50000100 	.word	0x50000100
 8002f78:	50000300 	.word	0x50000300
 8002f7c:	50000700 	.word	0x50000700
 8002f80:	20000000 	.word	0x20000000
 8002f84:	053e2d63 	.word	0x053e2d63

08002f88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d14b      	bne.n	800303a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d021      	beq.n	8003000 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe fc85 	bl	80018d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d032      	beq.n	8003032 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d12b      	bne.n	8003032 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fde:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11f      	bne.n	8003032 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff6:	f043 0201 	orr.w	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ffe:	e018      	b.n	8003032 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d111      	bne.n	8003032 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003012:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d105      	bne.n	8003032 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302a:	f043 0201 	orr.w	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f7ff faaa 	bl	800258c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003038:	e00e      	b.n	8003058 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff fabe 	bl	80025c8 <HAL_ADC_ErrorCallback>
}
 800304c:	e004      	b.n	8003058 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff fa96 	bl	80025a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003088:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff fa90 	bl	80025c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <LL_ADC_IsEnabled>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <LL_ADC_IsEnabled+0x18>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <LL_ADC_IsEnabled+0x1a>
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d101      	bne.n	80030ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b0a1      	sub	sp, #132	@ 0x84
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800317a:	2302      	movs	r3, #2
 800317c:	e0e7      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003186:	2300      	movs	r3, #0
 8003188:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800318a:	2300      	movs	r3, #0
 800318c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003196:	d102      	bne.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003198:	4b6f      	ldr	r3, [pc, #444]	@ (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	e009      	b.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a6e      	ldr	r2, [pc, #440]	@ (800335c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d102      	bne.n	80031ae <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80031a8:	4b6d      	ldr	r3, [pc, #436]	@ (8003360 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	e001      	b.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031bc:	f043 0220 	orr.w	r2, r3, #32
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0be      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff ff7f 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 80031d8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff79 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 80a0 	bne.w	800332c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80031ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 809c 	bne.w	800332c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031fc:	d004      	beq.n	8003208 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a55      	ldr	r2, [pc, #340]	@ (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003208:	4b56      	ldr	r3, [pc, #344]	@ (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800320a:	e000      	b.n	800320e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800320c:	4b56      	ldr	r3, [pc, #344]	@ (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800320e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d04b      	beq.n	80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003218:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800322a:	035b      	lsls	r3, r3, #13
 800322c:	430b      	orrs	r3, r1
 800322e:	431a      	orrs	r2, r3
 8003230:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003232:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800323c:	d004      	beq.n	8003248 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a45      	ldr	r2, [pc, #276]	@ (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d10f      	bne.n	8003268 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003248:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800324c:	f7ff ff30 	bl	80030b0 <LL_ADC_IsEnabled>
 8003250:	4604      	mov	r4, r0
 8003252:	4841      	ldr	r0, [pc, #260]	@ (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003254:	f7ff ff2c 	bl	80030b0 <LL_ADC_IsEnabled>
 8003258:	4603      	mov	r3, r0
 800325a:	4323      	orrs	r3, r4
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e012      	b.n	800328e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003268:	483c      	ldr	r0, [pc, #240]	@ (800335c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800326a:	f7ff ff21 	bl	80030b0 <LL_ADC_IsEnabled>
 800326e:	4604      	mov	r4, r0
 8003270:	483b      	ldr	r0, [pc, #236]	@ (8003360 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003272:	f7ff ff1d 	bl	80030b0 <LL_ADC_IsEnabled>
 8003276:	4603      	mov	r3, r0
 8003278:	431c      	orrs	r4, r3
 800327a:	483c      	ldr	r0, [pc, #240]	@ (800336c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800327c:	f7ff ff18 	bl	80030b0 <LL_ADC_IsEnabled>
 8003280:	4603      	mov	r3, r0
 8003282:	4323      	orrs	r3, r4
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d056      	beq.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800329a:	f023 030f 	bic.w	r3, r3, #15
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	6811      	ldr	r1, [r2, #0]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	6892      	ldr	r2, [r2, #8]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	431a      	orrs	r2, r3
 80032aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ac:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032ae:	e047      	b.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032c4:	d004      	beq.n	80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a23      	ldr	r2, [pc, #140]	@ (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d10f      	bne.n	80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80032d0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80032d4:	f7ff feec 	bl	80030b0 <LL_ADC_IsEnabled>
 80032d8:	4604      	mov	r4, r0
 80032da:	481f      	ldr	r0, [pc, #124]	@ (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032dc:	f7ff fee8 	bl	80030b0 <LL_ADC_IsEnabled>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4323      	orrs	r3, r4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e012      	b.n	8003316 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80032f0:	481a      	ldr	r0, [pc, #104]	@ (800335c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032f2:	f7ff fedd 	bl	80030b0 <LL_ADC_IsEnabled>
 80032f6:	4604      	mov	r4, r0
 80032f8:	4819      	ldr	r0, [pc, #100]	@ (8003360 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032fa:	f7ff fed9 	bl	80030b0 <LL_ADC_IsEnabled>
 80032fe:	4603      	mov	r3, r0
 8003300:	431c      	orrs	r4, r3
 8003302:	481a      	ldr	r0, [pc, #104]	@ (800336c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003304:	f7ff fed4 	bl	80030b0 <LL_ADC_IsEnabled>
 8003308:	4603      	mov	r3, r0
 800330a:	4323      	orrs	r3, r4
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d012      	beq.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800331a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003322:	f023 030f 	bic.w	r3, r3, #15
 8003326:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003328:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800332a:	e009      	b.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800333e:	e000      	b.n	8003342 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003340:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800334a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800334e:	4618      	mov	r0, r3
 8003350:	3784      	adds	r7, #132	@ 0x84
 8003352:	46bd      	mov	sp, r7
 8003354:	bd90      	pop	{r4, r7, pc}
 8003356:	bf00      	nop
 8003358:	50000100 	.word	0x50000100
 800335c:	50000400 	.word	0x50000400
 8003360:	50000500 	.word	0x50000500
 8003364:	50000300 	.word	0x50000300
 8003368:	50000700 	.word	0x50000700
 800336c:	50000600 	.word	0x50000600

08003370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003380:	4b0c      	ldr	r3, [pc, #48]	@ (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800338c:	4013      	ands	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800339c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a2:	4a04      	ldr	r2, [pc, #16]	@ (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	60d3      	str	r3, [r2, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033bc:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <__NVIC_GetPriorityGrouping+0x18>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	f003 0307 	and.w	r3, r3, #7
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	db0b      	blt.n	80033fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	f003 021f 	and.w	r2, r3, #31
 80033ec:	4907      	ldr	r1, [pc, #28]	@ (800340c <__NVIC_EnableIRQ+0x38>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2001      	movs	r0, #1
 80033f6:	fa00 f202 	lsl.w	r2, r0, r2
 80033fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000e100 	.word	0xe000e100

08003410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	2b00      	cmp	r3, #0
 8003422:	db0a      	blt.n	800343a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	b2da      	uxtb	r2, r3
 8003428:	490c      	ldr	r1, [pc, #48]	@ (800345c <__NVIC_SetPriority+0x4c>)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	0112      	lsls	r2, r2, #4
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	440b      	add	r3, r1
 8003434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003438:	e00a      	b.n	8003450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	4908      	ldr	r1, [pc, #32]	@ (8003460 <__NVIC_SetPriority+0x50>)
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	3b04      	subs	r3, #4
 8003448:	0112      	lsls	r2, r2, #4
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	440b      	add	r3, r1
 800344e:	761a      	strb	r2, [r3, #24]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000e100 	.word	0xe000e100
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003464:	b480      	push	{r7}
 8003466:	b089      	sub	sp, #36	@ 0x24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f1c3 0307 	rsb	r3, r3, #7
 800347e:	2b04      	cmp	r3, #4
 8003480:	bf28      	it	cs
 8003482:	2304      	movcs	r3, #4
 8003484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3304      	adds	r3, #4
 800348a:	2b06      	cmp	r3, #6
 800348c:	d902      	bls.n	8003494 <NVIC_EncodePriority+0x30>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3b03      	subs	r3, #3
 8003492:	e000      	b.n	8003496 <NVIC_EncodePriority+0x32>
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	f04f 32ff 	mov.w	r2, #4294967295
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43da      	mvns	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	401a      	ands	r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ac:	f04f 31ff 	mov.w	r1, #4294967295
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	43d9      	mvns	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	4313      	orrs	r3, r2
         );
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3724      	adds	r7, #36	@ 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034dc:	d301      	bcc.n	80034e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034de:	2301      	movs	r3, #1
 80034e0:	e00f      	b.n	8003502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e2:	4a0a      	ldr	r2, [pc, #40]	@ (800350c <SysTick_Config+0x40>)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ea:	210f      	movs	r1, #15
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	f7ff ff8e 	bl	8003410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f4:	4b05      	ldr	r3, [pc, #20]	@ (800350c <SysTick_Config+0x40>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fa:	4b04      	ldr	r3, [pc, #16]	@ (800350c <SysTick_Config+0x40>)
 80034fc:	2207      	movs	r2, #7
 80034fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	e000e010 	.word	0xe000e010

08003510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff29 	bl	8003370 <__NVIC_SetPriorityGrouping>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003534:	f7ff ff40 	bl	80033b8 <__NVIC_GetPriorityGrouping>
 8003538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	6978      	ldr	r0, [r7, #20]
 8003540:	f7ff ff90 	bl	8003464 <NVIC_EncodePriority>
 8003544:	4602      	mov	r2, r0
 8003546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff5f 	bl	8003410 <__NVIC_SetPriority>
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff33 	bl	80033d4 <__NVIC_EnableIRQ>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ffa4 	bl	80034cc <SysTick_Config>
 8003584:	4603      	mov	r3, r0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e08d      	b.n	80036be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b47      	ldr	r3, [pc, #284]	@ (80036c8 <HAL_DMA_Init+0x138>)
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d80f      	bhi.n	80035ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b45      	ldr	r3, [pc, #276]	@ (80036cc <HAL_DMA_Init+0x13c>)
 80035b6:	4413      	add	r3, r2
 80035b8:	4a45      	ldr	r2, [pc, #276]	@ (80036d0 <HAL_DMA_Init+0x140>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	009a      	lsls	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a42      	ldr	r2, [pc, #264]	@ (80036d4 <HAL_DMA_Init+0x144>)
 80035ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80035cc:	e00e      	b.n	80035ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	4b40      	ldr	r3, [pc, #256]	@ (80036d8 <HAL_DMA_Init+0x148>)
 80035d6:	4413      	add	r3, r2
 80035d8:	4a3d      	ldr	r2, [pc, #244]	@ (80036d0 <HAL_DMA_Init+0x140>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	009a      	lsls	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a3c      	ldr	r2, [pc, #240]	@ (80036dc <HAL_DMA_Init+0x14c>)
 80035ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003606:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa76 	bl	8003b30 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800364c:	d102      	bne.n	8003654 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003668:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d010      	beq.n	8003694 <HAL_DMA_Init+0x104>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b04      	cmp	r3, #4
 8003678:	d80c      	bhi.n	8003694 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa96 	bl	8003bac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	e008      	b.n	80036a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40020407 	.word	0x40020407
 80036cc:	bffdfff8 	.word	0xbffdfff8
 80036d0:	cccccccd 	.word	0xcccccccd
 80036d4:	40020000 	.word	0x40020000
 80036d8:	bffdfbf8 	.word	0xbffdfbf8
 80036dc:	40020400 	.word	0x40020400

080036e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_DMA_Start_IT+0x20>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e066      	b.n	80037ce <HAL_DMA_Start_IT+0xee>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d155      	bne.n	80037c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f9bb 	bl	8003ab4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 020e 	orr.w	r2, r2, #14
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	e00f      	b.n	8003778 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0204 	bic.w	r2, r2, #4
 8003766:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 020a 	orr.w	r2, r2, #10
 8003776:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003794:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e005      	b.n	80037cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
 80037ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d005      	beq.n	80037fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
 80037f8:	e037      	b.n	800386a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 020e 	bic.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003818:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382e:	f003 021f 	and.w	r2, r3, #31
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	2101      	movs	r1, #1
 8003838:	fa01 f202 	lsl.w	r2, r1, r2
 800383c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003846:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00c      	beq.n	800386a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800385e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003868:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d00d      	beq.n	80038bc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2204      	movs	r2, #4
 80038a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
 80038ba:	e047      	b.n	800394c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 020e 	bic.w	r2, r2, #14
 80038ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f0:	f003 021f 	and.w	r2, r3, #31
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f8:	2101      	movs	r1, #1
 80038fa:	fa01 f202 	lsl.w	r2, r1, r2
 80038fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003908:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00c      	beq.n	800392c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003920:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800392a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
    }
  }
  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	2204      	movs	r2, #4
 8003978:	409a      	lsls	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d026      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x7a>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d021      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0204 	bic.w	r2, r2, #4
 80039a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	f003 021f 	and.w	r2, r3, #31
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	2104      	movs	r1, #4
 80039b8:	fa01 f202 	lsl.w	r2, r1, r2
 80039bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d071      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039ce:	e06c      	b.n	8003aaa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2202      	movs	r2, #2
 80039da:	409a      	lsls	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d02e      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d029      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 020a 	bic.w	r2, r2, #10
 8003a0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a18:	f003 021f 	and.w	r2, r3, #31
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	2102      	movs	r1, #2
 8003a22:	fa01 f202 	lsl.w	r2, r1, r2
 8003a26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d038      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a40:	e033      	b.n	8003aaa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d02a      	beq.n	8003aac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d025      	beq.n	8003aac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 020e 	bic.w	r2, r2, #14
 8003a6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a74:	f003 021f 	and.w	r2, r3, #31
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
}
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	f003 021f 	and.w	r2, r3, #31
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	2101      	movs	r1, #1
 8003aec:	fa01 f202 	lsl.w	r2, r1, r2
 8003af0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d108      	bne.n	8003b14 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b12:	e007      	b.n	8003b24 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	60da      	str	r2, [r3, #12]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b16      	ldr	r3, [pc, #88]	@ (8003b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d802      	bhi.n	8003b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b44:	4b15      	ldr	r3, [pc, #84]	@ (8003b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	e001      	b.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b4c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3b08      	subs	r3, #8
 8003b5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	009a      	lsls	r2, r3, #2
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4413      	add	r3, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2201      	movs	r2, #1
 8003b84:	409a      	lsls	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40020407 	.word	0x40020407
 8003b9c:	40020800 	.word	0x40020800
 8003ba0:	40020820 	.word	0x40020820
 8003ba4:	cccccccd 	.word	0xcccccccd
 8003ba8:	40020880 	.word	0x40020880

08003bac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a08      	ldr	r2, [pc, #32]	@ (8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003bce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2201      	movs	r2, #1
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	1000823f 	.word	0x1000823f
 8003bf0:	40020940 	.word	0x40020940

08003bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c02:	e15a      	b.n	8003eba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	4013      	ands	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 814c 	beq.w	8003eb4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d005      	beq.n	8003c34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d130      	bne.n	8003c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 0201 	and.w	r2, r3, #1
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d017      	beq.n	8003cd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	2203      	movs	r2, #3
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d123      	bne.n	8003d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	08da      	lsrs	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3208      	adds	r2, #8
 8003ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	220f      	movs	r2, #15
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	08da      	lsrs	r2, r3, #3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3208      	adds	r2, #8
 8003d20:	6939      	ldr	r1, [r7, #16]
 8003d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	2203      	movs	r2, #3
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0203 	and.w	r2, r3, #3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80a6 	beq.w	8003eb4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d68:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed8 <HAL_GPIO_Init+0x2e4>)
 8003d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ed8 <HAL_GPIO_Init+0x2e4>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d74:	4b58      	ldr	r3, [pc, #352]	@ (8003ed8 <HAL_GPIO_Init+0x2e4>)
 8003d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d80:	4a56      	ldr	r2, [pc, #344]	@ (8003edc <HAL_GPIO_Init+0x2e8>)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	3302      	adds	r3, #2
 8003d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	220f      	movs	r2, #15
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003daa:	d01f      	beq.n	8003dec <HAL_GPIO_Init+0x1f8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a4c      	ldr	r2, [pc, #304]	@ (8003ee0 <HAL_GPIO_Init+0x2ec>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d019      	beq.n	8003de8 <HAL_GPIO_Init+0x1f4>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a4b      	ldr	r2, [pc, #300]	@ (8003ee4 <HAL_GPIO_Init+0x2f0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_GPIO_Init+0x1f0>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a4a      	ldr	r2, [pc, #296]	@ (8003ee8 <HAL_GPIO_Init+0x2f4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00d      	beq.n	8003de0 <HAL_GPIO_Init+0x1ec>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a49      	ldr	r2, [pc, #292]	@ (8003eec <HAL_GPIO_Init+0x2f8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <HAL_GPIO_Init+0x1e8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a48      	ldr	r2, [pc, #288]	@ (8003ef0 <HAL_GPIO_Init+0x2fc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_GPIO_Init+0x1e4>
 8003dd4:	2305      	movs	r3, #5
 8003dd6:	e00a      	b.n	8003dee <HAL_GPIO_Init+0x1fa>
 8003dd8:	2306      	movs	r3, #6
 8003dda:	e008      	b.n	8003dee <HAL_GPIO_Init+0x1fa>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	e006      	b.n	8003dee <HAL_GPIO_Init+0x1fa>
 8003de0:	2303      	movs	r3, #3
 8003de2:	e004      	b.n	8003dee <HAL_GPIO_Init+0x1fa>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e002      	b.n	8003dee <HAL_GPIO_Init+0x1fa>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <HAL_GPIO_Init+0x1fa>
 8003dec:	2300      	movs	r3, #0
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	f002 0203 	and.w	r2, r2, #3
 8003df4:	0092      	lsls	r2, r2, #2
 8003df6:	4093      	lsls	r3, r2
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dfe:	4937      	ldr	r1, [pc, #220]	@ (8003edc <HAL_GPIO_Init+0x2e8>)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	3302      	adds	r3, #2
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e0c:	4b39      	ldr	r3, [pc, #228]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e30:	4a30      	ldr	r2, [pc, #192]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e36:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e5a:	4a26      	ldr	r2, [pc, #152]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e60:	4b24      	ldr	r3, [pc, #144]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e84:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eae:	4a11      	ldr	r2, [pc, #68]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f47f ae9d 	bne.w	8003c04 <HAL_GPIO_Init+0x10>
  }
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	48000400 	.word	0x48000400
 8003ee4:	48000800 	.word	0x48000800
 8003ee8:	48000c00 	.word	0x48000c00
 8003eec:	48001000 	.word	0x48001000
 8003ef0:	48001400 	.word	0x48001400
 8003ef4:	40010400 	.word	0x40010400

08003ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
 8003f04:	4613      	mov	r3, r2
 8003f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f08:	787b      	ldrb	r3, [r7, #1]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f14:	e002      	b.n	8003f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f32:	4b08      	ldr	r3, [pc, #32]	@ (8003f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d006      	beq.n	8003f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f3e:	4a05      	ldr	r2, [pc, #20]	@ (8003f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f806 	bl	8003f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40010400 	.word	0x40010400

08003f58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d141      	bne.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8a:	d131      	bne.n	8003ff0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f8c:	4b47      	ldr	r3, [pc, #284]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f92:	4a46      	ldr	r2, [pc, #280]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f9c:	4b43      	ldr	r3, [pc, #268]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fa4:	4a41      	ldr	r2, [pc, #260]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003faa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fac:	4b40      	ldr	r3, [pc, #256]	@ (80040b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2232      	movs	r2, #50	@ 0x32
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	4a3f      	ldr	r2, [pc, #252]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	0c9b      	lsrs	r3, r3, #18
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fc2:	e002      	b.n	8003fca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fca:	4b38      	ldr	r3, [pc, #224]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd6:	d102      	bne.n	8003fde <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f2      	bne.n	8003fc4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fde:	4b33      	ldr	r3, [pc, #204]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fea:	d158      	bne.n	800409e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e057      	b.n	80040a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ff6:	4a2d      	ldr	r2, [pc, #180]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ffc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004000:	e04d      	b.n	800409e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004008:	d141      	bne.n	800408e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800400a:	4b28      	ldr	r3, [pc, #160]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004016:	d131      	bne.n	800407c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004018:	4b24      	ldr	r3, [pc, #144]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800401e:	4a23      	ldr	r2, [pc, #140]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004024:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004028:	4b20      	ldr	r3, [pc, #128]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004030:	4a1e      	ldr	r2, [pc, #120]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004036:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004038:	4b1d      	ldr	r3, [pc, #116]	@ (80040b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2232      	movs	r2, #50	@ 0x32
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	4a1c      	ldr	r2, [pc, #112]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	0c9b      	lsrs	r3, r3, #18
 800404a:	3301      	adds	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800404e:	e002      	b.n	8004056 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b01      	subs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004056:	4b15      	ldr	r3, [pc, #84]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004062:	d102      	bne.n	800406a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f2      	bne.n	8004050 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800406a:	4b10      	ldr	r3, [pc, #64]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004076:	d112      	bne.n	800409e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e011      	b.n	80040a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800407c:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004082:	4a0a      	ldr	r2, [pc, #40]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004088:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800408c:	e007      	b.n	800409e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800408e:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004096:	4a05      	ldr	r2, [pc, #20]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004098:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800409c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	40007000 	.word	0x40007000
 80040b0:	20000000 	.word	0x20000000
 80040b4:	431bde83 	.word	0x431bde83

080040b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040bc:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a04      	ldr	r2, [pc, #16]	@ (80040d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040c6:	6093      	str	r3, [r2, #8]
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40007000 	.word	0x40007000

080040d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e2fe      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d075      	beq.n	80041e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f6:	4b97      	ldr	r3, [pc, #604]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004100:	4b94      	ldr	r3, [pc, #592]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b0c      	cmp	r3, #12
 800410e:	d102      	bne.n	8004116 <HAL_RCC_OscConfig+0x3e>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d002      	beq.n	800411c <HAL_RCC_OscConfig+0x44>
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d10b      	bne.n	8004134 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	4b8d      	ldr	r3, [pc, #564]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d05b      	beq.n	80041e0 <HAL_RCC_OscConfig+0x108>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d157      	bne.n	80041e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e2d9      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800413c:	d106      	bne.n	800414c <HAL_RCC_OscConfig+0x74>
 800413e:	4b85      	ldr	r3, [pc, #532]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a84      	ldr	r2, [pc, #528]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e01d      	b.n	8004188 <HAL_RCC_OscConfig+0xb0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0x98>
 8004156:	4b7f      	ldr	r3, [pc, #508]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a7e      	ldr	r2, [pc, #504]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 800415c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b7c      	ldr	r3, [pc, #496]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a7b      	ldr	r2, [pc, #492]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e00b      	b.n	8004188 <HAL_RCC_OscConfig+0xb0>
 8004170:	4b78      	ldr	r3, [pc, #480]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a77      	ldr	r2, [pc, #476]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	4b75      	ldr	r3, [pc, #468]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a74      	ldr	r2, [pc, #464]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d013      	beq.n	80041b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fd fac0 	bl	8001714 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004198:	f7fd fabc 	bl	8001714 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	@ 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e29e      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0xc0>
 80041b6:	e014      	b.n	80041e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fd faac 	bl	8001714 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c0:	f7fd faa8 	bl	8001714 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	@ 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e28a      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041d2:	4b60      	ldr	r3, [pc, #384]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0xe8>
 80041de:	e000      	b.n	80041e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d075      	beq.n	80042da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ee:	4b59      	ldr	r3, [pc, #356]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041f8:	4b56      	ldr	r3, [pc, #344]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b0c      	cmp	r3, #12
 8004206:	d102      	bne.n	800420e <HAL_RCC_OscConfig+0x136>
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d002      	beq.n	8004214 <HAL_RCC_OscConfig+0x13c>
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b04      	cmp	r3, #4
 8004212:	d11f      	bne.n	8004254 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004214:	4b4f      	ldr	r3, [pc, #316]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_OscConfig+0x154>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e25d      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422c:	4b49      	ldr	r3, [pc, #292]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	061b      	lsls	r3, r3, #24
 800423a:	4946      	ldr	r1, [pc, #280]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004240:	4b45      	ldr	r3, [pc, #276]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f7fd fa19 	bl	800167c <HAL_InitTick>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d043      	beq.n	80042d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e249      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d023      	beq.n	80042a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800425c:	4b3d      	ldr	r3, [pc, #244]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a3c      	ldr	r2, [pc, #240]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd fa54 	bl	8001714 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004270:	f7fd fa50 	bl	8001714 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e232      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004282:	4b34      	ldr	r3, [pc, #208]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	4b31      	ldr	r3, [pc, #196]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	061b      	lsls	r3, r3, #24
 800429c:	492d      	ldr	r1, [pc, #180]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]
 80042a2:	e01a      	b.n	80042da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 80042aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fd fa30 	bl	8001714 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b8:	f7fd fa2c 	bl	8001714 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e20e      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042ca:	4b22      	ldr	r3, [pc, #136]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x1e0>
 80042d6:	e000      	b.n	80042da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d041      	beq.n	800436a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d01c      	beq.n	8004328 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ee:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 80042f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f4:	4a17      	ldr	r2, [pc, #92]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fe:	f7fd fa09 	bl	8001714 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004306:	f7fd fa05 	bl	8001714 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e1e7      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004318:	4b0e      	ldr	r3, [pc, #56]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 800431a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ef      	beq.n	8004306 <HAL_RCC_OscConfig+0x22e>
 8004326:	e020      	b.n	800436a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004328:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800432e:	4a09      	ldr	r2, [pc, #36]	@ (8004354 <HAL_RCC_OscConfig+0x27c>)
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004338:	f7fd f9ec 	bl	8001714 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800433e:	e00d      	b.n	800435c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004340:	f7fd f9e8 	bl	8001714 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d906      	bls.n	800435c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e1ca      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000
 8004358:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800435c:	4b8c      	ldr	r3, [pc, #560]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 800435e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1ea      	bne.n	8004340 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 80a6 	beq.w	80044c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004378:	2300      	movs	r3, #0
 800437a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800437c:	4b84      	ldr	r3, [pc, #528]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_OscConfig+0x2b4>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_RCC_OscConfig+0x2b6>
 800438c:	2300      	movs	r3, #0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00d      	beq.n	80043ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004392:	4b7f      	ldr	r3, [pc, #508]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004396:	4a7e      	ldr	r2, [pc, #504]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439c:	6593      	str	r3, [r2, #88]	@ 0x58
 800439e:	4b7c      	ldr	r3, [pc, #496]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043aa:	2301      	movs	r3, #1
 80043ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ae:	4b79      	ldr	r3, [pc, #484]	@ (8004594 <HAL_RCC_OscConfig+0x4bc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d118      	bne.n	80043ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ba:	4b76      	ldr	r3, [pc, #472]	@ (8004594 <HAL_RCC_OscConfig+0x4bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a75      	ldr	r2, [pc, #468]	@ (8004594 <HAL_RCC_OscConfig+0x4bc>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c6:	f7fd f9a5 	bl	8001714 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fd f9a1 	bl	8001714 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e183      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004594 <HAL_RCC_OscConfig+0x4bc>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d108      	bne.n	8004406 <HAL_RCC_OscConfig+0x32e>
 80043f4:	4b66      	ldr	r3, [pc, #408]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fa:	4a65      	ldr	r2, [pc, #404]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004404:	e024      	b.n	8004450 <HAL_RCC_OscConfig+0x378>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b05      	cmp	r3, #5
 800440c:	d110      	bne.n	8004430 <HAL_RCC_OscConfig+0x358>
 800440e:	4b60      	ldr	r3, [pc, #384]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004414:	4a5e      	ldr	r2, [pc, #376]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004416:	f043 0304 	orr.w	r3, r3, #4
 800441a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800441e:	4b5c      	ldr	r3, [pc, #368]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004424:	4a5a      	ldr	r2, [pc, #360]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800442e:	e00f      	b.n	8004450 <HAL_RCC_OscConfig+0x378>
 8004430:	4b57      	ldr	r3, [pc, #348]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004436:	4a56      	ldr	r2, [pc, #344]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004440:	4b53      	ldr	r3, [pc, #332]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004446:	4a52      	ldr	r2, [pc, #328]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004448:	f023 0304 	bic.w	r3, r3, #4
 800444c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d016      	beq.n	8004486 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004458:	f7fd f95c 	bl	8001714 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445e:	e00a      	b.n	8004476 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004460:	f7fd f958 	bl	8001714 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e138      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004476:	4b46      	ldr	r3, [pc, #280]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ed      	beq.n	8004460 <HAL_RCC_OscConfig+0x388>
 8004484:	e015      	b.n	80044b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004486:	f7fd f945 	bl	8001714 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800448c:	e00a      	b.n	80044a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448e:	f7fd f941 	bl	8001714 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449c:	4293      	cmp	r3, r2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e121      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1ed      	bne.n	800448e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044b2:	7ffb      	ldrb	r3, [r7, #31]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d105      	bne.n	80044c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b8:	4b35      	ldr	r3, [pc, #212]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 80044ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044bc:	4a34      	ldr	r2, [pc, #208]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 80044be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d03c      	beq.n	800454a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01c      	beq.n	8004512 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 80044da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044de:	4a2c      	ldr	r2, [pc, #176]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e8:	f7fd f914 	bl	8001714 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044f0:	f7fd f910 	bl	8001714 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e0f2      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004502:	4b23      	ldr	r3, [pc, #140]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004504:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0ef      	beq.n	80044f0 <HAL_RCC_OscConfig+0x418>
 8004510:	e01b      	b.n	800454a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004512:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004514:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004518:	4a1d      	ldr	r2, [pc, #116]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fd f8f7 	bl	8001714 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800452a:	f7fd f8f3 	bl	8001714 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e0d5      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800453c:	4b14      	ldr	r3, [pc, #80]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 800453e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1ef      	bne.n	800452a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80c9 	beq.w	80046e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004554:	4b0e      	ldr	r3, [pc, #56]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b0c      	cmp	r3, #12
 800455e:	f000 8083 	beq.w	8004668 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d15e      	bne.n	8004628 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456a:	4b09      	ldr	r3, [pc, #36]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a08      	ldr	r2, [pc, #32]	@ (8004590 <HAL_RCC_OscConfig+0x4b8>)
 8004570:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004576:	f7fd f8cd 	bl	8001714 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457c:	e00c      	b.n	8004598 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457e:	f7fd f8c9 	bl	8001714 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d905      	bls.n	8004598 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e0ab      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
 8004590:	40021000 	.word	0x40021000
 8004594:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004598:	4b55      	ldr	r3, [pc, #340]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1ec      	bne.n	800457e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045a4:	4b52      	ldr	r3, [pc, #328]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	4b52      	ldr	r3, [pc, #328]	@ (80046f4 <HAL_RCC_OscConfig+0x61c>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6a11      	ldr	r1, [r2, #32]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045b4:	3a01      	subs	r2, #1
 80045b6:	0112      	lsls	r2, r2, #4
 80045b8:	4311      	orrs	r1, r2
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80045be:	0212      	lsls	r2, r2, #8
 80045c0:	4311      	orrs	r1, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045c6:	0852      	lsrs	r2, r2, #1
 80045c8:	3a01      	subs	r2, #1
 80045ca:	0552      	lsls	r2, r2, #21
 80045cc:	4311      	orrs	r1, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045d2:	0852      	lsrs	r2, r2, #1
 80045d4:	3a01      	subs	r2, #1
 80045d6:	0652      	lsls	r2, r2, #25
 80045d8:	4311      	orrs	r1, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80045de:	06d2      	lsls	r2, r2, #27
 80045e0:	430a      	orrs	r2, r1
 80045e2:	4943      	ldr	r1, [pc, #268]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e8:	4b41      	ldr	r3, [pc, #260]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a40      	ldr	r2, [pc, #256]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 80045ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045f4:	4b3e      	ldr	r3, [pc, #248]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a3d      	ldr	r2, [pc, #244]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 80045fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd f888 	bl	8001714 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004608:	f7fd f884 	bl	8001714 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e066      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461a:	4b35      	ldr	r3, [pc, #212]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x530>
 8004626:	e05e      	b.n	80046e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	4b31      	ldr	r3, [pc, #196]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a30      	ldr	r2, [pc, #192]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 800462e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fd f86e 	bl	8001714 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463c:	f7fd f86a 	bl	8001714 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e04c      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464e:	4b28      	ldr	r3, [pc, #160]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800465a:	4b25      	ldr	r3, [pc, #148]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	4924      	ldr	r1, [pc, #144]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 8004660:	4b25      	ldr	r3, [pc, #148]	@ (80046f8 <HAL_RCC_OscConfig+0x620>)
 8004662:	4013      	ands	r3, r2
 8004664:	60cb      	str	r3, [r1, #12]
 8004666:	e03e      	b.n	80046e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e039      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004674:	4b1e      	ldr	r3, [pc, #120]	@ (80046f0 <HAL_RCC_OscConfig+0x618>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f003 0203 	and.w	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	429a      	cmp	r2, r3
 8004686:	d12c      	bne.n	80046e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	3b01      	subs	r3, #1
 8004694:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d123      	bne.n	80046e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d11b      	bne.n	80046e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d113      	bne.n	80046e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c4:	085b      	lsrs	r3, r3, #1
 80046c6:	3b01      	subs	r3, #1
 80046c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d109      	bne.n	80046e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	3b01      	subs	r3, #1
 80046dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	019f800c 	.word	0x019f800c
 80046f8:	feeefffc 	.word	0xfeeefffc

080046fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e11e      	b.n	8004952 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004714:	4b91      	ldr	r3, [pc, #580]	@ (800495c <HAL_RCC_ClockConfig+0x260>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d910      	bls.n	8004744 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004722:	4b8e      	ldr	r3, [pc, #568]	@ (800495c <HAL_RCC_ClockConfig+0x260>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 020f 	bic.w	r2, r3, #15
 800472a:	498c      	ldr	r1, [pc, #560]	@ (800495c <HAL_RCC_ClockConfig+0x260>)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	4313      	orrs	r3, r2
 8004730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b8a      	ldr	r3, [pc, #552]	@ (800495c <HAL_RCC_ClockConfig+0x260>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e106      	b.n	8004952 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d073      	beq.n	8004838 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b03      	cmp	r3, #3
 8004756:	d129      	bne.n	80047ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004758:	4b81      	ldr	r3, [pc, #516]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0f4      	b.n	8004952 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004768:	f000 f99e 	bl	8004aa8 <RCC_GetSysClockFreqFromPLLSource>
 800476c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4a7c      	ldr	r2, [pc, #496]	@ (8004964 <HAL_RCC_ClockConfig+0x268>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d93f      	bls.n	80047f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004776:	4b7a      	ldr	r3, [pc, #488]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800478a:	2b00      	cmp	r3, #0
 800478c:	d033      	beq.n	80047f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004792:	2b00      	cmp	r3, #0
 8004794:	d12f      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004796:	4b72      	ldr	r3, [pc, #456]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800479e:	4a70      	ldr	r2, [pc, #448]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 80047a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047a6:	2380      	movs	r3, #128	@ 0x80
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e024      	b.n	80047f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d107      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d109      	bne.n	80047d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0c6      	b.n	8004952 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047c4:	4b66      	ldr	r3, [pc, #408]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0be      	b.n	8004952 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80047d4:	f000 f8ce 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 80047d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4a61      	ldr	r2, [pc, #388]	@ (8004964 <HAL_RCC_ClockConfig+0x268>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d909      	bls.n	80047f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ea:	4a5d      	ldr	r2, [pc, #372]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 80047ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047f2:	2380      	movs	r3, #128	@ 0x80
 80047f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 0203 	bic.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4957      	ldr	r1, [pc, #348]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004804:	4313      	orrs	r3, r2
 8004806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004808:	f7fc ff84 	bl	8001714 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	e00a      	b.n	8004826 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004810:	f7fc ff80 	bl	8001714 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e095      	b.n	8004952 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	4b4e      	ldr	r3, [pc, #312]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 020c 	and.w	r2, r3, #12
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	429a      	cmp	r2, r3
 8004836:	d1eb      	bne.n	8004810 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d023      	beq.n	800488c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004850:	4b43      	ldr	r3, [pc, #268]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4a42      	ldr	r2, [pc, #264]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004856:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800485a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004868:	4b3d      	ldr	r3, [pc, #244]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004870:	4a3b      	ldr	r2, [pc, #236]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004872:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004876:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004878:	4b39      	ldr	r3, [pc, #228]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4936      	ldr	r1, [pc, #216]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
 800488a:	e008      	b.n	800489e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b80      	cmp	r3, #128	@ 0x80
 8004890:	d105      	bne.n	800489e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004892:	4b33      	ldr	r3, [pc, #204]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	4a32      	ldr	r2, [pc, #200]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004898:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800489c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800489e:	4b2f      	ldr	r3, [pc, #188]	@ (800495c <HAL_RCC_ClockConfig+0x260>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d21d      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ac:	4b2b      	ldr	r3, [pc, #172]	@ (800495c <HAL_RCC_ClockConfig+0x260>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f023 020f 	bic.w	r2, r3, #15
 80048b4:	4929      	ldr	r1, [pc, #164]	@ (800495c <HAL_RCC_ClockConfig+0x260>)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048bc:	f7fc ff2a 	bl	8001714 <HAL_GetTick>
 80048c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	e00a      	b.n	80048da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c4:	f7fc ff26 	bl	8001714 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e03b      	b.n	8004952 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b20      	ldr	r3, [pc, #128]	@ (800495c <HAL_RCC_ClockConfig+0x260>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d1ed      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4917      	ldr	r1, [pc, #92]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004912:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	490f      	ldr	r1, [pc, #60]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004926:	f000 f825 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 800492a:	4602      	mov	r2, r0
 800492c:	4b0c      	ldr	r3, [pc, #48]	@ (8004960 <HAL_RCC_ClockConfig+0x264>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	490c      	ldr	r1, [pc, #48]	@ (8004968 <HAL_RCC_ClockConfig+0x26c>)
 8004938:	5ccb      	ldrb	r3, [r1, r3]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	4a0a      	ldr	r2, [pc, #40]	@ (800496c <HAL_RCC_ClockConfig+0x270>)
 8004944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004946:	4b0a      	ldr	r3, [pc, #40]	@ (8004970 <HAL_RCC_ClockConfig+0x274>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fc fe96 	bl	800167c <HAL_InitTick>
 8004950:	4603      	mov	r3, r0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40022000 	.word	0x40022000
 8004960:	40021000 	.word	0x40021000
 8004964:	04c4b400 	.word	0x04c4b400
 8004968:	08008004 	.word	0x08008004
 800496c:	20000000 	.word	0x20000000
 8004970:	20000004 	.word	0x20000004

08004974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800497a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b04      	cmp	r3, #4
 8004984:	d102      	bne.n	800498c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004986:	4b2a      	ldr	r3, [pc, #168]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	e047      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800498c:	4b27      	ldr	r3, [pc, #156]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	2b08      	cmp	r3, #8
 8004996:	d102      	bne.n	800499e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004998:	4b26      	ldr	r3, [pc, #152]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0xc0>)
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	e03e      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800499e:	4b23      	ldr	r3, [pc, #140]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
 80049a6:	2b0c      	cmp	r3, #12
 80049a8:	d136      	bne.n	8004a18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049aa:	4b20      	ldr	r3, [pc, #128]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049b4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	3301      	adds	r3, #1
 80049c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d10c      	bne.n	80049e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d0:	4a16      	ldr	r2, [pc, #88]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d2:	68d2      	ldr	r2, [r2, #12]
 80049d4:	0a12      	lsrs	r2, r2, #8
 80049d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049da:	fb02 f303 	mul.w	r3, r2, r3
 80049de:	617b      	str	r3, [r7, #20]
      break;
 80049e0:	e00c      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049e2:	4a13      	ldr	r2, [pc, #76]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	4a10      	ldr	r2, [pc, #64]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ec:	68d2      	ldr	r2, [r2, #12]
 80049ee:	0a12      	lsrs	r2, r2, #8
 80049f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049f4:	fb02 f303 	mul.w	r3, r2, r3
 80049f8:	617b      	str	r3, [r7, #20]
      break;
 80049fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049fc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	0e5b      	lsrs	r3, r3, #25
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	3301      	adds	r3, #1
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	e001      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a1c:	693b      	ldr	r3, [r7, #16]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	00f42400 	.word	0x00f42400
 8004a34:	016e3600 	.word	0x016e3600

08004a38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a3c:	4b03      	ldr	r3, [pc, #12]	@ (8004a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000000 	.word	0x20000000

08004a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a54:	f7ff fff0 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b06      	ldr	r3, [pc, #24]	@ (8004a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	4904      	ldr	r1, [pc, #16]	@ (8004a78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a66:	5ccb      	ldrb	r3, [r1, r3]
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40021000 	.word	0x40021000
 8004a78:	08008014 	.word	0x08008014

08004a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a80:	f7ff ffda 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	0adb      	lsrs	r3, r3, #11
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	4904      	ldr	r1, [pc, #16]	@ (8004aa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a92:	5ccb      	ldrb	r3, [r1, r3]
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	08008014 	.word	0x08008014

08004aa8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aae:	4b1e      	ldr	r3, [pc, #120]	@ (8004b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d10c      	bne.n	8004ae6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004acc:	4a17      	ldr	r2, [pc, #92]	@ (8004b2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	4a14      	ldr	r2, [pc, #80]	@ (8004b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ad6:	68d2      	ldr	r2, [r2, #12]
 8004ad8:	0a12      	lsrs	r2, r2, #8
 8004ada:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	617b      	str	r3, [r7, #20]
    break;
 8004ae4:	e00c      	b.n	8004b00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ae6:	4a12      	ldr	r2, [pc, #72]	@ (8004b30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aee:	4a0e      	ldr	r2, [pc, #56]	@ (8004b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004af0:	68d2      	ldr	r2, [r2, #12]
 8004af2:	0a12      	lsrs	r2, r2, #8
 8004af4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
    break;
 8004afe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b00:	4b09      	ldr	r3, [pc, #36]	@ (8004b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	0e5b      	lsrs	r3, r3, #25
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b1a:	687b      	ldr	r3, [r7, #4]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	016e3600 	.word	0x016e3600
 8004b30:	00f42400 	.word	0x00f42400

08004b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b40:	2300      	movs	r3, #0
 8004b42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8098 	beq.w	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b52:	2300      	movs	r3, #0
 8004b54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b56:	4b43      	ldr	r3, [pc, #268]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10d      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b62:	4b40      	ldr	r3, [pc, #256]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b66:	4a3f      	ldr	r2, [pc, #252]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a39      	ldr	r2, [pc, #228]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b8a:	f7fc fdc3 	bl	8001714 <HAL_GetTick>
 8004b8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b90:	e009      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b92:	f7fc fdbf 	bl	8001714 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d902      	bls.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	74fb      	strb	r3, [r7, #19]
        break;
 8004ba4:	e005      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ba6:	4b30      	ldr	r3, [pc, #192]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0ef      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004bb2:	7cfb      	ldrb	r3, [r7, #19]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d159      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01e      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d019      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bd4:	4b23      	ldr	r3, [pc, #140]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004be0:	4b20      	ldr	r3, [pc, #128]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c00:	4a18      	ldr	r2, [pc, #96]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d016      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c12:	f7fc fd7f 	bl	8001714 <HAL_GetTick>
 8004c16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c18:	e00b      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1a:	f7fc fd7b 	bl	8001714 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d902      	bls.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	74fb      	strb	r3, [r7, #19]
            break;
 8004c30:	e006      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c32:	4b0c      	ldr	r3, [pc, #48]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0ec      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10b      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c46:	4b07      	ldr	r3, [pc, #28]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c54:	4903      	ldr	r1, [pc, #12]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c5c:	e008      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c5e:	7cfb      	ldrb	r3, [r7, #19]
 8004c60:	74bb      	strb	r3, [r7, #18]
 8004c62:	e005      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6c:	7cfb      	ldrb	r3, [r7, #19]
 8004c6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c70:	7c7b      	ldrb	r3, [r7, #17]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d105      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c76:	4ba7      	ldr	r3, [pc, #668]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7a:	4aa6      	ldr	r2, [pc, #664]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c8e:	4ba1      	ldr	r3, [pc, #644]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c94:	f023 0203 	bic.w	r2, r3, #3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	499d      	ldr	r1, [pc, #628]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cb0:	4b98      	ldr	r3, [pc, #608]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb6:	f023 020c 	bic.w	r2, r3, #12
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4995      	ldr	r1, [pc, #596]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cd2:	4b90      	ldr	r3, [pc, #576]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	498c      	ldr	r1, [pc, #560]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cf4:	4b87      	ldr	r3, [pc, #540]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	4984      	ldr	r1, [pc, #528]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d16:	4b7f      	ldr	r3, [pc, #508]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	497b      	ldr	r1, [pc, #492]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d38:	4b76      	ldr	r3, [pc, #472]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	4973      	ldr	r1, [pc, #460]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	496a      	ldr	r1, [pc, #424]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d7c:	4b65      	ldr	r3, [pc, #404]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	4962      	ldr	r1, [pc, #392]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	4959      	ldr	r1, [pc, #356]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dc0:	4b54      	ldr	r3, [pc, #336]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dc6:	f023 0203 	bic.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	4951      	ldr	r1, [pc, #324]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004de2:	4b4c      	ldr	r3, [pc, #304]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df0:	4948      	ldr	r1, [pc, #288]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d015      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e04:	4b43      	ldr	r3, [pc, #268]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e12:	4940      	ldr	r1, [pc, #256]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e22:	d105      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e24:	4b3b      	ldr	r3, [pc, #236]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4a3a      	ldr	r2, [pc, #232]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d015      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e3c:	4b35      	ldr	r3, [pc, #212]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4a:	4932      	ldr	r1, [pc, #200]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e5a:	d105      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4a2c      	ldr	r2, [pc, #176]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e66:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d015      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e74:	4b27      	ldr	r3, [pc, #156]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e82:	4924      	ldr	r1, [pc, #144]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e94:	4b1f      	ldr	r3, [pc, #124]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4a1e      	ldr	r2, [pc, #120]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eac:	4b19      	ldr	r3, [pc, #100]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	4916      	ldr	r1, [pc, #88]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ecc:	4b11      	ldr	r3, [pc, #68]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a10      	ldr	r2, [pc, #64]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ed6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d019      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	4908      	ldr	r1, [pc, #32]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f02:	d109      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f04:	4b03      	ldr	r3, [pc, #12]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4a02      	ldr	r2, [pc, #8]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0e:	60d3      	str	r3, [r2, #12]
 8004f10:	e002      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d015      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f24:	4b29      	ldr	r3, [pc, #164]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	4926      	ldr	r1, [pc, #152]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f42:	d105      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f44:	4b21      	ldr	r3, [pc, #132]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a20      	ldr	r2, [pc, #128]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f4e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d015      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f62:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f6a:	4918      	ldr	r1, [pc, #96]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f7a:	d105      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f7c:	4b13      	ldr	r3, [pc, #76]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4a12      	ldr	r2, [pc, #72]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f86:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d015      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f94:	4b0d      	ldr	r3, [pc, #52]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa2:	490a      	ldr	r1, [pc, #40]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb4:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4a04      	ldr	r2, [pc, #16]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40021000 	.word	0x40021000

08004fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e049      	b.n	8005076 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fc f95a 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f000 ff68 	bl	8005ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b01      	cmp	r3, #1
 8005092:	d001      	beq.n	8005098 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e04c      	b.n	8005132 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a26      	ldr	r2, [pc, #152]	@ (8005140 <HAL_TIM_Base_Start+0xc0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d022      	beq.n	80050f0 <HAL_TIM_Base_Start+0x70>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b2:	d01d      	beq.n	80050f0 <HAL_TIM_Base_Start+0x70>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a22      	ldr	r2, [pc, #136]	@ (8005144 <HAL_TIM_Base_Start+0xc4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d018      	beq.n	80050f0 <HAL_TIM_Base_Start+0x70>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a21      	ldr	r2, [pc, #132]	@ (8005148 <HAL_TIM_Base_Start+0xc8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d013      	beq.n	80050f0 <HAL_TIM_Base_Start+0x70>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1f      	ldr	r2, [pc, #124]	@ (800514c <HAL_TIM_Base_Start+0xcc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00e      	beq.n	80050f0 <HAL_TIM_Base_Start+0x70>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005150 <HAL_TIM_Base_Start+0xd0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_TIM_Base_Start+0x70>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005154 <HAL_TIM_Base_Start+0xd4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d004      	beq.n	80050f0 <HAL_TIM_Base_Start+0x70>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005158 <HAL_TIM_Base_Start+0xd8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d115      	bne.n	800511c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	4b19      	ldr	r3, [pc, #100]	@ (800515c <HAL_TIM_Base_Start+0xdc>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b06      	cmp	r3, #6
 8005100:	d015      	beq.n	800512e <HAL_TIM_Base_Start+0xae>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005108:	d011      	beq.n	800512e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0201 	orr.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511a:	e008      	b.n	800512e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	e000      	b.n	8005130 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40000400 	.word	0x40000400
 8005148:	40000800 	.word	0x40000800
 800514c:	40000c00 	.word	0x40000c00
 8005150:	40013400 	.word	0x40013400
 8005154:	40014000 	.word	0x40014000
 8005158:	40015000 	.word	0x40015000
 800515c:	00010007 	.word	0x00010007

08005160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	d001      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e054      	b.n	8005222 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a26      	ldr	r2, [pc, #152]	@ (8005230 <HAL_TIM_Base_Start_IT+0xd0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d022      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a2:	d01d      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a22      	ldr	r2, [pc, #136]	@ (8005234 <HAL_TIM_Base_Start_IT+0xd4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d018      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a21      	ldr	r2, [pc, #132]	@ (8005238 <HAL_TIM_Base_Start_IT+0xd8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d013      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1f      	ldr	r2, [pc, #124]	@ (800523c <HAL_TIM_Base_Start_IT+0xdc>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00e      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005240 <HAL_TIM_Base_Start_IT+0xe0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d009      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005244 <HAL_TIM_Base_Start_IT+0xe4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1b      	ldr	r2, [pc, #108]	@ (8005248 <HAL_TIM_Base_Start_IT+0xe8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d115      	bne.n	800520c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	4b19      	ldr	r3, [pc, #100]	@ (800524c <HAL_TIM_Base_Start_IT+0xec>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b06      	cmp	r3, #6
 80051f0:	d015      	beq.n	800521e <HAL_TIM_Base_Start_IT+0xbe>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051f8:	d011      	beq.n	800521e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0201 	orr.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520a:	e008      	b.n	800521e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	e000      	b.n	8005220 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40000c00 	.word	0x40000c00
 8005240:	40013400 	.word	0x40013400
 8005244:	40014000 	.word	0x40014000
 8005248:	40015000 	.word	0x40015000
 800524c:	00010007 	.word	0x00010007

08005250 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e049      	b.n	80052f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f841 	bl	80052fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	4619      	mov	r1, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f000 fe28 	bl	8005ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
	...

08005314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <HAL_TIM_PWM_Start+0x24>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	bf14      	ite	ne
 8005330:	2301      	movne	r3, #1
 8005332:	2300      	moveq	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	e03c      	b.n	80053b2 <HAL_TIM_PWM_Start+0x9e>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b04      	cmp	r3, #4
 800533c:	d109      	bne.n	8005352 <HAL_TIM_PWM_Start+0x3e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b01      	cmp	r3, #1
 8005348:	bf14      	ite	ne
 800534a:	2301      	movne	r3, #1
 800534c:	2300      	moveq	r3, #0
 800534e:	b2db      	uxtb	r3, r3
 8005350:	e02f      	b.n	80053b2 <HAL_TIM_PWM_Start+0x9e>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d109      	bne.n	800536c <HAL_TIM_PWM_Start+0x58>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	bf14      	ite	ne
 8005364:	2301      	movne	r3, #1
 8005366:	2300      	moveq	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	e022      	b.n	80053b2 <HAL_TIM_PWM_Start+0x9e>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b0c      	cmp	r3, #12
 8005370:	d109      	bne.n	8005386 <HAL_TIM_PWM_Start+0x72>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b01      	cmp	r3, #1
 800537c:	bf14      	ite	ne
 800537e:	2301      	movne	r3, #1
 8005380:	2300      	moveq	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	e015      	b.n	80053b2 <HAL_TIM_PWM_Start+0x9e>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b10      	cmp	r3, #16
 800538a:	d109      	bne.n	80053a0 <HAL_TIM_PWM_Start+0x8c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	e008      	b.n	80053b2 <HAL_TIM_PWM_Start+0x9e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	bf14      	ite	ne
 80053ac:	2301      	movne	r3, #1
 80053ae:	2300      	moveq	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e0a6      	b.n	8005508 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d104      	bne.n	80053ca <HAL_TIM_PWM_Start+0xb6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053c8:	e023      	b.n	8005412 <HAL_TIM_PWM_Start+0xfe>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d104      	bne.n	80053da <HAL_TIM_PWM_Start+0xc6>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053d8:	e01b      	b.n	8005412 <HAL_TIM_PWM_Start+0xfe>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d104      	bne.n	80053ea <HAL_TIM_PWM_Start+0xd6>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053e8:	e013      	b.n	8005412 <HAL_TIM_PWM_Start+0xfe>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b0c      	cmp	r3, #12
 80053ee:	d104      	bne.n	80053fa <HAL_TIM_PWM_Start+0xe6>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053f8:	e00b      	b.n	8005412 <HAL_TIM_PWM_Start+0xfe>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d104      	bne.n	800540a <HAL_TIM_PWM_Start+0xf6>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005408:	e003      	b.n	8005412 <HAL_TIM_PWM_Start+0xfe>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2202      	movs	r2, #2
 800540e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2201      	movs	r2, #1
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f001 f9dc 	bl	80067d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a3a      	ldr	r2, [pc, #232]	@ (8005510 <HAL_TIM_PWM_Start+0x1fc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d018      	beq.n	800545c <HAL_TIM_PWM_Start+0x148>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a39      	ldr	r2, [pc, #228]	@ (8005514 <HAL_TIM_PWM_Start+0x200>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <HAL_TIM_PWM_Start+0x148>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a37      	ldr	r2, [pc, #220]	@ (8005518 <HAL_TIM_PWM_Start+0x204>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00e      	beq.n	800545c <HAL_TIM_PWM_Start+0x148>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a36      	ldr	r2, [pc, #216]	@ (800551c <HAL_TIM_PWM_Start+0x208>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d009      	beq.n	800545c <HAL_TIM_PWM_Start+0x148>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a34      	ldr	r2, [pc, #208]	@ (8005520 <HAL_TIM_PWM_Start+0x20c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_TIM_PWM_Start+0x148>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a33      	ldr	r2, [pc, #204]	@ (8005524 <HAL_TIM_PWM_Start+0x210>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d101      	bne.n	8005460 <HAL_TIM_PWM_Start+0x14c>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <HAL_TIM_PWM_Start+0x14e>
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005474:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a25      	ldr	r2, [pc, #148]	@ (8005510 <HAL_TIM_PWM_Start+0x1fc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005488:	d01d      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a26      	ldr	r2, [pc, #152]	@ (8005528 <HAL_TIM_PWM_Start+0x214>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a24      	ldr	r2, [pc, #144]	@ (800552c <HAL_TIM_PWM_Start+0x218>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a23      	ldr	r2, [pc, #140]	@ (8005530 <HAL_TIM_PWM_Start+0x21c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a19      	ldr	r2, [pc, #100]	@ (8005514 <HAL_TIM_PWM_Start+0x200>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a18      	ldr	r2, [pc, #96]	@ (8005518 <HAL_TIM_PWM_Start+0x204>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x1b2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a18      	ldr	r2, [pc, #96]	@ (8005524 <HAL_TIM_PWM_Start+0x210>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d115      	bne.n	80054f2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	4b19      	ldr	r3, [pc, #100]	@ (8005534 <HAL_TIM_PWM_Start+0x220>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b06      	cmp	r3, #6
 80054d6:	d015      	beq.n	8005504 <HAL_TIM_PWM_Start+0x1f0>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054de:	d011      	beq.n	8005504 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f0:	e008      	b.n	8005504 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e000      	b.n	8005506 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005504:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40013400 	.word	0x40013400
 8005518:	40014000 	.word	0x40014000
 800551c:	40014400 	.word	0x40014400
 8005520:	40014800 	.word	0x40014800
 8005524:	40015000 	.word	0x40015000
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	00010007 	.word	0x00010007

08005538 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e097      	b.n	800567c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7fb ff0d 	bl	8001380 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800557c:	f023 0307 	bic.w	r3, r3, #7
 8005580:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3304      	adds	r3, #4
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f000 fca9 	bl	8005ee4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	4313      	orrs	r3, r2
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80055d8:	f023 030c 	bic.w	r3, r3, #12
 80055dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	4313      	orrs	r3, r2
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	011a      	lsls	r2, r3, #4
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	031b      	lsls	r3, r3, #12
 8005608:	4313      	orrs	r3, r2
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005616:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800561e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	4313      	orrs	r3, r2
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005694:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800569c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d110      	bne.n	80056d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d102      	bne.n	80056c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056ba:	7b7b      	ldrb	r3, [r7, #13]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d001      	beq.n	80056c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e069      	b.n	8005798 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056d4:	e031      	b.n	800573a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d110      	bne.n	80056fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056dc:	7bbb      	ldrb	r3, [r7, #14]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d102      	bne.n	80056e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056e2:	7b3b      	ldrb	r3, [r7, #12]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d001      	beq.n	80056ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e055      	b.n	8005798 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056fc:	e01d      	b.n	800573a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d108      	bne.n	8005716 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005704:	7bbb      	ldrb	r3, [r7, #14]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d105      	bne.n	8005716 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800570a:	7b7b      	ldrb	r3, [r7, #13]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d102      	bne.n	8005716 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005710:	7b3b      	ldrb	r3, [r7, #12]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d001      	beq.n	800571a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e03e      	b.n	8005798 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_TIM_Encoder_Start+0xc4>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b04      	cmp	r3, #4
 8005744:	d008      	beq.n	8005758 <HAL_TIM_Encoder_Start+0xd4>
 8005746:	e00f      	b.n	8005768 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2201      	movs	r2, #1
 800574e:	2100      	movs	r1, #0
 8005750:	4618      	mov	r0, r3
 8005752:	f001 f841 	bl	80067d8 <TIM_CCxChannelCmd>
      break;
 8005756:	e016      	b.n	8005786 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2201      	movs	r2, #1
 800575e:	2104      	movs	r1, #4
 8005760:	4618      	mov	r0, r3
 8005762:	f001 f839 	bl	80067d8 <TIM_CCxChannelCmd>
      break;
 8005766:	e00e      	b.n	8005786 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2201      	movs	r2, #1
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f001 f831 	bl	80067d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2201      	movs	r2, #1
 800577c:	2104      	movs	r1, #4
 800577e:	4618      	mov	r0, r3
 8005780:	f001 f82a 	bl	80067d8 <TIM_CCxChannelCmd>
      break;
 8005784:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d020      	beq.n	8005804 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01b      	beq.n	8005804 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0202 	mvn.w	r2, #2
 80057d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fb5c 	bl	8005ea8 <HAL_TIM_IC_CaptureCallback>
 80057f0:	e005      	b.n	80057fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fb4e 	bl	8005e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fb5f 	bl	8005ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d020      	beq.n	8005850 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01b      	beq.n	8005850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0204 	mvn.w	r2, #4
 8005820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fb36 	bl	8005ea8 <HAL_TIM_IC_CaptureCallback>
 800583c:	e005      	b.n	800584a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fb28 	bl	8005e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fb39 	bl	8005ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d020      	beq.n	800589c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01b      	beq.n	800589c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0208 	mvn.w	r2, #8
 800586c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2204      	movs	r2, #4
 8005872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fb10 	bl	8005ea8 <HAL_TIM_IC_CaptureCallback>
 8005888:	e005      	b.n	8005896 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fb02 	bl	8005e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fb13 	bl	8005ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d020      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01b      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0210 	mvn.w	r2, #16
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2208      	movs	r2, #8
 80058be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 faea 	bl	8005ea8 <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fadc 	bl	8005e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 faed 	bl	8005ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00c      	beq.n	800590c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0201 	mvn.w	r2, #1
 8005904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fb fb56 	bl	8000fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005912:	2b00      	cmp	r3, #0
 8005914:	d104      	bne.n	8005920 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00c      	beq.n	800593a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f001 f8a9 	bl	8006a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00c      	beq.n	800595e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594a:	2b00      	cmp	r3, #0
 800594c:	d007      	beq.n	800595e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 f8a1 	bl	8006aa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00c      	beq.n	8005982 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800597a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 faa7 	bl	8005ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00c      	beq.n	80059a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f06f 0220 	mvn.w	r2, #32
 800599e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f001 f869 	bl	8006a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00c      	beq.n	80059ca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80059c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 f875 	bl	8006ab4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00c      	beq.n	80059ee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80059e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 f86d 	bl	8006ac8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00c      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 f865 	bl	8006adc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00c      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 f85d 	bl	8006af0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e0ff      	b.n	8005c5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b14      	cmp	r3, #20
 8005a6a:	f200 80f0 	bhi.w	8005c4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005ac9 	.word	0x08005ac9
 8005a78:	08005c4f 	.word	0x08005c4f
 8005a7c:	08005c4f 	.word	0x08005c4f
 8005a80:	08005c4f 	.word	0x08005c4f
 8005a84:	08005b09 	.word	0x08005b09
 8005a88:	08005c4f 	.word	0x08005c4f
 8005a8c:	08005c4f 	.word	0x08005c4f
 8005a90:	08005c4f 	.word	0x08005c4f
 8005a94:	08005b4b 	.word	0x08005b4b
 8005a98:	08005c4f 	.word	0x08005c4f
 8005a9c:	08005c4f 	.word	0x08005c4f
 8005aa0:	08005c4f 	.word	0x08005c4f
 8005aa4:	08005b8b 	.word	0x08005b8b
 8005aa8:	08005c4f 	.word	0x08005c4f
 8005aac:	08005c4f 	.word	0x08005c4f
 8005ab0:	08005c4f 	.word	0x08005c4f
 8005ab4:	08005bcd 	.word	0x08005bcd
 8005ab8:	08005c4f 	.word	0x08005c4f
 8005abc:	08005c4f 	.word	0x08005c4f
 8005ac0:	08005c4f 	.word	0x08005c4f
 8005ac4:	08005c0d 	.word	0x08005c0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fabc 	bl	800604c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0208 	orr.w	r2, r2, #8
 8005ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0204 	bic.w	r2, r2, #4
 8005af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6999      	ldr	r1, [r3, #24]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	619a      	str	r2, [r3, #24]
      break;
 8005b06:	e0a5      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fb36 	bl	8006180 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6999      	ldr	r1, [r3, #24]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	021a      	lsls	r2, r3, #8
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	619a      	str	r2, [r3, #24]
      break;
 8005b48:	e084      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fba9 	bl	80062a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 0208 	orr.w	r2, r2, #8
 8005b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0204 	bic.w	r2, r2, #4
 8005b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69d9      	ldr	r1, [r3, #28]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	61da      	str	r2, [r3, #28]
      break;
 8005b88:	e064      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fc1b 	bl	80063cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69d9      	ldr	r1, [r3, #28]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	021a      	lsls	r2, r3, #8
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	61da      	str	r2, [r3, #28]
      break;
 8005bca:	e043      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fc8e 	bl	80064f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0208 	orr.w	r2, r2, #8
 8005be6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0204 	bic.w	r2, r2, #4
 8005bf6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	691a      	ldr	r2, [r3, #16]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c0a:	e023      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fcd8 	bl	80065c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c26:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c36:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	021a      	lsls	r2, r3, #8
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c4c:	e002      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	75fb      	strb	r3, [r7, #23]
      break;
 8005c52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop

08005c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIM_ConfigClockSource+0x1c>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e0f6      	b.n	8005e72 <HAL_TIM_ConfigClockSource+0x20a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005ca2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a6f      	ldr	r2, [pc, #444]	@ (8005e7c <HAL_TIM_ConfigClockSource+0x214>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	f000 80c1 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005cc4:	4a6d      	ldr	r2, [pc, #436]	@ (8005e7c <HAL_TIM_ConfigClockSource+0x214>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	f200 80c6 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ccc:	4a6c      	ldr	r2, [pc, #432]	@ (8005e80 <HAL_TIM_ConfigClockSource+0x218>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	f000 80b9 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005cd4:	4a6a      	ldr	r2, [pc, #424]	@ (8005e80 <HAL_TIM_ConfigClockSource+0x218>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f200 80be 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cdc:	4a69      	ldr	r2, [pc, #420]	@ (8005e84 <HAL_TIM_ConfigClockSource+0x21c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	f000 80b1 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005ce4:	4a67      	ldr	r2, [pc, #412]	@ (8005e84 <HAL_TIM_ConfigClockSource+0x21c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	f200 80b6 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cec:	4a66      	ldr	r2, [pc, #408]	@ (8005e88 <HAL_TIM_ConfigClockSource+0x220>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	f000 80a9 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005cf4:	4a64      	ldr	r2, [pc, #400]	@ (8005e88 <HAL_TIM_ConfigClockSource+0x220>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	f200 80ae 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cfc:	4a63      	ldr	r2, [pc, #396]	@ (8005e8c <HAL_TIM_ConfigClockSource+0x224>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	f000 80a1 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d04:	4a61      	ldr	r2, [pc, #388]	@ (8005e8c <HAL_TIM_ConfigClockSource+0x224>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	f200 80a6 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d0c:	4a60      	ldr	r2, [pc, #384]	@ (8005e90 <HAL_TIM_ConfigClockSource+0x228>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	f000 8099 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d14:	4a5e      	ldr	r2, [pc, #376]	@ (8005e90 <HAL_TIM_ConfigClockSource+0x228>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	f200 809e 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d20:	f000 8091 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d28:	f200 8096 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d30:	f000 8089 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d38:	f200 808e 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d40:	d03e      	beq.n	8005dc0 <HAL_TIM_ConfigClockSource+0x158>
 8005d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d46:	f200 8087 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d4e:	f000 8086 	beq.w	8005e5e <HAL_TIM_ConfigClockSource+0x1f6>
 8005d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d56:	d87f      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d58:	2b70      	cmp	r3, #112	@ 0x70
 8005d5a:	d01a      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x12a>
 8005d5c:	2b70      	cmp	r3, #112	@ 0x70
 8005d5e:	d87b      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d60:	2b60      	cmp	r3, #96	@ 0x60
 8005d62:	d050      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x19e>
 8005d64:	2b60      	cmp	r3, #96	@ 0x60
 8005d66:	d877      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d68:	2b50      	cmp	r3, #80	@ 0x50
 8005d6a:	d03c      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x17e>
 8005d6c:	2b50      	cmp	r3, #80	@ 0x50
 8005d6e:	d873      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d70:	2b40      	cmp	r3, #64	@ 0x40
 8005d72:	d058      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x1be>
 8005d74:	2b40      	cmp	r3, #64	@ 0x40
 8005d76:	d86f      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d78:	2b30      	cmp	r3, #48	@ 0x30
 8005d7a:	d064      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d7c:	2b30      	cmp	r3, #48	@ 0x30
 8005d7e:	d86b      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d060      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	d867      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d05c      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d05a      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d90:	e062      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005da2:	f000 fcf9 	bl	8006798 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005db4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	609a      	str	r2, [r3, #8]
      break;
 8005dbe:	e04f      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dd0:	f000 fce2 	bl	8006798 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005de2:	609a      	str	r2, [r3, #8]
      break;
 8005de4:	e03c      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df2:	461a      	mov	r2, r3
 8005df4:	f000 fc54 	bl	80066a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2150      	movs	r1, #80	@ 0x50
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fcad 	bl	800675e <TIM_ITRx_SetConfig>
      break;
 8005e04:	e02c      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e12:	461a      	mov	r2, r3
 8005e14:	f000 fc73 	bl	80066fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2160      	movs	r1, #96	@ 0x60
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fc9d 	bl	800675e <TIM_ITRx_SetConfig>
      break;
 8005e24:	e01c      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e32:	461a      	mov	r2, r3
 8005e34:	f000 fc34 	bl	80066a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2140      	movs	r1, #64	@ 0x40
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fc8d 	bl	800675e <TIM_ITRx_SetConfig>
      break;
 8005e44:	e00c      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4610      	mov	r0, r2
 8005e52:	f000 fc84 	bl	800675e <TIM_ITRx_SetConfig>
      break;
 8005e56:	e003      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e5c:	e000      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005e5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	00100070 	.word	0x00100070
 8005e80:	00100060 	.word	0x00100060
 8005e84:	00100050 	.word	0x00100050
 8005e88:	00100040 	.word	0x00100040
 8005e8c:	00100030 	.word	0x00100030
 8005e90:	00100020 	.word	0x00100020

08005e94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a4c      	ldr	r2, [pc, #304]	@ (8006028 <TIM_Base_SetConfig+0x144>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d017      	beq.n	8005f2c <TIM_Base_SetConfig+0x48>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f02:	d013      	beq.n	8005f2c <TIM_Base_SetConfig+0x48>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a49      	ldr	r2, [pc, #292]	@ (800602c <TIM_Base_SetConfig+0x148>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00f      	beq.n	8005f2c <TIM_Base_SetConfig+0x48>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a48      	ldr	r2, [pc, #288]	@ (8006030 <TIM_Base_SetConfig+0x14c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <TIM_Base_SetConfig+0x48>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a47      	ldr	r2, [pc, #284]	@ (8006034 <TIM_Base_SetConfig+0x150>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d007      	beq.n	8005f2c <TIM_Base_SetConfig+0x48>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a46      	ldr	r2, [pc, #280]	@ (8006038 <TIM_Base_SetConfig+0x154>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_Base_SetConfig+0x48>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a45      	ldr	r2, [pc, #276]	@ (800603c <TIM_Base_SetConfig+0x158>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d108      	bne.n	8005f3e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a39      	ldr	r2, [pc, #228]	@ (8006028 <TIM_Base_SetConfig+0x144>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d023      	beq.n	8005f8e <TIM_Base_SetConfig+0xaa>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4c:	d01f      	beq.n	8005f8e <TIM_Base_SetConfig+0xaa>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a36      	ldr	r2, [pc, #216]	@ (800602c <TIM_Base_SetConfig+0x148>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d01b      	beq.n	8005f8e <TIM_Base_SetConfig+0xaa>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a35      	ldr	r2, [pc, #212]	@ (8006030 <TIM_Base_SetConfig+0x14c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d017      	beq.n	8005f8e <TIM_Base_SetConfig+0xaa>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a34      	ldr	r2, [pc, #208]	@ (8006034 <TIM_Base_SetConfig+0x150>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d013      	beq.n	8005f8e <TIM_Base_SetConfig+0xaa>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a33      	ldr	r2, [pc, #204]	@ (8006038 <TIM_Base_SetConfig+0x154>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00f      	beq.n	8005f8e <TIM_Base_SetConfig+0xaa>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a33      	ldr	r2, [pc, #204]	@ (8006040 <TIM_Base_SetConfig+0x15c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00b      	beq.n	8005f8e <TIM_Base_SetConfig+0xaa>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a32      	ldr	r2, [pc, #200]	@ (8006044 <TIM_Base_SetConfig+0x160>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d007      	beq.n	8005f8e <TIM_Base_SetConfig+0xaa>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a31      	ldr	r2, [pc, #196]	@ (8006048 <TIM_Base_SetConfig+0x164>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_Base_SetConfig+0xaa>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a2c      	ldr	r2, [pc, #176]	@ (800603c <TIM_Base_SetConfig+0x158>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d108      	bne.n	8005fa0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a18      	ldr	r2, [pc, #96]	@ (8006028 <TIM_Base_SetConfig+0x144>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <TIM_Base_SetConfig+0x110>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a1a      	ldr	r2, [pc, #104]	@ (8006038 <TIM_Base_SetConfig+0x154>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00f      	beq.n	8005ff4 <TIM_Base_SetConfig+0x110>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8006040 <TIM_Base_SetConfig+0x15c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00b      	beq.n	8005ff4 <TIM_Base_SetConfig+0x110>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a19      	ldr	r2, [pc, #100]	@ (8006044 <TIM_Base_SetConfig+0x160>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d007      	beq.n	8005ff4 <TIM_Base_SetConfig+0x110>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a18      	ldr	r2, [pc, #96]	@ (8006048 <TIM_Base_SetConfig+0x164>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_Base_SetConfig+0x110>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a13      	ldr	r2, [pc, #76]	@ (800603c <TIM_Base_SetConfig+0x158>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d103      	bne.n	8005ffc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b01      	cmp	r3, #1
 800600c:	d105      	bne.n	800601a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f023 0201 	bic.w	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	611a      	str	r2, [r3, #16]
  }
}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40000400 	.word	0x40000400
 8006030:	40000800 	.word	0x40000800
 8006034:	40000c00 	.word	0x40000c00
 8006038:	40013400 	.word	0x40013400
 800603c:	40015000 	.word	0x40015000
 8006040:	40014000 	.word	0x40014000
 8006044:	40014400 	.word	0x40014400
 8006048:	40014800 	.word	0x40014800

0800604c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f023 0201 	bic.w	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800607a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f023 0302 	bic.w	r3, r3, #2
 8006098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a30      	ldr	r2, [pc, #192]	@ (8006168 <TIM_OC1_SetConfig+0x11c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <TIM_OC1_SetConfig+0x88>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a2f      	ldr	r2, [pc, #188]	@ (800616c <TIM_OC1_SetConfig+0x120>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00f      	beq.n	80060d4 <TIM_OC1_SetConfig+0x88>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006170 <TIM_OC1_SetConfig+0x124>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00b      	beq.n	80060d4 <TIM_OC1_SetConfig+0x88>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a2d      	ldr	r2, [pc, #180]	@ (8006174 <TIM_OC1_SetConfig+0x128>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d007      	beq.n	80060d4 <TIM_OC1_SetConfig+0x88>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006178 <TIM_OC1_SetConfig+0x12c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_OC1_SetConfig+0x88>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a2b      	ldr	r2, [pc, #172]	@ (800617c <TIM_OC1_SetConfig+0x130>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d10c      	bne.n	80060ee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f023 0308 	bic.w	r3, r3, #8
 80060da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f023 0304 	bic.w	r3, r3, #4
 80060ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006168 <TIM_OC1_SetConfig+0x11c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d013      	beq.n	800611e <TIM_OC1_SetConfig+0xd2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a1c      	ldr	r2, [pc, #112]	@ (800616c <TIM_OC1_SetConfig+0x120>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00f      	beq.n	800611e <TIM_OC1_SetConfig+0xd2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a1b      	ldr	r2, [pc, #108]	@ (8006170 <TIM_OC1_SetConfig+0x124>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00b      	beq.n	800611e <TIM_OC1_SetConfig+0xd2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a1a      	ldr	r2, [pc, #104]	@ (8006174 <TIM_OC1_SetConfig+0x128>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d007      	beq.n	800611e <TIM_OC1_SetConfig+0xd2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a19      	ldr	r2, [pc, #100]	@ (8006178 <TIM_OC1_SetConfig+0x12c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d003      	beq.n	800611e <TIM_OC1_SetConfig+0xd2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a18      	ldr	r2, [pc, #96]	@ (800617c <TIM_OC1_SetConfig+0x130>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d111      	bne.n	8006142 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800612c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	621a      	str	r2, [r3, #32]
}
 800615c:	bf00      	nop
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	40012c00 	.word	0x40012c00
 800616c:	40013400 	.word	0x40013400
 8006170:	40014000 	.word	0x40014000
 8006174:	40014400 	.word	0x40014400
 8006178:	40014800 	.word	0x40014800
 800617c:	40015000 	.word	0x40015000

08006180 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	f023 0210 	bic.w	r2, r3, #16
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f023 0320 	bic.w	r3, r3, #32
 80061ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a2c      	ldr	r2, [pc, #176]	@ (8006290 <TIM_OC2_SetConfig+0x110>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d007      	beq.n	80061f4 <TIM_OC2_SetConfig+0x74>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006294 <TIM_OC2_SetConfig+0x114>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_OC2_SetConfig+0x74>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006298 <TIM_OC2_SetConfig+0x118>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d10d      	bne.n	8006210 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800620e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a1f      	ldr	r2, [pc, #124]	@ (8006290 <TIM_OC2_SetConfig+0x110>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d013      	beq.n	8006240 <TIM_OC2_SetConfig+0xc0>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a1e      	ldr	r2, [pc, #120]	@ (8006294 <TIM_OC2_SetConfig+0x114>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00f      	beq.n	8006240 <TIM_OC2_SetConfig+0xc0>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a1e      	ldr	r2, [pc, #120]	@ (800629c <TIM_OC2_SetConfig+0x11c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00b      	beq.n	8006240 <TIM_OC2_SetConfig+0xc0>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a1d      	ldr	r2, [pc, #116]	@ (80062a0 <TIM_OC2_SetConfig+0x120>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <TIM_OC2_SetConfig+0xc0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a1c      	ldr	r2, [pc, #112]	@ (80062a4 <TIM_OC2_SetConfig+0x124>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_OC2_SetConfig+0xc0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a17      	ldr	r2, [pc, #92]	@ (8006298 <TIM_OC2_SetConfig+0x118>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d113      	bne.n	8006268 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40012c00 	.word	0x40012c00
 8006294:	40013400 	.word	0x40013400
 8006298:	40015000 	.word	0x40015000
 800629c:	40014000 	.word	0x40014000
 80062a0:	40014400 	.word	0x40014400
 80062a4:	40014800 	.word	0x40014800

080062a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a2b      	ldr	r2, [pc, #172]	@ (80063b4 <TIM_OC3_SetConfig+0x10c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d007      	beq.n	800631a <TIM_OC3_SetConfig+0x72>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a2a      	ldr	r2, [pc, #168]	@ (80063b8 <TIM_OC3_SetConfig+0x110>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_OC3_SetConfig+0x72>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a29      	ldr	r2, [pc, #164]	@ (80063bc <TIM_OC3_SetConfig+0x114>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10d      	bne.n	8006336 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a1e      	ldr	r2, [pc, #120]	@ (80063b4 <TIM_OC3_SetConfig+0x10c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <TIM_OC3_SetConfig+0xbe>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a1d      	ldr	r2, [pc, #116]	@ (80063b8 <TIM_OC3_SetConfig+0x110>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00f      	beq.n	8006366 <TIM_OC3_SetConfig+0xbe>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a1d      	ldr	r2, [pc, #116]	@ (80063c0 <TIM_OC3_SetConfig+0x118>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00b      	beq.n	8006366 <TIM_OC3_SetConfig+0xbe>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a1c      	ldr	r2, [pc, #112]	@ (80063c4 <TIM_OC3_SetConfig+0x11c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d007      	beq.n	8006366 <TIM_OC3_SetConfig+0xbe>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a1b      	ldr	r2, [pc, #108]	@ (80063c8 <TIM_OC3_SetConfig+0x120>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_OC3_SetConfig+0xbe>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a16      	ldr	r2, [pc, #88]	@ (80063bc <TIM_OC3_SetConfig+0x114>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d113      	bne.n	800638e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800636c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	621a      	str	r2, [r3, #32]
}
 80063a8:	bf00      	nop
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	40012c00 	.word	0x40012c00
 80063b8:	40013400 	.word	0x40013400
 80063bc:	40015000 	.word	0x40015000
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40014400 	.word	0x40014400
 80063c8:	40014800 	.word	0x40014800

080063cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800641a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	031b      	lsls	r3, r3, #12
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a2c      	ldr	r2, [pc, #176]	@ (80064dc <TIM_OC4_SetConfig+0x110>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d007      	beq.n	8006440 <TIM_OC4_SetConfig+0x74>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a2b      	ldr	r2, [pc, #172]	@ (80064e0 <TIM_OC4_SetConfig+0x114>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d003      	beq.n	8006440 <TIM_OC4_SetConfig+0x74>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a2a      	ldr	r2, [pc, #168]	@ (80064e4 <TIM_OC4_SetConfig+0x118>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d10d      	bne.n	800645c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	031b      	lsls	r3, r3, #12
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800645a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a1f      	ldr	r2, [pc, #124]	@ (80064dc <TIM_OC4_SetConfig+0x110>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <TIM_OC4_SetConfig+0xc0>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a1e      	ldr	r2, [pc, #120]	@ (80064e0 <TIM_OC4_SetConfig+0x114>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00f      	beq.n	800648c <TIM_OC4_SetConfig+0xc0>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a1e      	ldr	r2, [pc, #120]	@ (80064e8 <TIM_OC4_SetConfig+0x11c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00b      	beq.n	800648c <TIM_OC4_SetConfig+0xc0>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a1d      	ldr	r2, [pc, #116]	@ (80064ec <TIM_OC4_SetConfig+0x120>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d007      	beq.n	800648c <TIM_OC4_SetConfig+0xc0>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a1c      	ldr	r2, [pc, #112]	@ (80064f0 <TIM_OC4_SetConfig+0x124>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_OC4_SetConfig+0xc0>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a17      	ldr	r2, [pc, #92]	@ (80064e4 <TIM_OC4_SetConfig+0x118>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d113      	bne.n	80064b4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006492:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800649a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	019b      	lsls	r3, r3, #6
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	019b      	lsls	r3, r3, #6
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	621a      	str	r2, [r3, #32]
}
 80064ce:	bf00      	nop
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	40012c00 	.word	0x40012c00
 80064e0:	40013400 	.word	0x40013400
 80064e4:	40015000 	.word	0x40015000
 80064e8:	40014000 	.word	0x40014000
 80064ec:	40014400 	.word	0x40014400
 80064f0:	40014800 	.word	0x40014800

080064f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006538:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	041b      	lsls	r3, r3, #16
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a19      	ldr	r2, [pc, #100]	@ (80065b0 <TIM_OC5_SetConfig+0xbc>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <TIM_OC5_SetConfig+0x82>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a18      	ldr	r2, [pc, #96]	@ (80065b4 <TIM_OC5_SetConfig+0xc0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00f      	beq.n	8006576 <TIM_OC5_SetConfig+0x82>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a17      	ldr	r2, [pc, #92]	@ (80065b8 <TIM_OC5_SetConfig+0xc4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00b      	beq.n	8006576 <TIM_OC5_SetConfig+0x82>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a16      	ldr	r2, [pc, #88]	@ (80065bc <TIM_OC5_SetConfig+0xc8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d007      	beq.n	8006576 <TIM_OC5_SetConfig+0x82>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a15      	ldr	r2, [pc, #84]	@ (80065c0 <TIM_OC5_SetConfig+0xcc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d003      	beq.n	8006576 <TIM_OC5_SetConfig+0x82>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a14      	ldr	r2, [pc, #80]	@ (80065c4 <TIM_OC5_SetConfig+0xd0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d109      	bne.n	800658a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800657c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	621a      	str	r2, [r3, #32]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	40012c00 	.word	0x40012c00
 80065b4:	40013400 	.word	0x40013400
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40014400 	.word	0x40014400
 80065c0:	40014800 	.word	0x40014800
 80065c4:	40015000 	.word	0x40015000

080065c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800660e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	051b      	lsls	r3, r3, #20
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a1a      	ldr	r2, [pc, #104]	@ (8006688 <TIM_OC6_SetConfig+0xc0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <TIM_OC6_SetConfig+0x84>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a19      	ldr	r2, [pc, #100]	@ (800668c <TIM_OC6_SetConfig+0xc4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00f      	beq.n	800664c <TIM_OC6_SetConfig+0x84>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a18      	ldr	r2, [pc, #96]	@ (8006690 <TIM_OC6_SetConfig+0xc8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00b      	beq.n	800664c <TIM_OC6_SetConfig+0x84>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a17      	ldr	r2, [pc, #92]	@ (8006694 <TIM_OC6_SetConfig+0xcc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d007      	beq.n	800664c <TIM_OC6_SetConfig+0x84>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a16      	ldr	r2, [pc, #88]	@ (8006698 <TIM_OC6_SetConfig+0xd0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_OC6_SetConfig+0x84>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a15      	ldr	r2, [pc, #84]	@ (800669c <TIM_OC6_SetConfig+0xd4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d109      	bne.n	8006660 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006652:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	029b      	lsls	r3, r3, #10
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	40012c00 	.word	0x40012c00
 800668c:	40013400 	.word	0x40013400
 8006690:	40014000 	.word	0x40014000
 8006694:	40014400 	.word	0x40014400
 8006698:	40014800 	.word	0x40014800
 800669c:	40015000 	.word	0x40015000

080066a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f023 0201 	bic.w	r2, r3, #1
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f023 030a 	bic.w	r3, r3, #10
 80066dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066fe:	b480      	push	{r7}
 8006700:	b087      	sub	sp, #28
 8006702:	af00      	add	r7, sp, #0
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f023 0210 	bic.w	r2, r3, #16
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	031b      	lsls	r3, r3, #12
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800673a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800675e:	b480      	push	{r7}
 8006760:	b085      	sub	sp, #20
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	f043 0307 	orr.w	r3, r3, #7
 8006784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	609a      	str	r2, [r3, #8]
}
 800678c:	bf00      	nop
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	021a      	lsls	r2, r3, #8
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	431a      	orrs	r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4313      	orrs	r3, r2
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	609a      	str	r2, [r3, #8]
}
 80067cc:	bf00      	nop
 80067ce:	371c      	adds	r7, #28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	2201      	movs	r2, #1
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a1a      	ldr	r2, [r3, #32]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	43db      	mvns	r3, r3
 80067fa:	401a      	ands	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a1a      	ldr	r2, [r3, #32]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f003 031f 	and.w	r3, r3, #31
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	fa01 f303 	lsl.w	r3, r1, r3
 8006810:	431a      	orrs	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006838:	2302      	movs	r3, #2
 800683a:	e074      	b.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a34      	ldr	r2, [pc, #208]	@ (8006934 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a33      	ldr	r2, [pc, #204]	@ (8006938 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a31      	ldr	r2, [pc, #196]	@ (800693c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d108      	bne.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006880:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a21      	ldr	r2, [pc, #132]	@ (8006934 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d022      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068bc:	d01d      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d018      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d013      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006948 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00e      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a15      	ldr	r2, [pc, #84]	@ (8006938 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d009      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a18      	ldr	r2, [pc, #96]	@ (800694c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d004      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a11      	ldr	r2, [pc, #68]	@ (800693c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d10c      	bne.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	4313      	orrs	r3, r2
 800690a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40012c00 	.word	0x40012c00
 8006938:	40013400 	.word	0x40013400
 800693c:	40015000 	.word	0x40015000
 8006940:	40000400 	.word	0x40000400
 8006944:	40000800 	.word	0x40000800
 8006948:	40000c00 	.word	0x40000c00
 800694c:	40014000 	.word	0x40014000

08006950 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006968:	2302      	movs	r3, #2
 800696a:	e078      	b.n	8006a5e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	041b      	lsls	r3, r3, #16
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a6c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1b      	ldr	r2, [pc, #108]	@ (8006a70 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a19      	ldr	r2, [pc, #100]	@ (8006a74 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d11c      	bne.n	8006a4c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1c:	051b      	lsls	r3, r3, #20
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400
 8006a74:	40015000 	.word	0x40015000

08006a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e042      	b.n	8006b9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7fa fb61 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2224      	movs	r2, #36	@ 0x24
 8006b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fe68 	bl	8007824 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fb69 	bl	800722c <UART_SetConfig>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e01b      	b.n	8006b9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fee7 	bl	8007968 <UART_CheckIdleState>
 8006b9a:	4603      	mov	r3, r0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b0ba      	sub	sp, #232	@ 0xe8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006bce:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d11b      	bne.n	8006c18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d015      	beq.n	8006c18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d105      	bne.n	8006c04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 82e3 	beq.w	80071d4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
      }
      return;
 8006c16:	e2dd      	b.n	80071d4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8123 	beq.w	8006e68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c26:	4b8d      	ldr	r3, [pc, #564]	@ (8006e5c <HAL_UART_IRQHandler+0x2b8>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006c32:	4b8b      	ldr	r3, [pc, #556]	@ (8006e60 <HAL_UART_IRQHandler+0x2bc>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 8116 	beq.w	8006e68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d011      	beq.n	8006c6c <HAL_UART_IRQHandler+0xc8>
 8006c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00b      	beq.n	8006c6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c62:	f043 0201 	orr.w	r2, r3, #1
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d011      	beq.n	8006c9c <HAL_UART_IRQHandler+0xf8>
 8006c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c92:	f043 0204 	orr.w	r2, r3, #4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d011      	beq.n	8006ccc <HAL_UART_IRQHandler+0x128>
 8006ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2204      	movs	r2, #4
 8006cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cc2:	f043 0202 	orr.w	r2, r3, #2
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cd0:	f003 0308 	and.w	r3, r3, #8
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d017      	beq.n	8006d08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cdc:	f003 0320 	and.w	r3, r3, #32
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d105      	bne.n	8006cf0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ce4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006ce8:	4b5c      	ldr	r3, [pc, #368]	@ (8006e5c <HAL_UART_IRQHandler+0x2b8>)
 8006cea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00b      	beq.n	8006d08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2208      	movs	r2, #8
 8006cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cfe:	f043 0208 	orr.w	r2, r3, #8
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d012      	beq.n	8006d3a <HAL_UART_IRQHandler+0x196>
 8006d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00c      	beq.n	8006d3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d30:	f043 0220 	orr.w	r2, r3, #32
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 8249 	beq.w	80071d8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d013      	beq.n	8006d7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d105      	bne.n	8006d6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d007      	beq.n	8006d7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8e:	2b40      	cmp	r3, #64	@ 0x40
 8006d90:	d005      	beq.n	8006d9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d054      	beq.n	8006e48 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fef9 	bl	8007b96 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dae:	2b40      	cmp	r3, #64	@ 0x40
 8006db0:	d146      	bne.n	8006e40 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3308      	adds	r3, #8
 8006db8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006dde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006de2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1d9      	bne.n	8006db2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d017      	beq.n	8006e38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e0e:	4a15      	ldr	r2, [pc, #84]	@ (8006e64 <HAL_UART_IRQHandler+0x2c0>)
 8006e10:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fc fd35 	bl	8003888 <HAL_DMA_Abort_IT>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d019      	beq.n	8006e58 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006e32:	4610      	mov	r0, r2
 8006e34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e36:	e00f      	b.n	8006e58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f9e1 	bl	8007200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e3e:	e00b      	b.n	8006e58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f9dd 	bl	8007200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e46:	e007      	b.n	8006e58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f9d9 	bl	8007200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006e56:	e1bf      	b.n	80071d8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e58:	bf00      	nop
    return;
 8006e5a:	e1bd      	b.n	80071d8 <HAL_UART_IRQHandler+0x634>
 8006e5c:	10000001 	.word	0x10000001
 8006e60:	04000120 	.word	0x04000120
 8006e64:	08007c63 	.word	0x08007c63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	f040 8153 	bne.w	8007118 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e76:	f003 0310 	and.w	r3, r3, #16
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 814c 	beq.w	8007118 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e84:	f003 0310 	and.w	r3, r3, #16
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8145 	beq.w	8007118 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2210      	movs	r2, #16
 8006e94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea0:	2b40      	cmp	r3, #64	@ 0x40
 8006ea2:	f040 80bb 	bne.w	800701c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006eb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 818f 	beq.w	80071dc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ec4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	f080 8187 	bcs.w	80071dc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ed4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f040 8087 	bne.w	8006ffa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1da      	bne.n	8006eec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f48:	f023 0301 	bic.w	r3, r3, #1
 8006f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3308      	adds	r3, #8
 8006f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e1      	bne.n	8006f36 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3308      	adds	r3, #8
 8006f78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3308      	adds	r3, #8
 8006f92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f9e:	e841 2300 	strex	r3, r2, [r1]
 8006fa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1e3      	bne.n	8006f72 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fc8:	f023 0310 	bic.w	r3, r3, #16
 8006fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fe0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e4      	bne.n	8006fb8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fc fbee 	bl	80037d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800700c:	b29b      	uxth	r3, r3
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	b29b      	uxth	r3, r3
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f8fd 	bl	8007214 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800701a:	e0df      	b.n	80071dc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007028:	b29b      	uxth	r3, r3
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 80d1 	beq.w	80071e0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800703e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 80cc 	beq.w	80071e0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800705c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	461a      	mov	r2, r3
 8007066:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800706a:	647b      	str	r3, [r7, #68]	@ 0x44
 800706c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007070:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e4      	bne.n	8007048 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3308      	adds	r3, #8
 8007084:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	623b      	str	r3, [r7, #32]
   return(result);
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3308      	adds	r3, #8
 80070a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80070a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80070a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e1      	bne.n	800707e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	60fb      	str	r3, [r7, #12]
   return(result);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0310 	bic.w	r3, r3, #16
 80070e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	69b9      	ldr	r1, [r7, #24]
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	617b      	str	r3, [r7, #20]
   return(result);
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e4      	bne.n	80070ce <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800710a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f87f 	bl	8007214 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007116:	e063      	b.n	80071e0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800711c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00e      	beq.n	8007142 <HAL_UART_IRQHandler+0x59e>
 8007124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007128:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d008      	beq.n	8007142 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007138:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fdd2 	bl	8007ce4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007140:	e051      	b.n	80071e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800714a:	2b00      	cmp	r3, #0
 800714c:	d014      	beq.n	8007178 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800714e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007156:	2b00      	cmp	r3, #0
 8007158:	d105      	bne.n	8007166 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800715a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800715e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d008      	beq.n	8007178 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800716a:	2b00      	cmp	r3, #0
 800716c:	d03a      	beq.n	80071e4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
    }
    return;
 8007176:	e035      	b.n	80071e4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800717c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <HAL_UART_IRQHandler+0x5f4>
 8007184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fd7c 	bl	8007c8e <UART_EndTransmit_IT>
    return;
 8007196:	e026      	b.n	80071e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800719c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d009      	beq.n	80071b8 <HAL_UART_IRQHandler+0x614>
 80071a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fdab 	bl	8007d0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071b6:	e016      	b.n	80071e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80071b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d010      	beq.n	80071e6 <HAL_UART_IRQHandler+0x642>
 80071c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	da0c      	bge.n	80071e6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fd93 	bl	8007cf8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071d2:	e008      	b.n	80071e6 <HAL_UART_IRQHandler+0x642>
      return;
 80071d4:	bf00      	nop
 80071d6:	e006      	b.n	80071e6 <HAL_UART_IRQHandler+0x642>
    return;
 80071d8:	bf00      	nop
 80071da:	e004      	b.n	80071e6 <HAL_UART_IRQHandler+0x642>
      return;
 80071dc:	bf00      	nop
 80071de:	e002      	b.n	80071e6 <HAL_UART_IRQHandler+0x642>
      return;
 80071e0:	bf00      	nop
 80071e2:	e000      	b.n	80071e6 <HAL_UART_IRQHandler+0x642>
    return;
 80071e4:	bf00      	nop
  }
}
 80071e6:	37e8      	adds	r7, #232	@ 0xe8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800722c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007230:	b08c      	sub	sp, #48	@ 0x30
 8007232:	af00      	add	r7, sp, #0
 8007234:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	431a      	orrs	r2, r3
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	431a      	orrs	r2, r3
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	4313      	orrs	r3, r2
 8007252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4baa      	ldr	r3, [pc, #680]	@ (8007504 <UART_SetConfig+0x2d8>)
 800725c:	4013      	ands	r3, r2
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007264:	430b      	orrs	r3, r1
 8007266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a9f      	ldr	r2, [pc, #636]	@ (8007508 <UART_SetConfig+0x2dc>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d004      	beq.n	8007298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007294:	4313      	orrs	r3, r2
 8007296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80072a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ac:	430b      	orrs	r3, r1
 80072ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b6:	f023 010f 	bic.w	r1, r3, #15
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a90      	ldr	r2, [pc, #576]	@ (800750c <UART_SetConfig+0x2e0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d125      	bne.n	800731c <UART_SetConfig+0xf0>
 80072d0:	4b8f      	ldr	r3, [pc, #572]	@ (8007510 <UART_SetConfig+0x2e4>)
 80072d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d81a      	bhi.n	8007314 <UART_SetConfig+0xe8>
 80072de:	a201      	add	r2, pc, #4	@ (adr r2, 80072e4 <UART_SetConfig+0xb8>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	080072f5 	.word	0x080072f5
 80072e8:	08007305 	.word	0x08007305
 80072ec:	080072fd 	.word	0x080072fd
 80072f0:	0800730d 	.word	0x0800730d
 80072f4:	2301      	movs	r3, #1
 80072f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072fa:	e116      	b.n	800752a <UART_SetConfig+0x2fe>
 80072fc:	2302      	movs	r3, #2
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007302:	e112      	b.n	800752a <UART_SetConfig+0x2fe>
 8007304:	2304      	movs	r3, #4
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800730a:	e10e      	b.n	800752a <UART_SetConfig+0x2fe>
 800730c:	2308      	movs	r3, #8
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007312:	e10a      	b.n	800752a <UART_SetConfig+0x2fe>
 8007314:	2310      	movs	r3, #16
 8007316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800731a:	e106      	b.n	800752a <UART_SetConfig+0x2fe>
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a7c      	ldr	r2, [pc, #496]	@ (8007514 <UART_SetConfig+0x2e8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d138      	bne.n	8007398 <UART_SetConfig+0x16c>
 8007326:	4b7a      	ldr	r3, [pc, #488]	@ (8007510 <UART_SetConfig+0x2e4>)
 8007328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732c:	f003 030c 	and.w	r3, r3, #12
 8007330:	2b0c      	cmp	r3, #12
 8007332:	d82d      	bhi.n	8007390 <UART_SetConfig+0x164>
 8007334:	a201      	add	r2, pc, #4	@ (adr r2, 800733c <UART_SetConfig+0x110>)
 8007336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733a:	bf00      	nop
 800733c:	08007371 	.word	0x08007371
 8007340:	08007391 	.word	0x08007391
 8007344:	08007391 	.word	0x08007391
 8007348:	08007391 	.word	0x08007391
 800734c:	08007381 	.word	0x08007381
 8007350:	08007391 	.word	0x08007391
 8007354:	08007391 	.word	0x08007391
 8007358:	08007391 	.word	0x08007391
 800735c:	08007379 	.word	0x08007379
 8007360:	08007391 	.word	0x08007391
 8007364:	08007391 	.word	0x08007391
 8007368:	08007391 	.word	0x08007391
 800736c:	08007389 	.word	0x08007389
 8007370:	2300      	movs	r3, #0
 8007372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007376:	e0d8      	b.n	800752a <UART_SetConfig+0x2fe>
 8007378:	2302      	movs	r3, #2
 800737a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800737e:	e0d4      	b.n	800752a <UART_SetConfig+0x2fe>
 8007380:	2304      	movs	r3, #4
 8007382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007386:	e0d0      	b.n	800752a <UART_SetConfig+0x2fe>
 8007388:	2308      	movs	r3, #8
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800738e:	e0cc      	b.n	800752a <UART_SetConfig+0x2fe>
 8007390:	2310      	movs	r3, #16
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007396:	e0c8      	b.n	800752a <UART_SetConfig+0x2fe>
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a5e      	ldr	r2, [pc, #376]	@ (8007518 <UART_SetConfig+0x2ec>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d125      	bne.n	80073ee <UART_SetConfig+0x1c2>
 80073a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007510 <UART_SetConfig+0x2e4>)
 80073a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80073ac:	2b30      	cmp	r3, #48	@ 0x30
 80073ae:	d016      	beq.n	80073de <UART_SetConfig+0x1b2>
 80073b0:	2b30      	cmp	r3, #48	@ 0x30
 80073b2:	d818      	bhi.n	80073e6 <UART_SetConfig+0x1ba>
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	d00a      	beq.n	80073ce <UART_SetConfig+0x1a2>
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d814      	bhi.n	80073e6 <UART_SetConfig+0x1ba>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <UART_SetConfig+0x19a>
 80073c0:	2b10      	cmp	r3, #16
 80073c2:	d008      	beq.n	80073d6 <UART_SetConfig+0x1aa>
 80073c4:	e00f      	b.n	80073e6 <UART_SetConfig+0x1ba>
 80073c6:	2300      	movs	r3, #0
 80073c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073cc:	e0ad      	b.n	800752a <UART_SetConfig+0x2fe>
 80073ce:	2302      	movs	r3, #2
 80073d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073d4:	e0a9      	b.n	800752a <UART_SetConfig+0x2fe>
 80073d6:	2304      	movs	r3, #4
 80073d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073dc:	e0a5      	b.n	800752a <UART_SetConfig+0x2fe>
 80073de:	2308      	movs	r3, #8
 80073e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e4:	e0a1      	b.n	800752a <UART_SetConfig+0x2fe>
 80073e6:	2310      	movs	r3, #16
 80073e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ec:	e09d      	b.n	800752a <UART_SetConfig+0x2fe>
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a4a      	ldr	r2, [pc, #296]	@ (800751c <UART_SetConfig+0x2f0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d125      	bne.n	8007444 <UART_SetConfig+0x218>
 80073f8:	4b45      	ldr	r3, [pc, #276]	@ (8007510 <UART_SetConfig+0x2e4>)
 80073fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007402:	2bc0      	cmp	r3, #192	@ 0xc0
 8007404:	d016      	beq.n	8007434 <UART_SetConfig+0x208>
 8007406:	2bc0      	cmp	r3, #192	@ 0xc0
 8007408:	d818      	bhi.n	800743c <UART_SetConfig+0x210>
 800740a:	2b80      	cmp	r3, #128	@ 0x80
 800740c:	d00a      	beq.n	8007424 <UART_SetConfig+0x1f8>
 800740e:	2b80      	cmp	r3, #128	@ 0x80
 8007410:	d814      	bhi.n	800743c <UART_SetConfig+0x210>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <UART_SetConfig+0x1f0>
 8007416:	2b40      	cmp	r3, #64	@ 0x40
 8007418:	d008      	beq.n	800742c <UART_SetConfig+0x200>
 800741a:	e00f      	b.n	800743c <UART_SetConfig+0x210>
 800741c:	2300      	movs	r3, #0
 800741e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007422:	e082      	b.n	800752a <UART_SetConfig+0x2fe>
 8007424:	2302      	movs	r3, #2
 8007426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800742a:	e07e      	b.n	800752a <UART_SetConfig+0x2fe>
 800742c:	2304      	movs	r3, #4
 800742e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007432:	e07a      	b.n	800752a <UART_SetConfig+0x2fe>
 8007434:	2308      	movs	r3, #8
 8007436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800743a:	e076      	b.n	800752a <UART_SetConfig+0x2fe>
 800743c:	2310      	movs	r3, #16
 800743e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007442:	e072      	b.n	800752a <UART_SetConfig+0x2fe>
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a35      	ldr	r2, [pc, #212]	@ (8007520 <UART_SetConfig+0x2f4>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d12a      	bne.n	80074a4 <UART_SetConfig+0x278>
 800744e:	4b30      	ldr	r3, [pc, #192]	@ (8007510 <UART_SetConfig+0x2e4>)
 8007450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007454:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007458:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800745c:	d01a      	beq.n	8007494 <UART_SetConfig+0x268>
 800745e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007462:	d81b      	bhi.n	800749c <UART_SetConfig+0x270>
 8007464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007468:	d00c      	beq.n	8007484 <UART_SetConfig+0x258>
 800746a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800746e:	d815      	bhi.n	800749c <UART_SetConfig+0x270>
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <UART_SetConfig+0x250>
 8007474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007478:	d008      	beq.n	800748c <UART_SetConfig+0x260>
 800747a:	e00f      	b.n	800749c <UART_SetConfig+0x270>
 800747c:	2300      	movs	r3, #0
 800747e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007482:	e052      	b.n	800752a <UART_SetConfig+0x2fe>
 8007484:	2302      	movs	r3, #2
 8007486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800748a:	e04e      	b.n	800752a <UART_SetConfig+0x2fe>
 800748c:	2304      	movs	r3, #4
 800748e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007492:	e04a      	b.n	800752a <UART_SetConfig+0x2fe>
 8007494:	2308      	movs	r3, #8
 8007496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800749a:	e046      	b.n	800752a <UART_SetConfig+0x2fe>
 800749c:	2310      	movs	r3, #16
 800749e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074a2:	e042      	b.n	800752a <UART_SetConfig+0x2fe>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a17      	ldr	r2, [pc, #92]	@ (8007508 <UART_SetConfig+0x2dc>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d13a      	bne.n	8007524 <UART_SetConfig+0x2f8>
 80074ae:	4b18      	ldr	r3, [pc, #96]	@ (8007510 <UART_SetConfig+0x2e4>)
 80074b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80074b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074bc:	d01a      	beq.n	80074f4 <UART_SetConfig+0x2c8>
 80074be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074c2:	d81b      	bhi.n	80074fc <UART_SetConfig+0x2d0>
 80074c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074c8:	d00c      	beq.n	80074e4 <UART_SetConfig+0x2b8>
 80074ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074ce:	d815      	bhi.n	80074fc <UART_SetConfig+0x2d0>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <UART_SetConfig+0x2b0>
 80074d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074d8:	d008      	beq.n	80074ec <UART_SetConfig+0x2c0>
 80074da:	e00f      	b.n	80074fc <UART_SetConfig+0x2d0>
 80074dc:	2300      	movs	r3, #0
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e2:	e022      	b.n	800752a <UART_SetConfig+0x2fe>
 80074e4:	2302      	movs	r3, #2
 80074e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ea:	e01e      	b.n	800752a <UART_SetConfig+0x2fe>
 80074ec:	2304      	movs	r3, #4
 80074ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074f2:	e01a      	b.n	800752a <UART_SetConfig+0x2fe>
 80074f4:	2308      	movs	r3, #8
 80074f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074fa:	e016      	b.n	800752a <UART_SetConfig+0x2fe>
 80074fc:	2310      	movs	r3, #16
 80074fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007502:	e012      	b.n	800752a <UART_SetConfig+0x2fe>
 8007504:	cfff69f3 	.word	0xcfff69f3
 8007508:	40008000 	.word	0x40008000
 800750c:	40013800 	.word	0x40013800
 8007510:	40021000 	.word	0x40021000
 8007514:	40004400 	.word	0x40004400
 8007518:	40004800 	.word	0x40004800
 800751c:	40004c00 	.word	0x40004c00
 8007520:	40005000 	.word	0x40005000
 8007524:	2310      	movs	r3, #16
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4aae      	ldr	r2, [pc, #696]	@ (80077e8 <UART_SetConfig+0x5bc>)
 8007530:	4293      	cmp	r3, r2
 8007532:	f040 8097 	bne.w	8007664 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007536:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800753a:	2b08      	cmp	r3, #8
 800753c:	d823      	bhi.n	8007586 <UART_SetConfig+0x35a>
 800753e:	a201      	add	r2, pc, #4	@ (adr r2, 8007544 <UART_SetConfig+0x318>)
 8007540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007544:	08007569 	.word	0x08007569
 8007548:	08007587 	.word	0x08007587
 800754c:	08007571 	.word	0x08007571
 8007550:	08007587 	.word	0x08007587
 8007554:	08007577 	.word	0x08007577
 8007558:	08007587 	.word	0x08007587
 800755c:	08007587 	.word	0x08007587
 8007560:	08007587 	.word	0x08007587
 8007564:	0800757f 	.word	0x0800757f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007568:	f7fd fa72 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 800756c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800756e:	e010      	b.n	8007592 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007570:	4b9e      	ldr	r3, [pc, #632]	@ (80077ec <UART_SetConfig+0x5c0>)
 8007572:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007574:	e00d      	b.n	8007592 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007576:	f7fd f9fd 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 800757a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800757c:	e009      	b.n	8007592 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800757e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007584:	e005      	b.n	8007592 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007590:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 8130 	beq.w	80077fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759e:	4a94      	ldr	r2, [pc, #592]	@ (80077f0 <UART_SetConfig+0x5c4>)
 80075a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075a4:	461a      	mov	r2, r3
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	4613      	mov	r3, r2
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	4413      	add	r3, r2
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d305      	bcc.n	80075ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d903      	bls.n	80075d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075d0:	e113      	b.n	80077fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	2200      	movs	r2, #0
 80075d6:	60bb      	str	r3, [r7, #8]
 80075d8:	60fa      	str	r2, [r7, #12]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075de:	4a84      	ldr	r2, [pc, #528]	@ (80077f0 <UART_SetConfig+0x5c4>)
 80075e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2200      	movs	r2, #0
 80075e8:	603b      	str	r3, [r7, #0]
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075f4:	f7f8 fe10 	bl	8000218 <__aeabi_uldivmod>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4610      	mov	r0, r2
 80075fe:	4619      	mov	r1, r3
 8007600:	f04f 0200 	mov.w	r2, #0
 8007604:	f04f 0300 	mov.w	r3, #0
 8007608:	020b      	lsls	r3, r1, #8
 800760a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800760e:	0202      	lsls	r2, r0, #8
 8007610:	6979      	ldr	r1, [r7, #20]
 8007612:	6849      	ldr	r1, [r1, #4]
 8007614:	0849      	lsrs	r1, r1, #1
 8007616:	2000      	movs	r0, #0
 8007618:	460c      	mov	r4, r1
 800761a:	4605      	mov	r5, r0
 800761c:	eb12 0804 	adds.w	r8, r2, r4
 8007620:	eb43 0905 	adc.w	r9, r3, r5
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	469a      	mov	sl, r3
 800762c:	4693      	mov	fp, r2
 800762e:	4652      	mov	r2, sl
 8007630:	465b      	mov	r3, fp
 8007632:	4640      	mov	r0, r8
 8007634:	4649      	mov	r1, r9
 8007636:	f7f8 fdef 	bl	8000218 <__aeabi_uldivmod>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	4613      	mov	r3, r2
 8007640:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007648:	d308      	bcc.n	800765c <UART_SetConfig+0x430>
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007650:	d204      	bcs.n	800765c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6a3a      	ldr	r2, [r7, #32]
 8007658:	60da      	str	r2, [r3, #12]
 800765a:	e0ce      	b.n	80077fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007662:	e0ca      	b.n	80077fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800766c:	d166      	bne.n	800773c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800766e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007672:	2b08      	cmp	r3, #8
 8007674:	d827      	bhi.n	80076c6 <UART_SetConfig+0x49a>
 8007676:	a201      	add	r2, pc, #4	@ (adr r2, 800767c <UART_SetConfig+0x450>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	080076a1 	.word	0x080076a1
 8007680:	080076a9 	.word	0x080076a9
 8007684:	080076b1 	.word	0x080076b1
 8007688:	080076c7 	.word	0x080076c7
 800768c:	080076b7 	.word	0x080076b7
 8007690:	080076c7 	.word	0x080076c7
 8007694:	080076c7 	.word	0x080076c7
 8007698:	080076c7 	.word	0x080076c7
 800769c:	080076bf 	.word	0x080076bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076a0:	f7fd f9d6 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 80076a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076a6:	e014      	b.n	80076d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076a8:	f7fd f9e8 	bl	8004a7c <HAL_RCC_GetPCLK2Freq>
 80076ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076ae:	e010      	b.n	80076d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076b0:	4b4e      	ldr	r3, [pc, #312]	@ (80077ec <UART_SetConfig+0x5c0>)
 80076b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076b4:	e00d      	b.n	80076d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076b6:	f7fd f95d 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 80076ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076bc:	e009      	b.n	80076d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076c4:	e005      	b.n	80076d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 8090 	beq.w	80077fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076de:	4a44      	ldr	r2, [pc, #272]	@ (80077f0 <UART_SetConfig+0x5c4>)
 80076e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076e4:	461a      	mov	r2, r3
 80076e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ec:	005a      	lsls	r2, r3, #1
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	085b      	lsrs	r3, r3, #1
 80076f4:	441a      	add	r2, r3
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80076fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	2b0f      	cmp	r3, #15
 8007704:	d916      	bls.n	8007734 <UART_SetConfig+0x508>
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800770c:	d212      	bcs.n	8007734 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	b29b      	uxth	r3, r3
 8007712:	f023 030f 	bic.w	r3, r3, #15
 8007716:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	b29b      	uxth	r3, r3
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	b29a      	uxth	r2, r3
 8007724:	8bfb      	ldrh	r3, [r7, #30]
 8007726:	4313      	orrs	r3, r2
 8007728:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	8bfa      	ldrh	r2, [r7, #30]
 8007730:	60da      	str	r2, [r3, #12]
 8007732:	e062      	b.n	80077fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800773a:	e05e      	b.n	80077fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800773c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007740:	2b08      	cmp	r3, #8
 8007742:	d828      	bhi.n	8007796 <UART_SetConfig+0x56a>
 8007744:	a201      	add	r2, pc, #4	@ (adr r2, 800774c <UART_SetConfig+0x520>)
 8007746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774a:	bf00      	nop
 800774c:	08007771 	.word	0x08007771
 8007750:	08007779 	.word	0x08007779
 8007754:	08007781 	.word	0x08007781
 8007758:	08007797 	.word	0x08007797
 800775c:	08007787 	.word	0x08007787
 8007760:	08007797 	.word	0x08007797
 8007764:	08007797 	.word	0x08007797
 8007768:	08007797 	.word	0x08007797
 800776c:	0800778f 	.word	0x0800778f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007770:	f7fd f96e 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 8007774:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007776:	e014      	b.n	80077a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007778:	f7fd f980 	bl	8004a7c <HAL_RCC_GetPCLK2Freq>
 800777c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800777e:	e010      	b.n	80077a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007780:	4b1a      	ldr	r3, [pc, #104]	@ (80077ec <UART_SetConfig+0x5c0>)
 8007782:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007784:	e00d      	b.n	80077a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007786:	f7fd f8f5 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 800778a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800778c:	e009      	b.n	80077a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800778e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007792:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007794:	e005      	b.n	80077a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077a0:	bf00      	nop
    }

    if (pclk != 0U)
 80077a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d028      	beq.n	80077fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ac:	4a10      	ldr	r2, [pc, #64]	@ (80077f0 <UART_SetConfig+0x5c4>)
 80077ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	441a      	add	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	2b0f      	cmp	r3, #15
 80077d0:	d910      	bls.n	80077f4 <UART_SetConfig+0x5c8>
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d8:	d20c      	bcs.n	80077f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	b29a      	uxth	r2, r3
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60da      	str	r2, [r3, #12]
 80077e4:	e009      	b.n	80077fa <UART_SetConfig+0x5ce>
 80077e6:	bf00      	nop
 80077e8:	40008000 	.word	0x40008000
 80077ec:	00f42400 	.word	0x00f42400
 80077f0:	0800801c 	.word	0x0800801c
      }
      else
      {
        ret = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2201      	movs	r2, #1
 8007806:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2200      	movs	r2, #0
 800780e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	2200      	movs	r2, #0
 8007814:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007816:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800781a:	4618      	mov	r0, r3
 800781c:	3730      	adds	r7, #48	@ 0x30
 800781e:	46bd      	mov	sp, r7
 8007820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00a      	beq.n	800784e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00a      	beq.n	8007892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b8:	f003 0310 	and.w	r3, r3, #16
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078da:	f003 0320 	and.w	r3, r3, #32
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007900:	2b00      	cmp	r3, #0
 8007902:	d01a      	beq.n	800793a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800791e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007922:	d10a      	bne.n	800793a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	605a      	str	r2, [r3, #4]
  }
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b098      	sub	sp, #96	@ 0x60
 800796c:	af02      	add	r7, sp, #8
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007978:	f7f9 fecc 	bl	8001714 <HAL_GetTick>
 800797c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b08      	cmp	r3, #8
 800798a:	d12f      	bne.n	80079ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800798c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007994:	2200      	movs	r2, #0
 8007996:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f88e 	bl	8007abc <UART_WaitOnFlagUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d022      	beq.n	80079ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80079c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e6      	bne.n	80079a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2220      	movs	r2, #32
 80079dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e063      	b.n	8007ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d149      	bne.n	8007a8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a02:	2200      	movs	r2, #0
 8007a04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f857 	bl	8007abc <UART_WaitOnFlagUntilTimeout>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d03c      	beq.n	8007a8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	623b      	str	r3, [r7, #32]
   return(result);
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a3a:	e841 2300 	strex	r3, r2, [r1]
 8007a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e6      	bne.n	8007a14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f023 0301 	bic.w	r3, r3, #1
 8007a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3308      	adds	r3, #8
 8007a64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a66:	61fa      	str	r2, [r7, #28]
 8007a68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	69b9      	ldr	r1, [r7, #24]
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	617b      	str	r3, [r7, #20]
   return(result);
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e5      	bne.n	8007a46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e012      	b.n	8007ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3758      	adds	r7, #88	@ 0x58
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007acc:	e04f      	b.n	8007b6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad4:	d04b      	beq.n	8007b6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ad6:	f7f9 fe1d 	bl	8001714 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d302      	bcc.n	8007aec <UART_WaitOnFlagUntilTimeout+0x30>
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e04e      	b.n	8007b8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0304 	and.w	r3, r3, #4
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d037      	beq.n	8007b6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b80      	cmp	r3, #128	@ 0x80
 8007b02:	d034      	beq.n	8007b6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b40      	cmp	r3, #64	@ 0x40
 8007b08:	d031      	beq.n	8007b6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	f003 0308 	and.w	r3, r3, #8
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d110      	bne.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2208      	movs	r2, #8
 8007b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 f838 	bl	8007b96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2208      	movs	r2, #8
 8007b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e029      	b.n	8007b8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b48:	d111      	bne.n	8007b6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 f81e 	bl	8007b96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e00f      	b.n	8007b8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69da      	ldr	r2, [r3, #28]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	4013      	ands	r3, r2
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	bf0c      	ite	eq
 8007b7e:	2301      	moveq	r3, #1
 8007b80:	2300      	movne	r3, #0
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	461a      	mov	r2, r3
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d0a0      	beq.n	8007ace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b095      	sub	sp, #84	@ 0x54
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e6      	bne.n	8007b9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007be6:	f023 0301 	bic.w	r3, r3, #1
 8007bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e3      	bne.n	8007bd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d118      	bne.n	8007c42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	f023 0310 	bic.w	r3, r3, #16
 8007c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c2e:	61bb      	str	r3, [r7, #24]
 8007c30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	6979      	ldr	r1, [r7, #20]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e6      	bne.n	8007c10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c56:	bf00      	nop
 8007c58:	3754      	adds	r7, #84	@ 0x54
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff fabd 	bl	8007200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c86:	bf00      	nop
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b088      	sub	sp, #32
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007caa:	61fb      	str	r3, [r7, #28]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6979      	ldr	r1, [r7, #20]
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e6      	bne.n	8007c96 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff fa88 	bl	80071ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cdc:	bf00      	nop
 8007cde:	3720      	adds	r7, #32
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d101      	bne.n	8007d36 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d32:	2302      	movs	r3, #2
 8007d34:	e027      	b.n	8007d86 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2224      	movs	r2, #36	@ 0x24
 8007d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0201 	bic.w	r2, r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2220      	movs	r2, #32
 8007d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d101      	bne.n	8007daa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007da6:	2302      	movs	r3, #2
 8007da8:	e02d      	b.n	8007e06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2224      	movs	r2, #36	@ 0x24
 8007db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0201 	bic.w	r2, r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f850 	bl	8007e8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e22:	2302      	movs	r3, #2
 8007e24:	e02d      	b.n	8007e82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2224      	movs	r2, #36	@ 0x24
 8007e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0201 	bic.w	r2, r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f812 	bl	8007e8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d108      	bne.n	8007eae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007eac:	e031      	b.n	8007f12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007eae:	2308      	movs	r3, #8
 8007eb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007eb2:	2308      	movs	r3, #8
 8007eb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	0e5b      	lsrs	r3, r3, #25
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	0f5b      	lsrs	r3, r3, #29
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	7b3a      	ldrb	r2, [r7, #12]
 8007eda:	4911      	ldr	r1, [pc, #68]	@ (8007f20 <UARTEx_SetNbDataToProcess+0x94>)
 8007edc:	5c8a      	ldrb	r2, [r1, r2]
 8007ede:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ee2:	7b3a      	ldrb	r2, [r7, #12]
 8007ee4:	490f      	ldr	r1, [pc, #60]	@ (8007f24 <UARTEx_SetNbDataToProcess+0x98>)
 8007ee6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ee8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	7b7a      	ldrb	r2, [r7, #13]
 8007ef8:	4909      	ldr	r1, [pc, #36]	@ (8007f20 <UARTEx_SetNbDataToProcess+0x94>)
 8007efa:	5c8a      	ldrb	r2, [r1, r2]
 8007efc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f00:	7b7a      	ldrb	r2, [r7, #13]
 8007f02:	4908      	ldr	r1, [pc, #32]	@ (8007f24 <UARTEx_SetNbDataToProcess+0x98>)
 8007f04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f06:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007f12:	bf00      	nop
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	08008034 	.word	0x08008034
 8007f24:	0800803c 	.word	0x0800803c

08007f28 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	ed93 7a06 	vldr	s14, [r3, #24]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	edd3 7a07 	vldr	s15, [r3, #28]
 8007f3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	edd3 7a08 	vldr	s15, [r3, #32]
 8007f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	edd3 7a06 	vldr	s15, [r3, #24]
 8007f58:	eeb1 7a67 	vneg.f32	s14, s15
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	edd3 7a08 	vldr	s15, [r3, #32]
 8007f62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a1a      	ldr	r2, [r3, #32]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d006      	beq.n	8007f8c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	330c      	adds	r3, #12
 8007f82:	220c      	movs	r2, #12
 8007f84:	2100      	movs	r1, #0
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 f804 	bl	8007f94 <memset>
  }

}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <memset>:
 8007f94:	4402      	add	r2, r0
 8007f96:	4603      	mov	r3, r0
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d100      	bne.n	8007f9e <memset+0xa>
 8007f9c:	4770      	bx	lr
 8007f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007fa2:	e7f9      	b.n	8007f98 <memset+0x4>

08007fa4 <__libc_init_array>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	4d0d      	ldr	r5, [pc, #52]	@ (8007fdc <__libc_init_array+0x38>)
 8007fa8:	4c0d      	ldr	r4, [pc, #52]	@ (8007fe0 <__libc_init_array+0x3c>)
 8007faa:	1b64      	subs	r4, r4, r5
 8007fac:	10a4      	asrs	r4, r4, #2
 8007fae:	2600      	movs	r6, #0
 8007fb0:	42a6      	cmp	r6, r4
 8007fb2:	d109      	bne.n	8007fc8 <__libc_init_array+0x24>
 8007fb4:	4d0b      	ldr	r5, [pc, #44]	@ (8007fe4 <__libc_init_array+0x40>)
 8007fb6:	4c0c      	ldr	r4, [pc, #48]	@ (8007fe8 <__libc_init_array+0x44>)
 8007fb8:	f000 f818 	bl	8007fec <_init>
 8007fbc:	1b64      	subs	r4, r4, r5
 8007fbe:	10a4      	asrs	r4, r4, #2
 8007fc0:	2600      	movs	r6, #0
 8007fc2:	42a6      	cmp	r6, r4
 8007fc4:	d105      	bne.n	8007fd2 <__libc_init_array+0x2e>
 8007fc6:	bd70      	pop	{r4, r5, r6, pc}
 8007fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fcc:	4798      	blx	r3
 8007fce:	3601      	adds	r6, #1
 8007fd0:	e7ee      	b.n	8007fb0 <__libc_init_array+0xc>
 8007fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd6:	4798      	blx	r3
 8007fd8:	3601      	adds	r6, #1
 8007fda:	e7f2      	b.n	8007fc2 <__libc_init_array+0x1e>
 8007fdc:	0800804c 	.word	0x0800804c
 8007fe0:	0800804c 	.word	0x0800804c
 8007fe4:	0800804c 	.word	0x0800804c
 8007fe8:	08008050 	.word	0x08008050

08007fec <_init>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	bf00      	nop
 8007ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff2:	bc08      	pop	{r3}
 8007ff4:	469e      	mov	lr, r3
 8007ff6:	4770      	bx	lr

08007ff8 <_fini>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	bf00      	nop
 8007ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffe:	bc08      	pop	{r3}
 8008000:	469e      	mov	lr, r3
 8008002:	4770      	bx	lr
