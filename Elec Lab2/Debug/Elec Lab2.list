
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009580  08009580  0000a580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c0  080095c0  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  080095c0  080095c0  0000a5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095c8  080095c8  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c8  080095c8  0000a5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095cc  080095cc  0000a5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080095d0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000010  080095e0  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  080095e0  0000b36c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189ae  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc5  00000000  00000000  000239ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  000266b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001084  00000000  00000000  00027bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fae  00000000  00000000  00028c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b36  00000000  00000000  00051c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011479f  00000000  00000000  0006a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017eedf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b90  00000000  00000000  0017ef24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00184ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009568 	.word	0x08009568

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08009568 	.word	0x08009568

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 fa9a 	bl	8001a46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f9f5 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fd71 	bl	8000ffc <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fd45 	bl	8000fa8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 fac5 	bl	8000aac <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 fa39 	bl	8000998 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 fc15 	bl	8000d54 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052a:	f000 fc61 	bl	8000df0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800052e:	f000 fce5 	bl	8000efc <MX_TIM5_Init>
  MX_TIM2_Init();
 8000532:	f000 fbc1 	bl	8000cb8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000536:	f000 fb03 	bl	8000b40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 2);
 800053a:	2202      	movs	r2, #2
 800053c:	49b1      	ldr	r1, [pc, #708]	@ (8000804 <main+0x2fc>)
 800053e:	48b2      	ldr	r0, [pc, #712]	@ (8000808 <main+0x300>)
 8000540:	f001 feee 	bl	8002320 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000544:	48b1      	ldr	r0, [pc, #708]	@ (800080c <main+0x304>)
 8000546:	f004 ff8d 	bl	8005464 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800054a:	48b1      	ldr	r0, [pc, #708]	@ (8000810 <main+0x308>)
 800054c:	f004 ff8a 	bl	8005464 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000550:	48b0      	ldr	r0, [pc, #704]	@ (8000814 <main+0x30c>)
 8000552:	f004 fff7 	bl	8005544 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000556:	48ad      	ldr	r0, [pc, #692]	@ (800080c <main+0x304>)
 8000558:	f004 fff4 	bl	8005544 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800055c:	2100      	movs	r1, #0
 800055e:	48ae      	ldr	r0, [pc, #696]	@ (8000818 <main+0x310>)
 8000560:	f005 f8ca 	bl	80056f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000564:	2100      	movs	r1, #0
 8000566:	48aa      	ldr	r0, [pc, #680]	@ (8000810 <main+0x308>)
 8000568:	f005 f8c6 	bl	80056f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800056c:	2104      	movs	r1, #4
 800056e:	48aa      	ldr	r0, [pc, #680]	@ (8000818 <main+0x310>)
 8000570:	f005 f8c2 	bl	80056f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000574:	2104      	movs	r1, #4
 8000576:	48a6      	ldr	r0, [pc, #664]	@ (8000810 <main+0x308>)
 8000578:	f005 f8be 	bl	80056f8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 800057c:	213c      	movs	r1, #60	@ 0x3c
 800057e:	48a7      	ldr	r0, [pc, #668]	@ (800081c <main+0x314>)
 8000580:	f005 fa72 	bl	8005a68 <HAL_TIM_Encoder_Start>



  PID.Kp =2;
 8000584:	4ba6      	ldr	r3, [pc, #664]	@ (8000820 <main+0x318>)
 8000586:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800058a:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 800058c:	4ba4      	ldr	r3, [pc, #656]	@ (8000820 <main+0x318>)
 800058e:	f04f 0200 	mov.w	r2, #0
 8000592:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000594:	4ba2      	ldr	r3, [pc, #648]	@ (8000820 <main+0x318>)
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  set_pos = 0;
 800059c:	4ba1      	ldr	r3, [pc, #644]	@ (8000824 <main+0x31c>)
 800059e:	f04f 0200 	mov.w	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
  z = 0;
 80005a4:	4ba0      	ldr	r3, [pc, #640]	@ (8000828 <main+0x320>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	801a      	strh	r2, [r3, #0]
  arm_pid_init_f32(&PID, 0);
 80005aa:	2100      	movs	r1, #0
 80005ac:	489c      	ldr	r0, [pc, #624]	@ (8000820 <main+0x318>)
 80005ae:	f008 ff79 	bl	80094a4 <arm_pid_init_f32>
//		  x += ADC_RawRead[(i*2)];
//		  y += ADC_RawRead[(i*2)+1];
//	  }
//
//
	  setADC = ADC_RawRead[1];
 80005b2:	4b94      	ldr	r3, [pc, #592]	@ (8000804 <main+0x2fc>)
 80005b4:	885b      	ldrh	r3, [r3, #2]
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	4b9c      	ldr	r3, [pc, #624]	@ (800082c <main+0x324>)
 80005ba:	801a      	strh	r2, [r3, #0]
//	  }

	 // prev_pos = posADC;


	  if(mode == 0){
 80005bc:	4b9c      	ldr	r3, [pc, #624]	@ (8000830 <main+0x328>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d177      	bne.n	80006b4 <main+0x1ac>
		  pos = x*360/4096;
 80005c4:	4b9b      	ldr	r3, [pc, #620]	@ (8000834 <main+0x32c>)
 80005c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ca:	461a      	mov	r2, r3
 80005cc:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	da01      	bge.n	80005dc <main+0xd4>
 80005d8:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80005dc:	131b      	asrs	r3, r3, #12
 80005de:	ee07 3a90 	vmov	s15, r3
 80005e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e6:	4b94      	ldr	r3, [pc, #592]	@ (8000838 <main+0x330>)
 80005e8:	edc3 7a00 	vstr	s15, [r3]
		  set_pos = setADC*360/4096;
 80005ec:	4b8f      	ldr	r3, [pc, #572]	@ (800082c <main+0x324>)
 80005ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f2:	461a      	mov	r2, r3
 80005f4:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80005f8:	fb02 f303 	mul.w	r3, r2, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da01      	bge.n	8000604 <main+0xfc>
 8000600:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000604:	131b      	asrs	r3, r3, #12
 8000606:	ee07 3a90 	vmov	s15, r3
 800060a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800060e:	4b85      	ldr	r3, [pc, #532]	@ (8000824 <main+0x31c>)
 8000610:	edc3 7a00 	vstr	s15, [r3]
		  PID.Kp = 2;
 8000614:	4b82      	ldr	r3, [pc, #520]	@ (8000820 <main+0x318>)
 8000616:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800061a:	619a      	str	r2, [r3, #24]
		  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/360;
 800061c:	4b81      	ldr	r3, [pc, #516]	@ (8000824 <main+0x31c>)
 800061e:	ed93 7a00 	vldr	s14, [r3]
 8000622:	4b85      	ldr	r3, [pc, #532]	@ (8000838 <main+0x330>)
 8000624:	edd3 7a00 	vldr	s15, [r3]
 8000628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800062c:	4b7c      	ldr	r3, [pc, #496]	@ (8000820 <main+0x318>)
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	ed93 7a00 	vldr	s14, [r3]
 800063a:	edd7 7a04 	vldr	s15, [r7, #16]
 800063e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	edd3 6a01 	vldr	s13, [r3, #4]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	edd3 7a03 	vldr	s15, [r3, #12]
 800064e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000652:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	edd3 6a02 	vldr	s13, [r3, #8]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000674:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	68da      	ldr	r2, [r3, #12]
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800068c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000690:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800083c <main+0x334>
 8000694:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000698:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8000840 <main+0x338>
 800069c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006a0:	4b68      	ldr	r3, [pc, #416]	@ (8000844 <main+0x33c>)
 80006a2:	edc3 7a00 	vstr	s15, [r3]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2120      	movs	r1, #32
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ae:	f003 fe21 	bl	80042f4 <HAL_GPIO_WritePin>
 80006b2:	e099      	b.n	80007e8 <main+0x2e0>
	  }
	  else if(mode == 1){
 80006b4:	4b5e      	ldr	r3, [pc, #376]	@ (8000830 <main+0x328>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d176      	bne.n	80007aa <main+0x2a2>
		  pos = posQEI*360/3072;
 80006bc:	4b62      	ldr	r3, [pc, #392]	@ (8000848 <main+0x340>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80006c4:	fb02 f303 	mul.w	r3, r2, r3
 80006c8:	4a60      	ldr	r2, [pc, #384]	@ (800084c <main+0x344>)
 80006ca:	fb82 1203 	smull	r1, r2, r2, r3
 80006ce:	1252      	asrs	r2, r2, #9
 80006d0:	17db      	asrs	r3, r3, #31
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	ee07 3a90 	vmov	s15, r3
 80006d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006dc:	4b56      	ldr	r3, [pc, #344]	@ (8000838 <main+0x330>)
 80006de:	edc3 7a00 	vstr	s15, [r3]
		  set_pos = setADC*360/4096;
 80006e2:	4b52      	ldr	r3, [pc, #328]	@ (800082c <main+0x324>)
 80006e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e8:	461a      	mov	r2, r3
 80006ea:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80006ee:	fb02 f303 	mul.w	r3, r2, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	da01      	bge.n	80006fa <main+0x1f2>
 80006f6:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80006fa:	131b      	asrs	r3, r3, #12
 80006fc:	ee07 3a90 	vmov	s15, r3
 8000700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000704:	4b47      	ldr	r3, [pc, #284]	@ (8000824 <main+0x31c>)
 8000706:	edc3 7a00 	vstr	s15, [r3]
		  PID.Kp = 2;
 800070a:	4b45      	ldr	r3, [pc, #276]	@ (8000820 <main+0x318>)
 800070c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000710:	619a      	str	r2, [r3, #24]
		  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/360;
 8000712:	4b44      	ldr	r3, [pc, #272]	@ (8000824 <main+0x31c>)
 8000714:	ed93 7a00 	vldr	s14, [r3]
 8000718:	4b47      	ldr	r3, [pc, #284]	@ (8000838 <main+0x330>)
 800071a:	edd3 7a00 	vldr	s15, [r3]
 800071e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000722:	4b3f      	ldr	r3, [pc, #252]	@ (8000820 <main+0x318>)
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	ed93 7a00 	vldr	s14, [r3]
 8000730:	edd7 7a01 	vldr	s15, [r7, #4]
 8000734:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	edd3 6a01 	vldr	s13, [r3, #4]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	edd3 7a03 	vldr	s15, [r3, #12]
 8000744:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000748:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	edd3 7a04 	vldr	s15, [r3, #16]
 8000758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800075c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800076a:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	68da      	ldr	r2, [r3, #12]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	615a      	str	r2, [r3, #20]
    return (out);
 8000782:	edd7 7a00 	vldr	s15, [r7]
 8000786:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800083c <main+0x334>
 800078a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800078e:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8000840 <main+0x338>
 8000792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <main+0x33c>)
 8000798:	edc3 7a00 	vstr	s15, [r3]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a4:	f003 fda6 	bl	80042f4 <HAL_GPIO_WritePin>
 80007a8:	e01e      	b.n	80007e8 <main+0x2e0>
	  }
	  else if(mode == 2){
 80007aa:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <main+0x328>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d11a      	bne.n	80007e8 <main+0x2e0>
		  Vfeedback = (rxBuffer[1]*32676/(4096))*(rxBuffer[2]-2);
 80007b2:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <main+0x348>)
 80007b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007b8:	461a      	mov	r2, r3
 80007ba:	f647 73a4 	movw	r3, #32676	@ 0x7fa4
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da01      	bge.n	80007ca <main+0x2c2>
 80007c6:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80007ca:	131b      	asrs	r3, r3, #12
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <main+0x348>)
 80007d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007d4:	3b02      	subs	r3, #2
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
 80007da:	ee07 3a90 	vmov	s15, r3
 80007de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007e2:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <main+0x33c>)
 80007e4:	edc3 7a00 	vstr	s15, [r3]
//		  }
	  }

////////////// SPEED LIMIT //////////////////////////////////////////////////
	  //ensure smooth speed , maximum speed
	  if(Vfeedback > 32676/20){
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <main+0x33c>)
 80007ea:	edd3 7a00 	vldr	s15, [r3]
 80007ee:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000854 <main+0x34c>
 80007f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	dd2f      	ble.n	800085c <main+0x354>
		  Vfeedback = 32676/20;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <main+0x33c>)
 80007fe:	4a16      	ldr	r2, [pc, #88]	@ (8000858 <main+0x350>)
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	e038      	b.n	8000876 <main+0x36e>
 8000804:	20000324 	.word	0x20000324
 8000808:	2000002c 	.word	0x2000002c
 800080c:	20000224 	.word	0x20000224
 8000810:	20000270 	.word	0x20000270
 8000814:	200001d8 	.word	0x200001d8
 8000818:	2000018c 	.word	0x2000018c
 800081c:	200002bc 	.word	0x200002bc
 8000820:	20000328 	.word	0x20000328
 8000824:	20000310 	.word	0x20000310
 8000828:	2000030a 	.word	0x2000030a
 800082c:	2000034e 	.word	0x2000034e
 8000830:	20000000 	.word	0x20000000
 8000834:	20000308 	.word	0x20000308
 8000838:	2000030c 	.word	0x2000030c
 800083c:	46ff4800 	.word	0x46ff4800
 8000840:	43b40000 	.word	0x43b40000
 8000844:	20000354 	.word	0x20000354
 8000848:	20000314 	.word	0x20000314
 800084c:	2aaaaaab 	.word	0x2aaaaaab
 8000850:	20000358 	.word	0x20000358
 8000854:	44cc2000 	.word	0x44cc2000
 8000858:	44cc2000 	.word	0x44cc2000
	  }
	  else if(Vfeedback < -32676/20){
 800085c:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <main+0x3e0>)
 800085e:	edd3 7a00 	vldr	s15, [r3]
 8000862:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80008ec <main+0x3e4>
 8000866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800086a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086e:	d502      	bpl.n	8000876 <main+0x36e>
		  Vfeedback = -32676/20;
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <main+0x3e0>)
 8000872:	4a1f      	ldr	r2, [pc, #124]	@ (80008f0 <main+0x3e8>)
 8000874:	601a      	str	r2, [r3, #0]
	  }
////////////// PWM //////////////////////////////////////////////////////////
	  if(Vfeedback > 0){
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <main+0x3e0>)
 8000878:	edd3 7a00 	vldr	s15, [r3]
 800087c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000884:	dd08      	ble.n	8000898 <main+0x390>
		  PWM1 = Vfeedback;
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <main+0x3e0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1a      	ldr	r2, [pc, #104]	@ (80008f4 <main+0x3ec>)
 800088c:	6013      	str	r3, [r2, #0]
		  PWM2 = 0;
 800088e:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <main+0x3f0>)
 8000890:	f04f 0200 	mov.w	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	e01c      	b.n	80008d2 <main+0x3ca>
	  }
	  else if(Vfeedback < 0){
 8000898:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <main+0x3e0>)
 800089a:	edd3 7a00 	vldr	s15, [r3]
 800089e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a6:	d50c      	bpl.n	80008c2 <main+0x3ba>
		  PWM1 = 0;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <main+0x3ec>)
 80008aa:	f04f 0200 	mov.w	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
		  PWM2 = Vfeedback * -1;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <main+0x3e0>)
 80008b2:	edd3 7a00 	vldr	s15, [r3]
 80008b6:	eef1 7a67 	vneg.f32	s15, s15
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <main+0x3f0>)
 80008bc:	edc3 7a00 	vstr	s15, [r3]
 80008c0:	e007      	b.n	80008d2 <main+0x3ca>
	  }
	  else{
		  PWM1 = 0;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <main+0x3ec>)
 80008c4:	f04f 0200 	mov.w	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
		  PWM2 = 0;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <main+0x3f0>)
 80008cc:	f04f 0200 	mov.w	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
	  }
////////////// MOTOR1 or MOTOR2 /////////////////////////////////////////////
	  if(mode == 1){
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <main+0x3f4>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d102      	bne.n	80008e0 <main+0x3d8>
		  DriveF();
 80008da:	f000 fd5f 	bl	800139c <DriveF>
 80008de:	e668      	b.n	80005b2 <main+0xaa>
	  }
	  else{
		  DriveC();
 80008e0:	f000 fd88 	bl	80013f4 <DriveC>
	  setADC = ADC_RawRead[1];
 80008e4:	e665      	b.n	80005b2 <main+0xaa>
 80008e6:	bf00      	nop
 80008e8:	20000354 	.word	0x20000354
 80008ec:	c4cc2000 	.word	0xc4cc2000
 80008f0:	c4cc2000 	.word	0xc4cc2000
 80008f4:	20000318 	.word	0x20000318
 80008f8:	2000031c 	.word	0x2000031c
 80008fc:	20000000 	.word	0x20000000

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	@ 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0318 	add.w	r3, r7, #24
 800090a:	2238      	movs	r2, #56	@ 0x38
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f008 fdfe 	bl	8009510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000922:	2000      	movs	r0, #0
 8000924:	f003 fd16 	bl	8004354 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000932:	2340      	movs	r3, #64	@ 0x40
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093a:	2302      	movs	r3, #2
 800093c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800093e:	2304      	movs	r3, #4
 8000940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000942:	2355      	movs	r3, #85	@ 0x55
 8000944:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000946:	2302      	movs	r3, #2
 8000948:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800094a:	2302      	movs	r3, #2
 800094c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	f107 0318 	add.w	r3, r7, #24
 8000956:	4618      	mov	r0, r3
 8000958:	f003 fdb0 	bl	80044bc <HAL_RCC_OscConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000962:	f000 fd73 	bl	800144c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	230f      	movs	r3, #15
 8000968:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096a:	2303      	movs	r3, #3
 800096c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2104      	movs	r1, #4
 800097e:	4618      	mov	r0, r3
 8000980:	f004 f8ae 	bl	8004ae0 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800098a:	f000 fd5f 	bl	800144c <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	@ 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	@ 0x30
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800099e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2220      	movs	r2, #32
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f008 fdad 	bl	8009510 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b6:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 80009b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009be:	4b38      	ldr	r3, [pc, #224]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 80009c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009c6:	4b36      	ldr	r3, [pc, #216]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009cc:	4b34      	ldr	r3, [pc, #208]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80009d2:	4b33      	ldr	r3, [pc, #204]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009d8:	4b31      	ldr	r3, [pc, #196]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 80009da:	2201      	movs	r2, #1
 80009dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009de:	4b30      	ldr	r3, [pc, #192]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 80009e0:	2204      	movs	r2, #4
 80009e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009e4:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ea:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80009f0:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80009fe:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 8000a00:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8000a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a06:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 8000a08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a0e:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a16:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a1c:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a24:	481e      	ldr	r0, [pc, #120]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 8000a26:	f001 fabf 	bl	8001fa8 <HAL_ADC_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000a30:	f000 fd0c 	bl	800144c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4818      	ldr	r0, [pc, #96]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 8000a40:	f002 fd8c 	bl	800355c <HAL_ADCEx_MultiModeConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a4a:	f000 fcff 	bl	800144c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <MX_ADC1_Init+0x10c>)
 8000a50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a52:	2306      	movs	r3, #6
 8000a54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000a56:	2307      	movs	r3, #7
 8000a58:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a5a:	237f      	movs	r3, #127	@ 0x7f
 8000a5c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 8000a6c:	f001 ffb4 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000a76:	f000 fce9 	bl	800144c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <MX_ADC1_Init+0x110>)
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <MX_ADC1_Init+0x108>)
 8000a88:	f001 ffa6 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000a92:	f000 fcdb 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3730      	adds	r7, #48	@ 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000002c 	.word	0x2000002c
 8000aa4:	04300002 	.word	0x04300002
 8000aa8:	14f00020 	.word	0x14f00020

08000aac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ab0:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ab2:	4a22      	ldr	r2, [pc, #136]	@ (8000b3c <MX_LPUART1_UART_Init+0x90>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ab6:	4b20      	ldr	r3, [pc, #128]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000adc:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000aee:	4812      	ldr	r0, [pc, #72]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000af0:	f006 f9fa 	bl	8006ee8 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 fca7 	bl	800144c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000b02:	f008 fc04 	bl	800930e <HAL_UARTEx_SetTxFifoThreshold>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000b0c:	f000 fc9e 	bl	800144c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000b14:	f008 fc39 	bl	800938a <HAL_UARTEx_SetRxFifoThreshold>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000b1e:	f000 fc95 	bl	800144c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_LPUART1_UART_Init+0x8c>)
 8000b24:	f008 fbba 	bl	800929c <HAL_UARTEx_DisableFifoMode>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000b2e:	f000 fc8d 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000f8 	.word	0x200000f8
 8000b3c:	40008000 	.word	0x40008000

08000b40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09c      	sub	sp, #112	@ 0x70
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b46:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2234      	movs	r2, #52	@ 0x34
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f008 fcc8 	bl	8009510 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b80:	4b4b      	ldr	r3, [pc, #300]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000b82:	4a4c      	ldr	r2, [pc, #304]	@ (8000cb4 <MX_TIM1_Init+0x174>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000b86:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000b88:	22a9      	movs	r2, #169	@ 0xa9
 8000b8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b48      	ldr	r3, [pc, #288]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32675;
 8000b92:	4b47      	ldr	r3, [pc, #284]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000b94:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000b98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9a:	4b45      	ldr	r3, [pc, #276]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ba0:	4b43      	ldr	r3, [pc, #268]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba6:	4b42      	ldr	r3, [pc, #264]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bac:	4840      	ldr	r0, [pc, #256]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000bae:	f004 fc01 	bl	80053b4 <HAL_TIM_Base_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000bb8:	f000 fc48 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bc2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4839      	ldr	r0, [pc, #228]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000bca:	f005 fa3f 	bl	800604c <HAL_TIM_ConfigClockSource>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000bd4:	f000 fc3a 	bl	800144c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bd8:	4835      	ldr	r0, [pc, #212]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000bda:	f004 fd2b 	bl	8005634 <HAL_TIM_PWM_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000be4:	f000 fc32 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bf4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	482d      	ldr	r0, [pc, #180]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000bfc:	f006 f804 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c06:	f000 fc21 	bl	800144c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0a:	2360      	movs	r3, #96	@ 0x60
 8000c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c12:	2300      	movs	r3, #0
 8000c14:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c16:	2300      	movs	r3, #0
 8000c18:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4820      	ldr	r0, [pc, #128]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000c30:	f005 f8f8 	bl	8005e24 <HAL_TIM_PWM_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000c3a:	f000 fc07 	bl	800144c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c42:	2204      	movs	r2, #4
 8000c44:	4619      	mov	r1, r3
 8000c46:	481a      	ldr	r0, [pc, #104]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000c48:	f005 f8ec 	bl	8005e24 <HAL_TIM_PWM_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000c52:	f000 fbfb 	bl	800144c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	4619      	mov	r1, r3
 8000c92:	4807      	ldr	r0, [pc, #28]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000c94:	f006 f84e 	bl	8006d34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000c9e:	f000 fbd5 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ca2:	4803      	ldr	r0, [pc, #12]	@ (8000cb0 <MX_TIM1_Init+0x170>)
 8000ca4:	f000 fdcc 	bl	8001840 <HAL_TIM_MspPostInit>

}
 8000ca8:	bf00      	nop
 8000caa:	3770      	adds	r7, #112	@ 0x70
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000018c 	.word	0x2000018c
 8000cb4:	40012c00 	.word	0x40012c00

08000cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <MX_TIM2_Init+0x98>)
 8000cd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <MX_TIM2_Init+0x98>)
 8000ce0:	22a9      	movs	r2, #169	@ 0xa9
 8000ce2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_TIM2_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000cea:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <MX_TIM2_Init+0x98>)
 8000cec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_TIM2_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_TIM2_Init+0x98>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cfe:	4814      	ldr	r0, [pc, #80]	@ (8000d50 <MX_TIM2_Init+0x98>)
 8000d00:	f004 fb58 	bl	80053b4 <HAL_TIM_Base_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d0a:	f000 fb9f 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	@ (8000d50 <MX_TIM2_Init+0x98>)
 8000d1c:	f005 f996 	bl	800604c <HAL_TIM_ConfigClockSource>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d26:	f000 fb91 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d2a:	2320      	movs	r3, #32
 8000d2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	@ (8000d50 <MX_TIM2_Init+0x98>)
 8000d38:	f005 ff66 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d42:	f000 fb83 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200001d8 	.word	0x200001d8

08000d54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d72:	4b1d      	ldr	r3, [pc, #116]	@ (8000de8 <MX_TIM3_Init+0x94>)
 8000d74:	4a1d      	ldr	r2, [pc, #116]	@ (8000dec <MX_TIM3_Init+0x98>)
 8000d76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <MX_TIM3_Init+0x94>)
 8000d7a:	22a9      	movs	r2, #169	@ 0xa9
 8000d7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <MX_TIM3_Init+0x94>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d84:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <MX_TIM3_Init+0x94>)
 8000d86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <MX_TIM3_Init+0x94>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <MX_TIM3_Init+0x94>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d98:	4813      	ldr	r0, [pc, #76]	@ (8000de8 <MX_TIM3_Init+0x94>)
 8000d9a:	f004 fb0b 	bl	80053b4 <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000da4:	f000 fb52 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <MX_TIM3_Init+0x94>)
 8000db6:	f005 f949 	bl	800604c <HAL_TIM_ConfigClockSource>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000dc0:	f000 fb44 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <MX_TIM3_Init+0x94>)
 8000dd2:	f005 ff19 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ddc:	f000 fb36 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3720      	adds	r7, #32
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000224 	.word	0x20000224
 8000dec:	40000400 	.word	0x40000400

08000df0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08e      	sub	sp, #56	@ 0x38
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e10:	463b      	mov	r3, r7
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e22:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000e24:	4a34      	ldr	r2, [pc, #208]	@ (8000ef8 <MX_TIM4_Init+0x108>)
 8000e26:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000e28:	4b32      	ldr	r3, [pc, #200]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000e2a:	22a9      	movs	r2, #169	@ 0xa9
 8000e2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32675;
 8000e34:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000e36:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000e3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e48:	482a      	ldr	r0, [pc, #168]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000e4a:	f004 fab3 	bl	80053b4 <HAL_TIM_Base_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e54:	f000 fafa 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4823      	ldr	r0, [pc, #140]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000e66:	f005 f8f1 	bl	800604c <HAL_TIM_ConfigClockSource>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e70:	f000 faec 	bl	800144c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e74:	481f      	ldr	r0, [pc, #124]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000e76:	f004 fbdd 	bl	8005634 <HAL_TIM_PWM_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e80:	f000 fae4 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4818      	ldr	r0, [pc, #96]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000e94:	f005 feb8 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e9e:	f000 fad5 	bl	800144c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea2:	2360      	movs	r3, #96	@ 0x60
 8000ea4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000ea6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480e      	ldr	r0, [pc, #56]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000ebc:	f004 ffb2 	bl	8005e24 <HAL_TIM_PWM_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000ec6:	f000 fac1 	bl	800144c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4807      	ldr	r0, [pc, #28]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000ed6:	f004 ffa5 	bl	8005e24 <HAL_TIM_PWM_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8000ee0:	f000 fab4 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ee4:	4803      	ldr	r0, [pc, #12]	@ (8000ef4 <MX_TIM4_Init+0x104>)
 8000ee6:	f000 fcab 	bl	8001840 <HAL_TIM_MspPostInit>

}
 8000eea:	bf00      	nop
 8000eec:	3738      	adds	r7, #56	@ 0x38
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000270 	.word	0x20000270
 8000ef8:	40000800 	.word	0x40000800

08000efc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	@ 0x30
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2224      	movs	r2, #36	@ 0x24
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f008 fb00 	bl	8009510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <MX_TIM5_Init+0xa4>)
 8000f1c:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <MX_TIM5_Init+0xa8>)
 8000f1e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <MX_TIM5_Init+0xa4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <MX_TIM5_Init+0xa4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <MX_TIM5_Init+0xa4>)
 8000f2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f32:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <MX_TIM5_Init+0xa4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <MX_TIM5_Init+0xa4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f40:	2303      	movs	r3, #3
 8000f42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <MX_TIM5_Init+0xa4>)
 8000f6c:	f004 fcd6 	bl	800591c <HAL_TIM_Encoder_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000f76:	f000 fa69 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <MX_TIM5_Init+0xa4>)
 8000f88:	f005 fe3e 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f92:	f000 fa5b 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3730      	adds	r7, #48	@ 0x30
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200002bc 	.word	0x200002bc
 8000fa4:	40000c00 	.word	0x40000c00

08000fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fae:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_DMA_Init+0x50>)
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fb2:	4a11      	ldr	r2, [pc, #68]	@ (8000ff8 <MX_DMA_Init+0x50>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_DMA_Init+0x50>)
 8000fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_DMA_Init+0x50>)
 8000fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fca:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <MX_DMA_Init+0x50>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_DMA_Init+0x50>)
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	200b      	movs	r0, #11
 8000fe4:	f002 fc9d 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fe8:	200b      	movs	r0, #11
 8000fea:	f002 fcb4 	bl	8003956 <HAL_NVIC_EnableIRQ>

}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	4b39      	ldr	r3, [pc, #228]	@ (80010f8 <MX_GPIO_Init+0xfc>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a38      	ldr	r2, [pc, #224]	@ (80010f8 <MX_GPIO_Init+0xfc>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <MX_GPIO_Init+0xfc>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800102a:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <MX_GPIO_Init+0xfc>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	4a32      	ldr	r2, [pc, #200]	@ (80010f8 <MX_GPIO_Init+0xfc>)
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001036:	4b30      	ldr	r3, [pc, #192]	@ (80010f8 <MX_GPIO_Init+0xfc>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <MX_GPIO_Init+0xfc>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	4a2c      	ldr	r2, [pc, #176]	@ (80010f8 <MX_GPIO_Init+0xfc>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104e:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <MX_GPIO_Init+0xfc>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b27      	ldr	r3, [pc, #156]	@ (80010f8 <MX_GPIO_Init+0xfc>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	4a26      	ldr	r2, [pc, #152]	@ (80010f8 <MX_GPIO_Init+0xfc>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001066:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <MX_GPIO_Init+0xfc>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2130      	movs	r1, #48	@ 0x30
 8001076:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107a:	f003 f93b 	bl	80042f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2101      	movs	r1, #1
 8001082:	481e      	ldr	r0, [pc, #120]	@ (80010fc <MX_GPIO_Init+0x100>)
 8001084:	f003 f936 	bl	80042f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001088:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	4818      	ldr	r0, [pc, #96]	@ (8001100 <MX_GPIO_Init+0x104>)
 80010a0:	f002 ffa6 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80010a4:	2330      	movs	r3, #48	@ 0x30
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010be:	f002 ff97 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c2:	2301      	movs	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4808      	ldr	r0, [pc, #32]	@ (80010fc <MX_GPIO_Init+0x100>)
 80010da:	f002 ff89 	bl	8003ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2028      	movs	r0, #40	@ 0x28
 80010e4:	f002 fc1d 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010e8:	2028      	movs	r0, #40	@ 0x28
 80010ea:	f002 fc34 	bl	8003956 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000400 	.word	0x48000400
 8001100:	48000800 	.word	0x48000800

08001104 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ //B1 button
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001114:	d112      	bne.n	800113c <HAL_GPIO_EXTI_Callback+0x38>
        // Blue button interrupt occurred
        // Your code here
    	mode = mode + 1;
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <HAL_GPIO_EXTI_Callback+0x44>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_GPIO_EXTI_Callback+0x44>)
 8001120:	801a      	strh	r2, [r3, #0]
    	mode = mode % 3;
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <HAL_GPIO_EXTI_Callback+0x44>)
 8001124:	881a      	ldrh	r2, [r3, #0]
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <HAL_GPIO_EXTI_Callback+0x48>)
 8001128:	fba3 1302 	umull	r1, r3, r3, r2
 800112c:	0859      	lsrs	r1, r3, #1
 800112e:	460b      	mov	r3, r1
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	440b      	add	r3, r1
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GPIO_EXTI_Callback+0x44>)
 800113a:	801a      	strh	r2, [r3, #0]
    }
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	20000000 	.word	0x20000000
 800114c:	aaaaaaab 	.word	0xaaaaaaab

08001150 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Input reading
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 )
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a7d      	ldr	r2, [pc, #500]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800115c:	4293      	cmp	r3, r2
 800115e:	f040 80f3 	bne.w	8001348 <HAL_TIM_PeriodElapsedCallback+0x1f8>
  {
	  a +=1;
 8001162:	4b7c      	ldr	r3, [pc, #496]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b7a      	ldr	r3, [pc, #488]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800116c:	701a      	strb	r2, [r3, #0]
	  a = a%5;
 800116e:	4b79      	ldr	r3, [pc, #484]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	4b79      	ldr	r3, [pc, #484]	@ (8001358 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001174:	fba3 1302 	umull	r1, r3, r3, r2
 8001178:	0899      	lsrs	r1, r3, #2
 800117a:	460b      	mov	r3, r1
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b73      	ldr	r3, [pc, #460]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001186:	701a      	strb	r2, [r3, #0]
	  if (mode ==2 && a == 0)
 8001188:	4b74      	ldr	r3, [pc, #464]	@ (800135c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d128      	bne.n	80011e2 <HAL_TIM_PeriodElapsedCallback+0x92>
 8001190:	4b70      	ldr	r3, [pc, #448]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d124      	bne.n	80011e2 <HAL_TIM_PeriodElapsedCallback+0x92>
	  {
		  ADCst = (uint8_t)(ADC_RawRead[0] & 0xFF);
 8001198:	4b71      	ldr	r3, [pc, #452]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b71      	ldr	r3, [pc, #452]	@ (8001364 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80011a0:	701a      	strb	r2, [r3, #0]
		  ADCnd = (uint8_t)((ADC_RawRead[0] >> 8) & 0xFF);
 80011a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	4b6e      	ldr	r3, [pc, #440]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80011ae:	701a      	strb	r2, [r3, #0]

		  txBuffer[0] = 69;
 80011b0:	4b6e      	ldr	r3, [pc, #440]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80011b2:	2245      	movs	r2, #69	@ 0x45
 80011b4:	701a      	strb	r2, [r3, #0]
		  txBuffer[1] = ADCst;
 80011b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001364 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	4b6c      	ldr	r3, [pc, #432]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80011bc:	705a      	strb	r2, [r3, #1]
		  txBuffer[2] = ADCnd;
 80011be:	4b6a      	ldr	r3, [pc, #424]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	4b6a      	ldr	r3, [pc, #424]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80011c4:	709a      	strb	r2, [r3, #2]
		  txBuffer[3] = '\n';
 80011c6:	4b69      	ldr	r3, [pc, #420]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80011c8:	220a      	movs	r2, #10
 80011ca:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&hlpuart1, txBuffer , 5);
 80011cc:	2205      	movs	r2, #5
 80011ce:	4967      	ldr	r1, [pc, #412]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80011d0:	4867      	ldr	r0, [pc, #412]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80011d2:	f005 fed9 	bl	8006f88 <HAL_UART_Transmit_IT>
		  HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 5);
 80011d6:	2205      	movs	r2, #5
 80011d8:	4966      	ldr	r1, [pc, #408]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80011da:	4865      	ldr	r0, [pc, #404]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80011dc:	f005 ff68 	bl	80070b0 <HAL_UART_Receive_IT>
  }
//////////////////////////////UART//////////////////////////
  if(htim == &htim3)
  {
  }
}
 80011e0:	e0b2      	b.n	8001348 <HAL_TIM_PeriodElapsedCallback+0x1f8>
	  else if(mode == 1)
 80011e2:	4b5e      	ldr	r3, [pc, #376]	@ (800135c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d145      	bne.n	8001276 <HAL_TIM_PeriodElapsedCallback+0x126>
		  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 80011ea:	4b63      	ldr	r3, [pc, #396]	@ (8001378 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f8:	4b60      	ldr	r3, [pc, #384]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]
		  if(QEIReadRaw > 32678)
 80011fe:	4b5f      	ldr	r3, [pc, #380]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001380 <HAL_TIM_PeriodElapsedCallback+0x230>
 8001208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001210:	dd18      	ble.n	8001244 <HAL_TIM_PeriodElapsedCallback+0xf4>
			  posQEI -= (65536-QEIReadRaw);
 8001212:	4b5c      	ldr	r3, [pc, #368]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121e:	4b57      	ldr	r3, [pc, #348]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001388 <HAL_TIM_PeriodElapsedCallback+0x238>
 8001228:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800122c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001234:	ee17 2a90 	vmov	r2, s15
 8001238:	4b52      	ldr	r3, [pc, #328]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800123a:	601a      	str	r2, [r3, #0]
			  z = 1;
 800123c:	4b53      	ldr	r3, [pc, #332]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800123e:	2201      	movs	r2, #1
 8001240:	801a      	strh	r2, [r3, #0]
 8001242:	e013      	b.n	800126c <HAL_TIM_PeriodElapsedCallback+0x11c>
			  posQEI += QEIReadRaw;
 8001244:	4b4f      	ldr	r3, [pc, #316]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001250:	4b4a      	ldr	r3, [pc, #296]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125e:	ee17 2a90 	vmov	r2, s15
 8001262:	4b48      	ldr	r3, [pc, #288]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001264:	601a      	str	r2, [r3, #0]
			  z = 2;
 8001266:	4b49      	ldr	r3, [pc, #292]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001268:	2202      	movs	r2, #2
 800126a:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COUNTER(&htim5, 0);
 800126c:	4b42      	ldr	r3, [pc, #264]	@ (8001378 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001274:	e068      	b.n	8001348 <HAL_TIM_PeriodElapsedCallback+0x1f8>
	  else if(mode == 0 || mode == 2)
 8001276:	4b39      	ldr	r3, [pc, #228]	@ (800135c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x136>
 800127e:	4b37      	ldr	r3, [pc, #220]	@ (800135c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d160      	bne.n	8001348 <HAL_TIM_PeriodElapsedCallback+0x1f8>
		  posADC = ADC_RawRead[0];
 8001286:	4b36      	ldr	r3, [pc, #216]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	b21a      	sxth	r2, r3
 800128c:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800128e:	801a      	strh	r2, [r3, #0]
		  if(posADC-prev_pos < -2048)
 8001290:	4b3f      	ldr	r3, [pc, #252]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001296:	461a      	mov	r2, r3
 8001298:	4b3e      	ldr	r3, [pc, #248]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 80012a4:	da16      	bge.n	80012d4 <HAL_TIM_PeriodElapsedCallback+0x184>
			  x += (4096+(posADC-prev_pos)) ;
 80012a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80012a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	4b39      	ldr	r3, [pc, #228]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80012b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	4b37      	ldr	r3, [pc, #220]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	4b32      	ldr	r3, [pc, #200]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012d0:	801a      	strh	r2, [r3, #0]
 80012d2:	e034      	b.n	800133e <HAL_TIM_PeriodElapsedCallback+0x1ee>
		  else if(posADC-prev_pos > 2048){ //reverse callback
 80012d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80012d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012e8:	dd16      	ble.n	8001318 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			  x -= (4096-(posADC-prev_pos));
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80012ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b28      	ldr	r3, [pc, #160]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80012f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b29b      	uxth	r3, r3
 800130a:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800130e:	b29b      	uxth	r3, r3
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b21      	ldr	r3, [pc, #132]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001314:	801a      	strh	r2, [r3, #0]
 8001316:	e012      	b.n	800133e <HAL_TIM_PeriodElapsedCallback+0x1ee>
			  x += (posADC-prev_pos);
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800131a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131e:	b29a      	uxth	r2, r3
 8001320:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001326:	b29b      	uxth	r3, r3
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	b29b      	uxth	r3, r3
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800133c:	801a      	strh	r2, [r3, #0]
		  prev_pos = posADC;
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001340:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001346:	801a      	strh	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200001d8 	.word	0x200001d8
 8001354:	20000360 	.word	0x20000360
 8001358:	cccccccd 	.word	0xcccccccd
 800135c:	20000000 	.word	0x20000000
 8001360:	20000324 	.word	0x20000324
 8001364:	20000361 	.word	0x20000361
 8001368:	20000362 	.word	0x20000362
 800136c:	20000364 	.word	0x20000364
 8001370:	200000f8 	.word	0x200000f8
 8001374:	20000358 	.word	0x20000358
 8001378:	200002bc 	.word	0x200002bc
 800137c:	20000320 	.word	0x20000320
 8001380:	46ff4c00 	.word	0x46ff4c00
 8001384:	20000314 	.word	0x20000314
 8001388:	47800000 	.word	0x47800000
 800138c:	2000030a 	.word	0x2000030a
 8001390:	2000034c 	.word	0x2000034c
 8001394:	20000350 	.word	0x20000350
 8001398:	20000308 	.word	0x20000308

0800139c <DriveF>:

void DriveF(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80013a0:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <DriveF+0x48>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2200      	movs	r2, #0
 80013a6:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80013a8:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <DriveF+0x4c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2200      	movs	r2, #0
 80013ae:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM1);
 80013b0:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <DriveF+0x50>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <DriveF+0x48>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013be:	ee17 2a90 	vmov	r2, s15
 80013c2:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <DriveF+0x54>)
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <DriveF+0x4c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d2:	ee17 2a90 	vmov	r2, s15
 80013d6:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000270 	.word	0x20000270
 80013e8:	2000018c 	.word	0x2000018c
 80013ec:	20000318 	.word	0x20000318
 80013f0:	2000031c 	.word	0x2000031c

080013f4 <DriveC>:
void DriveC(void){
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80013f8:	4b10      	ldr	r3, [pc, #64]	@ (800143c <DriveC+0x48>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2200      	movs	r2, #0
 80013fe:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <DriveC+0x4c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2200      	movs	r2, #0
 8001406:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, PWM1);
 8001408:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <DriveC+0x50>)
 800140a:	edd3 7a00 	vldr	s15, [r3]
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <DriveC+0x48>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001416:	ee17 2a90 	vmov	r2, s15
 800141a:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM2);
 800141c:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <DriveC+0x54>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <DriveC+0x4c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800142a:	ee17 2a90 	vmov	r2, s15
 800142e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000270 	.word	0x20000270
 8001440:	2000018c 	.word	0x2000018c
 8001444:	20000318 	.word	0x20000318
 8001448:	2000031c 	.word	0x2000031c

0800144c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <Error_Handler+0x8>

08001458 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <HAL_MspInit+0x44>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001462:	4a0e      	ldr	r2, [pc, #56]	@ (800149c <HAL_MspInit+0x44>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6613      	str	r3, [r2, #96]	@ 0x60
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <HAL_MspInit+0x44>)
 800146c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_MspInit+0x44>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147a:	4a08      	ldr	r2, [pc, #32]	@ (800149c <HAL_MspInit+0x44>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001480:	6593      	str	r3, [r2, #88]	@ 0x58
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_MspInit+0x44>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800148e:	f003 f805 	bl	800449c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0a0      	sub	sp, #128	@ 0x80
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b8:	f107 0318 	add.w	r3, r7, #24
 80014bc:	2254      	movs	r2, #84	@ 0x54
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f008 f825 	bl	8009510 <memset>
  if(hadc->Instance==ADC1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014ce:	f040 8081 	bne.w	80015d4 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 fd18 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80014ee:	f7ff ffad 	bl	800144c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014f2:	4b3a      	ldr	r3, [pc, #232]	@ (80015dc <HAL_ADC_MspInit+0x13c>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	4a39      	ldr	r2, [pc, #228]	@ (80015dc <HAL_ADC_MspInit+0x13c>)
 80014f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fe:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <HAL_ADC_MspInit+0x13c>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <HAL_ADC_MspInit+0x13c>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	4a33      	ldr	r2, [pc, #204]	@ (80015dc <HAL_ADC_MspInit+0x13c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001516:	4b31      	ldr	r3, [pc, #196]	@ (80015dc <HAL_ADC_MspInit+0x13c>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b2e      	ldr	r3, [pc, #184]	@ (80015dc <HAL_ADC_MspInit+0x13c>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	4a2d      	ldr	r2, [pc, #180]	@ (80015dc <HAL_ADC_MspInit+0x13c>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152e:	4b2b      	ldr	r3, [pc, #172]	@ (80015dc <HAL_ADC_MspInit+0x13c>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800153a:	2301      	movs	r3, #1
 800153c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153e:	2303      	movs	r3, #3
 8001540:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001550:	f002 fd4e 	bl	8003ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001554:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001558:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800155a:	2303      	movs	r3, #3
 800155c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001566:	4619      	mov	r1, r3
 8001568:	481d      	ldr	r0, [pc, #116]	@ (80015e0 <HAL_ADC_MspInit+0x140>)
 800156a:	f002 fd41 	bl	8003ff0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800156e:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <HAL_ADC_MspInit+0x144>)
 8001570:	4a1d      	ldr	r2, [pc, #116]	@ (80015e8 <HAL_ADC_MspInit+0x148>)
 8001572:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001574:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_ADC_MspInit+0x144>)
 8001576:	2205      	movs	r2, #5
 8001578:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800157a:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <HAL_ADC_MspInit+0x144>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001580:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <HAL_ADC_MspInit+0x144>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <HAL_ADC_MspInit+0x144>)
 8001588:	2280      	movs	r2, #128	@ 0x80
 800158a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800158c:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_ADC_MspInit+0x144>)
 800158e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001592:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <HAL_ADC_MspInit+0x144>)
 8001596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800159a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <HAL_ADC_MspInit+0x144>)
 800159e:	2220      	movs	r2, #32
 80015a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <HAL_ADC_MspInit+0x144>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015a8:	480e      	ldr	r0, [pc, #56]	@ (80015e4 <HAL_ADC_MspInit+0x144>)
 80015aa:	f002 f9ef 	bl	800398c <HAL_DMA_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_ADC_MspInit+0x118>
    {
      Error_Handler();
 80015b4:	f7ff ff4a 	bl	800144c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <HAL_ADC_MspInit+0x144>)
 80015bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80015be:	4a09      	ldr	r2, [pc, #36]	@ (80015e4 <HAL_ADC_MspInit+0x144>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	2012      	movs	r0, #18
 80015ca:	f002 f9aa 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015ce:	2012      	movs	r0, #18
 80015d0:	f002 f9c1 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	3780      	adds	r7, #128	@ 0x80
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021000 	.word	0x40021000
 80015e0:	48000400 	.word	0x48000400
 80015e4:	20000098 	.word	0x20000098
 80015e8:	40020008 	.word	0x40020008

080015ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b09e      	sub	sp, #120	@ 0x78
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	2254      	movs	r2, #84	@ 0x54
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f007 ff7f 	bl	8009510 <memset>
  if(huart->Instance==LPUART1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a23      	ldr	r2, [pc, #140]	@ (80016a4 <HAL_UART_MspInit+0xb8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d13e      	bne.n	800169a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800161c:	2320      	movs	r3, #32
 800161e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fc75 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001634:	f7ff ff0a 	bl	800144c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <HAL_UART_MspInit+0xbc>)
 800163a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800163c:	4a1a      	ldr	r2, [pc, #104]	@ (80016a8 <HAL_UART_MspInit+0xbc>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <HAL_UART_MspInit+0xbc>)
 8001646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_UART_MspInit+0xbc>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001654:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <HAL_UART_MspInit+0xbc>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_UART_MspInit+0xbc>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001668:	230c      	movs	r3, #12
 800166a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001678:	230c      	movs	r3, #12
 800167a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001680:	4619      	mov	r1, r3
 8001682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001686:	f002 fcb3 	bl	8003ff0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	205b      	movs	r0, #91	@ 0x5b
 8001690:	f002 f947 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001694:	205b      	movs	r0, #91	@ 0x5b
 8001696:	f002 f95e 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3778      	adds	r7, #120	@ 0x78
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40008000 	.word	0x40008000
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a2c      	ldr	r2, [pc, #176]	@ (800176c <HAL_TIM_Base_MspInit+0xc0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d10c      	bne.n	80016d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016be:	4b2c      	ldr	r3, [pc, #176]	@ (8001770 <HAL_TIM_Base_MspInit+0xc4>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001770 <HAL_TIM_Base_MspInit+0xc4>)
 80016c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ca:	4b29      	ldr	r3, [pc, #164]	@ (8001770 <HAL_TIM_Base_MspInit+0xc4>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016d6:	e044      	b.n	8001762 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016e0:	d114      	bne.n	800170c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016e2:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <HAL_TIM_Base_MspInit+0xc4>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	4a22      	ldr	r2, [pc, #136]	@ (8001770 <HAL_TIM_Base_MspInit+0xc4>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <HAL_TIM_Base_MspInit+0xc4>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	201c      	movs	r0, #28
 8001700:	f002 f90f 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001704:	201c      	movs	r0, #28
 8001706:	f002 f926 	bl	8003956 <HAL_NVIC_EnableIRQ>
}
 800170a:	e02a      	b.n	8001762 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a18      	ldr	r2, [pc, #96]	@ (8001774 <HAL_TIM_Base_MspInit+0xc8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d114      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001716:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <HAL_TIM_Base_MspInit+0xc4>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	4a15      	ldr	r2, [pc, #84]	@ (8001770 <HAL_TIM_Base_MspInit+0xc4>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6593      	str	r3, [r2, #88]	@ 0x58
 8001722:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <HAL_TIM_Base_MspInit+0xc4>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	201d      	movs	r0, #29
 8001734:	f002 f8f5 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001738:	201d      	movs	r0, #29
 800173a:	f002 f90c 	bl	8003956 <HAL_NVIC_EnableIRQ>
}
 800173e:	e010      	b.n	8001762 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0c      	ldr	r2, [pc, #48]	@ (8001778 <HAL_TIM_Base_MspInit+0xcc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10b      	bne.n	8001762 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_TIM_Base_MspInit+0xc4>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_TIM_Base_MspInit+0xc4>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6593      	str	r3, [r2, #88]	@ 0x58
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_TIM_Base_MspInit+0xc4>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40012c00 	.word	0x40012c00
 8001770:	40021000 	.word	0x40021000
 8001774:	40000400 	.word	0x40000400
 8001778:	40000800 	.word	0x40000800

0800177c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	@ 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a25      	ldr	r2, [pc, #148]	@ (8001830 <HAL_TIM_Encoder_MspInit+0xb4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d144      	bne.n	8001828 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800179e:	4b25      	ldr	r3, [pc, #148]	@ (8001834 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	4a24      	ldr	r2, [pc, #144]	@ (8001834 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017aa:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001834 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	4a18      	ldr	r2, [pc, #96]	@ (8001834 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017e6:	2304      	movs	r3, #4
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017f6:	2302      	movs	r3, #2
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	480d      	ldr	r0, [pc, #52]	@ (8001838 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001802:	f002 fbf5 	bl	8003ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8001818:	2301      	movs	r3, #1
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	@ (800183c <HAL_TIM_Encoder_MspInit+0xc0>)
 8001824:	f002 fbe4 	bl	8003ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	@ 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40000c00 	.word	0x40000c00
 8001834:	40021000 	.word	0x40021000
 8001838:	48000400 	.word	0x48000400
 800183c:	48000800 	.word	0x48000800

08001840 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a23      	ldr	r2, [pc, #140]	@ (80018ec <HAL_TIM_MspPostInit+0xac>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d11c      	bne.n	800189c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <HAL_TIM_MspPostInit+0xb0>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	4a22      	ldr	r2, [pc, #136]	@ (80018f0 <HAL_TIM_MspPostInit+0xb0>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186e:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <HAL_TIM_MspPostInit+0xb0>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800187a:	2303      	movs	r3, #3
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800188a:	2302      	movs	r3, #2
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4817      	ldr	r0, [pc, #92]	@ (80018f4 <HAL_TIM_MspPostInit+0xb4>)
 8001896:	f002 fbab 	bl	8003ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800189a:	e022      	b.n	80018e2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a15      	ldr	r2, [pc, #84]	@ (80018f8 <HAL_TIM_MspPostInit+0xb8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d11d      	bne.n	80018e2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_TIM_MspPostInit+0xb0>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	4a11      	ldr	r2, [pc, #68]	@ (80018f0 <HAL_TIM_MspPostInit+0xb0>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <HAL_TIM_MspPostInit+0xb0>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80018d0:	230a      	movs	r3, #10
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018de:	f002 fb87 	bl	8003ff0 <HAL_GPIO_Init>
}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	@ 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40012c00 	.word	0x40012c00
 80018f0:	40021000 	.word	0x40021000
 80018f4:	48000800 	.word	0x48000800
 80018f8:	40000800 	.word	0x40000800

080018fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <NMI_Handler+0x4>

08001904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <MemManage_Handler+0x4>

08001914 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <UsageFault_Handler+0x4>

08001924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001952:	f000 f8cb 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <DMA1_Channel1_IRQHandler+0x10>)
 8001962:	f002 f9f6 	bl	8003d52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000098 	.word	0x20000098

08001970 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <ADC1_2_IRQHandler+0x10>)
 8001976:	f000 fda7 	bl	80024c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000002c 	.word	0x2000002c

08001984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <TIM2_IRQHandler+0x10>)
 800198a:	f004 f8fb 	bl	8005b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200001d8 	.word	0x200001d8

08001998 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <TIM3_IRQHandler+0x10>)
 800199e:	f004 f8f1 	bl	8005b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000224 	.word	0x20000224

080019ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019b4:	f002 fcb6 	bl	8004324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <LPUART1_IRQHandler+0x10>)
 80019c2:	f005 fbc1 	bl	8007148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200000f8 	.word	0x200000f8

080019d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <SystemInit+0x20>)
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019da:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <SystemInit+0x20>)
 80019dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f4:	480d      	ldr	r0, [pc, #52]	@ (8001a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019f8:	f7ff ffea 	bl	80019d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019fc:	480c      	ldr	r0, [pc, #48]	@ (8001a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80019fe:	490d      	ldr	r1, [pc, #52]	@ (8001a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a00:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <LoopForever+0xe>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a14:	4c0a      	ldr	r4, [pc, #40]	@ (8001a40 <LoopForever+0x16>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a22:	f007 fd7d 	bl	8009520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a26:	f7fe fd6f 	bl	8000508 <main>

08001a2a <LoopForever>:

LoopForever:
    b LoopForever
 8001a2a:	e7fe      	b.n	8001a2a <LoopForever>
  ldr   r0, =_estack
 8001a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001a38:	080095d0 	.word	0x080095d0
  ldr r2, =_sbss
 8001a3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a40:	2000036c 	.word	0x2000036c

08001a44 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC3_IRQHandler>

08001a46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f001 ff5b 	bl	800390c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a56:	2000      	movs	r0, #0
 8001a58:	f000 f80e 	bl	8001a78 <HAL_InitTick>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	e001      	b.n	8001a6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a68:	f7ff fcf6 	bl	8001458 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a6c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a84:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <HAL_InitTick+0x68>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d022      	beq.n	8001ad2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <HAL_InitTick+0x6c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <HAL_InitTick+0x68>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f001 ff66 	bl	8003972 <HAL_SYSTICK_Config>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10f      	bne.n	8001acc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b0f      	cmp	r3, #15
 8001ab0:	d809      	bhi.n	8001ac6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aba:	f001 ff32 	bl	8003922 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_InitTick+0x70>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e007      	b.n	8001ad6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e004      	b.n	8001ad6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e001      	b.n	8001ad6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000000c 	.word	0x2000000c
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	20000008 	.word	0x20000008

08001aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <HAL_IncTick+0x1c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_IncTick+0x20>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a03      	ldr	r2, [pc, #12]	@ (8001b08 <HAL_IncTick+0x1c>)
 8001afc:	6013      	str	r3, [r2, #0]
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	20000368 	.word	0x20000368
 8001b0c:	2000000c 	.word	0x2000000c

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	@ (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000368 	.word	0x20000368

08001b28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	609a      	str	r2, [r3, #8]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3360      	adds	r3, #96	@ 0x60
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <LL_ADC_SetOffset+0x44>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	03fff000 	.word	0x03fff000

08001bd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3360      	adds	r3, #96	@ 0x60
 8001be6:	461a      	mov	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3360      	adds	r3, #96	@ 0x60
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b087      	sub	sp, #28
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3360      	adds	r3, #96	@ 0x60
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3360      	adds	r3, #96	@ 0x60
 8001c80:	461a      	mov	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	431a      	orrs	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	615a      	str	r2, [r3, #20]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b087      	sub	sp, #28
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3330      	adds	r3, #48	@ 0x30
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	4413      	add	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	211f      	movs	r1, #31
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	401a      	ands	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	0e9b      	lsrs	r3, r3, #26
 8001d2a:	f003 011f 	and.w	r1, r3, #31
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3314      	adds	r3, #20
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	0e5b      	lsrs	r3, r3, #25
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	4413      	add	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	0d1b      	lsrs	r3, r3, #20
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	2107      	movs	r1, #7
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	401a      	ands	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	0d1b      	lsrs	r3, r3, #20
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	431a      	orrs	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dba:	bf00      	nop
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de0:	43db      	mvns	r3, r3
 8001de2:	401a      	ands	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0318 	and.w	r3, r3, #24
 8001dea:	4908      	ldr	r1, [pc, #32]	@ (8001e0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dec:	40d9      	lsrs	r1, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	400b      	ands	r3, r1
 8001df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df6:	431a      	orrs	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	0007ffff 	.word	0x0007ffff

08001e10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 031f 	and.w	r3, r3, #31
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6093      	str	r3, [r2, #8]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e80:	d101      	bne.n	8001e86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ea4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ea8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ed0:	d101      	bne.n	8001ed6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ef4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <LL_ADC_IsEnabled+0x18>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <LL_ADC_IsEnabled+0x1a>
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f42:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f46:	f043 0204 	orr.w	r2, r3, #4
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d101      	bne.n	8001f72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d101      	bne.n	8001f98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b089      	sub	sp, #36	@ 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e1a9      	b.n	8002316 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fa65 	bl	80014a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff3f 	bl	8001e6c <LL_ADC_IsDeepPowerDownEnabled>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff25 	bl	8001e48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff5a 	bl	8001ebc <LL_ADC_IsInternalRegulatorEnabled>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d115      	bne.n	800203a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff3e 	bl	8001e94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002018:	4b9c      	ldr	r3, [pc, #624]	@ (800228c <HAL_ADC_Init+0x2e4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	099b      	lsrs	r3, r3, #6
 800201e:	4a9c      	ldr	r2, [pc, #624]	@ (8002290 <HAL_ADC_Init+0x2e8>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	3301      	adds	r3, #1
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800202c:	e002      	b.n	8002034 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3b01      	subs	r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f9      	bne.n	800202e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff3c 	bl	8001ebc <LL_ADC_IsInternalRegulatorEnabled>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10d      	bne.n	8002066 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204e:	f043 0210 	orr.w	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205a:	f043 0201 	orr.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff75 	bl	8001f5a <LL_ADC_REG_IsConversionOngoing>
 8002070:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 8142 	bne.w	8002304 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 813e 	bne.w	8002304 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002090:	f043 0202 	orr.w	r2, r3, #2
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff35 	bl	8001f0c <LL_ADC_IsEnabled>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d141      	bne.n	800212c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020b0:	d004      	beq.n	80020bc <HAL_ADC_Init+0x114>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a77      	ldr	r2, [pc, #476]	@ (8002294 <HAL_ADC_Init+0x2ec>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d10f      	bne.n	80020dc <HAL_ADC_Init+0x134>
 80020bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020c0:	f7ff ff24 	bl	8001f0c <LL_ADC_IsEnabled>
 80020c4:	4604      	mov	r4, r0
 80020c6:	4873      	ldr	r0, [pc, #460]	@ (8002294 <HAL_ADC_Init+0x2ec>)
 80020c8:	f7ff ff20 	bl	8001f0c <LL_ADC_IsEnabled>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4323      	orrs	r3, r4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf0c      	ite	eq
 80020d4:	2301      	moveq	r3, #1
 80020d6:	2300      	movne	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e012      	b.n	8002102 <HAL_ADC_Init+0x15a>
 80020dc:	486e      	ldr	r0, [pc, #440]	@ (8002298 <HAL_ADC_Init+0x2f0>)
 80020de:	f7ff ff15 	bl	8001f0c <LL_ADC_IsEnabled>
 80020e2:	4604      	mov	r4, r0
 80020e4:	486d      	ldr	r0, [pc, #436]	@ (800229c <HAL_ADC_Init+0x2f4>)
 80020e6:	f7ff ff11 	bl	8001f0c <LL_ADC_IsEnabled>
 80020ea:	4603      	mov	r3, r0
 80020ec:	431c      	orrs	r4, r3
 80020ee:	486c      	ldr	r0, [pc, #432]	@ (80022a0 <HAL_ADC_Init+0x2f8>)
 80020f0:	f7ff ff0c 	bl	8001f0c <LL_ADC_IsEnabled>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4323      	orrs	r3, r4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d012      	beq.n	800212c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800210e:	d004      	beq.n	800211a <HAL_ADC_Init+0x172>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a5f      	ldr	r2, [pc, #380]	@ (8002294 <HAL_ADC_Init+0x2ec>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x176>
 800211a:	4a62      	ldr	r2, [pc, #392]	@ (80022a4 <HAL_ADC_Init+0x2fc>)
 800211c:	e000      	b.n	8002120 <HAL_ADC_Init+0x178>
 800211e:	4a62      	ldr	r2, [pc, #392]	@ (80022a8 <HAL_ADC_Init+0x300>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4619      	mov	r1, r3
 8002126:	4610      	mov	r0, r2
 8002128:	f7ff fcfe 	bl	8001b28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7f5b      	ldrb	r3, [r3, #29]
 8002130:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002136:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800213c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002142:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800214a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002156:	2b01      	cmp	r3, #1
 8002158:	d106      	bne.n	8002168 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	3b01      	subs	r3, #1
 8002160:	045b      	lsls	r3, r3, #17
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d009      	beq.n	8002184 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002174:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	4b48      	ldr	r3, [pc, #288]	@ (80022ac <HAL_ADC_Init+0x304>)
 800218c:	4013      	ands	r3, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	69b9      	ldr	r1, [r7, #24]
 8002194:	430b      	orrs	r3, r1
 8002196:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fee4 	bl	8001f80 <LL_ADC_INJ_IsConversionOngoing>
 80021b8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d17f      	bne.n	80022c0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d17c      	bne.n	80022c0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021ca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021e2:	f023 0302 	bic.w	r3, r3, #2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	69b9      	ldr	r1, [r7, #24]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d017      	beq.n	8002228 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002206:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002210:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002214:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6911      	ldr	r1, [r2, #16]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	430b      	orrs	r3, r1
 8002222:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002226:	e013      	b.n	8002250 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002236:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002248:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800224c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002256:	2b01      	cmp	r3, #1
 8002258:	d12a      	bne.n	80022b0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002264:	f023 0304 	bic.w	r3, r3, #4
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002270:	4311      	orrs	r1, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002276:	4311      	orrs	r1, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800227c:	430a      	orrs	r2, r1
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	611a      	str	r2, [r3, #16]
 800228a:	e019      	b.n	80022c0 <HAL_ADC_Init+0x318>
 800228c:	20000004 	.word	0x20000004
 8002290:	053e2d63 	.word	0x053e2d63
 8002294:	50000100 	.word	0x50000100
 8002298:	50000400 	.word	0x50000400
 800229c:	50000500 	.word	0x50000500
 80022a0:	50000600 	.word	0x50000600
 80022a4:	50000300 	.word	0x50000300
 80022a8:	50000700 	.word	0x50000700
 80022ac:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10c      	bne.n	80022e2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f023 010f 	bic.w	r1, r3, #15
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	1e5a      	subs	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e0:	e007      	b.n	80022f2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 020f 	bic.w	r2, r2, #15
 80022f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	f023 0303 	bic.w	r3, r3, #3
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002302:	e007      	b.n	8002314 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002308:	f043 0210 	orr.w	r2, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002314:	7ffb      	ldrb	r3, [r7, #31]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	@ 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}
 800231e:	bf00      	nop

08002320 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002334:	d004      	beq.n	8002340 <HAL_ADC_Start_DMA+0x20>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a5a      	ldr	r2, [pc, #360]	@ (80024a4 <HAL_ADC_Start_DMA+0x184>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d101      	bne.n	8002344 <HAL_ADC_Start_DMA+0x24>
 8002340:	4b59      	ldr	r3, [pc, #356]	@ (80024a8 <HAL_ADC_Start_DMA+0x188>)
 8002342:	e000      	b.n	8002346 <HAL_ADC_Start_DMA+0x26>
 8002344:	4b59      	ldr	r3, [pc, #356]	@ (80024ac <HAL_ADC_Start_DMA+0x18c>)
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fd62 	bl	8001e10 <LL_ADC_GetMultimode>
 800234c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fe01 	bl	8001f5a <LL_ADC_REG_IsConversionOngoing>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 809b 	bne.w	8002496 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_ADC_Start_DMA+0x4e>
 800236a:	2302      	movs	r3, #2
 800236c:	e096      	b.n	800249c <HAL_ADC_Start_DMA+0x17c>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a4d      	ldr	r2, [pc, #308]	@ (80024b0 <HAL_ADC_Start_DMA+0x190>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d008      	beq.n	8002392 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d002      	beq.n	8002392 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b09      	cmp	r3, #9
 8002390:	d17a      	bne.n	8002488 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 ff60 	bl	8003258 <ADC_Enable>
 8002398:	4603      	mov	r3, r0
 800239a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d16d      	bne.n	800247e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a3a      	ldr	r2, [pc, #232]	@ (80024a4 <HAL_ADC_Start_DMA+0x184>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d009      	beq.n	80023d4 <HAL_ADC_Start_DMA+0xb4>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a3b      	ldr	r2, [pc, #236]	@ (80024b4 <HAL_ADC_Start_DMA+0x194>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d002      	beq.n	80023d0 <HAL_ADC_Start_DMA+0xb0>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	e003      	b.n	80023d8 <HAL_ADC_Start_DMA+0xb8>
 80023d0:	4b39      	ldr	r3, [pc, #228]	@ (80024b8 <HAL_ADC_Start_DMA+0x198>)
 80023d2:	e001      	b.n	80023d8 <HAL_ADC_Start_DMA+0xb8>
 80023d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	4293      	cmp	r3, r2
 80023de:	d002      	beq.n	80023e6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d105      	bne.n	80023f2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d006      	beq.n	800240c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002402:	f023 0206 	bic.w	r2, r3, #6
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	661a      	str	r2, [r3, #96]	@ 0x60
 800240a:	e002      	b.n	8002412 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002416:	4a29      	ldr	r2, [pc, #164]	@ (80024bc <HAL_ADC_Start_DMA+0x19c>)
 8002418:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241e:	4a28      	ldr	r2, [pc, #160]	@ (80024c0 <HAL_ADC_Start_DMA+0x1a0>)
 8002420:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002426:	4a27      	ldr	r2, [pc, #156]	@ (80024c4 <HAL_ADC_Start_DMA+0x1a4>)
 8002428:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	221c      	movs	r2, #28
 8002430:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0210 	orr.w	r2, r2, #16
 8002448:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	3340      	adds	r3, #64	@ 0x40
 8002464:	4619      	mov	r1, r3
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f001 fb37 	bl	8003adc <HAL_DMA_Start_IT>
 800246e:	4603      	mov	r3, r0
 8002470:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fd5b 	bl	8001f32 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800247c:	e00d      	b.n	800249a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002486:	e008      	b.n	800249a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002494:	e001      	b.n	800249a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002496:	2302      	movs	r3, #2
 8002498:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800249a:	7dfb      	ldrb	r3, [r7, #23]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	50000100 	.word	0x50000100
 80024a8:	50000300 	.word	0x50000300
 80024ac:	50000700 	.word	0x50000700
 80024b0:	50000600 	.word	0x50000600
 80024b4:	50000500 	.word	0x50000500
 80024b8:	50000400 	.word	0x50000400
 80024bc:	08003385 	.word	0x08003385
 80024c0:	0800345d 	.word	0x0800345d
 80024c4:	08003479 	.word	0x08003479

080024c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	@ 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ec:	d004      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x30>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a8e      	ldr	r2, [pc, #568]	@ (800272c <HAL_ADC_IRQHandler+0x264>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_IRQHandler+0x34>
 80024f8:	4b8d      	ldr	r3, [pc, #564]	@ (8002730 <HAL_ADC_IRQHandler+0x268>)
 80024fa:	e000      	b.n	80024fe <HAL_ADC_IRQHandler+0x36>
 80024fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002734 <HAL_ADC_IRQHandler+0x26c>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fc86 	bl	8001e10 <LL_ADC_GetMultimode>
 8002504:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d017      	beq.n	8002540 <HAL_ADC_IRQHandler+0x78>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d012      	beq.n	8002540 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f001 f808 	bl	8003548 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2202      	movs	r2, #2
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	d004      	beq.n	8002554 <HAL_ADC_IRQHandler+0x8c>
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10b      	bne.n	800256c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8094 	beq.w	8002688 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 808e 	beq.w	8002688 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fb9f 	bl	8001ccc <LL_ADC_REG_IsTriggerSourceSWStart>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d072      	beq.n	800267a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a64      	ldr	r2, [pc, #400]	@ (800272c <HAL_ADC_IRQHandler+0x264>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_ADC_IRQHandler+0xea>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a65      	ldr	r2, [pc, #404]	@ (8002738 <HAL_ADC_IRQHandler+0x270>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d002      	beq.n	80025ae <HAL_ADC_IRQHandler+0xe6>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	e003      	b.n	80025b6 <HAL_ADC_IRQHandler+0xee>
 80025ae:	4b63      	ldr	r3, [pc, #396]	@ (800273c <HAL_ADC_IRQHandler+0x274>)
 80025b0:	e001      	b.n	80025b6 <HAL_ADC_IRQHandler+0xee>
 80025b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d008      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d002      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b09      	cmp	r3, #9
 80025ce:	d104      	bne.n	80025da <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	623b      	str	r3, [r7, #32]
 80025d8:	e014      	b.n	8002604 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a53      	ldr	r2, [pc, #332]	@ (800272c <HAL_ADC_IRQHandler+0x264>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d009      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x130>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a53      	ldr	r2, [pc, #332]	@ (8002738 <HAL_ADC_IRQHandler+0x270>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d002      	beq.n	80025f4 <HAL_ADC_IRQHandler+0x12c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	e003      	b.n	80025fc <HAL_ADC_IRQHandler+0x134>
 80025f4:	4b51      	ldr	r3, [pc, #324]	@ (800273c <HAL_ADC_IRQHandler+0x274>)
 80025f6:	e001      	b.n	80025fc <HAL_ADC_IRQHandler+0x134>
 80025f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025fc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d135      	bne.n	800267a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b08      	cmp	r3, #8
 800261a:	d12e      	bne.n	800267a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fc9a 	bl	8001f5a <LL_ADC_REG_IsConversionOngoing>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d11a      	bne.n	8002662 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 020c 	bic.w	r2, r2, #12
 800263a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d112      	bne.n	800267a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002658:	f043 0201 	orr.w	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002660:	e00b      	b.n	800267a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002666:	f043 0210 	orr.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f984 	bl	8002988 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	220c      	movs	r2, #12
 8002686:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d004      	beq.n	800269c <HAL_ADC_IRQHandler+0x1d4>
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10b      	bne.n	80026b4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80b3 	beq.w	800280e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80ad 	beq.w	800280e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fb3a 	bl	8001d4a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80026d6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff faf5 	bl	8001ccc <LL_ADC_REG_IsTriggerSourceSWStart>
 80026e2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a10      	ldr	r2, [pc, #64]	@ (800272c <HAL_ADC_IRQHandler+0x264>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d009      	beq.n	8002702 <HAL_ADC_IRQHandler+0x23a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <HAL_ADC_IRQHandler+0x270>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d002      	beq.n	80026fe <HAL_ADC_IRQHandler+0x236>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	e003      	b.n	8002706 <HAL_ADC_IRQHandler+0x23e>
 80026fe:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <HAL_ADC_IRQHandler+0x274>)
 8002700:	e001      	b.n	8002706 <HAL_ADC_IRQHandler+0x23e>
 8002702:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	4293      	cmp	r3, r2
 800270c:	d008      	beq.n	8002720 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b06      	cmp	r3, #6
 8002718:	d002      	beq.n	8002720 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b07      	cmp	r3, #7
 800271e:	d10f      	bne.n	8002740 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	e01f      	b.n	800276a <HAL_ADC_IRQHandler+0x2a2>
 800272a:	bf00      	nop
 800272c:	50000100 	.word	0x50000100
 8002730:	50000300 	.word	0x50000300
 8002734:	50000700 	.word	0x50000700
 8002738:	50000500 	.word	0x50000500
 800273c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a8b      	ldr	r2, [pc, #556]	@ (8002974 <HAL_ADC_IRQHandler+0x4ac>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_ADC_IRQHandler+0x296>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a8a      	ldr	r2, [pc, #552]	@ (8002978 <HAL_ADC_IRQHandler+0x4b0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d002      	beq.n	800275a <HAL_ADC_IRQHandler+0x292>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	e003      	b.n	8002762 <HAL_ADC_IRQHandler+0x29a>
 800275a:	4b88      	ldr	r3, [pc, #544]	@ (800297c <HAL_ADC_IRQHandler+0x4b4>)
 800275c:	e001      	b.n	8002762 <HAL_ADC_IRQHandler+0x29a>
 800275e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002762:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d047      	beq.n	8002800 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_ADC_IRQHandler+0x2c2>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d03f      	beq.n	8002800 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002786:	2b00      	cmp	r3, #0
 8002788:	d13a      	bne.n	8002800 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002794:	2b40      	cmp	r3, #64	@ 0x40
 8002796:	d133      	bne.n	8002800 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d12e      	bne.n	8002800 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fbea 	bl	8001f80 <LL_ADC_INJ_IsConversionOngoing>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11a      	bne.n	80027e8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027c0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d112      	bne.n	8002800 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027e6:	e00b      	b.n	8002800 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ec:	f043 0210 	orr.w	r2, r3, #16
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fe79 	bl	80034f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2260      	movs	r2, #96	@ 0x60
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002814:	2b00      	cmp	r3, #0
 8002816:	d011      	beq.n	800283c <HAL_ADC_IRQHandler+0x374>
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00c      	beq.n	800283c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002826:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8be 	bl	80029b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2280      	movs	r2, #128	@ 0x80
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d012      	beq.n	800286c <HAL_ADC_IRQHandler+0x3a4>
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00d      	beq.n	800286c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002854:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fe5f 	bl	8003520 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800286a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002872:	2b00      	cmp	r3, #0
 8002874:	d012      	beq.n	800289c <HAL_ADC_IRQHandler+0x3d4>
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00d      	beq.n	800289c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002884:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fe51 	bl	8003534 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800289a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d043      	beq.n	800292e <HAL_ADC_IRQHandler+0x466>
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d03e      	beq.n	800292e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80028b8:	2301      	movs	r3, #1
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80028bc:	e021      	b.n	8002902 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028cc:	d004      	beq.n	80028d8 <HAL_ADC_IRQHandler+0x410>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a28      	ldr	r2, [pc, #160]	@ (8002974 <HAL_ADC_IRQHandler+0x4ac>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_IRQHandler+0x414>
 80028d8:	4b29      	ldr	r3, [pc, #164]	@ (8002980 <HAL_ADC_IRQHandler+0x4b8>)
 80028da:	e000      	b.n	80028de <HAL_ADC_IRQHandler+0x416>
 80028dc:	4b29      	ldr	r3, [pc, #164]	@ (8002984 <HAL_ADC_IRQHandler+0x4bc>)
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff faa4 	bl	8001e2c <LL_ADC_GetMultiDMATransfer>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80028ea:	2301      	movs	r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ee:	e008      	b.n	8002902 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80028fe:	2301      	movs	r3, #1
 8002900:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	2b01      	cmp	r3, #1
 8002906:	d10e      	bne.n	8002926 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002918:	f043 0202 	orr.w	r2, r3, #2
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f84f 	bl	80029c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2210      	movs	r2, #16
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d018      	beq.n	800296a <HAL_ADC_IRQHandler+0x4a2>
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293e:	2b00      	cmp	r3, #0
 8002940:	d013      	beq.n	800296a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002946:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002952:	f043 0208 	orr.w	r2, r3, #8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002962:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fdd1 	bl	800350c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800296a:	bf00      	nop
 800296c:	3728      	adds	r7, #40	@ 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	50000100 	.word	0x50000100
 8002978:	50000500 	.word	0x50000500
 800297c:	50000400 	.word	0x50000400
 8002980:	50000300 	.word	0x50000300
 8002984:	50000700 	.word	0x50000700

08002988 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b0b6      	sub	sp, #216	@ 0xd8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x24>
 80029f6:	2302      	movs	r3, #2
 80029f8:	f000 bc13 	b.w	8003222 <HAL_ADC_ConfigChannel+0x84a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff faa6 	bl	8001f5a <LL_ADC_REG_IsConversionOngoing>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 83f3 	bne.w	80031fc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f7ff f965 	bl	8001cf2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fa94 	bl	8001f5a <LL_ADC_REG_IsConversionOngoing>
 8002a32:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff faa0 	bl	8001f80 <LL_ADC_INJ_IsConversionOngoing>
 8002a40:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 81d9 	bne.w	8002e00 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 81d4 	bne.w	8002e00 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a60:	d10f      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f7ff f97f 	bl	8001d70 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff f913 	bl	8001ca6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002a80:	e00e      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6819      	ldr	r1, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f7ff f96e 	bl	8001d70 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f903 	bl	8001ca6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	08db      	lsrs	r3, r3, #3
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d022      	beq.n	8002b08 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6919      	ldr	r1, [r3, #16]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ad2:	f7ff f85d 	bl	8001b90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6919      	ldr	r1, [r3, #16]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f7ff f8a9 	bl	8001c3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d102      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x126>
 8002af8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002afc:	e000      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x128>
 8002afe:	2300      	movs	r3, #0
 8002b00:	461a      	mov	r2, r3
 8002b02:	f7ff f8b5 	bl	8001c70 <LL_ADC_SetOffsetSaturation>
 8002b06:	e17b      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff f862 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x15c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff f857 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	0e9b      	lsrs	r3, r3, #26
 8002b2e:	f003 021f 	and.w	r2, r3, #31
 8002b32:	e01e      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x19a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff f84c 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002b62:	2320      	movs	r3, #32
 8002b64:	e004      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002b66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x1b2>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0e9b      	lsrs	r3, r3, #26
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	e018      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x1e4>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002ba6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e004      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002bb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d106      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff f81b 	bl	8001c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe ffff 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10a      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x222>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2101      	movs	r1, #1
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fff4 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	0e9b      	lsrs	r3, r3, #26
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	e01e      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x260>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe ffe9 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002c18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	e004      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002c2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d105      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x278>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0e9b      	lsrs	r3, r3, #26
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	e018      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x2aa>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002c64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e004      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d106      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe ffb8 	bl	8001c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2102      	movs	r1, #2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe ff9c 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x2e8>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2102      	movs	r1, #2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe ff91 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	f003 021f 	and.w	r2, r3, #31
 8002cbe:	e01e      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x326>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2102      	movs	r1, #2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe ff86 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ce2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e004      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d105      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x33e>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0e9b      	lsrs	r3, r3, #26
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	e016      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x36c>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002d28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002d36:	2320      	movs	r3, #32
 8002d38:	e004      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d106      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2102      	movs	r1, #2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe ff57 	bl	8001c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2103      	movs	r1, #3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe ff3b 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x3aa>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2103      	movs	r1, #3
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe ff30 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	0e9b      	lsrs	r3, r3, #26
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	e017      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x3da>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2103      	movs	r1, #3
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe ff25 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d9c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002d9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002da4:	2320      	movs	r3, #32
 8002da6:	e003      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002da8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d105      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x3f2>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	0e9b      	lsrs	r3, r3, #26
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	e011      	b.n	8002dee <HAL_ADC_ConfigChannel+0x416>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dda:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002de2:	2320      	movs	r3, #32
 8002de4:	e003      	b.n	8002dee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d106      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2103      	movs	r1, #3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe ff02 	bl	8001c04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff f881 	bl	8001f0c <LL_ADC_IsEnabled>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f040 813d 	bne.w	800308c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f7fe ffd2 	bl	8001dc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4aa2      	ldr	r2, [pc, #648]	@ (80030b4 <HAL_ADC_ConfigChannel+0x6dc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	f040 812e 	bne.w	800308c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10b      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x480>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	3301      	adds	r3, #1
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	2b09      	cmp	r3, #9
 8002e4e:	bf94      	ite	ls
 8002e50:	2301      	movls	r3, #1
 8002e52:	2300      	movhi	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e019      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x4b4>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002e66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e68:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002e6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002e70:	2320      	movs	r3, #32
 8002e72:	e003      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002e74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	2b09      	cmp	r3, #9
 8002e84:	bf94      	ite	ls
 8002e86:	2301      	movls	r3, #1
 8002e88:	2300      	movhi	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d079      	beq.n	8002f84 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d107      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x4d4>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	069b      	lsls	r3, r3, #26
 8002ea6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eaa:	e015      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x500>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ebc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	e003      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	069b      	lsls	r3, r3, #26
 8002ed4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x520>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	0e9b      	lsrs	r3, r3, #26
 8002eea:	3301      	adds	r3, #1
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	e017      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x550>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f08:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f10:	2320      	movs	r3, #32
 8002f12:	e003      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	2101      	movs	r1, #1
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	ea42 0103 	orr.w	r1, r2, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10a      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x576>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0e9b      	lsrs	r3, r3, #26
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	051b      	lsls	r3, r3, #20
 8002f4c:	e018      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x5a8>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002f66:	2320      	movs	r3, #32
 8002f68:	e003      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	4613      	mov	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4413      	add	r3, r2
 8002f7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f80:	430b      	orrs	r3, r1
 8002f82:	e07e      	b.n	8003082 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x5c8>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	3301      	adds	r3, #1
 8002f98:	069b      	lsls	r3, r3, #26
 8002f9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f9e:	e015      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x5f4>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	e003      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	069b      	lsls	r3, r3, #26
 8002fc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x614>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0e9b      	lsrs	r3, r3, #26
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	e017      	b.n	800301c <HAL_ADC_ConfigChannel+0x644>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	61fb      	str	r3, [r7, #28]
  return result;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003004:	2320      	movs	r3, #32
 8003006:	e003      	b.n	8003010 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	3301      	adds	r3, #1
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2101      	movs	r1, #1
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	ea42 0103 	orr.w	r1, r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10d      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x670>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	0e9b      	lsrs	r3, r3, #26
 8003032:	3301      	adds	r3, #1
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	3b1e      	subs	r3, #30
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003046:	e01b      	b.n	8003080 <HAL_ADC_ConfigChannel+0x6a8>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	613b      	str	r3, [r7, #16]
  return result;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003060:	2320      	movs	r3, #32
 8003062:	e003      	b.n	800306c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f003 021f 	and.w	r2, r3, #31
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	3b1e      	subs	r3, #30
 800307a:	051b      	lsls	r3, r3, #20
 800307c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003080:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003086:	4619      	mov	r1, r3
 8003088:	f7fe fe72 	bl	8001d70 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <HAL_ADC_ConfigChannel+0x6e0>)
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80be 	beq.w	8003216 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030a2:	d004      	beq.n	80030ae <HAL_ADC_ConfigChannel+0x6d6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a04      	ldr	r2, [pc, #16]	@ (80030bc <HAL_ADC_ConfigChannel+0x6e4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10a      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x6ec>
 80030ae:	4b04      	ldr	r3, [pc, #16]	@ (80030c0 <HAL_ADC_ConfigChannel+0x6e8>)
 80030b0:	e009      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x6ee>
 80030b2:	bf00      	nop
 80030b4:	407f0000 	.word	0x407f0000
 80030b8:	80080000 	.word	0x80080000
 80030bc:	50000100 	.word	0x50000100
 80030c0:	50000300 	.word	0x50000300
 80030c4:	4b59      	ldr	r3, [pc, #356]	@ (800322c <HAL_ADC_ConfigChannel+0x854>)
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe fd54 	bl	8001b74 <LL_ADC_GetCommonPathInternalCh>
 80030cc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a56      	ldr	r2, [pc, #344]	@ (8003230 <HAL_ADC_ConfigChannel+0x858>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x70c>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a55      	ldr	r2, [pc, #340]	@ (8003234 <HAL_ADC_ConfigChannel+0x85c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d13a      	bne.n	800315a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d134      	bne.n	800315a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030f8:	d005      	beq.n	8003106 <HAL_ADC_ConfigChannel+0x72e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a4e      	ldr	r2, [pc, #312]	@ (8003238 <HAL_ADC_ConfigChannel+0x860>)
 8003100:	4293      	cmp	r3, r2
 8003102:	f040 8085 	bne.w	8003210 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800310e:	d004      	beq.n	800311a <HAL_ADC_ConfigChannel+0x742>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a49      	ldr	r2, [pc, #292]	@ (800323c <HAL_ADC_ConfigChannel+0x864>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_ADC_ConfigChannel+0x746>
 800311a:	4a49      	ldr	r2, [pc, #292]	@ (8003240 <HAL_ADC_ConfigChannel+0x868>)
 800311c:	e000      	b.n	8003120 <HAL_ADC_ConfigChannel+0x748>
 800311e:	4a43      	ldr	r2, [pc, #268]	@ (800322c <HAL_ADC_ConfigChannel+0x854>)
 8003120:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003124:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f7fe fd0f 	bl	8001b4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003130:	4b44      	ldr	r3, [pc, #272]	@ (8003244 <HAL_ADC_ConfigChannel+0x86c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	4a44      	ldr	r2, [pc, #272]	@ (8003248 <HAL_ADC_ConfigChannel+0x870>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800314a:	e002      	b.n	8003152 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3b01      	subs	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f9      	bne.n	800314c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003158:	e05a      	b.n	8003210 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3b      	ldr	r2, [pc, #236]	@ (800324c <HAL_ADC_ConfigChannel+0x874>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d125      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003168:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d11f      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a31      	ldr	r2, [pc, #196]	@ (800323c <HAL_ADC_ConfigChannel+0x864>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d104      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x7ac>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a34      	ldr	r2, [pc, #208]	@ (8003250 <HAL_ADC_ConfigChannel+0x878>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d047      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800318c:	d004      	beq.n	8003198 <HAL_ADC_ConfigChannel+0x7c0>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2a      	ldr	r2, [pc, #168]	@ (800323c <HAL_ADC_ConfigChannel+0x864>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_ADC_ConfigChannel+0x7c4>
 8003198:	4a29      	ldr	r2, [pc, #164]	@ (8003240 <HAL_ADC_ConfigChannel+0x868>)
 800319a:	e000      	b.n	800319e <HAL_ADC_ConfigChannel+0x7c6>
 800319c:	4a23      	ldr	r2, [pc, #140]	@ (800322c <HAL_ADC_ConfigChannel+0x854>)
 800319e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f7fe fcd0 	bl	8001b4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ae:	e031      	b.n	8003214 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a27      	ldr	r2, [pc, #156]	@ (8003254 <HAL_ADC_ConfigChannel+0x87c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d12d      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d127      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1c      	ldr	r2, [pc, #112]	@ (800323c <HAL_ADC_ConfigChannel+0x864>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031d8:	d004      	beq.n	80031e4 <HAL_ADC_ConfigChannel+0x80c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a17      	ldr	r2, [pc, #92]	@ (800323c <HAL_ADC_ConfigChannel+0x864>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x810>
 80031e4:	4a16      	ldr	r2, [pc, #88]	@ (8003240 <HAL_ADC_ConfigChannel+0x868>)
 80031e6:	e000      	b.n	80031ea <HAL_ADC_ConfigChannel+0x812>
 80031e8:	4a10      	ldr	r2, [pc, #64]	@ (800322c <HAL_ADC_ConfigChannel+0x854>)
 80031ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f7fe fcaa 	bl	8001b4e <LL_ADC_SetCommonPathInternalCh>
 80031fa:	e00c      	b.n	8003216 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800320e:	e002      	b.n	8003216 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003210:	bf00      	nop
 8003212:	e000      	b.n	8003216 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003214:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800321e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003222:	4618      	mov	r0, r3
 8003224:	37d8      	adds	r7, #216	@ 0xd8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	50000700 	.word	0x50000700
 8003230:	c3210000 	.word	0xc3210000
 8003234:	90c00010 	.word	0x90c00010
 8003238:	50000600 	.word	0x50000600
 800323c:	50000100 	.word	0x50000100
 8003240:	50000300 	.word	0x50000300
 8003244:	20000004 	.word	0x20000004
 8003248:	053e2d63 	.word	0x053e2d63
 800324c:	c7520000 	.word	0xc7520000
 8003250:	50000500 	.word	0x50000500
 8003254:	cb840000 	.word	0xcb840000

08003258 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe fe4f 	bl	8001f0c <LL_ADC_IsEnabled>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d176      	bne.n	8003362 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	4b3c      	ldr	r3, [pc, #240]	@ (800336c <ADC_Enable+0x114>)
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003286:	f043 0210 	orr.w	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e062      	b.n	8003364 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fe1e 	bl	8001ee4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032b0:	d004      	beq.n	80032bc <ADC_Enable+0x64>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2e      	ldr	r2, [pc, #184]	@ (8003370 <ADC_Enable+0x118>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d101      	bne.n	80032c0 <ADC_Enable+0x68>
 80032bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003374 <ADC_Enable+0x11c>)
 80032be:	e000      	b.n	80032c2 <ADC_Enable+0x6a>
 80032c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003378 <ADC_Enable+0x120>)
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fc56 	bl	8001b74 <LL_ADC_GetCommonPathInternalCh>
 80032c8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d013      	beq.n	80032fa <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032d2:	4b2a      	ldr	r3, [pc, #168]	@ (800337c <ADC_Enable+0x124>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	4a29      	ldr	r2, [pc, #164]	@ (8003380 <ADC_Enable+0x128>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032ec:	e002      	b.n	80032f4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f9      	bne.n	80032ee <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032fa:	f7fe fc09 	bl	8001b10 <HAL_GetTick>
 80032fe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003300:	e028      	b.n	8003354 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fe00 	bl	8001f0c <LL_ADC_IsEnabled>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d104      	bne.n	800331c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fde4 	bl	8001ee4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800331c:	f7fe fbf8 	bl	8001b10 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d914      	bls.n	8003354 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d00d      	beq.n	8003354 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333c:	f043 0210 	orr.w	r2, r3, #16
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e007      	b.n	8003364 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b01      	cmp	r3, #1
 8003360:	d1cf      	bne.n	8003302 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	8000003f 	.word	0x8000003f
 8003370:	50000100 	.word	0x50000100
 8003374:	50000300 	.word	0x50000300
 8003378:	50000700 	.word	0x50000700
 800337c:	20000004 	.word	0x20000004
 8003380:	053e2d63 	.word	0x053e2d63

08003384 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800339a:	2b00      	cmp	r3, #0
 800339c:	d14b      	bne.n	8003436 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d021      	beq.n	80033fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe fc85 	bl	8001ccc <LL_ADC_REG_IsTriggerSourceSWStart>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d032      	beq.n	800342e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d12b      	bne.n	800342e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d11f      	bne.n	800342e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f2:	f043 0201 	orr.w	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033fa:	e018      	b.n	800342e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d111      	bne.n	800342e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003426:	f043 0201 	orr.w	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff faaa 	bl	8002988 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003434:	e00e      	b.n	8003454 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff fabe 	bl	80029c4 <HAL_ADC_ErrorCallback>
}
 8003448:	e004      	b.n	8003454 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
}
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003468:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7ff fa96 	bl	800299c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003484:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003496:	f043 0204 	orr.w	r2, r3, #4
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f7ff fa90 	bl	80029c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <LL_ADC_IsEnabled>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <LL_ADC_IsEnabled+0x18>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <LL_ADC_IsEnabled+0x1a>
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d101      	bne.n	80034ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b0a1      	sub	sp, #132	@ 0x84
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003576:	2302      	movs	r3, #2
 8003578:	e0e7      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003582:	2300      	movs	r3, #0
 8003584:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003586:	2300      	movs	r3, #0
 8003588:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003592:	d102      	bne.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003594:	4b6f      	ldr	r3, [pc, #444]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	e009      	b.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6e      	ldr	r2, [pc, #440]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d102      	bne.n	80035aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80035a4:	4b6d      	ldr	r3, [pc, #436]	@ (800375c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	e001      	b.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035aa:	2300      	movs	r3, #0
 80035ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10b      	bne.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0be      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff ff7f 	bl	80034d2 <LL_ADC_REG_IsConversionOngoing>
 80035d4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff79 	bl	80034d2 <LL_ADC_REG_IsConversionOngoing>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 80a0 	bne.w	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80035e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 809c 	bne.w	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035f8:	d004      	beq.n	8003604 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a55      	ldr	r2, [pc, #340]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003604:	4b56      	ldr	r3, [pc, #344]	@ (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003606:	e000      	b.n	800360a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003608:	4b56      	ldr	r3, [pc, #344]	@ (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800360a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d04b      	beq.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003626:	035b      	lsls	r3, r3, #13
 8003628:	430b      	orrs	r3, r1
 800362a:	431a      	orrs	r2, r3
 800362c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800362e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003638:	d004      	beq.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a45      	ldr	r2, [pc, #276]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10f      	bne.n	8003664 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003644:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003648:	f7ff ff30 	bl	80034ac <LL_ADC_IsEnabled>
 800364c:	4604      	mov	r4, r0
 800364e:	4841      	ldr	r0, [pc, #260]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003650:	f7ff ff2c 	bl	80034ac <LL_ADC_IsEnabled>
 8003654:	4603      	mov	r3, r0
 8003656:	4323      	orrs	r3, r4
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e012      	b.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003664:	483c      	ldr	r0, [pc, #240]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003666:	f7ff ff21 	bl	80034ac <LL_ADC_IsEnabled>
 800366a:	4604      	mov	r4, r0
 800366c:	483b      	ldr	r0, [pc, #236]	@ (800375c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800366e:	f7ff ff1d 	bl	80034ac <LL_ADC_IsEnabled>
 8003672:	4603      	mov	r3, r0
 8003674:	431c      	orrs	r4, r3
 8003676:	483c      	ldr	r0, [pc, #240]	@ (8003768 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003678:	f7ff ff18 	bl	80034ac <LL_ADC_IsEnabled>
 800367c:	4603      	mov	r3, r0
 800367e:	4323      	orrs	r3, r4
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d056      	beq.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800368e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003696:	f023 030f 	bic.w	r3, r3, #15
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	6811      	ldr	r1, [r2, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	431a      	orrs	r2, r3
 80036a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036a8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036aa:	e047      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036c0:	d004      	beq.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a23      	ldr	r2, [pc, #140]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10f      	bne.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80036cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80036d0:	f7ff feec 	bl	80034ac <LL_ADC_IsEnabled>
 80036d4:	4604      	mov	r4, r0
 80036d6:	481f      	ldr	r0, [pc, #124]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036d8:	f7ff fee8 	bl	80034ac <LL_ADC_IsEnabled>
 80036dc:	4603      	mov	r3, r0
 80036de:	4323      	orrs	r3, r4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e012      	b.n	8003712 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80036ec:	481a      	ldr	r0, [pc, #104]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80036ee:	f7ff fedd 	bl	80034ac <LL_ADC_IsEnabled>
 80036f2:	4604      	mov	r4, r0
 80036f4:	4819      	ldr	r0, [pc, #100]	@ (800375c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036f6:	f7ff fed9 	bl	80034ac <LL_ADC_IsEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	431c      	orrs	r4, r3
 80036fe:	481a      	ldr	r0, [pc, #104]	@ (8003768 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003700:	f7ff fed4 	bl	80034ac <LL_ADC_IsEnabled>
 8003704:	4603      	mov	r3, r0
 8003706:	4323      	orrs	r3, r4
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d012      	beq.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800371e:	f023 030f 	bic.w	r3, r3, #15
 8003722:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003724:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003726:	e009      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800373a:	e000      	b.n	800373e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800373c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003746:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800374a:	4618      	mov	r0, r3
 800374c:	3784      	adds	r7, #132	@ 0x84
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}
 8003752:	bf00      	nop
 8003754:	50000100 	.word	0x50000100
 8003758:	50000400 	.word	0x50000400
 800375c:	50000500 	.word	0x50000500
 8003760:	50000300 	.word	0x50000300
 8003764:	50000700 	.word	0x50000700
 8003768:	50000600 	.word	0x50000600

0800376c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800377c:	4b0c      	ldr	r3, [pc, #48]	@ (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003788:	4013      	ands	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379e:	4a04      	ldr	r2, [pc, #16]	@ (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	60d3      	str	r3, [r2, #12]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b8:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <__NVIC_GetPriorityGrouping+0x18>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 0307 	and.w	r3, r3, #7
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db0b      	blt.n	80037fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4907      	ldr	r1, [pc, #28]	@ (8003808 <__NVIC_EnableIRQ+0x38>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000e100 	.word	0xe000e100

0800380c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381c:	2b00      	cmp	r3, #0
 800381e:	db0a      	blt.n	8003836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	490c      	ldr	r1, [pc, #48]	@ (8003858 <__NVIC_SetPriority+0x4c>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	440b      	add	r3, r1
 8003830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003834:	e00a      	b.n	800384c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4908      	ldr	r1, [pc, #32]	@ (800385c <__NVIC_SetPriority+0x50>)
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	3b04      	subs	r3, #4
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	440b      	add	r3, r1
 800384a:	761a      	strb	r2, [r3, #24]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000e100 	.word	0xe000e100
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	@ 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f1c3 0307 	rsb	r3, r3, #7
 800387a:	2b04      	cmp	r3, #4
 800387c:	bf28      	it	cs
 800387e:	2304      	movcs	r3, #4
 8003880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3304      	adds	r3, #4
 8003886:	2b06      	cmp	r3, #6
 8003888:	d902      	bls.n	8003890 <NVIC_EncodePriority+0x30>
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3b03      	subs	r3, #3
 800388e:	e000      	b.n	8003892 <NVIC_EncodePriority+0x32>
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	f04f 32ff 	mov.w	r2, #4294967295
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	401a      	ands	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	43d9      	mvns	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	4313      	orrs	r3, r2
         );
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3724      	adds	r7, #36	@ 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038d8:	d301      	bcc.n	80038de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038da:	2301      	movs	r3, #1
 80038dc:	e00f      	b.n	80038fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038de:	4a0a      	ldr	r2, [pc, #40]	@ (8003908 <SysTick_Config+0x40>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038e6:	210f      	movs	r1, #15
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	f7ff ff8e 	bl	800380c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <SysTick_Config+0x40>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038f6:	4b04      	ldr	r3, [pc, #16]	@ (8003908 <SysTick_Config+0x40>)
 80038f8:	2207      	movs	r2, #7
 80038fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	e000e010 	.word	0xe000e010

0800390c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff29 	bl	800376c <__NVIC_SetPriorityGrouping>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	4603      	mov	r3, r0
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003930:	f7ff ff40 	bl	80037b4 <__NVIC_GetPriorityGrouping>
 8003934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	6978      	ldr	r0, [r7, #20]
 800393c:	f7ff ff90 	bl	8003860 <NVIC_EncodePriority>
 8003940:	4602      	mov	r2, r0
 8003942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff5f 	bl	800380c <__NVIC_SetPriority>
}
 800394e:	bf00      	nop
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff33 	bl	80037d0 <__NVIC_EnableIRQ>
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ffa4 	bl	80038c8 <SysTick_Config>
 8003980:	4603      	mov	r3, r0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e08d      	b.n	8003aba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b47      	ldr	r3, [pc, #284]	@ (8003ac4 <HAL_DMA_Init+0x138>)
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d80f      	bhi.n	80039ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	4b45      	ldr	r3, [pc, #276]	@ (8003ac8 <HAL_DMA_Init+0x13c>)
 80039b2:	4413      	add	r3, r2
 80039b4:	4a45      	ldr	r2, [pc, #276]	@ (8003acc <HAL_DMA_Init+0x140>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	009a      	lsls	r2, r3, #2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a42      	ldr	r2, [pc, #264]	@ (8003ad0 <HAL_DMA_Init+0x144>)
 80039c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80039c8:	e00e      	b.n	80039e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	4b40      	ldr	r3, [pc, #256]	@ (8003ad4 <HAL_DMA_Init+0x148>)
 80039d2:	4413      	add	r3, r2
 80039d4:	4a3d      	ldr	r2, [pc, #244]	@ (8003acc <HAL_DMA_Init+0x140>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	009a      	lsls	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ad8 <HAL_DMA_Init+0x14c>)
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80039fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fa76 	bl	8003f2c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a48:	d102      	bne.n	8003a50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d010      	beq.n	8003a90 <HAL_DMA_Init+0x104>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d80c      	bhi.n	8003a90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa96 	bl	8003fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	e008      	b.n	8003aa2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40020407 	.word	0x40020407
 8003ac8:	bffdfff8 	.word	0xbffdfff8
 8003acc:	cccccccd 	.word	0xcccccccd
 8003ad0:	40020000 	.word	0x40020000
 8003ad4:	bffdfbf8 	.word	0xbffdfbf8
 8003ad8:	40020400 	.word	0x40020400

08003adc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_DMA_Start_IT+0x20>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e066      	b.n	8003bca <HAL_DMA_Start_IT+0xee>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d155      	bne.n	8003bbc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0201 	bic.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f9bb 	bl	8003eb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 020e 	orr.w	r2, r2, #14
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	e00f      	b.n	8003b74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0204 	bic.w	r2, r2, #4
 8003b62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 020a 	orr.w	r2, r2, #10
 8003b72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ba8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0201 	orr.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e005      	b.n	8003bc8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d005      	beq.n	8003bf6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2204      	movs	r2, #4
 8003bee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e037      	b.n	8003c66 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 020e 	bic.w	r2, r2, #14
 8003c04:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c14:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	f003 021f 	and.w	r2, r3, #31
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	2101      	movs	r1, #1
 8003c34:	fa01 f202 	lsl.w	r2, r1, r2
 8003c38:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c42:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00c      	beq.n	8003c66 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c5a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c64:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
 8003cb6:	e047      	b.n	8003d48 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 020e 	bic.w	r2, r2, #14
 8003cc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ce6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cec:	f003 021f 	and.w	r2, r3, #31
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00c      	beq.n	8003d28 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	4798      	blx	r3
    }
  }
  return status;
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	2204      	movs	r2, #4
 8003d74:	409a      	lsls	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d026      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x7a>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d021      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d107      	bne.n	8003da6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0204 	bic.w	r2, r2, #4
 8003da4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003daa:	f003 021f 	and.w	r2, r3, #31
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	2104      	movs	r1, #4
 8003db4:	fa01 f202 	lsl.w	r2, r1, r2
 8003db8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d071      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003dca:	e06c      	b.n	8003ea6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d02e      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d029      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10b      	bne.n	8003e10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 020a 	bic.w	r2, r2, #10
 8003e06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e14:	f003 021f 	and.w	r2, r3, #31
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d038      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e3c:	e033      	b.n	8003ea6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	2208      	movs	r2, #8
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d02a      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d025      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 020e 	bic.w	r2, r2, #14
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e70:	f003 021f 	and.w	r2, r3, #31
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
}
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ec6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ed8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ede:	f003 021f 	and.w	r2, r3, #31
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d108      	bne.n	8003f10 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f0e:	e007      	b.n	8003f20 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	60da      	str	r2, [r3, #12]
}
 8003f20:	bf00      	nop
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b16      	ldr	r3, [pc, #88]	@ (8003f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d802      	bhi.n	8003f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003f40:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	e001      	b.n	8003f4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003f46:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f48:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	3b08      	subs	r3, #8
 8003f56:	4a12      	ldr	r2, [pc, #72]	@ (8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f64:	089b      	lsrs	r3, r3, #2
 8003f66:	009a      	lsls	r2, r3, #2
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a0b      	ldr	r2, [pc, #44]	@ (8003fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f76:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	2201      	movs	r2, #1
 8003f80:	409a      	lsls	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40020407 	.word	0x40020407
 8003f98:	40020800 	.word	0x40020800
 8003f9c:	40020820 	.word	0x40020820
 8003fa0:	cccccccd 	.word	0xcccccccd
 8003fa4:	40020880 	.word	0x40020880

08003fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a08      	ldr	r2, [pc, #32]	@ (8003fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fca:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	1000823f 	.word	0x1000823f
 8003fec:	40020940 	.word	0x40020940

08003ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ffe:	e15a      	b.n	80042b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	2101      	movs	r1, #1
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	4013      	ands	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 814c 	beq.w	80042b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d005      	beq.n	8004030 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800402c:	2b02      	cmp	r3, #2
 800402e:	d130      	bne.n	8004092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	2203      	movs	r2, #3
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4013      	ands	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004066:	2201      	movs	r2, #1
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4013      	ands	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	f003 0201 	and.w	r2, r3, #1
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b03      	cmp	r3, #3
 800409c:	d017      	beq.n	80040ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	2203      	movs	r2, #3
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d123      	bne.n	8004122 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	08da      	lsrs	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3208      	adds	r2, #8
 80040e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	220f      	movs	r2, #15
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4013      	ands	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	08da      	lsrs	r2, r3, #3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3208      	adds	r2, #8
 800411c:	6939      	ldr	r1, [r7, #16]
 800411e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	2203      	movs	r2, #3
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4013      	ands	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 0203 	and.w	r2, r3, #3
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80a6 	beq.w	80042b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004164:	4b5b      	ldr	r3, [pc, #364]	@ (80042d4 <HAL_GPIO_Init+0x2e4>)
 8004166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004168:	4a5a      	ldr	r2, [pc, #360]	@ (80042d4 <HAL_GPIO_Init+0x2e4>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004170:	4b58      	ldr	r3, [pc, #352]	@ (80042d4 <HAL_GPIO_Init+0x2e4>)
 8004172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800417c:	4a56      	ldr	r2, [pc, #344]	@ (80042d8 <HAL_GPIO_Init+0x2e8>)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	3302      	adds	r3, #2
 8004184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	220f      	movs	r2, #15
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041a6:	d01f      	beq.n	80041e8 <HAL_GPIO_Init+0x1f8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a4c      	ldr	r2, [pc, #304]	@ (80042dc <HAL_GPIO_Init+0x2ec>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d019      	beq.n	80041e4 <HAL_GPIO_Init+0x1f4>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a4b      	ldr	r2, [pc, #300]	@ (80042e0 <HAL_GPIO_Init+0x2f0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d013      	beq.n	80041e0 <HAL_GPIO_Init+0x1f0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a4a      	ldr	r2, [pc, #296]	@ (80042e4 <HAL_GPIO_Init+0x2f4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00d      	beq.n	80041dc <HAL_GPIO_Init+0x1ec>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a49      	ldr	r2, [pc, #292]	@ (80042e8 <HAL_GPIO_Init+0x2f8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d007      	beq.n	80041d8 <HAL_GPIO_Init+0x1e8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a48      	ldr	r2, [pc, #288]	@ (80042ec <HAL_GPIO_Init+0x2fc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <HAL_GPIO_Init+0x1e4>
 80041d0:	2305      	movs	r3, #5
 80041d2:	e00a      	b.n	80041ea <HAL_GPIO_Init+0x1fa>
 80041d4:	2306      	movs	r3, #6
 80041d6:	e008      	b.n	80041ea <HAL_GPIO_Init+0x1fa>
 80041d8:	2304      	movs	r3, #4
 80041da:	e006      	b.n	80041ea <HAL_GPIO_Init+0x1fa>
 80041dc:	2303      	movs	r3, #3
 80041de:	e004      	b.n	80041ea <HAL_GPIO_Init+0x1fa>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e002      	b.n	80041ea <HAL_GPIO_Init+0x1fa>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_GPIO_Init+0x1fa>
 80041e8:	2300      	movs	r3, #0
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	f002 0203 	and.w	r2, r2, #3
 80041f0:	0092      	lsls	r2, r2, #2
 80041f2:	4093      	lsls	r3, r2
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041fa:	4937      	ldr	r1, [pc, #220]	@ (80042d8 <HAL_GPIO_Init+0x2e8>)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	089b      	lsrs	r3, r3, #2
 8004200:	3302      	adds	r3, #2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004208:	4b39      	ldr	r3, [pc, #228]	@ (80042f0 <HAL_GPIO_Init+0x300>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	43db      	mvns	r3, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800422c:	4a30      	ldr	r2, [pc, #192]	@ (80042f0 <HAL_GPIO_Init+0x300>)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004232:	4b2f      	ldr	r3, [pc, #188]	@ (80042f0 <HAL_GPIO_Init+0x300>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004256:	4a26      	ldr	r2, [pc, #152]	@ (80042f0 <HAL_GPIO_Init+0x300>)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800425c:	4b24      	ldr	r3, [pc, #144]	@ (80042f0 <HAL_GPIO_Init+0x300>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	43db      	mvns	r3, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004280:	4a1b      	ldr	r2, [pc, #108]	@ (80042f0 <HAL_GPIO_Init+0x300>)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004286:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <HAL_GPIO_Init+0x300>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	43db      	mvns	r3, r3
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4013      	ands	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042aa:	4a11      	ldr	r2, [pc, #68]	@ (80042f0 <HAL_GPIO_Init+0x300>)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3301      	adds	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f47f ae9d 	bne.w	8004000 <HAL_GPIO_Init+0x10>
  }
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40010000 	.word	0x40010000
 80042dc:	48000400 	.word	0x48000400
 80042e0:	48000800 	.word	0x48000800
 80042e4:	48000c00 	.word	0x48000c00
 80042e8:	48001000 	.word	0x48001000
 80042ec:	48001400 	.word	0x48001400
 80042f0:	40010400 	.word	0x40010400

080042f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	807b      	strh	r3, [r7, #2]
 8004300:	4613      	mov	r3, r2
 8004302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004304:	787b      	ldrb	r3, [r7, #1]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800430a:	887a      	ldrh	r2, [r7, #2]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004310:	e002      	b.n	8004318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004312:	887a      	ldrh	r2, [r7, #2]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800432e:	4b08      	ldr	r3, [pc, #32]	@ (8004350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d006      	beq.n	8004348 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800433a:	4a05      	ldr	r2, [pc, #20]	@ (8004350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	4618      	mov	r0, r3
 8004344:	f7fc fede 	bl	8001104 <HAL_GPIO_EXTI_Callback>
  }
}
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40010400 	.word	0x40010400

08004354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d141      	bne.n	80043e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004362:	4b4b      	ldr	r3, [pc, #300]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436e:	d131      	bne.n	80043d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004370:	4b47      	ldr	r3, [pc, #284]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004376:	4a46      	ldr	r2, [pc, #280]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800437c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004380:	4b43      	ldr	r3, [pc, #268]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004388:	4a41      	ldr	r2, [pc, #260]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800438e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004390:	4b40      	ldr	r3, [pc, #256]	@ (8004494 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2232      	movs	r2, #50	@ 0x32
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	4a3f      	ldr	r2, [pc, #252]	@ (8004498 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	0c9b      	lsrs	r3, r3, #18
 80043a2:	3301      	adds	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043a6:	e002      	b.n	80043ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ae:	4b38      	ldr	r3, [pc, #224]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ba:	d102      	bne.n	80043c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f2      	bne.n	80043a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043c2:	4b33      	ldr	r3, [pc, #204]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ce:	d158      	bne.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e057      	b.n	8004484 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043da:	4a2d      	ldr	r2, [pc, #180]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80043e4:	e04d      	b.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ec:	d141      	bne.n	8004472 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ee:	4b28      	ldr	r3, [pc, #160]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fa:	d131      	bne.n	8004460 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043fc:	4b24      	ldr	r3, [pc, #144]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004402:	4a23      	ldr	r2, [pc, #140]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004408:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800440c:	4b20      	ldr	r3, [pc, #128]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004414:	4a1e      	ldr	r2, [pc, #120]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004416:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800441a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800441c:	4b1d      	ldr	r3, [pc, #116]	@ (8004494 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2232      	movs	r2, #50	@ 0x32
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	4a1c      	ldr	r2, [pc, #112]	@ (8004498 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	0c9b      	lsrs	r3, r3, #18
 800442e:	3301      	adds	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004432:	e002      	b.n	800443a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3b01      	subs	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800443a:	4b15      	ldr	r3, [pc, #84]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004446:	d102      	bne.n	800444e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f2      	bne.n	8004434 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445a:	d112      	bne.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e011      	b.n	8004484 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004460:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004466:	4a0a      	ldr	r2, [pc, #40]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800446c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004470:	e007      	b.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004472:	4b07      	ldr	r3, [pc, #28]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800447a:	4a05      	ldr	r2, [pc, #20]	@ (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004480:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40007000 	.word	0x40007000
 8004494:	20000004 	.word	0x20000004
 8004498:	431bde83 	.word	0x431bde83

0800449c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80044a0:	4b05      	ldr	r3, [pc, #20]	@ (80044b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a04      	ldr	r2, [pc, #16]	@ (80044b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044aa:	6093      	str	r3, [r2, #8]
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40007000 	.word	0x40007000

080044bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e2fe      	b.n	8004acc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d075      	beq.n	80045c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044da:	4b97      	ldr	r3, [pc, #604]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044e4:	4b94      	ldr	r3, [pc, #592]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b0c      	cmp	r3, #12
 80044f2:	d102      	bne.n	80044fa <HAL_RCC_OscConfig+0x3e>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d002      	beq.n	8004500 <HAL_RCC_OscConfig+0x44>
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d10b      	bne.n	8004518 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004500:	4b8d      	ldr	r3, [pc, #564]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d05b      	beq.n	80045c4 <HAL_RCC_OscConfig+0x108>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d157      	bne.n	80045c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e2d9      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004520:	d106      	bne.n	8004530 <HAL_RCC_OscConfig+0x74>
 8004522:	4b85      	ldr	r3, [pc, #532]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a84      	ldr	r2, [pc, #528]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e01d      	b.n	800456c <HAL_RCC_OscConfig+0xb0>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0x98>
 800453a:	4b7f      	ldr	r3, [pc, #508]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a7e      	ldr	r2, [pc, #504]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4b7c      	ldr	r3, [pc, #496]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a7b      	ldr	r2, [pc, #492]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e00b      	b.n	800456c <HAL_RCC_OscConfig+0xb0>
 8004554:	4b78      	ldr	r3, [pc, #480]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a77      	ldr	r2, [pc, #476]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 800455a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	4b75      	ldr	r3, [pc, #468]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a74      	ldr	r2, [pc, #464]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800456a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fd facc 	bl	8001b10 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457c:	f7fd fac8 	bl	8001b10 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	@ 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e29e      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800458e:	4b6a      	ldr	r3, [pc, #424]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0xc0>
 800459a:	e014      	b.n	80045c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd fab8 	bl	8001b10 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fd fab4 	bl	8001b10 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	@ 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e28a      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045b6:	4b60      	ldr	r3, [pc, #384]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0xe8>
 80045c2:	e000      	b.n	80045c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d075      	beq.n	80046be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045d2:	4b59      	ldr	r3, [pc, #356]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045dc:	4b56      	ldr	r3, [pc, #344]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b0c      	cmp	r3, #12
 80045ea:	d102      	bne.n	80045f2 <HAL_RCC_OscConfig+0x136>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d002      	beq.n	80045f8 <HAL_RCC_OscConfig+0x13c>
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d11f      	bne.n	8004638 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_OscConfig+0x154>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e25d      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b49      	ldr	r3, [pc, #292]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	4946      	ldr	r1, [pc, #280]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004624:	4b45      	ldr	r3, [pc, #276]	@ (800473c <HAL_RCC_OscConfig+0x280>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fd fa25 	bl	8001a78 <HAL_InitTick>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d043      	beq.n	80046bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e249      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d023      	beq.n	8004688 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004640:	4b3d      	ldr	r3, [pc, #244]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a3c      	ldr	r2, [pc, #240]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800464a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd fa60 	bl	8001b10 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004654:	f7fd fa5c 	bl	8001b10 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e232      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004666:	4b34      	ldr	r3, [pc, #208]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004672:	4b31      	ldr	r3, [pc, #196]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	061b      	lsls	r3, r3, #24
 8004680:	492d      	ldr	r1, [pc, #180]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004682:	4313      	orrs	r3, r2
 8004684:	604b      	str	r3, [r1, #4]
 8004686:	e01a      	b.n	80046be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004688:	4b2b      	ldr	r3, [pc, #172]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2a      	ldr	r2, [pc, #168]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 800468e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fd fa3c 	bl	8001b10 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469c:	f7fd fa38 	bl	8001b10 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e20e      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ae:	4b22      	ldr	r3, [pc, #136]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x1e0>
 80046ba:	e000      	b.n	80046be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d041      	beq.n	800474e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01c      	beq.n	800470c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d2:	4b19      	ldr	r3, [pc, #100]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 80046d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d8:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e2:	f7fd fa15 	bl	8001b10 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ea:	f7fd fa11 	bl	8001b10 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e1e7      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 80046fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0ef      	beq.n	80046ea <HAL_RCC_OscConfig+0x22e>
 800470a:	e020      	b.n	800474e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800470c:	4b0a      	ldr	r3, [pc, #40]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 800470e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004712:	4a09      	ldr	r2, [pc, #36]	@ (8004738 <HAL_RCC_OscConfig+0x27c>)
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fd f9f8 	bl	8001b10 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004722:	e00d      	b.n	8004740 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004724:	f7fd f9f4 	bl	8001b10 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d906      	bls.n	8004740 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e1ca      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004740:	4b8c      	ldr	r3, [pc, #560]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 8004742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1ea      	bne.n	8004724 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80a6 	beq.w	80048a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475c:	2300      	movs	r3, #0
 800475e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004760:	4b84      	ldr	r3, [pc, #528]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_OscConfig+0x2b4>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_RCC_OscConfig+0x2b6>
 8004770:	2300      	movs	r3, #0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00d      	beq.n	8004792 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004776:	4b7f      	ldr	r3, [pc, #508]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477a:	4a7e      	ldr	r2, [pc, #504]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 800477c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004780:	6593      	str	r3, [r2, #88]	@ 0x58
 8004782:	4b7c      	ldr	r3, [pc, #496]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 8004784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800478e:	2301      	movs	r3, #1
 8004790:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004792:	4b79      	ldr	r3, [pc, #484]	@ (8004978 <HAL_RCC_OscConfig+0x4bc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d118      	bne.n	80047d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800479e:	4b76      	ldr	r3, [pc, #472]	@ (8004978 <HAL_RCC_OscConfig+0x4bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a75      	ldr	r2, [pc, #468]	@ (8004978 <HAL_RCC_OscConfig+0x4bc>)
 80047a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047aa:	f7fd f9b1 	bl	8001b10 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b2:	f7fd f9ad 	bl	8001b10 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e183      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004978 <HAL_RCC_OscConfig+0x4bc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d108      	bne.n	80047ea <HAL_RCC_OscConfig+0x32e>
 80047d8:	4b66      	ldr	r3, [pc, #408]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047de:	4a65      	ldr	r2, [pc, #404]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047e8:	e024      	b.n	8004834 <HAL_RCC_OscConfig+0x378>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b05      	cmp	r3, #5
 80047f0:	d110      	bne.n	8004814 <HAL_RCC_OscConfig+0x358>
 80047f2:	4b60      	ldr	r3, [pc, #384]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 80047fa:	f043 0304 	orr.w	r3, r3, #4
 80047fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004802:	4b5c      	ldr	r3, [pc, #368]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004808:	4a5a      	ldr	r2, [pc, #360]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004812:	e00f      	b.n	8004834 <HAL_RCC_OscConfig+0x378>
 8004814:	4b57      	ldr	r3, [pc, #348]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481a:	4a56      	ldr	r2, [pc, #344]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004824:	4b53      	ldr	r3, [pc, #332]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482a:	4a52      	ldr	r2, [pc, #328]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 800482c:	f023 0304 	bic.w	r3, r3, #4
 8004830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d016      	beq.n	800486a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483c:	f7fd f968 	bl	8001b10 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004842:	e00a      	b.n	800485a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fd f964 	bl	8001b10 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e138      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800485a:	4b46      	ldr	r3, [pc, #280]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0ed      	beq.n	8004844 <HAL_RCC_OscConfig+0x388>
 8004868:	e015      	b.n	8004896 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486a:	f7fd f951 	bl	8001b10 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004870:	e00a      	b.n	8004888 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fd f94d 	bl	8001b10 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e121      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004888:	4b3a      	ldr	r3, [pc, #232]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ed      	bne.n	8004872 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004896:	7ffb      	ldrb	r3, [r7, #31]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d105      	bne.n	80048a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489c:	4b35      	ldr	r3, [pc, #212]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a0:	4a34      	ldr	r2, [pc, #208]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 80048a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d03c      	beq.n	800492e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01c      	beq.n	80048f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 80048be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fd f920 	bl	8001b10 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048d4:	f7fd f91c 	bl	8001b10 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e0f2      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048e6:	4b23      	ldr	r3, [pc, #140]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 80048e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ef      	beq.n	80048d4 <HAL_RCC_OscConfig+0x418>
 80048f4:	e01b      	b.n	800492e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 80048f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004906:	f7fd f903 	bl	8001b10 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800490e:	f7fd f8ff 	bl	8001b10 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e0d5      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004920:	4b14      	ldr	r3, [pc, #80]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 8004922:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1ef      	bne.n	800490e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80c9 	beq.w	8004aca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004938:	4b0e      	ldr	r3, [pc, #56]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b0c      	cmp	r3, #12
 8004942:	f000 8083 	beq.w	8004a4c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d15e      	bne.n	8004a0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494e:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a08      	ldr	r2, [pc, #32]	@ (8004974 <HAL_RCC_OscConfig+0x4b8>)
 8004954:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495a:	f7fd f8d9 	bl	8001b10 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004960:	e00c      	b.n	800497c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004962:	f7fd f8d5 	bl	8001b10 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d905      	bls.n	800497c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e0ab      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
 8004974:	40021000 	.word	0x40021000
 8004978:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800497c:	4b55      	ldr	r3, [pc, #340]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1ec      	bne.n	8004962 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004988:	4b52      	ldr	r3, [pc, #328]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	4b52      	ldr	r3, [pc, #328]	@ (8004ad8 <HAL_RCC_OscConfig+0x61c>)
 800498e:	4013      	ands	r3, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6a11      	ldr	r1, [r2, #32]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004998:	3a01      	subs	r2, #1
 800499a:	0112      	lsls	r2, r2, #4
 800499c:	4311      	orrs	r1, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049a2:	0212      	lsls	r2, r2, #8
 80049a4:	4311      	orrs	r1, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049aa:	0852      	lsrs	r2, r2, #1
 80049ac:	3a01      	subs	r2, #1
 80049ae:	0552      	lsls	r2, r2, #21
 80049b0:	4311      	orrs	r1, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049b6:	0852      	lsrs	r2, r2, #1
 80049b8:	3a01      	subs	r2, #1
 80049ba:	0652      	lsls	r2, r2, #25
 80049bc:	4311      	orrs	r1, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049c2:	06d2      	lsls	r2, r2, #27
 80049c4:	430a      	orrs	r2, r1
 80049c6:	4943      	ldr	r1, [pc, #268]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049cc:	4b41      	ldr	r3, [pc, #260]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a40      	ldr	r2, [pc, #256]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 80049d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049d8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4a3d      	ldr	r2, [pc, #244]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 80049de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fd f894 	bl	8001b10 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fd f890 	bl	8001b10 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e066      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	4b35      	ldr	r3, [pc, #212]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0x530>
 8004a0a:	e05e      	b.n	8004aca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0c:	4b31      	ldr	r3, [pc, #196]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a30      	ldr	r2, [pc, #192]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 8004a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fd f87a 	bl	8001b10 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fd f876 	bl	8001b10 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e04c      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a32:	4b28      	ldr	r3, [pc, #160]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a3e:	4b25      	ldr	r3, [pc, #148]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	4924      	ldr	r1, [pc, #144]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 8004a44:	4b25      	ldr	r3, [pc, #148]	@ (8004adc <HAL_RCC_OscConfig+0x620>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	60cb      	str	r3, [r1, #12]
 8004a4a:	e03e      	b.n	8004aca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e039      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a58:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad4 <HAL_RCC_OscConfig+0x618>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f003 0203 	and.w	r2, r3, #3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d12c      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	3b01      	subs	r3, #1
 8004a78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d123      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d11b      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d113      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d109      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004abc:	085b      	lsrs	r3, r3, #1
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d001      	beq.n	8004aca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	019f800c 	.word	0x019f800c
 8004adc:	feeefffc 	.word	0xfeeefffc

08004ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e11e      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004af8:	4b91      	ldr	r3, [pc, #580]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d910      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b8e      	ldr	r3, [pc, #568]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 020f 	bic.w	r2, r3, #15
 8004b0e:	498c      	ldr	r1, [pc, #560]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b8a      	ldr	r3, [pc, #552]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e106      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d073      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d129      	bne.n	8004b90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3c:	4b81      	ldr	r3, [pc, #516]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0f4      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b4c:	f000 f99e 	bl	8004e8c <RCC_GetSysClockFreqFromPLLSource>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4a7c      	ldr	r2, [pc, #496]	@ (8004d48 <HAL_RCC_ClockConfig+0x268>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d93f      	bls.n	8004bda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b5a:	4b7a      	ldr	r3, [pc, #488]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d033      	beq.n	8004bda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d12f      	bne.n	8004bda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b7a:	4b72      	ldr	r3, [pc, #456]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b82:	4a70      	ldr	r2, [pc, #448]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b8a:	2380      	movs	r3, #128	@ 0x80
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e024      	b.n	8004bda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b98:	4b6a      	ldr	r3, [pc, #424]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0c6      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba8:	4b66      	ldr	r3, [pc, #408]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0be      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004bb8:	f000 f8ce 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4a61      	ldr	r2, [pc, #388]	@ (8004d48 <HAL_RCC_ClockConfig+0x268>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d909      	bls.n	8004bda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bc6:	4b5f      	ldr	r3, [pc, #380]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bce:	4a5d      	ldr	r2, [pc, #372]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004bd6:	2380      	movs	r3, #128	@ 0x80
 8004bd8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bda:	4b5a      	ldr	r3, [pc, #360]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4957      	ldr	r1, [pc, #348]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bec:	f7fc ff90 	bl	8001b10 <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf4:	f7fc ff8c 	bl	8001b10 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e095      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	4b4e      	ldr	r3, [pc, #312]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 020c 	and.w	r2, r3, #12
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d1eb      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d023      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c34:	4b43      	ldr	r3, [pc, #268]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4a42      	ldr	r2, [pc, #264]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c54:	4a3b      	ldr	r2, [pc, #236]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c5c:	4b39      	ldr	r3, [pc, #228]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4936      	ldr	r1, [pc, #216]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b80      	cmp	r3, #128	@ 0x80
 8004c74:	d105      	bne.n	8004c82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c76:	4b33      	ldr	r3, [pc, #204]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	4a32      	ldr	r2, [pc, #200]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c82:	4b2f      	ldr	r3, [pc, #188]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d21d      	bcs.n	8004ccc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c90:	4b2b      	ldr	r3, [pc, #172]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f023 020f 	bic.w	r2, r3, #15
 8004c98:	4929      	ldr	r1, [pc, #164]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ca0:	f7fc ff36 	bl	8001b10 <HAL_GetTick>
 8004ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca8:	f7fc ff32 	bl	8001b10 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e03b      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	4b20      	ldr	r3, [pc, #128]	@ (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d1ed      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4917      	ldr	r1, [pc, #92]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf6:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	490f      	ldr	r1, [pc, #60]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d0a:	f000 f825 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	4b0c      	ldr	r3, [pc, #48]	@ (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	490c      	ldr	r1, [pc, #48]	@ (8004d4c <HAL_RCC_ClockConfig+0x26c>)
 8004d1c:	5ccb      	ldrb	r3, [r1, r3]
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	fa22 f303 	lsr.w	r3, r2, r3
 8004d26:	4a0a      	ldr	r2, [pc, #40]	@ (8004d50 <HAL_RCC_ClockConfig+0x270>)
 8004d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d54 <HAL_RCC_ClockConfig+0x274>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fc fea2 	bl	8001a78 <HAL_InitTick>
 8004d34:	4603      	mov	r3, r0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40022000 	.word	0x40022000
 8004d44:	40021000 	.word	0x40021000
 8004d48:	04c4b400 	.word	0x04c4b400
 8004d4c:	08009580 	.word	0x08009580
 8004d50:	20000004 	.word	0x20000004
 8004d54:	20000008 	.word	0x20000008

08004d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d102      	bne.n	8004d70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	e047      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d70:	4b27      	ldr	r3, [pc, #156]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d102      	bne.n	8004d82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d7c:	4b26      	ldr	r3, [pc, #152]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	e03e      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d82:	4b23      	ldr	r3, [pc, #140]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	2b0c      	cmp	r3, #12
 8004d8c:	d136      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d8e:	4b20      	ldr	r3, [pc, #128]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	3301      	adds	r3, #1
 8004da4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d10c      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dac:	4a1a      	ldr	r2, [pc, #104]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	4a16      	ldr	r2, [pc, #88]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db6:	68d2      	ldr	r2, [r2, #12]
 8004db8:	0a12      	lsrs	r2, r2, #8
 8004dba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	617b      	str	r3, [r7, #20]
      break;
 8004dc4:	e00c      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dc6:	4a13      	ldr	r2, [pc, #76]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	4a10      	ldr	r2, [pc, #64]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd0:	68d2      	ldr	r2, [r2, #12]
 8004dd2:	0a12      	lsrs	r2, r2, #8
 8004dd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dd8:	fb02 f303 	mul.w	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]
      break;
 8004dde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004de0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	0e5b      	lsrs	r3, r3, #25
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	3301      	adds	r3, #1
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	e001      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e00:	693b      	ldr	r3, [r7, #16]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40021000 	.word	0x40021000
 8004e14:	00f42400 	.word	0x00f42400
 8004e18:	016e3600 	.word	0x016e3600

08004e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e20:	4b03      	ldr	r3, [pc, #12]	@ (8004e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e22:	681b      	ldr	r3, [r3, #0]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000004 	.word	0x20000004

08004e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e38:	f7ff fff0 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	0a1b      	lsrs	r3, r3, #8
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	4904      	ldr	r1, [pc, #16]	@ (8004e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e4a:	5ccb      	ldrb	r3, [r1, r3]
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	08009590 	.word	0x08009590

08004e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e64:	f7ff ffda 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	0adb      	lsrs	r3, r3, #11
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4904      	ldr	r1, [pc, #16]	@ (8004e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e76:	5ccb      	ldrb	r3, [r1, r3]
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40021000 	.word	0x40021000
 8004e88:	08009590 	.word	0x08009590

08004e8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e92:	4b1e      	ldr	r3, [pc, #120]	@ (8004f0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004f0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d10c      	bne.n	8004eca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eb0:	4a17      	ldr	r2, [pc, #92]	@ (8004f10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	4a14      	ldr	r2, [pc, #80]	@ (8004f0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004eba:	68d2      	ldr	r2, [r2, #12]
 8004ebc:	0a12      	lsrs	r2, r2, #8
 8004ebe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	617b      	str	r3, [r7, #20]
    break;
 8004ec8:	e00c      	b.n	8004ee4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eca:	4a12      	ldr	r2, [pc, #72]	@ (8004f14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8004f0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ed4:	68d2      	ldr	r2, [r2, #12]
 8004ed6:	0a12      	lsrs	r2, r2, #8
 8004ed8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004edc:	fb02 f303 	mul.w	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]
    break;
 8004ee2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ee4:	4b09      	ldr	r3, [pc, #36]	@ (8004f0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	0e5b      	lsrs	r3, r3, #25
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004efe:	687b      	ldr	r3, [r7, #4]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	016e3600 	.word	0x016e3600
 8004f14:	00f42400 	.word	0x00f42400

08004f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f20:	2300      	movs	r3, #0
 8004f22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f24:	2300      	movs	r3, #0
 8004f26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8098 	beq.w	8005066 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f36:	2300      	movs	r3, #0
 8004f38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f3a:	4b43      	ldr	r3, [pc, #268]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10d      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f46:	4b40      	ldr	r3, [pc, #256]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4a:	4a3f      	ldr	r2, [pc, #252]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f50:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f52:	4b3d      	ldr	r3, [pc, #244]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f62:	4b3a      	ldr	r3, [pc, #232]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a39      	ldr	r2, [pc, #228]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f6e:	f7fc fdcf 	bl	8001b10 <HAL_GetTick>
 8004f72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f74:	e009      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f76:	f7fc fdcb 	bl	8001b10 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d902      	bls.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	74fb      	strb	r3, [r7, #19]
        break;
 8004f88:	e005      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f8a:	4b30      	ldr	r3, [pc, #192]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0ef      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d159      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d01e      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d019      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fb8:	4b23      	ldr	r3, [pc, #140]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fc4:	4b20      	ldr	r3, [pc, #128]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fca:	4a1f      	ldr	r2, [pc, #124]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fda:	4a1b      	ldr	r2, [pc, #108]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fe4:	4a18      	ldr	r2, [pc, #96]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d016      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff6:	f7fc fd8b 	bl	8001b10 <HAL_GetTick>
 8004ffa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ffc:	e00b      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffe:	f7fc fd87 	bl	8001b10 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800500c:	4293      	cmp	r3, r2
 800500e:	d902      	bls.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	74fb      	strb	r3, [r7, #19]
            break;
 8005014:	e006      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005016:	4b0c      	ldr	r3, [pc, #48]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ec      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800502a:	4b07      	ldr	r3, [pc, #28]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005038:	4903      	ldr	r1, [pc, #12]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005040:	e008      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005042:	7cfb      	ldrb	r3, [r7, #19]
 8005044:	74bb      	strb	r3, [r7, #18]
 8005046:	e005      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005048:	40021000 	.word	0x40021000
 800504c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	7cfb      	ldrb	r3, [r7, #19]
 8005052:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005054:	7c7b      	ldrb	r3, [r7, #17]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d105      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800505a:	4ba7      	ldr	r3, [pc, #668]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800505c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505e:	4aa6      	ldr	r2, [pc, #664]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005060:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005064:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005072:	4ba1      	ldr	r3, [pc, #644]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005078:	f023 0203 	bic.w	r2, r3, #3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	499d      	ldr	r1, [pc, #628]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005094:	4b98      	ldr	r3, [pc, #608]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509a:	f023 020c 	bic.w	r2, r3, #12
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4995      	ldr	r1, [pc, #596]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050b6:	4b90      	ldr	r3, [pc, #576]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	498c      	ldr	r1, [pc, #560]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050d8:	4b87      	ldr	r3, [pc, #540]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	4984      	ldr	r1, [pc, #528]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050fa:	4b7f      	ldr	r3, [pc, #508]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005100:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	497b      	ldr	r1, [pc, #492]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800511c:	4b76      	ldr	r3, [pc, #472]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005122:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	4973      	ldr	r1, [pc, #460]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800513e:	4b6e      	ldr	r3, [pc, #440]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005144:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	496a      	ldr	r1, [pc, #424]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005160:	4b65      	ldr	r3, [pc, #404]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005166:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	4962      	ldr	r1, [pc, #392]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005182:	4b5d      	ldr	r3, [pc, #372]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005188:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	4959      	ldr	r1, [pc, #356]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051a4:	4b54      	ldr	r3, [pc, #336]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051aa:	f023 0203 	bic.w	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b2:	4951      	ldr	r1, [pc, #324]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051c6:	4b4c      	ldr	r3, [pc, #304]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d4:	4948      	ldr	r1, [pc, #288]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d015      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051e8:	4b43      	ldr	r3, [pc, #268]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f6:	4940      	ldr	r1, [pc, #256]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005206:	d105      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005208:	4b3b      	ldr	r3, [pc, #236]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4a3a      	ldr	r2, [pc, #232]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005212:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800521c:	2b00      	cmp	r3, #0
 800521e:	d015      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005220:	4b35      	ldr	r3, [pc, #212]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005226:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522e:	4932      	ldr	r1, [pc, #200]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800523e:	d105      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005240:	4b2d      	ldr	r3, [pc, #180]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800524a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d015      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005258:	4b27      	ldr	r3, [pc, #156]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005266:	4924      	ldr	r1, [pc, #144]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005272:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005276:	d105      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005278:	4b1f      	ldr	r3, [pc, #124]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a1e      	ldr	r2, [pc, #120]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005282:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d015      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005290:	4b19      	ldr	r3, [pc, #100]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005296:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529e:	4916      	ldr	r1, [pc, #88]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052ae:	d105      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052b0:	4b11      	ldr	r3, [pc, #68]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4a10      	ldr	r2, [pc, #64]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d019      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052c8:	4b0b      	ldr	r3, [pc, #44]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d6:	4908      	ldr	r1, [pc, #32]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052e6:	d109      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e8:	4b03      	ldr	r3, [pc, #12]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	4a02      	ldr	r2, [pc, #8]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052f2:	60d3      	str	r3, [r2, #12]
 80052f4:	e002      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80052f6:	bf00      	nop
 80052f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d015      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005308:	4b29      	ldr	r3, [pc, #164]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005316:	4926      	ldr	r1, [pc, #152]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005322:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005326:	d105      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005328:	4b21      	ldr	r3, [pc, #132]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	4a20      	ldr	r2, [pc, #128]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800532e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005332:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d015      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005340:	4b1b      	ldr	r3, [pc, #108]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005346:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800534e:	4918      	ldr	r1, [pc, #96]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535e:	d105      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005360:	4b13      	ldr	r3, [pc, #76]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4a12      	ldr	r2, [pc, #72]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800536a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d015      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005378:	4b0d      	ldr	r3, [pc, #52]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800537a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800537e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005386:	490a      	ldr	r1, [pc, #40]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005392:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005396:	d105      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005398:	4b05      	ldr	r3, [pc, #20]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4a04      	ldr	r2, [pc, #16]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800539e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80053a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000

080053b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e049      	b.n	800545a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fc f966 	bl	80016ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f000 ff68 	bl	80062c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	d001      	beq.n	800547c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e04c      	b.n	8005516 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a26      	ldr	r2, [pc, #152]	@ (8005524 <HAL_TIM_Base_Start+0xc0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d022      	beq.n	80054d4 <HAL_TIM_Base_Start+0x70>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005496:	d01d      	beq.n	80054d4 <HAL_TIM_Base_Start+0x70>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a22      	ldr	r2, [pc, #136]	@ (8005528 <HAL_TIM_Base_Start+0xc4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d018      	beq.n	80054d4 <HAL_TIM_Base_Start+0x70>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a21      	ldr	r2, [pc, #132]	@ (800552c <HAL_TIM_Base_Start+0xc8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d013      	beq.n	80054d4 <HAL_TIM_Base_Start+0x70>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005530 <HAL_TIM_Base_Start+0xcc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00e      	beq.n	80054d4 <HAL_TIM_Base_Start+0x70>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005534 <HAL_TIM_Base_Start+0xd0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d009      	beq.n	80054d4 <HAL_TIM_Base_Start+0x70>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005538 <HAL_TIM_Base_Start+0xd4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <HAL_TIM_Base_Start+0x70>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1b      	ldr	r2, [pc, #108]	@ (800553c <HAL_TIM_Base_Start+0xd8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d115      	bne.n	8005500 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	4b19      	ldr	r3, [pc, #100]	@ (8005540 <HAL_TIM_Base_Start+0xdc>)
 80054dc:	4013      	ands	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b06      	cmp	r3, #6
 80054e4:	d015      	beq.n	8005512 <HAL_TIM_Base_Start+0xae>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ec:	d011      	beq.n	8005512 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0201 	orr.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fe:	e008      	b.n	8005512 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	e000      	b.n	8005514 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005512:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40013400 	.word	0x40013400
 8005538:	40014000 	.word	0x40014000
 800553c:	40015000 	.word	0x40015000
 8005540:	00010007 	.word	0x00010007

08005544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b01      	cmp	r3, #1
 8005556:	d001      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e054      	b.n	8005606 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a26      	ldr	r2, [pc, #152]	@ (8005614 <HAL_TIM_Base_Start_IT+0xd0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d022      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0x80>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005586:	d01d      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0x80>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a22      	ldr	r2, [pc, #136]	@ (8005618 <HAL_TIM_Base_Start_IT+0xd4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d018      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0x80>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a21      	ldr	r2, [pc, #132]	@ (800561c <HAL_TIM_Base_Start_IT+0xd8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d013      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0x80>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005620 <HAL_TIM_Base_Start_IT+0xdc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00e      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0x80>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005624 <HAL_TIM_Base_Start_IT+0xe0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d009      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0x80>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005628 <HAL_TIM_Base_Start_IT+0xe4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d004      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0x80>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1b      	ldr	r2, [pc, #108]	@ (800562c <HAL_TIM_Base_Start_IT+0xe8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d115      	bne.n	80055f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	4b19      	ldr	r3, [pc, #100]	@ (8005630 <HAL_TIM_Base_Start_IT+0xec>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2b06      	cmp	r3, #6
 80055d4:	d015      	beq.n	8005602 <HAL_TIM_Base_Start_IT+0xbe>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055dc:	d011      	beq.n	8005602 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0201 	orr.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ee:	e008      	b.n	8005602 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	e000      	b.n	8005604 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005602:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40013400 	.word	0x40013400
 8005628:	40014000 	.word	0x40014000
 800562c:	40015000 	.word	0x40015000
 8005630:	00010007 	.word	0x00010007

08005634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e049      	b.n	80056da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f841 	bl	80056e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3304      	adds	r3, #4
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f000 fe28 	bl	80062c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d109      	bne.n	800571c <HAL_TIM_PWM_Start+0x24>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	e03c      	b.n	8005796 <HAL_TIM_PWM_Start+0x9e>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b04      	cmp	r3, #4
 8005720:	d109      	bne.n	8005736 <HAL_TIM_PWM_Start+0x3e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	bf14      	ite	ne
 800572e:	2301      	movne	r3, #1
 8005730:	2300      	moveq	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	e02f      	b.n	8005796 <HAL_TIM_PWM_Start+0x9e>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b08      	cmp	r3, #8
 800573a:	d109      	bne.n	8005750 <HAL_TIM_PWM_Start+0x58>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	bf14      	ite	ne
 8005748:	2301      	movne	r3, #1
 800574a:	2300      	moveq	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e022      	b.n	8005796 <HAL_TIM_PWM_Start+0x9e>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b0c      	cmp	r3, #12
 8005754:	d109      	bne.n	800576a <HAL_TIM_PWM_Start+0x72>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b01      	cmp	r3, #1
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	e015      	b.n	8005796 <HAL_TIM_PWM_Start+0x9e>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b10      	cmp	r3, #16
 800576e:	d109      	bne.n	8005784 <HAL_TIM_PWM_Start+0x8c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	bf14      	ite	ne
 800577c:	2301      	movne	r3, #1
 800577e:	2300      	moveq	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	e008      	b.n	8005796 <HAL_TIM_PWM_Start+0x9e>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	bf14      	ite	ne
 8005790:	2301      	movne	r3, #1
 8005792:	2300      	moveq	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e0a6      	b.n	80058ec <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d104      	bne.n	80057ae <HAL_TIM_PWM_Start+0xb6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057ac:	e023      	b.n	80057f6 <HAL_TIM_PWM_Start+0xfe>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d104      	bne.n	80057be <HAL_TIM_PWM_Start+0xc6>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057bc:	e01b      	b.n	80057f6 <HAL_TIM_PWM_Start+0xfe>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d104      	bne.n	80057ce <HAL_TIM_PWM_Start+0xd6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057cc:	e013      	b.n	80057f6 <HAL_TIM_PWM_Start+0xfe>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b0c      	cmp	r3, #12
 80057d2:	d104      	bne.n	80057de <HAL_TIM_PWM_Start+0xe6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057dc:	e00b      	b.n	80057f6 <HAL_TIM_PWM_Start+0xfe>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d104      	bne.n	80057ee <HAL_TIM_PWM_Start+0xf6>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057ec:	e003      	b.n	80057f6 <HAL_TIM_PWM_Start+0xfe>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2202      	movs	r2, #2
 80057f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2201      	movs	r2, #1
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 f9dc 	bl	8006bbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a3a      	ldr	r2, [pc, #232]	@ (80058f4 <HAL_TIM_PWM_Start+0x1fc>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d018      	beq.n	8005840 <HAL_TIM_PWM_Start+0x148>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a39      	ldr	r2, [pc, #228]	@ (80058f8 <HAL_TIM_PWM_Start+0x200>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d013      	beq.n	8005840 <HAL_TIM_PWM_Start+0x148>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a37      	ldr	r2, [pc, #220]	@ (80058fc <HAL_TIM_PWM_Start+0x204>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00e      	beq.n	8005840 <HAL_TIM_PWM_Start+0x148>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a36      	ldr	r2, [pc, #216]	@ (8005900 <HAL_TIM_PWM_Start+0x208>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d009      	beq.n	8005840 <HAL_TIM_PWM_Start+0x148>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a34      	ldr	r2, [pc, #208]	@ (8005904 <HAL_TIM_PWM_Start+0x20c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d004      	beq.n	8005840 <HAL_TIM_PWM_Start+0x148>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a33      	ldr	r2, [pc, #204]	@ (8005908 <HAL_TIM_PWM_Start+0x210>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d101      	bne.n	8005844 <HAL_TIM_PWM_Start+0x14c>
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <HAL_TIM_PWM_Start+0x14e>
 8005844:	2300      	movs	r3, #0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005858:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a25      	ldr	r2, [pc, #148]	@ (80058f4 <HAL_TIM_PWM_Start+0x1fc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d022      	beq.n	80058aa <HAL_TIM_PWM_Start+0x1b2>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800586c:	d01d      	beq.n	80058aa <HAL_TIM_PWM_Start+0x1b2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a26      	ldr	r2, [pc, #152]	@ (800590c <HAL_TIM_PWM_Start+0x214>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d018      	beq.n	80058aa <HAL_TIM_PWM_Start+0x1b2>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a24      	ldr	r2, [pc, #144]	@ (8005910 <HAL_TIM_PWM_Start+0x218>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <HAL_TIM_PWM_Start+0x1b2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a23      	ldr	r2, [pc, #140]	@ (8005914 <HAL_TIM_PWM_Start+0x21c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d00e      	beq.n	80058aa <HAL_TIM_PWM_Start+0x1b2>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a19      	ldr	r2, [pc, #100]	@ (80058f8 <HAL_TIM_PWM_Start+0x200>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d009      	beq.n	80058aa <HAL_TIM_PWM_Start+0x1b2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a18      	ldr	r2, [pc, #96]	@ (80058fc <HAL_TIM_PWM_Start+0x204>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d004      	beq.n	80058aa <HAL_TIM_PWM_Start+0x1b2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a18      	ldr	r2, [pc, #96]	@ (8005908 <HAL_TIM_PWM_Start+0x210>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d115      	bne.n	80058d6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	4b19      	ldr	r3, [pc, #100]	@ (8005918 <HAL_TIM_PWM_Start+0x220>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b06      	cmp	r3, #6
 80058ba:	d015      	beq.n	80058e8 <HAL_TIM_PWM_Start+0x1f0>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058c2:	d011      	beq.n	80058e8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d4:	e008      	b.n	80058e8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0201 	orr.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	e000      	b.n	80058ea <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	40013400 	.word	0x40013400
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40014800 	.word	0x40014800
 8005908:	40015000 	.word	0x40015000
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40000c00 	.word	0x40000c00
 8005918:	00010007 	.word	0x00010007

0800591c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e097      	b.n	8005a60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d106      	bne.n	800594a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fb ff19 	bl	800177c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2202      	movs	r2, #2
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005960:	f023 0307 	bic.w	r3, r3, #7
 8005964:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3304      	adds	r3, #4
 800596e:	4619      	mov	r1, r3
 8005970:	4610      	mov	r0, r2
 8005972:	f000 fca9 	bl	80062c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	021b      	lsls	r3, r3, #8
 80059ae:	4313      	orrs	r3, r2
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80059bc:	f023 030c 	bic.w	r3, r3, #12
 80059c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	4313      	orrs	r3, r2
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	011a      	lsls	r2, r3, #4
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	031b      	lsls	r3, r3, #12
 80059ec:	4313      	orrs	r3, r2
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80059fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d110      	bne.n	8005aba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d102      	bne.n	8005aa4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a9e:	7b7b      	ldrb	r3, [r7, #13]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d001      	beq.n	8005aa8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e069      	b.n	8005b7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ab8:	e031      	b.n	8005b1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d110      	bne.n	8005ae2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ac0:	7bbb      	ldrb	r3, [r7, #14]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d102      	bne.n	8005acc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ac6:	7b3b      	ldrb	r3, [r7, #12]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d001      	beq.n	8005ad0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e055      	b.n	8005b7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ae0:	e01d      	b.n	8005b1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d108      	bne.n	8005afa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d105      	bne.n	8005afa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aee:	7b7b      	ldrb	r3, [r7, #13]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d102      	bne.n	8005afa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005af4:	7b3b      	ldrb	r3, [r7, #12]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d001      	beq.n	8005afe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e03e      	b.n	8005b7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2202      	movs	r2, #2
 8005b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2202      	movs	r2, #2
 8005b12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_TIM_Encoder_Start+0xc4>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d008      	beq.n	8005b3c <HAL_TIM_Encoder_Start+0xd4>
 8005b2a:	e00f      	b.n	8005b4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2201      	movs	r2, #1
 8005b32:	2100      	movs	r1, #0
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 f841 	bl	8006bbc <TIM_CCxChannelCmd>
      break;
 8005b3a:	e016      	b.n	8005b6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2201      	movs	r2, #1
 8005b42:	2104      	movs	r1, #4
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 f839 	bl	8006bbc <TIM_CCxChannelCmd>
      break;
 8005b4a:	e00e      	b.n	8005b6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2201      	movs	r2, #1
 8005b52:	2100      	movs	r1, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 f831 	bl	8006bbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	2104      	movs	r1, #4
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 f82a 	bl	8006bbc <TIM_CCxChannelCmd>
      break;
 8005b68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0201 	orr.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d020      	beq.n	8005be8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01b      	beq.n	8005be8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0202 	mvn.w	r2, #2
 8005bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fb5c 	bl	800628c <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fb4e 	bl	8006278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fb5f 	bl	80062a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d020      	beq.n	8005c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01b      	beq.n	8005c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0204 	mvn.w	r2, #4
 8005c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fb36 	bl	800628c <HAL_TIM_IC_CaptureCallback>
 8005c20:	e005      	b.n	8005c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fb28 	bl	8006278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fb39 	bl	80062a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d020      	beq.n	8005c80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01b      	beq.n	8005c80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0208 	mvn.w	r2, #8
 8005c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2204      	movs	r2, #4
 8005c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fb10 	bl	800628c <HAL_TIM_IC_CaptureCallback>
 8005c6c:	e005      	b.n	8005c7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fb02 	bl	8006278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb13 	bl	80062a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 0310 	and.w	r3, r3, #16
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d020      	beq.n	8005ccc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01b      	beq.n	8005ccc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0210 	mvn.w	r2, #16
 8005c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 faea 	bl	800628c <HAL_TIM_IC_CaptureCallback>
 8005cb8:	e005      	b.n	8005cc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fadc 	bl	8006278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 faed 	bl	80062a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00c      	beq.n	8005cf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d007      	beq.n	8005cf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0201 	mvn.w	r2, #1
 8005ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fb fa30 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00c      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f001 f8a9 	bl	8006e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00c      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 f8a1 	bl	8006e84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00c      	beq.n	8005d66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 faa7 	bl	80062b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00c      	beq.n	8005d8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d007      	beq.n	8005d8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f06f 0220 	mvn.w	r2, #32
 8005d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 f869 	bl	8006e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00c      	beq.n	8005dae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d007      	beq.n	8005dae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 f875 	bl	8006e98 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00c      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f001 f86d 	bl	8006eac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00c      	beq.n	8005df6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f001 f865 	bl	8006ec0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00c      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f001 f85d 	bl	8006ed4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e0ff      	b.n	8006042 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b14      	cmp	r3, #20
 8005e4e:	f200 80f0 	bhi.w	8006032 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e52:	a201      	add	r2, pc, #4	@ (adr r2, 8005e58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005ead 	.word	0x08005ead
 8005e5c:	08006033 	.word	0x08006033
 8005e60:	08006033 	.word	0x08006033
 8005e64:	08006033 	.word	0x08006033
 8005e68:	08005eed 	.word	0x08005eed
 8005e6c:	08006033 	.word	0x08006033
 8005e70:	08006033 	.word	0x08006033
 8005e74:	08006033 	.word	0x08006033
 8005e78:	08005f2f 	.word	0x08005f2f
 8005e7c:	08006033 	.word	0x08006033
 8005e80:	08006033 	.word	0x08006033
 8005e84:	08006033 	.word	0x08006033
 8005e88:	08005f6f 	.word	0x08005f6f
 8005e8c:	08006033 	.word	0x08006033
 8005e90:	08006033 	.word	0x08006033
 8005e94:	08006033 	.word	0x08006033
 8005e98:	08005fb1 	.word	0x08005fb1
 8005e9c:	08006033 	.word	0x08006033
 8005ea0:	08006033 	.word	0x08006033
 8005ea4:	08006033 	.word	0x08006033
 8005ea8:	08005ff1 	.word	0x08005ff1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68b9      	ldr	r1, [r7, #8]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fabc 	bl	8006430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699a      	ldr	r2, [r3, #24]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0208 	orr.w	r2, r2, #8
 8005ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0204 	bic.w	r2, r2, #4
 8005ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6999      	ldr	r1, [r3, #24]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	619a      	str	r2, [r3, #24]
      break;
 8005eea:	e0a5      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fb36 	bl	8006564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6999      	ldr	r1, [r3, #24]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	021a      	lsls	r2, r3, #8
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	619a      	str	r2, [r3, #24]
      break;
 8005f2c:	e084      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fba9 	bl	800668c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69da      	ldr	r2, [r3, #28]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0208 	orr.w	r2, r2, #8
 8005f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69da      	ldr	r2, [r3, #28]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0204 	bic.w	r2, r2, #4
 8005f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69d9      	ldr	r1, [r3, #28]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	61da      	str	r2, [r3, #28]
      break;
 8005f6c:	e064      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fc1b 	bl	80067b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69d9      	ldr	r1, [r3, #28]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	021a      	lsls	r2, r3, #8
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	61da      	str	r2, [r3, #28]
      break;
 8005fae:	e043      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fc8e 	bl	80068d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0208 	orr.w	r2, r2, #8
 8005fca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0204 	bic.w	r2, r2, #4
 8005fda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005fee:	e023      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fcd8 	bl	80069ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800600a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800601a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	021a      	lsls	r2, r3, #8
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006030:	e002      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	75fb      	strb	r3, [r7, #23]
      break;
 8006036:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006040:	7dfb      	ldrb	r3, [r7, #23]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop

0800604c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_TIM_ConfigClockSource+0x1c>
 8006064:	2302      	movs	r3, #2
 8006066:	e0f6      	b.n	8006256 <HAL_TIM_ConfigClockSource+0x20a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006086:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800608a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a6f      	ldr	r2, [pc, #444]	@ (8006260 <HAL_TIM_ConfigClockSource+0x214>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	f000 80c1 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1de>
 80060a8:	4a6d      	ldr	r2, [pc, #436]	@ (8006260 <HAL_TIM_ConfigClockSource+0x214>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	f200 80c6 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 80060b0:	4a6c      	ldr	r2, [pc, #432]	@ (8006264 <HAL_TIM_ConfigClockSource+0x218>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	f000 80b9 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1de>
 80060b8:	4a6a      	ldr	r2, [pc, #424]	@ (8006264 <HAL_TIM_ConfigClockSource+0x218>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	f200 80be 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 80060c0:	4a69      	ldr	r2, [pc, #420]	@ (8006268 <HAL_TIM_ConfigClockSource+0x21c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	f000 80b1 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1de>
 80060c8:	4a67      	ldr	r2, [pc, #412]	@ (8006268 <HAL_TIM_ConfigClockSource+0x21c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	f200 80b6 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 80060d0:	4a66      	ldr	r2, [pc, #408]	@ (800626c <HAL_TIM_ConfigClockSource+0x220>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	f000 80a9 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1de>
 80060d8:	4a64      	ldr	r2, [pc, #400]	@ (800626c <HAL_TIM_ConfigClockSource+0x220>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	f200 80ae 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 80060e0:	4a63      	ldr	r2, [pc, #396]	@ (8006270 <HAL_TIM_ConfigClockSource+0x224>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	f000 80a1 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1de>
 80060e8:	4a61      	ldr	r2, [pc, #388]	@ (8006270 <HAL_TIM_ConfigClockSource+0x224>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	f200 80a6 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 80060f0:	4a60      	ldr	r2, [pc, #384]	@ (8006274 <HAL_TIM_ConfigClockSource+0x228>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	f000 8099 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1de>
 80060f8:	4a5e      	ldr	r2, [pc, #376]	@ (8006274 <HAL_TIM_ConfigClockSource+0x228>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	f200 809e 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 8006100:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006104:	f000 8091 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1de>
 8006108:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800610c:	f200 8096 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 8006110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006114:	f000 8089 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1de>
 8006118:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800611c:	f200 808e 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 8006120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006124:	d03e      	beq.n	80061a4 <HAL_TIM_ConfigClockSource+0x158>
 8006126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800612a:	f200 8087 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 800612e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006132:	f000 8086 	beq.w	8006242 <HAL_TIM_ConfigClockSource+0x1f6>
 8006136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613a:	d87f      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 800613c:	2b70      	cmp	r3, #112	@ 0x70
 800613e:	d01a      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x12a>
 8006140:	2b70      	cmp	r3, #112	@ 0x70
 8006142:	d87b      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 8006144:	2b60      	cmp	r3, #96	@ 0x60
 8006146:	d050      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x19e>
 8006148:	2b60      	cmp	r3, #96	@ 0x60
 800614a:	d877      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 800614c:	2b50      	cmp	r3, #80	@ 0x50
 800614e:	d03c      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x17e>
 8006150:	2b50      	cmp	r3, #80	@ 0x50
 8006152:	d873      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 8006154:	2b40      	cmp	r3, #64	@ 0x40
 8006156:	d058      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x1be>
 8006158:	2b40      	cmp	r3, #64	@ 0x40
 800615a:	d86f      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 800615c:	2b30      	cmp	r3, #48	@ 0x30
 800615e:	d064      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x1de>
 8006160:	2b30      	cmp	r3, #48	@ 0x30
 8006162:	d86b      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 8006164:	2b20      	cmp	r3, #32
 8006166:	d060      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x1de>
 8006168:	2b20      	cmp	r3, #32
 800616a:	d867      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1f0>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d05c      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x1de>
 8006170:	2b10      	cmp	r3, #16
 8006172:	d05a      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x1de>
 8006174:	e062      	b.n	800623c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006186:	f000 fcf9 	bl	8006b7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	609a      	str	r2, [r3, #8]
      break;
 80061a2:	e04f      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061b4:	f000 fce2 	bl	8006b7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061c6:	609a      	str	r2, [r3, #8]
      break;
 80061c8:	e03c      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d6:	461a      	mov	r2, r3
 80061d8:	f000 fc54 	bl	8006a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2150      	movs	r1, #80	@ 0x50
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fcad 	bl	8006b42 <TIM_ITRx_SetConfig>
      break;
 80061e8:	e02c      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061f6:	461a      	mov	r2, r3
 80061f8:	f000 fc73 	bl	8006ae2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2160      	movs	r1, #96	@ 0x60
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fc9d 	bl	8006b42 <TIM_ITRx_SetConfig>
      break;
 8006208:	e01c      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006216:	461a      	mov	r2, r3
 8006218:	f000 fc34 	bl	8006a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2140      	movs	r1, #64	@ 0x40
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fc8d 	bl	8006b42 <TIM_ITRx_SetConfig>
      break;
 8006228:	e00c      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f000 fc84 	bl	8006b42 <TIM_ITRx_SetConfig>
      break;
 800623a:	e003      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
      break;
 8006240:	e000      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	00100070 	.word	0x00100070
 8006264:	00100060 	.word	0x00100060
 8006268:	00100050 	.word	0x00100050
 800626c:	00100040 	.word	0x00100040
 8006270:	00100030 	.word	0x00100030
 8006274:	00100020 	.word	0x00100020

08006278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a4c      	ldr	r2, [pc, #304]	@ (800640c <TIM_Base_SetConfig+0x144>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d017      	beq.n	8006310 <TIM_Base_SetConfig+0x48>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e6:	d013      	beq.n	8006310 <TIM_Base_SetConfig+0x48>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a49      	ldr	r2, [pc, #292]	@ (8006410 <TIM_Base_SetConfig+0x148>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00f      	beq.n	8006310 <TIM_Base_SetConfig+0x48>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a48      	ldr	r2, [pc, #288]	@ (8006414 <TIM_Base_SetConfig+0x14c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00b      	beq.n	8006310 <TIM_Base_SetConfig+0x48>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a47      	ldr	r2, [pc, #284]	@ (8006418 <TIM_Base_SetConfig+0x150>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d007      	beq.n	8006310 <TIM_Base_SetConfig+0x48>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a46      	ldr	r2, [pc, #280]	@ (800641c <TIM_Base_SetConfig+0x154>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_Base_SetConfig+0x48>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a45      	ldr	r2, [pc, #276]	@ (8006420 <TIM_Base_SetConfig+0x158>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d108      	bne.n	8006322 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a39      	ldr	r2, [pc, #228]	@ (800640c <TIM_Base_SetConfig+0x144>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d023      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006330:	d01f      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a36      	ldr	r2, [pc, #216]	@ (8006410 <TIM_Base_SetConfig+0x148>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01b      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a35      	ldr	r2, [pc, #212]	@ (8006414 <TIM_Base_SetConfig+0x14c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d017      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a34      	ldr	r2, [pc, #208]	@ (8006418 <TIM_Base_SetConfig+0x150>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d013      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a33      	ldr	r2, [pc, #204]	@ (800641c <TIM_Base_SetConfig+0x154>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00f      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a33      	ldr	r2, [pc, #204]	@ (8006424 <TIM_Base_SetConfig+0x15c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00b      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a32      	ldr	r2, [pc, #200]	@ (8006428 <TIM_Base_SetConfig+0x160>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d007      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a31      	ldr	r2, [pc, #196]	@ (800642c <TIM_Base_SetConfig+0x164>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d003      	beq.n	8006372 <TIM_Base_SetConfig+0xaa>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2c      	ldr	r2, [pc, #176]	@ (8006420 <TIM_Base_SetConfig+0x158>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d108      	bne.n	8006384 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4313      	orrs	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a18      	ldr	r2, [pc, #96]	@ (800640c <TIM_Base_SetConfig+0x144>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <TIM_Base_SetConfig+0x110>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a1a      	ldr	r2, [pc, #104]	@ (800641c <TIM_Base_SetConfig+0x154>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00f      	beq.n	80063d8 <TIM_Base_SetConfig+0x110>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006424 <TIM_Base_SetConfig+0x15c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00b      	beq.n	80063d8 <TIM_Base_SetConfig+0x110>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a19      	ldr	r2, [pc, #100]	@ (8006428 <TIM_Base_SetConfig+0x160>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d007      	beq.n	80063d8 <TIM_Base_SetConfig+0x110>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a18      	ldr	r2, [pc, #96]	@ (800642c <TIM_Base_SetConfig+0x164>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_Base_SetConfig+0x110>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a13      	ldr	r2, [pc, #76]	@ (8006420 <TIM_Base_SetConfig+0x158>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d103      	bne.n	80063e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d105      	bne.n	80063fe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f023 0201 	bic.w	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	611a      	str	r2, [r3, #16]
  }
}
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40012c00 	.word	0x40012c00
 8006410:	40000400 	.word	0x40000400
 8006414:	40000800 	.word	0x40000800
 8006418:	40000c00 	.word	0x40000c00
 800641c:	40013400 	.word	0x40013400
 8006420:	40015000 	.word	0x40015000
 8006424:	40014000 	.word	0x40014000
 8006428:	40014400 	.word	0x40014400
 800642c:	40014800 	.word	0x40014800

08006430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	f023 0201 	bic.w	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800645e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f023 0302 	bic.w	r3, r3, #2
 800647c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a30      	ldr	r2, [pc, #192]	@ (800654c <TIM_OC1_SetConfig+0x11c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d013      	beq.n	80064b8 <TIM_OC1_SetConfig+0x88>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a2f      	ldr	r2, [pc, #188]	@ (8006550 <TIM_OC1_SetConfig+0x120>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00f      	beq.n	80064b8 <TIM_OC1_SetConfig+0x88>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a2e      	ldr	r2, [pc, #184]	@ (8006554 <TIM_OC1_SetConfig+0x124>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00b      	beq.n	80064b8 <TIM_OC1_SetConfig+0x88>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a2d      	ldr	r2, [pc, #180]	@ (8006558 <TIM_OC1_SetConfig+0x128>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d007      	beq.n	80064b8 <TIM_OC1_SetConfig+0x88>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a2c      	ldr	r2, [pc, #176]	@ (800655c <TIM_OC1_SetConfig+0x12c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC1_SetConfig+0x88>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006560 <TIM_OC1_SetConfig+0x130>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d10c      	bne.n	80064d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f023 0308 	bic.w	r3, r3, #8
 80064be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 0304 	bic.w	r3, r3, #4
 80064d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a1d      	ldr	r2, [pc, #116]	@ (800654c <TIM_OC1_SetConfig+0x11c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <TIM_OC1_SetConfig+0xd2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006550 <TIM_OC1_SetConfig+0x120>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00f      	beq.n	8006502 <TIM_OC1_SetConfig+0xd2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006554 <TIM_OC1_SetConfig+0x124>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00b      	beq.n	8006502 <TIM_OC1_SetConfig+0xd2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006558 <TIM_OC1_SetConfig+0x128>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d007      	beq.n	8006502 <TIM_OC1_SetConfig+0xd2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a19      	ldr	r2, [pc, #100]	@ (800655c <TIM_OC1_SetConfig+0x12c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_OC1_SetConfig+0xd2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a18      	ldr	r2, [pc, #96]	@ (8006560 <TIM_OC1_SetConfig+0x130>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d111      	bne.n	8006526 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	621a      	str	r2, [r3, #32]
}
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40013400 	.word	0x40013400
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800
 8006560:	40015000 	.word	0x40015000

08006564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f023 0210 	bic.w	r2, r3, #16
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800659e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0320 	bic.w	r3, r3, #32
 80065b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006674 <TIM_OC2_SetConfig+0x110>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <TIM_OC2_SetConfig+0x74>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a2b      	ldr	r2, [pc, #172]	@ (8006678 <TIM_OC2_SetConfig+0x114>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC2_SetConfig+0x74>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a2a      	ldr	r2, [pc, #168]	@ (800667c <TIM_OC2_SetConfig+0x118>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d10d      	bne.n	80065f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006674 <TIM_OC2_SetConfig+0x110>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d013      	beq.n	8006624 <TIM_OC2_SetConfig+0xc0>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006678 <TIM_OC2_SetConfig+0x114>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00f      	beq.n	8006624 <TIM_OC2_SetConfig+0xc0>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a1e      	ldr	r2, [pc, #120]	@ (8006680 <TIM_OC2_SetConfig+0x11c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00b      	beq.n	8006624 <TIM_OC2_SetConfig+0xc0>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a1d      	ldr	r2, [pc, #116]	@ (8006684 <TIM_OC2_SetConfig+0x120>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d007      	beq.n	8006624 <TIM_OC2_SetConfig+0xc0>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a1c      	ldr	r2, [pc, #112]	@ (8006688 <TIM_OC2_SetConfig+0x124>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d003      	beq.n	8006624 <TIM_OC2_SetConfig+0xc0>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a17      	ldr	r2, [pc, #92]	@ (800667c <TIM_OC2_SetConfig+0x118>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d113      	bne.n	800664c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800662a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	bf00      	nop
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40013400 	.word	0x40013400
 800667c:	40015000 	.word	0x40015000
 8006680:	40014000 	.word	0x40014000
 8006684:	40014400 	.word	0x40014400
 8006688:	40014800 	.word	0x40014800

0800668c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0303 	bic.w	r3, r3, #3
 80066c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006798 <TIM_OC3_SetConfig+0x10c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d007      	beq.n	80066fe <TIM_OC3_SetConfig+0x72>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a2a      	ldr	r2, [pc, #168]	@ (800679c <TIM_OC3_SetConfig+0x110>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d003      	beq.n	80066fe <TIM_OC3_SetConfig+0x72>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a29      	ldr	r2, [pc, #164]	@ (80067a0 <TIM_OC3_SetConfig+0x114>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d10d      	bne.n	800671a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1e      	ldr	r2, [pc, #120]	@ (8006798 <TIM_OC3_SetConfig+0x10c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d013      	beq.n	800674a <TIM_OC3_SetConfig+0xbe>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1d      	ldr	r2, [pc, #116]	@ (800679c <TIM_OC3_SetConfig+0x110>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00f      	beq.n	800674a <TIM_OC3_SetConfig+0xbe>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a1d      	ldr	r2, [pc, #116]	@ (80067a4 <TIM_OC3_SetConfig+0x118>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00b      	beq.n	800674a <TIM_OC3_SetConfig+0xbe>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a1c      	ldr	r2, [pc, #112]	@ (80067a8 <TIM_OC3_SetConfig+0x11c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d007      	beq.n	800674a <TIM_OC3_SetConfig+0xbe>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a1b      	ldr	r2, [pc, #108]	@ (80067ac <TIM_OC3_SetConfig+0x120>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d003      	beq.n	800674a <TIM_OC3_SetConfig+0xbe>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a16      	ldr	r2, [pc, #88]	@ (80067a0 <TIM_OC3_SetConfig+0x114>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d113      	bne.n	8006772 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	621a      	str	r2, [r3, #32]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	40012c00 	.word	0x40012c00
 800679c:	40013400 	.word	0x40013400
 80067a0:	40015000 	.word	0x40015000
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40014400 	.word	0x40014400
 80067ac:	40014800 	.word	0x40014800

080067b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	021b      	lsls	r3, r3, #8
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	031b      	lsls	r3, r3, #12
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a2c      	ldr	r2, [pc, #176]	@ (80068c0 <TIM_OC4_SetConfig+0x110>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d007      	beq.n	8006824 <TIM_OC4_SetConfig+0x74>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a2b      	ldr	r2, [pc, #172]	@ (80068c4 <TIM_OC4_SetConfig+0x114>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d003      	beq.n	8006824 <TIM_OC4_SetConfig+0x74>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a2a      	ldr	r2, [pc, #168]	@ (80068c8 <TIM_OC4_SetConfig+0x118>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d10d      	bne.n	8006840 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800682a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	031b      	lsls	r3, r3, #12
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800683e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a1f      	ldr	r2, [pc, #124]	@ (80068c0 <TIM_OC4_SetConfig+0x110>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d013      	beq.n	8006870 <TIM_OC4_SetConfig+0xc0>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a1e      	ldr	r2, [pc, #120]	@ (80068c4 <TIM_OC4_SetConfig+0x114>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00f      	beq.n	8006870 <TIM_OC4_SetConfig+0xc0>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a1e      	ldr	r2, [pc, #120]	@ (80068cc <TIM_OC4_SetConfig+0x11c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00b      	beq.n	8006870 <TIM_OC4_SetConfig+0xc0>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a1d      	ldr	r2, [pc, #116]	@ (80068d0 <TIM_OC4_SetConfig+0x120>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d007      	beq.n	8006870 <TIM_OC4_SetConfig+0xc0>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a1c      	ldr	r2, [pc, #112]	@ (80068d4 <TIM_OC4_SetConfig+0x124>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_OC4_SetConfig+0xc0>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a17      	ldr	r2, [pc, #92]	@ (80068c8 <TIM_OC4_SetConfig+0x118>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d113      	bne.n	8006898 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006876:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800687e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	019b      	lsls	r3, r3, #6
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	019b      	lsls	r3, r3, #6
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	621a      	str	r2, [r3, #32]
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	40013400 	.word	0x40013400
 80068c8:	40015000 	.word	0x40015000
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40014400 	.word	0x40014400
 80068d4:	40014800 	.word	0x40014800

080068d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800691c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	041b      	lsls	r3, r3, #16
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a19      	ldr	r2, [pc, #100]	@ (8006994 <TIM_OC5_SetConfig+0xbc>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <TIM_OC5_SetConfig+0x82>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a18      	ldr	r2, [pc, #96]	@ (8006998 <TIM_OC5_SetConfig+0xc0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00f      	beq.n	800695a <TIM_OC5_SetConfig+0x82>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a17      	ldr	r2, [pc, #92]	@ (800699c <TIM_OC5_SetConfig+0xc4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00b      	beq.n	800695a <TIM_OC5_SetConfig+0x82>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a16      	ldr	r2, [pc, #88]	@ (80069a0 <TIM_OC5_SetConfig+0xc8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d007      	beq.n	800695a <TIM_OC5_SetConfig+0x82>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a15      	ldr	r2, [pc, #84]	@ (80069a4 <TIM_OC5_SetConfig+0xcc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d003      	beq.n	800695a <TIM_OC5_SetConfig+0x82>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a14      	ldr	r2, [pc, #80]	@ (80069a8 <TIM_OC5_SetConfig+0xd0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d109      	bne.n	800696e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	621a      	str	r2, [r3, #32]
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40012c00 	.word	0x40012c00
 8006998:	40013400 	.word	0x40013400
 800699c:	40014000 	.word	0x40014000
 80069a0:	40014400 	.word	0x40014400
 80069a4:	40014800 	.word	0x40014800
 80069a8:	40015000 	.word	0x40015000

080069ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	021b      	lsls	r3, r3, #8
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	051b      	lsls	r3, r3, #20
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a1a      	ldr	r2, [pc, #104]	@ (8006a6c <TIM_OC6_SetConfig+0xc0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <TIM_OC6_SetConfig+0x84>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a19      	ldr	r2, [pc, #100]	@ (8006a70 <TIM_OC6_SetConfig+0xc4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00f      	beq.n	8006a30 <TIM_OC6_SetConfig+0x84>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a18      	ldr	r2, [pc, #96]	@ (8006a74 <TIM_OC6_SetConfig+0xc8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00b      	beq.n	8006a30 <TIM_OC6_SetConfig+0x84>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a17      	ldr	r2, [pc, #92]	@ (8006a78 <TIM_OC6_SetConfig+0xcc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d007      	beq.n	8006a30 <TIM_OC6_SetConfig+0x84>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a16      	ldr	r2, [pc, #88]	@ (8006a7c <TIM_OC6_SetConfig+0xd0>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC6_SetConfig+0x84>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a15      	ldr	r2, [pc, #84]	@ (8006a80 <TIM_OC6_SetConfig+0xd4>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d109      	bne.n	8006a44 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	029b      	lsls	r3, r3, #10
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40014400 	.word	0x40014400
 8006a7c:	40014800 	.word	0x40014800
 8006a80:	40015000 	.word	0x40015000

08006a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f023 0201 	bic.w	r2, r3, #1
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f023 030a 	bic.w	r3, r3, #10
 8006ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b087      	sub	sp, #28
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	f023 0210 	bic.w	r2, r3, #16
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	031b      	lsls	r3, r3, #12
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	621a      	str	r2, [r3, #32]
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b085      	sub	sp, #20
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f043 0307 	orr.w	r3, r3, #7
 8006b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	609a      	str	r2, [r3, #8]
}
 8006b70:	bf00      	nop
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	021a      	lsls	r2, r3, #8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	609a      	str	r2, [r3, #8]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	2201      	movs	r2, #1
 8006bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1a      	ldr	r2, [r3, #32]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	43db      	mvns	r3, r3
 8006bde:	401a      	ands	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1a      	ldr	r2, [r3, #32]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f003 031f 	and.w	r3, r3, #31
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e074      	b.n	8006d0a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a34      	ldr	r2, [pc, #208]	@ (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d009      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a33      	ldr	r2, [pc, #204]	@ (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d004      	beq.n	8006c5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a31      	ldr	r2, [pc, #196]	@ (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d108      	bne.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a21      	ldr	r2, [pc, #132]	@ (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d022      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca0:	d01d      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d018      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d013      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1c      	ldr	r2, [pc, #112]	@ (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00e      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a15      	ldr	r2, [pc, #84]	@ (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d009      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a18      	ldr	r2, [pc, #96]	@ (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d004      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a11      	ldr	r2, [pc, #68]	@ (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d10c      	bne.n	8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40012c00 	.word	0x40012c00
 8006d1c:	40013400 	.word	0x40013400
 8006d20:	40015000 	.word	0x40015000
 8006d24:	40000400 	.word	0x40000400
 8006d28:	40000800 	.word	0x40000800
 8006d2c:	40000c00 	.word	0x40000c00
 8006d30:	40014000 	.word	0x40014000

08006d34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e078      	b.n	8006e42 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	041b      	lsls	r3, r3, #16
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8006e50 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d009      	beq.n	8006df6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e54 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d004      	beq.n	8006df6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a19      	ldr	r2, [pc, #100]	@ (8006e58 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d11c      	bne.n	8006e30 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e00:	051b      	lsls	r3, r3, #20
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	40012c00 	.word	0x40012c00
 8006e54:	40013400 	.word	0x40013400
 8006e58:	40015000 	.word	0x40015000

08006e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e042      	b.n	8006f80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d106      	bne.n	8006f12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7fa fb6d 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2224      	movs	r2, #36	@ 0x24
 8006f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0201 	bic.w	r2, r2, #1
 8006f28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 ff52 	bl	8007ddc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fc53 	bl	80077e4 <UART_SetConfig>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e01b      	b.n	8006f80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 ffd1 	bl	8007f20 <UART_CheckIdleState>
 8006f7e:	4603      	mov	r3, r0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b091      	sub	sp, #68	@ 0x44
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d178      	bne.n	8007092 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <HAL_UART_Transmit_IT+0x24>
 8006fa6:	88fb      	ldrh	r3, [r7, #6]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e071      	b.n	8007094 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	88fa      	ldrh	r2, [r7, #6]
 8006fba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	88fa      	ldrh	r2, [r7, #6]
 8006fc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2221      	movs	r2, #33	@ 0x21
 8006fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fe4:	d12a      	bne.n	800703c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fee:	d107      	bne.n	8007000 <HAL_UART_Transmit_IT+0x78>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d103      	bne.n	8007000 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4a29      	ldr	r2, [pc, #164]	@ (80070a0 <HAL_UART_Transmit_IT+0x118>)
 8006ffc:	679a      	str	r2, [r3, #120]	@ 0x78
 8006ffe:	e002      	b.n	8007006 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4a28      	ldr	r2, [pc, #160]	@ (80070a4 <HAL_UART_Transmit_IT+0x11c>)
 8007004:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3308      	adds	r3, #8
 800700c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800701c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3308      	adds	r3, #8
 8007024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007026:	637a      	str	r2, [r7, #52]	@ 0x34
 8007028:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800702c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e5      	bne.n	8007006 <HAL_UART_Transmit_IT+0x7e>
 800703a:	e028      	b.n	800708e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007044:	d107      	bne.n	8007056 <HAL_UART_Transmit_IT+0xce>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4a15      	ldr	r2, [pc, #84]	@ (80070a8 <HAL_UART_Transmit_IT+0x120>)
 8007052:	679a      	str	r2, [r3, #120]	@ 0x78
 8007054:	e002      	b.n	800705c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4a14      	ldr	r2, [pc, #80]	@ (80070ac <HAL_UART_Transmit_IT+0x124>)
 800705a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	613b      	str	r3, [r7, #16]
   return(result);
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800707a:	623b      	str	r3, [r7, #32]
 800707c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	69f9      	ldr	r1, [r7, #28]
 8007080:	6a3a      	ldr	r2, [r7, #32]
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	61bb      	str	r3, [r7, #24]
   return(result);
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e6      	bne.n	800705c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	e000      	b.n	8007094 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007092:	2302      	movs	r3, #2
  }
}
 8007094:	4618      	mov	r0, r3
 8007096:	3744      	adds	r7, #68	@ 0x44
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	080086e7 	.word	0x080086e7
 80070a4:	08008607 	.word	0x08008607
 80070a8:	08008545 	.word	0x08008545
 80070ac:	0800848d 	.word	0x0800848d

080070b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08a      	sub	sp, #40	@ 0x28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	4613      	mov	r3, r2
 80070bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d137      	bne.n	8007138 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <HAL_UART_Receive_IT+0x24>
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e030      	b.n	800713a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a18      	ldr	r2, [pc, #96]	@ (8007144 <HAL_UART_Receive_IT+0x94>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d01f      	beq.n	8007128 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d018      	beq.n	8007128 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	613b      	str	r3, [r7, #16]
   return(result);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800710a:	627b      	str	r3, [r7, #36]	@ 0x24
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	623b      	str	r3, [r7, #32]
 8007116:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	69f9      	ldr	r1, [r7, #28]
 800711a:	6a3a      	ldr	r2, [r7, #32]
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	61bb      	str	r3, [r7, #24]
   return(result);
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e6      	bne.n	80070f6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	461a      	mov	r2, r3
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f001 f80e 	bl	8008150 <UART_Start_Receive_IT>
 8007134:	4603      	mov	r3, r0
 8007136:	e000      	b.n	800713a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007138:	2302      	movs	r3, #2
  }
}
 800713a:	4618      	mov	r0, r3
 800713c:	3728      	adds	r7, #40	@ 0x28
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	40008000 	.word	0x40008000

08007148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b0ba      	sub	sp, #232	@ 0xe8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800716e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007172:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007176:	4013      	ands	r3, r2
 8007178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800717c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d11b      	bne.n	80071bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007188:	f003 0320 	and.w	r3, r3, #32
 800718c:	2b00      	cmp	r3, #0
 800718e:	d015      	beq.n	80071bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007194:	f003 0320 	and.w	r3, r3, #32
 8007198:	2b00      	cmp	r3, #0
 800719a:	d105      	bne.n	80071a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800719c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d009      	beq.n	80071bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 82e3 	beq.w	8007778 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
      }
      return;
 80071ba:	e2dd      	b.n	8007778 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8123 	beq.w	800740c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80071c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80071ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007400 <HAL_UART_IRQHandler+0x2b8>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d106      	bne.n	80071e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80071d6:	4b8b      	ldr	r3, [pc, #556]	@ (8007404 <HAL_UART_IRQHandler+0x2bc>)
 80071d8:	4013      	ands	r3, r2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 8116 	beq.w	800740c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d011      	beq.n	8007210 <HAL_UART_IRQHandler+0xc8>
 80071ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2201      	movs	r2, #1
 80071fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007206:	f043 0201 	orr.w	r2, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d011      	beq.n	8007240 <HAL_UART_IRQHandler+0xf8>
 800721c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2202      	movs	r2, #2
 800722e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007236:	f043 0204 	orr.w	r2, r3, #4
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	d011      	beq.n	8007270 <HAL_UART_IRQHandler+0x128>
 800724c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00b      	beq.n	8007270 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2204      	movs	r2, #4
 800725e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007266:	f043 0202 	orr.w	r2, r3, #2
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007274:	f003 0308 	and.w	r3, r3, #8
 8007278:	2b00      	cmp	r3, #0
 800727a:	d017      	beq.n	80072ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800727c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b00      	cmp	r3, #0
 8007286:	d105      	bne.n	8007294 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007288:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800728c:	4b5c      	ldr	r3, [pc, #368]	@ (8007400 <HAL_UART_IRQHandler+0x2b8>)
 800728e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2208      	movs	r2, #8
 800729a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a2:	f043 0208 	orr.w	r2, r3, #8
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d012      	beq.n	80072de <HAL_UART_IRQHandler+0x196>
 80072b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00c      	beq.n	80072de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d4:	f043 0220 	orr.w	r2, r3, #32
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8249 	beq.w	800777c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d013      	beq.n	800731e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d105      	bne.n	800730e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d007      	beq.n	800731e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007324:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007332:	2b40      	cmp	r3, #64	@ 0x40
 8007334:	d005      	beq.n	8007342 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800733a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800733e:	2b00      	cmp	r3, #0
 8007340:	d054      	beq.n	80073ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 f826 	bl	8008394 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007352:	2b40      	cmp	r3, #64	@ 0x40
 8007354:	d146      	bne.n	80073e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3308      	adds	r3, #8
 800735c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800736c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3308      	adds	r3, #8
 800737e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007382:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800738e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800739a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1d9      	bne.n	8007356 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d017      	beq.n	80073dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073b2:	4a15      	ldr	r2, [pc, #84]	@ (8007408 <HAL_UART_IRQHandler+0x2c0>)
 80073b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fc fc61 	bl	8003c84 <HAL_DMA_Abort_IT>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d019      	beq.n	80073fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80073d6:	4610      	mov	r0, r2
 80073d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073da:	e00f      	b.n	80073fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f9eb 	bl	80077b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e2:	e00b      	b.n	80073fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f9e7 	bl	80077b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ea:	e007      	b.n	80073fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f9e3 	bl	80077b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80073fa:	e1bf      	b.n	800777c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073fc:	bf00      	nop
    return;
 80073fe:	e1bd      	b.n	800777c <HAL_UART_IRQHandler+0x634>
 8007400:	10000001 	.word	0x10000001
 8007404:	04000120 	.word	0x04000120
 8007408:	08008461 	.word	0x08008461

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007410:	2b01      	cmp	r3, #1
 8007412:	f040 8153 	bne.w	80076bc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800741a:	f003 0310 	and.w	r3, r3, #16
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 814c 	beq.w	80076bc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8145 	beq.w	80076bc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2210      	movs	r2, #16
 8007438:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007444:	2b40      	cmp	r3, #64	@ 0x40
 8007446:	f040 80bb 	bne.w	80075c0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007458:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 818f 	beq.w	8007780 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007468:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800746c:	429a      	cmp	r2, r3
 800746e:	f080 8187 	bcs.w	8007780 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007478:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b00      	cmp	r3, #0
 800748c:	f040 8087 	bne.w	800759e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800749c:	e853 3f00 	ldrex	r3, [r3]
 80074a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80074a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80074c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1da      	bne.n	8007490 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3308      	adds	r3, #8
 80074e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074ec:	f023 0301 	bic.w	r3, r3, #1
 80074f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3308      	adds	r3, #8
 80074fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80074fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007502:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007506:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007510:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e1      	bne.n	80074da <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3308      	adds	r3, #8
 800751c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007528:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800752c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800753a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800753c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007540:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007548:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e3      	bne.n	8007516 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800756a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800756c:	f023 0310 	bic.w	r3, r3, #16
 8007570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	461a      	mov	r2, r3
 800757a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800757e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007580:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007584:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800758c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e4      	bne.n	800755c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007598:	4618      	mov	r0, r3
 800759a:	f7fc fb1a 	bl	8003bd2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2202      	movs	r2, #2
 80075a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f907 	bl	80077cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075be:	e0df      	b.n	8007780 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 80d1 	beq.w	8007784 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80075e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 80cc 	beq.w	8007784 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007600:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800760e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007610:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007614:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800761c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e4      	bne.n	80075ec <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3308      	adds	r3, #8
 8007628:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	623b      	str	r3, [r7, #32]
   return(result);
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007638:	f023 0301 	bic.w	r3, r3, #1
 800763c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3308      	adds	r3, #8
 8007646:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800764a:	633a      	str	r2, [r7, #48]	@ 0x30
 800764c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e1      	bne.n	8007622 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2220      	movs	r2, #32
 8007662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0310 	bic.w	r3, r3, #16
 8007686:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007694:	61fb      	str	r3, [r7, #28]
 8007696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	69b9      	ldr	r1, [r7, #24]
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	617b      	str	r3, [r7, #20]
   return(result);
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e4      	bne.n	8007672 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f889 	bl	80077cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076ba:	e063      	b.n	8007784 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00e      	beq.n	80076e6 <HAL_UART_IRQHandler+0x59e>
 80076c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d008      	beq.n	80076e6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80076dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fdbe 	bl	8009260 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076e4:	e051      	b.n	800778a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80076e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d014      	beq.n	800771c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80076f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d105      	bne.n	800770a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80076fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d008      	beq.n	800771c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800770e:	2b00      	cmp	r3, #0
 8007710:	d03a      	beq.n	8007788 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
    }
    return;
 800771a:	e035      	b.n	8007788 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800771c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d009      	beq.n	800773c <HAL_UART_IRQHandler+0x5f4>
 8007728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800772c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f001 f84b 	bl	80087d0 <UART_EndTransmit_IT>
    return;
 800773a:	e026      	b.n	800778a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800773c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d009      	beq.n	800775c <HAL_UART_IRQHandler+0x614>
 8007748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800774c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 fd97 	bl	8009288 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800775a:	e016      	b.n	800778a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800775c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007760:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d010      	beq.n	800778a <HAL_UART_IRQHandler+0x642>
 8007768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800776c:	2b00      	cmp	r3, #0
 800776e:	da0c      	bge.n	800778a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 fd7f 	bl	8009274 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007776:	e008      	b.n	800778a <HAL_UART_IRQHandler+0x642>
      return;
 8007778:	bf00      	nop
 800777a:	e006      	b.n	800778a <HAL_UART_IRQHandler+0x642>
    return;
 800777c:	bf00      	nop
 800777e:	e004      	b.n	800778a <HAL_UART_IRQHandler+0x642>
      return;
 8007780:	bf00      	nop
 8007782:	e002      	b.n	800778a <HAL_UART_IRQHandler+0x642>
      return;
 8007784:	bf00      	nop
 8007786:	e000      	b.n	800778a <HAL_UART_IRQHandler+0x642>
    return;
 8007788:	bf00      	nop
  }
}
 800778a:	37e8      	adds	r7, #232	@ 0xe8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077e8:	b08c      	sub	sp, #48	@ 0x30
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	431a      	orrs	r2, r3
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	431a      	orrs	r2, r3
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	4313      	orrs	r3, r2
 800780a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	4baa      	ldr	r3, [pc, #680]	@ (8007abc <UART_SetConfig+0x2d8>)
 8007814:	4013      	ands	r3, r2
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800781c:	430b      	orrs	r3, r1
 800781e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a9f      	ldr	r2, [pc, #636]	@ (8007ac0 <UART_SetConfig+0x2dc>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d004      	beq.n	8007850 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800784c:	4313      	orrs	r3, r2
 800784e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800785a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	6812      	ldr	r2, [r2, #0]
 8007862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007864:	430b      	orrs	r3, r1
 8007866:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	f023 010f 	bic.w	r1, r3, #15
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a90      	ldr	r2, [pc, #576]	@ (8007ac4 <UART_SetConfig+0x2e0>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d125      	bne.n	80078d4 <UART_SetConfig+0xf0>
 8007888:	4b8f      	ldr	r3, [pc, #572]	@ (8007ac8 <UART_SetConfig+0x2e4>)
 800788a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800788e:	f003 0303 	and.w	r3, r3, #3
 8007892:	2b03      	cmp	r3, #3
 8007894:	d81a      	bhi.n	80078cc <UART_SetConfig+0xe8>
 8007896:	a201      	add	r2, pc, #4	@ (adr r2, 800789c <UART_SetConfig+0xb8>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	080078ad 	.word	0x080078ad
 80078a0:	080078bd 	.word	0x080078bd
 80078a4:	080078b5 	.word	0x080078b5
 80078a8:	080078c5 	.word	0x080078c5
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078b2:	e116      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 80078b4:	2302      	movs	r3, #2
 80078b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ba:	e112      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 80078bc:	2304      	movs	r3, #4
 80078be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078c2:	e10e      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 80078c4:	2308      	movs	r3, #8
 80078c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ca:	e10a      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 80078cc:	2310      	movs	r3, #16
 80078ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d2:	e106      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a7c      	ldr	r2, [pc, #496]	@ (8007acc <UART_SetConfig+0x2e8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d138      	bne.n	8007950 <UART_SetConfig+0x16c>
 80078de:	4b7a      	ldr	r3, [pc, #488]	@ (8007ac8 <UART_SetConfig+0x2e4>)
 80078e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e4:	f003 030c 	and.w	r3, r3, #12
 80078e8:	2b0c      	cmp	r3, #12
 80078ea:	d82d      	bhi.n	8007948 <UART_SetConfig+0x164>
 80078ec:	a201      	add	r2, pc, #4	@ (adr r2, 80078f4 <UART_SetConfig+0x110>)
 80078ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f2:	bf00      	nop
 80078f4:	08007929 	.word	0x08007929
 80078f8:	08007949 	.word	0x08007949
 80078fc:	08007949 	.word	0x08007949
 8007900:	08007949 	.word	0x08007949
 8007904:	08007939 	.word	0x08007939
 8007908:	08007949 	.word	0x08007949
 800790c:	08007949 	.word	0x08007949
 8007910:	08007949 	.word	0x08007949
 8007914:	08007931 	.word	0x08007931
 8007918:	08007949 	.word	0x08007949
 800791c:	08007949 	.word	0x08007949
 8007920:	08007949 	.word	0x08007949
 8007924:	08007941 	.word	0x08007941
 8007928:	2300      	movs	r3, #0
 800792a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800792e:	e0d8      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007930:	2302      	movs	r3, #2
 8007932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007936:	e0d4      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007938:	2304      	movs	r3, #4
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800793e:	e0d0      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007940:	2308      	movs	r3, #8
 8007942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007946:	e0cc      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007948:	2310      	movs	r3, #16
 800794a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800794e:	e0c8      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a5e      	ldr	r2, [pc, #376]	@ (8007ad0 <UART_SetConfig+0x2ec>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d125      	bne.n	80079a6 <UART_SetConfig+0x1c2>
 800795a:	4b5b      	ldr	r3, [pc, #364]	@ (8007ac8 <UART_SetConfig+0x2e4>)
 800795c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007960:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007964:	2b30      	cmp	r3, #48	@ 0x30
 8007966:	d016      	beq.n	8007996 <UART_SetConfig+0x1b2>
 8007968:	2b30      	cmp	r3, #48	@ 0x30
 800796a:	d818      	bhi.n	800799e <UART_SetConfig+0x1ba>
 800796c:	2b20      	cmp	r3, #32
 800796e:	d00a      	beq.n	8007986 <UART_SetConfig+0x1a2>
 8007970:	2b20      	cmp	r3, #32
 8007972:	d814      	bhi.n	800799e <UART_SetConfig+0x1ba>
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <UART_SetConfig+0x19a>
 8007978:	2b10      	cmp	r3, #16
 800797a:	d008      	beq.n	800798e <UART_SetConfig+0x1aa>
 800797c:	e00f      	b.n	800799e <UART_SetConfig+0x1ba>
 800797e:	2300      	movs	r3, #0
 8007980:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007984:	e0ad      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007986:	2302      	movs	r3, #2
 8007988:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800798c:	e0a9      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 800798e:	2304      	movs	r3, #4
 8007990:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007994:	e0a5      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007996:	2308      	movs	r3, #8
 8007998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799c:	e0a1      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 800799e:	2310      	movs	r3, #16
 80079a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a4:	e09d      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a4a      	ldr	r2, [pc, #296]	@ (8007ad4 <UART_SetConfig+0x2f0>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d125      	bne.n	80079fc <UART_SetConfig+0x218>
 80079b0:	4b45      	ldr	r3, [pc, #276]	@ (8007ac8 <UART_SetConfig+0x2e4>)
 80079b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80079bc:	d016      	beq.n	80079ec <UART_SetConfig+0x208>
 80079be:	2bc0      	cmp	r3, #192	@ 0xc0
 80079c0:	d818      	bhi.n	80079f4 <UART_SetConfig+0x210>
 80079c2:	2b80      	cmp	r3, #128	@ 0x80
 80079c4:	d00a      	beq.n	80079dc <UART_SetConfig+0x1f8>
 80079c6:	2b80      	cmp	r3, #128	@ 0x80
 80079c8:	d814      	bhi.n	80079f4 <UART_SetConfig+0x210>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <UART_SetConfig+0x1f0>
 80079ce:	2b40      	cmp	r3, #64	@ 0x40
 80079d0:	d008      	beq.n	80079e4 <UART_SetConfig+0x200>
 80079d2:	e00f      	b.n	80079f4 <UART_SetConfig+0x210>
 80079d4:	2300      	movs	r3, #0
 80079d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079da:	e082      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 80079dc:	2302      	movs	r3, #2
 80079de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079e2:	e07e      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 80079e4:	2304      	movs	r3, #4
 80079e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ea:	e07a      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 80079ec:	2308      	movs	r3, #8
 80079ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079f2:	e076      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 80079f4:	2310      	movs	r3, #16
 80079f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079fa:	e072      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a35      	ldr	r2, [pc, #212]	@ (8007ad8 <UART_SetConfig+0x2f4>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d12a      	bne.n	8007a5c <UART_SetConfig+0x278>
 8007a06:	4b30      	ldr	r3, [pc, #192]	@ (8007ac8 <UART_SetConfig+0x2e4>)
 8007a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a14:	d01a      	beq.n	8007a4c <UART_SetConfig+0x268>
 8007a16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a1a:	d81b      	bhi.n	8007a54 <UART_SetConfig+0x270>
 8007a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a20:	d00c      	beq.n	8007a3c <UART_SetConfig+0x258>
 8007a22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a26:	d815      	bhi.n	8007a54 <UART_SetConfig+0x270>
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <UART_SetConfig+0x250>
 8007a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a30:	d008      	beq.n	8007a44 <UART_SetConfig+0x260>
 8007a32:	e00f      	b.n	8007a54 <UART_SetConfig+0x270>
 8007a34:	2300      	movs	r3, #0
 8007a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a3a:	e052      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a42:	e04e      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007a44:	2304      	movs	r3, #4
 8007a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a4a:	e04a      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007a4c:	2308      	movs	r3, #8
 8007a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a52:	e046      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007a54:	2310      	movs	r3, #16
 8007a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a5a:	e042      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a17      	ldr	r2, [pc, #92]	@ (8007ac0 <UART_SetConfig+0x2dc>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d13a      	bne.n	8007adc <UART_SetConfig+0x2f8>
 8007a66:	4b18      	ldr	r3, [pc, #96]	@ (8007ac8 <UART_SetConfig+0x2e4>)
 8007a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a74:	d01a      	beq.n	8007aac <UART_SetConfig+0x2c8>
 8007a76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a7a:	d81b      	bhi.n	8007ab4 <UART_SetConfig+0x2d0>
 8007a7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a80:	d00c      	beq.n	8007a9c <UART_SetConfig+0x2b8>
 8007a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a86:	d815      	bhi.n	8007ab4 <UART_SetConfig+0x2d0>
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <UART_SetConfig+0x2b0>
 8007a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a90:	d008      	beq.n	8007aa4 <UART_SetConfig+0x2c0>
 8007a92:	e00f      	b.n	8007ab4 <UART_SetConfig+0x2d0>
 8007a94:	2300      	movs	r3, #0
 8007a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a9a:	e022      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aa2:	e01e      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007aa4:	2304      	movs	r3, #4
 8007aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aaa:	e01a      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007aac:	2308      	movs	r3, #8
 8007aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ab2:	e016      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007ab4:	2310      	movs	r3, #16
 8007ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aba:	e012      	b.n	8007ae2 <UART_SetConfig+0x2fe>
 8007abc:	cfff69f3 	.word	0xcfff69f3
 8007ac0:	40008000 	.word	0x40008000
 8007ac4:	40013800 	.word	0x40013800
 8007ac8:	40021000 	.word	0x40021000
 8007acc:	40004400 	.word	0x40004400
 8007ad0:	40004800 	.word	0x40004800
 8007ad4:	40004c00 	.word	0x40004c00
 8007ad8:	40005000 	.word	0x40005000
 8007adc:	2310      	movs	r3, #16
 8007ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4aae      	ldr	r2, [pc, #696]	@ (8007da0 <UART_SetConfig+0x5bc>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	f040 8097 	bne.w	8007c1c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007aee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007af2:	2b08      	cmp	r3, #8
 8007af4:	d823      	bhi.n	8007b3e <UART_SetConfig+0x35a>
 8007af6:	a201      	add	r2, pc, #4	@ (adr r2, 8007afc <UART_SetConfig+0x318>)
 8007af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afc:	08007b21 	.word	0x08007b21
 8007b00:	08007b3f 	.word	0x08007b3f
 8007b04:	08007b29 	.word	0x08007b29
 8007b08:	08007b3f 	.word	0x08007b3f
 8007b0c:	08007b2f 	.word	0x08007b2f
 8007b10:	08007b3f 	.word	0x08007b3f
 8007b14:	08007b3f 	.word	0x08007b3f
 8007b18:	08007b3f 	.word	0x08007b3f
 8007b1c:	08007b37 	.word	0x08007b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b20:	f7fd f988 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8007b24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b26:	e010      	b.n	8007b4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b28:	4b9e      	ldr	r3, [pc, #632]	@ (8007da4 <UART_SetConfig+0x5c0>)
 8007b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b2c:	e00d      	b.n	8007b4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b2e:	f7fd f913 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8007b32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b34:	e009      	b.n	8007b4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b3c:	e005      	b.n	8007b4a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 8130 	beq.w	8007db2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b56:	4a94      	ldr	r2, [pc, #592]	@ (8007da8 <UART_SetConfig+0x5c4>)
 8007b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	4413      	add	r3, r2
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d305      	bcc.n	8007b82 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d903      	bls.n	8007b8a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b88:	e113      	b.n	8007db2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	60bb      	str	r3, [r7, #8]
 8007b90:	60fa      	str	r2, [r7, #12]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b96:	4a84      	ldr	r2, [pc, #528]	@ (8007da8 <UART_SetConfig+0x5c4>)
 8007b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	603b      	str	r3, [r7, #0]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bac:	f7f8 fb34 	bl	8000218 <__aeabi_uldivmod>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	f04f 0200 	mov.w	r2, #0
 8007bbc:	f04f 0300 	mov.w	r3, #0
 8007bc0:	020b      	lsls	r3, r1, #8
 8007bc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bc6:	0202      	lsls	r2, r0, #8
 8007bc8:	6979      	ldr	r1, [r7, #20]
 8007bca:	6849      	ldr	r1, [r1, #4]
 8007bcc:	0849      	lsrs	r1, r1, #1
 8007bce:	2000      	movs	r0, #0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	eb12 0804 	adds.w	r8, r2, r4
 8007bd8:	eb43 0905 	adc.w	r9, r3, r5
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	469a      	mov	sl, r3
 8007be4:	4693      	mov	fp, r2
 8007be6:	4652      	mov	r2, sl
 8007be8:	465b      	mov	r3, fp
 8007bea:	4640      	mov	r0, r8
 8007bec:	4649      	mov	r1, r9
 8007bee:	f7f8 fb13 	bl	8000218 <__aeabi_uldivmod>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c00:	d308      	bcc.n	8007c14 <UART_SetConfig+0x430>
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c08:	d204      	bcs.n	8007c14 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6a3a      	ldr	r2, [r7, #32]
 8007c10:	60da      	str	r2, [r3, #12]
 8007c12:	e0ce      	b.n	8007db2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c1a:	e0ca      	b.n	8007db2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c24:	d166      	bne.n	8007cf4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007c26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	d827      	bhi.n	8007c7e <UART_SetConfig+0x49a>
 8007c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c34 <UART_SetConfig+0x450>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007c59 	.word	0x08007c59
 8007c38:	08007c61 	.word	0x08007c61
 8007c3c:	08007c69 	.word	0x08007c69
 8007c40:	08007c7f 	.word	0x08007c7f
 8007c44:	08007c6f 	.word	0x08007c6f
 8007c48:	08007c7f 	.word	0x08007c7f
 8007c4c:	08007c7f 	.word	0x08007c7f
 8007c50:	08007c7f 	.word	0x08007c7f
 8007c54:	08007c77 	.word	0x08007c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c58:	f7fd f8ec 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8007c5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c5e:	e014      	b.n	8007c8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c60:	f7fd f8fe 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 8007c64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c66:	e010      	b.n	8007c8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c68:	4b4e      	ldr	r3, [pc, #312]	@ (8007da4 <UART_SetConfig+0x5c0>)
 8007c6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c6c:	e00d      	b.n	8007c8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c6e:	f7fd f873 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8007c72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c74:	e009      	b.n	8007c8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c7c:	e005      	b.n	8007c8a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 8090 	beq.w	8007db2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c96:	4a44      	ldr	r2, [pc, #272]	@ (8007da8 <UART_SetConfig+0x5c4>)
 8007c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ca4:	005a      	lsls	r2, r3, #1
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	441a      	add	r2, r3
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	2b0f      	cmp	r3, #15
 8007cbc:	d916      	bls.n	8007cec <UART_SetConfig+0x508>
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc4:	d212      	bcs.n	8007cec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	f023 030f 	bic.w	r3, r3, #15
 8007cce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	085b      	lsrs	r3, r3, #1
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	8bfb      	ldrh	r3, [r7, #30]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	8bfa      	ldrh	r2, [r7, #30]
 8007ce8:	60da      	str	r2, [r3, #12]
 8007cea:	e062      	b.n	8007db2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007cf2:	e05e      	b.n	8007db2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d828      	bhi.n	8007d4e <UART_SetConfig+0x56a>
 8007cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8007d04 <UART_SetConfig+0x520>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007d29 	.word	0x08007d29
 8007d08:	08007d31 	.word	0x08007d31
 8007d0c:	08007d39 	.word	0x08007d39
 8007d10:	08007d4f 	.word	0x08007d4f
 8007d14:	08007d3f 	.word	0x08007d3f
 8007d18:	08007d4f 	.word	0x08007d4f
 8007d1c:	08007d4f 	.word	0x08007d4f
 8007d20:	08007d4f 	.word	0x08007d4f
 8007d24:	08007d47 	.word	0x08007d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d28:	f7fd f884 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8007d2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d2e:	e014      	b.n	8007d5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d30:	f7fd f896 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 8007d34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d36:	e010      	b.n	8007d5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d38:	4b1a      	ldr	r3, [pc, #104]	@ (8007da4 <UART_SetConfig+0x5c0>)
 8007d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d3c:	e00d      	b.n	8007d5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d3e:	f7fd f80b 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8007d42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d44:	e009      	b.n	8007d5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d4c:	e005      	b.n	8007d5a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d58:	bf00      	nop
    }

    if (pclk != 0U)
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d028      	beq.n	8007db2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d64:	4a10      	ldr	r2, [pc, #64]	@ (8007da8 <UART_SetConfig+0x5c4>)
 8007d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	085b      	lsrs	r3, r3, #1
 8007d78:	441a      	add	r2, r3
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	2b0f      	cmp	r3, #15
 8007d88:	d910      	bls.n	8007dac <UART_SetConfig+0x5c8>
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d90:	d20c      	bcs.n	8007dac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	60da      	str	r2, [r3, #12]
 8007d9c:	e009      	b.n	8007db2 <UART_SetConfig+0x5ce>
 8007d9e:	bf00      	nop
 8007da0:	40008000 	.word	0x40008000
 8007da4:	00f42400 	.word	0x00f42400
 8007da8:	08009598 	.word	0x08009598
      }
      else
      {
        ret = HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007dce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3730      	adds	r7, #48	@ 0x30
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00a      	beq.n	8007e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00a      	beq.n	8007e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e70:	f003 0310 	and.w	r3, r3, #16
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e92:	f003 0320 	and.w	r3, r3, #32
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01a      	beq.n	8007ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ed6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eda:	d10a      	bne.n	8007ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00a      	beq.n	8007f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	605a      	str	r2, [r3, #4]
  }
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b098      	sub	sp, #96	@ 0x60
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f30:	f7f9 fdee 	bl	8001b10 <HAL_GetTick>
 8007f34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0308 	and.w	r3, r3, #8
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d12f      	bne.n	8007fa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f88e 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d022      	beq.n	8007fa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f72:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e6      	bne.n	8007f5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2220      	movs	r2, #32
 8007f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e063      	b.n	800806c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0304 	and.w	r3, r3, #4
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d149      	bne.n	8008046 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f857 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d03c      	beq.n	8008046 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fea:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e6      	bne.n	8007fcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3308      	adds	r3, #8
 8008004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	60fb      	str	r3, [r7, #12]
   return(result);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f023 0301 	bic.w	r3, r3, #1
 8008014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3308      	adds	r3, #8
 800801c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800801e:	61fa      	str	r2, [r7, #28]
 8008020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	69b9      	ldr	r1, [r7, #24]
 8008024:	69fa      	ldr	r2, [r7, #28]
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	617b      	str	r3, [r7, #20]
   return(result);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e5      	bne.n	8007ffe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2220      	movs	r2, #32
 8008036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e012      	b.n	800806c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2220      	movs	r2, #32
 800804a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2220      	movs	r2, #32
 8008052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3758      	adds	r7, #88	@ 0x58
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	4613      	mov	r3, r2
 8008082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008084:	e04f      	b.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d04b      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800808e:	f7f9 fd3f 	bl	8001b10 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	429a      	cmp	r2, r3
 800809c:	d302      	bcc.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e04e      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d037      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	2b80      	cmp	r3, #128	@ 0x80
 80080ba:	d034      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b40      	cmp	r3, #64	@ 0x40
 80080c0:	d031      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	f003 0308 	and.w	r3, r3, #8
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d110      	bne.n	80080f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2208      	movs	r2, #8
 80080d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 f95b 	bl	8008394 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2208      	movs	r2, #8
 80080e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e029      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008100:	d111      	bne.n	8008126 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800810a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 f941 	bl	8008394 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2220      	movs	r2, #32
 8008116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e00f      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69da      	ldr	r2, [r3, #28]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4013      	ands	r3, r2
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	429a      	cmp	r2, r3
 8008134:	bf0c      	ite	eq
 8008136:	2301      	moveq	r3, #1
 8008138:	2300      	movne	r3, #0
 800813a:	b2db      	uxtb	r3, r3
 800813c:	461a      	mov	r2, r3
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	429a      	cmp	r2, r3
 8008142:	d0a0      	beq.n	8008086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008150:	b480      	push	{r7}
 8008152:	b0a3      	sub	sp, #140	@ 0x8c
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	88fa      	ldrh	r2, [r7, #6]
 8008168:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	88fa      	ldrh	r2, [r7, #6]
 8008170:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008182:	d10e      	bne.n	80081a2 <UART_Start_Receive_IT+0x52>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d105      	bne.n	8008198 <UART_Start_Receive_IT+0x48>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008192:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008196:	e02d      	b.n	80081f4 <UART_Start_Receive_IT+0xa4>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	22ff      	movs	r2, #255	@ 0xff
 800819c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80081a0:	e028      	b.n	80081f4 <UART_Start_Receive_IT+0xa4>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10d      	bne.n	80081c6 <UART_Start_Receive_IT+0x76>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d104      	bne.n	80081bc <UART_Start_Receive_IT+0x6c>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	22ff      	movs	r2, #255	@ 0xff
 80081b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80081ba:	e01b      	b.n	80081f4 <UART_Start_Receive_IT+0xa4>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	227f      	movs	r2, #127	@ 0x7f
 80081c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80081c4:	e016      	b.n	80081f4 <UART_Start_Receive_IT+0xa4>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081ce:	d10d      	bne.n	80081ec <UART_Start_Receive_IT+0x9c>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d104      	bne.n	80081e2 <UART_Start_Receive_IT+0x92>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	227f      	movs	r2, #127	@ 0x7f
 80081dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80081e0:	e008      	b.n	80081f4 <UART_Start_Receive_IT+0xa4>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	223f      	movs	r2, #63	@ 0x3f
 80081e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80081ea:	e003      	b.n	80081f4 <UART_Start_Receive_IT+0xa4>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2222      	movs	r2, #34	@ 0x22
 8008200:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3308      	adds	r3, #8
 800820a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008214:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3308      	adds	r3, #8
 8008224:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008228:	673a      	str	r2, [r7, #112]	@ 0x70
 800822a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800822e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008230:	e841 2300 	strex	r3, r2, [r1]
 8008234:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008236:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e3      	bne.n	8008204 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008244:	d14f      	bne.n	80082e6 <UART_Start_Receive_IT+0x196>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800824c:	88fa      	ldrh	r2, [r7, #6]
 800824e:	429a      	cmp	r2, r3
 8008250:	d349      	bcc.n	80082e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800825a:	d107      	bne.n	800826c <UART_Start_Receive_IT+0x11c>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d103      	bne.n	800826c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4a47      	ldr	r2, [pc, #284]	@ (8008384 <UART_Start_Receive_IT+0x234>)
 8008268:	675a      	str	r2, [r3, #116]	@ 0x74
 800826a:	e002      	b.n	8008272 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4a46      	ldr	r2, [pc, #280]	@ (8008388 <UART_Start_Receive_IT+0x238>)
 8008270:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01a      	beq.n	80082b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008282:	e853 3f00 	ldrex	r3, [r3]
 8008286:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800828a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800828e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800829c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800829e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80082a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80082aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e4      	bne.n	800827a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3308      	adds	r3, #8
 80082b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ba:	e853 3f00 	ldrex	r3, [r3]
 80082be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3308      	adds	r3, #8
 80082ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80082d0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80082d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082d8:	e841 2300 	strex	r3, r2, [r1]
 80082dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80082de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e5      	bne.n	80082b0 <UART_Start_Receive_IT+0x160>
 80082e4:	e046      	b.n	8008374 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ee:	d107      	bne.n	8008300 <UART_Start_Receive_IT+0x1b0>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d103      	bne.n	8008300 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4a24      	ldr	r2, [pc, #144]	@ (800838c <UART_Start_Receive_IT+0x23c>)
 80082fc:	675a      	str	r2, [r3, #116]	@ 0x74
 80082fe:	e002      	b.n	8008306 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4a23      	ldr	r2, [pc, #140]	@ (8008390 <UART_Start_Receive_IT+0x240>)
 8008304:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d019      	beq.n	8008342 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008316:	e853 3f00 	ldrex	r3, [r3]
 800831a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800831c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008322:	677b      	str	r3, [r7, #116]	@ 0x74
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800832c:	637b      	str	r3, [r7, #52]	@ 0x34
 800832e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008332:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800833a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e6      	bne.n	800830e <UART_Start_Receive_IT+0x1be>
 8008340:	e018      	b.n	8008374 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	613b      	str	r3, [r7, #16]
   return(result);
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f043 0320 	orr.w	r3, r3, #32
 8008356:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	461a      	mov	r2, r3
 800835e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008360:	623b      	str	r3, [r7, #32]
 8008362:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	69f9      	ldr	r1, [r7, #28]
 8008366:	6a3a      	ldr	r2, [r7, #32]
 8008368:	e841 2300 	strex	r3, r2, [r1]
 800836c:	61bb      	str	r3, [r7, #24]
   return(result);
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e6      	bne.n	8008342 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	378c      	adds	r7, #140	@ 0x8c
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	08008ef9 	.word	0x08008ef9
 8008388:	08008b99 	.word	0x08008b99
 800838c:	080089e1 	.word	0x080089e1
 8008390:	08008829 	.word	0x08008829

08008394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008394:	b480      	push	{r7}
 8008396:	b095      	sub	sp, #84	@ 0x54
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80083bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e6      	bne.n	800839c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3308      	adds	r3, #8
 80083d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	e853 3f00 	ldrex	r3, [r3]
 80083dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083e4:	f023 0301 	bic.w	r3, r3, #1
 80083e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3308      	adds	r3, #8
 80083f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e3      	bne.n	80083ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800840a:	2b01      	cmp	r3, #1
 800840c:	d118      	bne.n	8008440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	e853 3f00 	ldrex	r3, [r3]
 800841a:	60bb      	str	r3, [r7, #8]
   return(result);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	f023 0310 	bic.w	r3, r3, #16
 8008422:	647b      	str	r3, [r7, #68]	@ 0x44
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800842c:	61bb      	str	r3, [r7, #24]
 800842e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008430:	6979      	ldr	r1, [r7, #20]
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	e841 2300 	strex	r3, r2, [r1]
 8008438:	613b      	str	r3, [r7, #16]
   return(result);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e6      	bne.n	800840e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2220      	movs	r2, #32
 8008444:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008454:	bf00      	nop
 8008456:	3754      	adds	r7, #84	@ 0x54
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7ff f99a 	bl	80077b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008484:	bf00      	nop
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800848c:	b480      	push	{r7}
 800848e:	b08f      	sub	sp, #60	@ 0x3c
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849a:	2b21      	cmp	r3, #33	@ 0x21
 800849c:	d14c      	bne.n	8008538 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d132      	bne.n	8008510 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	6a3b      	ldr	r3, [r7, #32]
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084be:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e6      	bne.n	80084aa <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fa:	61bb      	str	r3, [r7, #24]
 80084fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6979      	ldr	r1, [r7, #20]
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	613b      	str	r3, [r7, #16]
   return(result);
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e6      	bne.n	80084dc <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800850e:	e013      	b.n	8008538 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008514:	781a      	ldrb	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008520:	1c5a      	adds	r2, r3, #1
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008538:	bf00      	nop
 800853a:	373c      	adds	r7, #60	@ 0x3c
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008544:	b480      	push	{r7}
 8008546:	b091      	sub	sp, #68	@ 0x44
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008552:	2b21      	cmp	r3, #33	@ 0x21
 8008554:	d151      	bne.n	80085fa <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d132      	bne.n	80085c8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856a:	e853 3f00 	ldrex	r3, [r3]
 800856e:	623b      	str	r3, [r7, #32]
   return(result);
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008576:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008580:	633b      	str	r3, [r7, #48]	@ 0x30
 8008582:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008588:	e841 2300 	strex	r3, r2, [r1]
 800858c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800858e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e6      	bne.n	8008562 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b2:	61fb      	str	r3, [r7, #28]
 80085b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	69b9      	ldr	r1, [r7, #24]
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	617b      	str	r3, [r7, #20]
   return(result);
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e6      	bne.n	8008594 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80085c6:	e018      	b.n	80085fa <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80085ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085dc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085e2:	1c9a      	adds	r2, r3, #2
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	3b01      	subs	r3, #1
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80085fa:	bf00      	nop
 80085fc:	3744      	adds	r7, #68	@ 0x44
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008606:	b480      	push	{r7}
 8008608:	b091      	sub	sp, #68	@ 0x44
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008614:	2b21      	cmp	r3, #33	@ 0x21
 8008616:	d160      	bne.n	80086da <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800861e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008620:	e057      	b.n	80086d2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008628:	b29b      	uxth	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d133      	bne.n	8008696 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3308      	adds	r3, #8
 8008634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	623b      	str	r3, [r7, #32]
   return(result);
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008644:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3308      	adds	r3, #8
 800864c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800864e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008650:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008656:	e841 2300 	strex	r3, r2, [r1]
 800865a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800865c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1e5      	bne.n	800862e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008676:	637b      	str	r3, [r7, #52]	@ 0x34
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	461a      	mov	r2, r3
 800867e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008680:	61fb      	str	r3, [r7, #28]
 8008682:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	69b9      	ldr	r1, [r7, #24]
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	e841 2300 	strex	r3, r2, [r1]
 800868c:	617b      	str	r3, [r7, #20]
   return(result);
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e6      	bne.n	8008662 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008694:	e021      	b.n	80086da <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d013      	beq.n	80086cc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086a8:	781a      	ldrb	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	3b01      	subs	r3, #1
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80086cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80086ce:	3b01      	subs	r3, #1
 80086d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80086d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1a4      	bne.n	8008622 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80086d8:	e7ff      	b.n	80086da <UART_TxISR_8BIT_FIFOEN+0xd4>
 80086da:	bf00      	nop
 80086dc:	3744      	adds	r7, #68	@ 0x44
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b091      	sub	sp, #68	@ 0x44
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086f4:	2b21      	cmp	r3, #33	@ 0x21
 80086f6:	d165      	bne.n	80087c4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80086fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008700:	e05c      	b.n	80087bc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008708:	b29b      	uxth	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d133      	bne.n	8008776 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3308      	adds	r3, #8
 8008714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	61fb      	str	r3, [r7, #28]
   return(result);
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008724:	637b      	str	r3, [r7, #52]	@ 0x34
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3308      	adds	r3, #8
 800872c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800872e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008730:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e5      	bne.n	800870e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008756:	633b      	str	r3, [r7, #48]	@ 0x30
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008760:	61bb      	str	r3, [r7, #24]
 8008762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6979      	ldr	r1, [r7, #20]
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	613b      	str	r3, [r7, #16]
   return(result);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e6      	bne.n	8008742 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008774:	e026      	b.n	80087c4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	69db      	ldr	r3, [r3, #28]
 800877c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008780:	2b00      	cmp	r3, #0
 8008782:	d018      	beq.n	80087b6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008788:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800878a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008798:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800879e:	1c9a      	adds	r2, r3, #2
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	3b01      	subs	r3, #1
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80087b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80087b8:	3b01      	subs	r3, #1
 80087ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80087bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d19f      	bne.n	8008702 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80087c2:	e7ff      	b.n	80087c4 <UART_TxISR_16BIT_FIFOEN+0xde>
 80087c4:	bf00      	nop
 80087c6:	3744      	adds	r7, #68	@ 0x44
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087ec:	61fb      	str	r3, [r7, #28]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	61bb      	str	r3, [r7, #24]
 80087f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	6979      	ldr	r1, [r7, #20]
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	613b      	str	r3, [r7, #16]
   return(result);
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e6      	bne.n	80087d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7fe ffb9 	bl	8007790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800881e:	bf00      	nop
 8008820:	3720      	adds	r7, #32
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b09c      	sub	sp, #112	@ 0x70
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008836:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008840:	2b22      	cmp	r3, #34	@ 0x22
 8008842:	f040 80be 	bne.w	80089c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008850:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008854:	b2d9      	uxtb	r1, r3
 8008856:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800885a:	b2da      	uxtb	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008860:	400a      	ands	r2, r1
 8008862:	b2d2      	uxtb	r2, r2
 8008864:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008876:	b29b      	uxth	r3, r3
 8008878:	3b01      	subs	r3, #1
 800887a:	b29a      	uxth	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008888:	b29b      	uxth	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	f040 80a1 	bne.w	80089d2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800889e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e6      	bne.n	8008890 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d4:	f023 0301 	bic.w	r3, r3, #1
 80088d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80088e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80088e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e5      	bne.n	80088c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a33      	ldr	r2, [pc, #204]	@ (80089dc <UART_RxISR_8BIT+0x1b4>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d01f      	beq.n	8008954 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d018      	beq.n	8008954 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	623b      	str	r3, [r7, #32]
   return(result);
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008936:	663b      	str	r3, [r7, #96]	@ 0x60
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008940:	633b      	str	r3, [r7, #48]	@ 0x30
 8008942:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800894e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e6      	bne.n	8008922 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008958:	2b01      	cmp	r3, #1
 800895a:	d12e      	bne.n	80089ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0310 	bic.w	r3, r3, #16
 8008976:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008980:	61fb      	str	r3, [r7, #28]
 8008982:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	69b9      	ldr	r1, [r7, #24]
 8008986:	69fa      	ldr	r2, [r7, #28]
 8008988:	e841 2300 	strex	r3, r2, [r1]
 800898c:	617b      	str	r3, [r7, #20]
   return(result);
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e6      	bne.n	8008962 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	f003 0310 	and.w	r3, r3, #16
 800899e:	2b10      	cmp	r3, #16
 80089a0:	d103      	bne.n	80089aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2210      	movs	r2, #16
 80089a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7fe ff0a 	bl	80077cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089b8:	e00b      	b.n	80089d2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7fe fef2 	bl	80077a4 <HAL_UART_RxCpltCallback>
}
 80089c0:	e007      	b.n	80089d2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	699a      	ldr	r2, [r3, #24]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f042 0208 	orr.w	r2, r2, #8
 80089d0:	619a      	str	r2, [r3, #24]
}
 80089d2:	bf00      	nop
 80089d4:	3770      	adds	r7, #112	@ 0x70
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	40008000 	.word	0x40008000

080089e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b09c      	sub	sp, #112	@ 0x70
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089f8:	2b22      	cmp	r3, #34	@ 0x22
 80089fa:	f040 80be 	bne.w	8008b7a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a0e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008a12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a16:	4013      	ands	r3, r2
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a22:	1c9a      	adds	r2, r3, #2
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	3b01      	subs	r3, #1
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f040 80a1 	bne.w	8008b8a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a66:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a68:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e6      	bne.n	8008a48 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8c:	f023 0301 	bic.w	r3, r3, #1
 8008a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3308      	adds	r3, #8
 8008a98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008aa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e5      	bne.n	8008a7a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a33      	ldr	r2, [pc, #204]	@ (8008b94 <UART_RxISR_16BIT+0x1b4>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d01f      	beq.n	8008b0c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d018      	beq.n	8008b0c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	e853 3f00 	ldrex	r3, [r3]
 8008ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	461a      	mov	r2, r3
 8008af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008afa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008afe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b00:	e841 2300 	strex	r3, r2, [r1]
 8008b04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e6      	bne.n	8008ada <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d12e      	bne.n	8008b72 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	e853 3f00 	ldrex	r3, [r3]
 8008b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f023 0310 	bic.w	r3, r3, #16
 8008b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	461a      	mov	r2, r3
 8008b36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b38:	61bb      	str	r3, [r7, #24]
 8008b3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	6979      	ldr	r1, [r7, #20]
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	e841 2300 	strex	r3, r2, [r1]
 8008b44:	613b      	str	r3, [r7, #16]
   return(result);
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e6      	bne.n	8008b1a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	f003 0310 	and.w	r3, r3, #16
 8008b56:	2b10      	cmp	r3, #16
 8008b58:	d103      	bne.n	8008b62 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2210      	movs	r2, #16
 8008b60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7fe fe2e 	bl	80077cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b70:	e00b      	b.n	8008b8a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7fe fe16 	bl	80077a4 <HAL_UART_RxCpltCallback>
}
 8008b78:	e007      	b.n	8008b8a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	699a      	ldr	r2, [r3, #24]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f042 0208 	orr.w	r2, r2, #8
 8008b88:	619a      	str	r2, [r3, #24]
}
 8008b8a:	bf00      	nop
 8008b8c:	3770      	adds	r7, #112	@ 0x70
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	40008000 	.word	0x40008000

08008b98 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b0ac      	sub	sp, #176	@ 0xb0
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ba6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bce:	2b22      	cmp	r3, #34	@ 0x22
 8008bd0:	f040 8182 	bne.w	8008ed8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008bda:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bde:	e125      	b.n	8008e2c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008bee:	b2d9      	uxtb	r1, r3
 8008bf0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bfa:	400a      	ands	r2, r1
 8008bfc:	b2d2      	uxtb	r2, r2
 8008bfe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c04:	1c5a      	adds	r2, r3, #1
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	3b01      	subs	r3, #1
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c2a:	f003 0307 	and.w	r3, r3, #7
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d053      	beq.n	8008cda <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d011      	beq.n	8008c62 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c58:	f043 0201 	orr.w	r2, r3, #1
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c66:	f003 0302 	and.w	r3, r3, #2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d011      	beq.n	8008c92 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00b      	beq.n	8008c92 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c88:	f043 0204 	orr.w	r2, r3, #4
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c96:	f003 0304 	and.w	r3, r3, #4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d011      	beq.n	8008cc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008c9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2204      	movs	r2, #4
 8008cb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cb8:	f043 0202 	orr.w	r2, r3, #2
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d006      	beq.n	8008cda <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7fe fd73 	bl	80077b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f040 80a2 	bne.w	8008e2c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d0c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008d10:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e4      	bne.n	8008ce8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3308      	adds	r3, #8
 8008d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008d2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d34:	f023 0301 	bic.w	r3, r3, #1
 8008d38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3308      	adds	r3, #8
 8008d42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d46:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008d48:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d4e:	e841 2300 	strex	r3, r2, [r1]
 8008d52:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1e1      	bne.n	8008d1e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a5f      	ldr	r2, [pc, #380]	@ (8008ef0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d021      	beq.n	8008dbc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d01a      	beq.n	8008dbc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d8e:	e853 3f00 	ldrex	r3, [r3]
 8008d92:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008da8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008daa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008dae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008db0:	e841 2300 	strex	r3, r2, [r1]
 8008db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e4      	bne.n	8008d86 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d130      	bne.n	8008e26 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd2:	e853 3f00 	ldrex	r3, [r3]
 8008dd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dda:	f023 0310 	bic.w	r3, r3, #16
 8008dde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008dec:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008df2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e4      	bne.n	8008dca <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	f003 0310 	and.w	r3, r3, #16
 8008e0a:	2b10      	cmp	r3, #16
 8008e0c:	d103      	bne.n	8008e16 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2210      	movs	r2, #16
 8008e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7fe fcd4 	bl	80077cc <HAL_UARTEx_RxEventCallback>
 8008e24:	e002      	b.n	8008e2c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7fe fcbc 	bl	80077a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e2c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d006      	beq.n	8008e42 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e38:	f003 0320 	and.w	r3, r3, #32
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f47f aecf 	bne.w	8008be0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e48:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d049      	beq.n	8008ee8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e5a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d242      	bcs.n	8008ee8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3308      	adds	r3, #8
 8008e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	e853 3f00 	ldrex	r3, [r3]
 8008e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3308      	adds	r3, #8
 8008e82:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008e86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1e3      	bne.n	8008e62 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a15      	ldr	r2, [pc, #84]	@ (8008ef4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008e9e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	f043 0320 	orr.w	r3, r3, #32
 8008eb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ec2:	61bb      	str	r3, [r7, #24]
 8008ec4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec6:	6979      	ldr	r1, [r7, #20]
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	613b      	str	r3, [r7, #16]
   return(result);
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1e4      	bne.n	8008ea0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ed6:	e007      	b.n	8008ee8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	699a      	ldr	r2, [r3, #24]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0208 	orr.w	r2, r2, #8
 8008ee6:	619a      	str	r2, [r3, #24]
}
 8008ee8:	bf00      	nop
 8008eea:	37b0      	adds	r7, #176	@ 0xb0
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	40008000 	.word	0x40008000
 8008ef4:	08008829 	.word	0x08008829

08008ef8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b0ae      	sub	sp, #184	@ 0xb8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f06:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f2e:	2b22      	cmp	r3, #34	@ 0x22
 8008f30:	f040 8186 	bne.w	8009240 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f3a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f3e:	e129      	b.n	8009194 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f46:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f52:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008f56:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f68:	1c9a      	adds	r2, r3, #2
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	3b01      	subs	r3, #1
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d053      	beq.n	800903e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d011      	beq.n	8008fc6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00b      	beq.n	8008fc6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fbc:	f043 0201 	orr.w	r2, r3, #1
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d011      	beq.n	8008ff6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008fd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00b      	beq.n	8008ff6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fec:	f043 0204 	orr.w	r2, r3, #4
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ffa:	f003 0304 	and.w	r3, r3, #4
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d011      	beq.n	8009026 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2204      	movs	r2, #4
 8009014:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800901c:	f043 0202 	orr.w	r2, r3, #2
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800902c:	2b00      	cmp	r3, #0
 800902e:	d006      	beq.n	800903e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7fe fbc1 	bl	80077b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009044:	b29b      	uxth	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	f040 80a4 	bne.w	8009194 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800905a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800905c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009060:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	461a      	mov	r2, r3
 800906a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800906e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009072:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009076:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e2      	bne.n	800904c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3308      	adds	r3, #8
 800908c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800909c:	f023 0301 	bic.w	r3, r3, #1
 80090a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3308      	adds	r3, #8
 80090aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80090ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090b6:	e841 2300 	strex	r3, r2, [r1]
 80090ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1e1      	bne.n	8009086 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2220      	movs	r2, #32
 80090c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a5f      	ldr	r2, [pc, #380]	@ (8009258 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d021      	beq.n	8009124 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d01a      	beq.n	8009124 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090f6:	e853 3f00 	ldrex	r3, [r3]
 80090fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009102:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009110:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009112:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009114:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009116:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009118:	e841 2300 	strex	r3, r2, [r1]
 800911c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800911e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e4      	bne.n	80090ee <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009128:	2b01      	cmp	r3, #1
 800912a:	d130      	bne.n	800918e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009142:	f023 0310 	bic.w	r3, r3, #16
 8009146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009154:	647b      	str	r3, [r7, #68]	@ 0x44
 8009156:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800915a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e4      	bne.n	8009132 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	f003 0310 	and.w	r3, r3, #16
 8009172:	2b10      	cmp	r3, #16
 8009174:	d103      	bne.n	800917e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2210      	movs	r2, #16
 800917c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7fe fb20 	bl	80077cc <HAL_UARTEx_RxEventCallback>
 800918c:	e002      	b.n	8009194 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7fe fb08 	bl	80077a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009194:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009198:	2b00      	cmp	r3, #0
 800919a:	d006      	beq.n	80091aa <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800919c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f47f aecb 	bne.w	8008f40 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091b0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091b4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d049      	beq.n	8009250 <UART_RxISR_16BIT_FIFOEN+0x358>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091c2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d242      	bcs.n	8009250 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3308      	adds	r3, #8
 80091d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d4:	e853 3f00 	ldrex	r3, [r3]
 80091d8:	623b      	str	r3, [r7, #32]
   return(result);
 80091da:	6a3b      	ldr	r3, [r7, #32]
 80091dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3308      	adds	r3, #8
 80091ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80091ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80091f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091f6:	e841 2300 	strex	r3, r2, [r1]
 80091fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1e3      	bne.n	80091ca <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a15      	ldr	r2, [pc, #84]	@ (800925c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009206:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	60fb      	str	r3, [r7, #12]
   return(result);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f043 0320 	orr.w	r3, r3, #32
 800921c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800922a:	61fb      	str	r3, [r7, #28]
 800922c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	69b9      	ldr	r1, [r7, #24]
 8009230:	69fa      	ldr	r2, [r7, #28]
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	617b      	str	r3, [r7, #20]
   return(result);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e4      	bne.n	8009208 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800923e:	e007      	b.n	8009250 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	699a      	ldr	r2, [r3, #24]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f042 0208 	orr.w	r2, r2, #8
 800924e:	619a      	str	r2, [r3, #24]
}
 8009250:	bf00      	nop
 8009252:	37b8      	adds	r7, #184	@ 0xb8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	40008000 	.word	0x40008000
 800925c:	080089e1 	.word	0x080089e1

08009260 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d101      	bne.n	80092b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80092ae:	2302      	movs	r3, #2
 80092b0:	e027      	b.n	8009302 <HAL_UARTEx_DisableFifoMode+0x66>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2224      	movs	r2, #36	@ 0x24
 80092be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f022 0201 	bic.w	r2, r2, #1
 80092d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80092e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800931e:	2b01      	cmp	r3, #1
 8009320:	d101      	bne.n	8009326 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009322:	2302      	movs	r3, #2
 8009324:	e02d      	b.n	8009382 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2224      	movs	r2, #36	@ 0x24
 8009332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f022 0201 	bic.w	r2, r2, #1
 800934c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f850 	bl	8009408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2220      	movs	r2, #32
 8009374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800939a:	2b01      	cmp	r3, #1
 800939c:	d101      	bne.n	80093a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800939e:	2302      	movs	r3, #2
 80093a0:	e02d      	b.n	80093fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2224      	movs	r2, #36	@ 0x24
 80093ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0201 	bic.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f812 	bl	8009408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
	...

08009408 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009414:	2b00      	cmp	r3, #0
 8009416:	d108      	bne.n	800942a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009428:	e031      	b.n	800948e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800942a:	2308      	movs	r3, #8
 800942c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800942e:	2308      	movs	r3, #8
 8009430:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	0e5b      	lsrs	r3, r3, #25
 800943a:	b2db      	uxtb	r3, r3
 800943c:	f003 0307 	and.w	r3, r3, #7
 8009440:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	0f5b      	lsrs	r3, r3, #29
 800944a:	b2db      	uxtb	r3, r3
 800944c:	f003 0307 	and.w	r3, r3, #7
 8009450:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	7b3a      	ldrb	r2, [r7, #12]
 8009456:	4911      	ldr	r1, [pc, #68]	@ (800949c <UARTEx_SetNbDataToProcess+0x94>)
 8009458:	5c8a      	ldrb	r2, [r1, r2]
 800945a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800945e:	7b3a      	ldrb	r2, [r7, #12]
 8009460:	490f      	ldr	r1, [pc, #60]	@ (80094a0 <UARTEx_SetNbDataToProcess+0x98>)
 8009462:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009464:	fb93 f3f2 	sdiv	r3, r3, r2
 8009468:	b29a      	uxth	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	7b7a      	ldrb	r2, [r7, #13]
 8009474:	4909      	ldr	r1, [pc, #36]	@ (800949c <UARTEx_SetNbDataToProcess+0x94>)
 8009476:	5c8a      	ldrb	r2, [r1, r2]
 8009478:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800947c:	7b7a      	ldrb	r2, [r7, #13]
 800947e:	4908      	ldr	r1, [pc, #32]	@ (80094a0 <UARTEx_SetNbDataToProcess+0x98>)
 8009480:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009482:	fb93 f3f2 	sdiv	r3, r3, r2
 8009486:	b29a      	uxth	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800948e:	bf00      	nop
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	080095b0 	.word	0x080095b0
 80094a0:	080095b8 	.word	0x080095b8

080094a4 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	ed93 7a06 	vldr	s14, [r3, #24]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80094ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	edd3 7a08 	vldr	s15, [r3, #32]
 80094c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80094d4:	eeb1 7a67 	vneg.f32	s14, s15
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	edd3 7a08 	vldr	s15, [r3, #32]
 80094de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80094e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a1a      	ldr	r2, [r3, #32]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d006      	beq.n	8009508 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	330c      	adds	r3, #12
 80094fe:	220c      	movs	r2, #12
 8009500:	2100      	movs	r1, #0
 8009502:	4618      	mov	r0, r3
 8009504:	f000 f804 	bl	8009510 <memset>
  }

}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <memset>:
 8009510:	4402      	add	r2, r0
 8009512:	4603      	mov	r3, r0
 8009514:	4293      	cmp	r3, r2
 8009516:	d100      	bne.n	800951a <memset+0xa>
 8009518:	4770      	bx	lr
 800951a:	f803 1b01 	strb.w	r1, [r3], #1
 800951e:	e7f9      	b.n	8009514 <memset+0x4>

08009520 <__libc_init_array>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	4d0d      	ldr	r5, [pc, #52]	@ (8009558 <__libc_init_array+0x38>)
 8009524:	4c0d      	ldr	r4, [pc, #52]	@ (800955c <__libc_init_array+0x3c>)
 8009526:	1b64      	subs	r4, r4, r5
 8009528:	10a4      	asrs	r4, r4, #2
 800952a:	2600      	movs	r6, #0
 800952c:	42a6      	cmp	r6, r4
 800952e:	d109      	bne.n	8009544 <__libc_init_array+0x24>
 8009530:	4d0b      	ldr	r5, [pc, #44]	@ (8009560 <__libc_init_array+0x40>)
 8009532:	4c0c      	ldr	r4, [pc, #48]	@ (8009564 <__libc_init_array+0x44>)
 8009534:	f000 f818 	bl	8009568 <_init>
 8009538:	1b64      	subs	r4, r4, r5
 800953a:	10a4      	asrs	r4, r4, #2
 800953c:	2600      	movs	r6, #0
 800953e:	42a6      	cmp	r6, r4
 8009540:	d105      	bne.n	800954e <__libc_init_array+0x2e>
 8009542:	bd70      	pop	{r4, r5, r6, pc}
 8009544:	f855 3b04 	ldr.w	r3, [r5], #4
 8009548:	4798      	blx	r3
 800954a:	3601      	adds	r6, #1
 800954c:	e7ee      	b.n	800952c <__libc_init_array+0xc>
 800954e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009552:	4798      	blx	r3
 8009554:	3601      	adds	r6, #1
 8009556:	e7f2      	b.n	800953e <__libc_init_array+0x1e>
 8009558:	080095c8 	.word	0x080095c8
 800955c:	080095c8 	.word	0x080095c8
 8009560:	080095c8 	.word	0x080095c8
 8009564:	080095cc 	.word	0x080095cc

08009568 <_init>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	bf00      	nop
 800956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956e:	bc08      	pop	{r3}
 8009570:	469e      	mov	lr, r3
 8009572:	4770      	bx	lr

08009574 <_fini>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	bf00      	nop
 8009578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957a:	bc08      	pop	{r3}
 800957c:	469e      	mov	lr, r3
 800957e:	4770      	bx	lr
