
Elec Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fec  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080081c4  080081c4  000091c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008204  08008204  0000a014  2**0
                  CONTENTS
  4 .ARM          00000008  08008204  08008204  00009204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800820c  0800820c  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800820c  0800820c  0000920c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008210  08008210  00009210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008214  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000014  08008228  0000a014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08008228  0000a520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018998  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cdd  00000000  00000000  000229dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  000256c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001079  00000000  00000000  00026bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fba  00000000  00000000  00027c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a59  00000000  00000000  00050c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001147d3  00000000  00000000  0006965c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017de2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b50  00000000  00000000  0017de74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001839c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080081ac 	.word	0x080081ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	080081ac 	.word	0x080081ac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 f8ee 	bl	80016ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f95d 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fcbf 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fc93 	bl	8000e44 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 fa2d 	bl	800097c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 f9a1 	bl	8000868 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000526:	f000 fb71 	bl	8000c0c <MX_TIM3_Init>
  MX_TIM4_Init();
 800052a:	f000 fbbd 	bl	8000ca8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800052e:	f000 fc33 	bl	8000d98 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000532:	f000 fb1d 	bl	8000b70 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000536:	f000 fa6b 	bl	8000a10 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 800053a:	22c8      	movs	r2, #200	@ 0xc8
 800053c:	4987      	ldr	r1, [pc, #540]	@ (800075c <main+0x254>)
 800053e:	4888      	ldr	r0, [pc, #544]	@ (8000760 <main+0x258>)
 8000540:	f001 fd42 	bl	8001fc8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000544:	4887      	ldr	r0, [pc, #540]	@ (8000764 <main+0x25c>)
 8000546:	f004 fded 	bl	8005124 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800054a:	4887      	ldr	r0, [pc, #540]	@ (8000768 <main+0x260>)
 800054c:	f004 fdea 	bl	8005124 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000550:	4886      	ldr	r0, [pc, #536]	@ (800076c <main+0x264>)
 8000552:	f004 fe57 	bl	8005204 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	4885      	ldr	r0, [pc, #532]	@ (8000770 <main+0x268>)
 800055a:	f004 ff2d 	bl	80053b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800055e:	2100      	movs	r1, #0
 8000560:	4881      	ldr	r0, [pc, #516]	@ (8000768 <main+0x260>)
 8000562:	f004 ff29 	bl	80053b8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 8000566:	213c      	movs	r1, #60	@ 0x3c
 8000568:	4882      	ldr	r0, [pc, #520]	@ (8000774 <main+0x26c>)
 800056a:	f005 f8dd 	bl	8005728 <HAL_TIM_Encoder_Start>



  PID.Kp =0.1;
 800056e:	4b82      	ldr	r3, [pc, #520]	@ (8000778 <main+0x270>)
 8000570:	4a82      	ldr	r2, [pc, #520]	@ (800077c <main+0x274>)
 8000572:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 8000574:	4b80      	ldr	r3, [pc, #512]	@ (8000778 <main+0x270>)
 8000576:	f04f 0200 	mov.w	r2, #0
 800057a:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 800057c:	4b7e      	ldr	r3, [pc, #504]	@ (8000778 <main+0x270>)
 800057e:	f04f 0200 	mov.w	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  set_pos = 0;
 8000584:	4b7e      	ldr	r3, [pc, #504]	@ (8000780 <main+0x278>)
 8000586:	f04f 0200 	mov.w	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
  z = 0;
 800058c:	4b7d      	ldr	r3, [pc, #500]	@ (8000784 <main+0x27c>)
 800058e:	2200      	movs	r2, #0
 8000590:	801a      	strh	r2, [r3, #0]
  arm_pid_init_f32(&PID, 0);
 8000592:	2100      	movs	r1, #0
 8000594:	4878      	ldr	r0, [pc, #480]	@ (8000778 <main+0x270>)
 8000596:	f007 fda7 	bl	80080e8 <arm_pid_init_f32>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Degree = (QEIReadRaw/48)*360;
 800059a:	4b7b      	ldr	r3, [pc, #492]	@ (8000788 <main+0x280>)
 800059c:	ed93 7a00 	vldr	s14, [r3]
 80005a0:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 800078c <main+0x284>
 80005a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005a8:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8000790 <main+0x288>
 80005ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b0:	4b78      	ldr	r3, [pc, #480]	@ (8000794 <main+0x28c>)
 80005b2:	edc3 7a00 	vstr	s15, [r3]
	  for (uint16_t i =0; i < 100;i++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	81fb      	strh	r3, [r7, #14]
 80005ba:	e019      	b.n	80005f0 <main+0xe8>
	  {
		  x += ADC_RawRead[(i*2)];
 80005bc:	89fb      	ldrh	r3, [r7, #14]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	4a66      	ldr	r2, [pc, #408]	@ (800075c <main+0x254>)
 80005c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b73      	ldr	r3, [pc, #460]	@ (8000798 <main+0x290>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4413      	add	r3, r2
 80005ce:	4a72      	ldr	r2, [pc, #456]	@ (8000798 <main+0x290>)
 80005d0:	6013      	str	r3, [r2, #0]
		  y += ADC_RawRead[(i*2)+1];
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	3301      	adds	r3, #1
 80005d8:	4a60      	ldr	r2, [pc, #384]	@ (800075c <main+0x254>)
 80005da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005de:	461a      	mov	r2, r3
 80005e0:	4b6e      	ldr	r3, [pc, #440]	@ (800079c <main+0x294>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	4a6d      	ldr	r2, [pc, #436]	@ (800079c <main+0x294>)
 80005e8:	6013      	str	r3, [r2, #0]
	  for (uint16_t i =0; i < 100;i++)
 80005ea:	89fb      	ldrh	r3, [r7, #14]
 80005ec:	3301      	adds	r3, #1
 80005ee:	81fb      	strh	r3, [r7, #14]
 80005f0:	89fb      	ldrh	r3, [r7, #14]
 80005f2:	2b63      	cmp	r3, #99	@ 0x63
 80005f4:	d9e2      	bls.n	80005bc <main+0xb4>
	  }
	  position = x/100;
 80005f6:	4b68      	ldr	r3, [pc, #416]	@ (8000798 <main+0x290>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a69      	ldr	r2, [pc, #420]	@ (80007a0 <main+0x298>)
 80005fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	ee07 3a90 	vmov	s15, r3
 8000606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800060a:	4b66      	ldr	r3, [pc, #408]	@ (80007a4 <main+0x29c>)
 800060c:	edc3 7a00 	vstr	s15, [r3]
	  setposition = y/100;
 8000610:	4b62      	ldr	r3, [pc, #392]	@ (800079c <main+0x294>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a62      	ldr	r2, [pc, #392]	@ (80007a0 <main+0x298>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	095b      	lsrs	r3, r3, #5
 800061c:	ee07 3a90 	vmov	s15, r3
 8000620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000624:	4b60      	ldr	r3, [pc, #384]	@ (80007a8 <main+0x2a0>)
 8000626:	edc3 7a00 	vstr	s15, [r3]
	  x = 0;
 800062a:	4b5b      	ldr	r3, [pc, #364]	@ (8000798 <main+0x290>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
	  y = 0;
 8000630:	4b5a      	ldr	r3, [pc, #360]	@ (800079c <main+0x294>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]


	  Vfeedback = (arm_pid_f32(&PID, set_pos - pos))*32676/3072;
 8000636:	4b52      	ldr	r3, [pc, #328]	@ (8000780 <main+0x278>)
 8000638:	ed93 7a00 	vldr	s14, [r3]
 800063c:	4b5b      	ldr	r3, [pc, #364]	@ (80007ac <main+0x2a4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	ee07 3a90 	vmov	s15, r3
 8000644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800064c:	4b4a      	ldr	r3, [pc, #296]	@ (8000778 <main+0x270>)
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	edc7 7a01 	vstr	s15, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	ed93 7a00 	vldr	s14, [r3]
 800065a:	edd7 7a01 	vldr	s15, [r7, #4]
 800065e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	edd3 6a01 	vldr	s13, [r3, #4]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	edd3 7a03 	vldr	s15, [r3, #12]
 800066e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000672:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	edd3 6a02 	vldr	s13, [r3, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000694:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	68da      	ldr	r2, [r3, #12]
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80006ac:	edd7 7a00 	vldr	s15, [r7]
 80006b0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80007b0 <main+0x2a8>
 80006b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006b8:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80007b4 <main+0x2ac>
 80006bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006c0:	4b3d      	ldr	r3, [pc, #244]	@ (80007b8 <main+0x2b0>)
 80006c2:	edc3 7a00 	vstr	s15, [r3]
	  if(Vfeedback > 0)
 80006c6:	4b3c      	ldr	r3, [pc, #240]	@ (80007b8 <main+0x2b0>)
 80006c8:	edd3 7a00 	vldr	s15, [r3]
 80006cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d4:	dd08      	ble.n	80006e8 <main+0x1e0>
	  {
		  //z = 1;
		  PWM1 = Vfeedback;
 80006d6:	4b38      	ldr	r3, [pc, #224]	@ (80007b8 <main+0x2b0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a38      	ldr	r2, [pc, #224]	@ (80007bc <main+0x2b4>)
 80006dc:	6013      	str	r3, [r2, #0]
		  PWM2 = 0;
 80006de:	4b38      	ldr	r3, [pc, #224]	@ (80007c0 <main+0x2b8>)
 80006e0:	f04f 0200 	mov.w	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	e01c      	b.n	8000722 <main+0x21a>

	  }
	  else if(Vfeedback < 0)
 80006e8:	4b33      	ldr	r3, [pc, #204]	@ (80007b8 <main+0x2b0>)
 80006ea:	edd3 7a00 	vldr	s15, [r3]
 80006ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f6:	d50c      	bpl.n	8000712 <main+0x20a>
	  {
		  PWM1 = 0;
 80006f8:	4b30      	ldr	r3, [pc, #192]	@ (80007bc <main+0x2b4>)
 80006fa:	f04f 0200 	mov.w	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
		  PWM2 = Vfeedback * -1;
 8000700:	4b2d      	ldr	r3, [pc, #180]	@ (80007b8 <main+0x2b0>)
 8000702:	edd3 7a00 	vldr	s15, [r3]
 8000706:	eef1 7a67 	vneg.f32	s15, s15
 800070a:	4b2d      	ldr	r3, [pc, #180]	@ (80007c0 <main+0x2b8>)
 800070c:	edc3 7a00 	vstr	s15, [r3]
 8000710:	e007      	b.n	8000722 <main+0x21a>
	  }
	  else{
		  PWM1 = 0;
 8000712:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <main+0x2b4>)
 8000714:	f04f 0200 	mov.w	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
		  PWM2 = 0;
 800071a:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <main+0x2b8>)
 800071c:	f04f 0200 	mov.w	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM1);
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <main+0x2b4>)
 8000724:	edd3 7a00 	vldr	s15, [r3]
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <main+0x260>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000730:	ee17 2a90 	vmov	r2, s15
 8000734:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 8000736:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <main+0x2b8>)
 8000738:	edd3 7a00 	vldr	s15, [r3]
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <main+0x268>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000744:	ee17 2a90 	vmov	r2, s15
 8000748:	635a      	str	r2, [r3, #52]	@ 0x34

	  sendUartWithHeader(&hlpuart1, payloadData, payloadLength);
 800074a:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <main+0x2bc>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	491d      	ldr	r1, [pc, #116]	@ (80007c8 <main+0x2c0>)
 8000752:	481e      	ldr	r0, [pc, #120]	@ (80007cc <main+0x2c4>)
 8000754:	f000 fc8c 	bl	8001070 <sendUartWithHeader>
	  Degree = (QEIReadRaw/48)*360;
 8000758:	e71f      	b.n	800059a <main+0x92>
 800075a:	bf00      	nop
 800075c:	20000334 	.word	0x20000334
 8000760:	20000030 	.word	0x20000030
 8000764:	20000228 	.word	0x20000228
 8000768:	20000274 	.word	0x20000274
 800076c:	200001dc 	.word	0x200001dc
 8000770:	20000190 	.word	0x20000190
 8000774:	200002c0 	.word	0x200002c0
 8000778:	200004c4 	.word	0x200004c4
 800077c:	3dcccccd 	.word	0x3dcccccd
 8000780:	2000031c 	.word	0x2000031c
 8000784:	20000314 	.word	0x20000314
 8000788:	20000328 	.word	0x20000328
 800078c:	42400000 	.word	0x42400000
 8000790:	43b40000 	.word	0x43b40000
 8000794:	20000330 	.word	0x20000330
 8000798:	2000030c 	.word	0x2000030c
 800079c:	20000310 	.word	0x20000310
 80007a0:	51eb851f 	.word	0x51eb851f
 80007a4:	200004e8 	.word	0x200004e8
 80007a8:	200004ec 	.word	0x200004ec
 80007ac:	20000318 	.word	0x20000318
 80007b0:	46ff4800 	.word	0x46ff4800
 80007b4:	45400000 	.word	0x45400000
 80007b8:	200004f0 	.word	0x200004f0
 80007bc:	20000320 	.word	0x20000320
 80007c0:	20000324 	.word	0x20000324
 80007c4:	20000006 	.word	0x20000006
 80007c8:	20000000 	.word	0x20000000
 80007cc:	200000fc 	.word	0x200000fc

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	@ 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	2238      	movs	r2, #56	@ 0x38
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f007 fcb8 	bl	8008154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f003 fc0e 	bl	8004014 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080a:	2302      	movs	r3, #2
 800080c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800080e:	2304      	movs	r3, #4
 8000810:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000812:	2355      	movs	r3, #85	@ 0x55
 8000814:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fca8 	bl	800417c <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000832:	f000 fc7b 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	230f      	movs	r3, #15
 8000838:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083a:	2303      	movs	r3, #3
 800083c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2104      	movs	r1, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f003 ffa6 	bl	80047a0 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800085a:	f000 fc67 	bl	800112c <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	@ 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800086e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2220      	movs	r2, #32
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f007 fc67 	bl	8008154 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000886:	4b3a      	ldr	r3, [pc, #232]	@ (8000970 <MX_ADC1_Init+0x108>)
 8000888:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800088c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800088e:	4b38      	ldr	r3, [pc, #224]	@ (8000970 <MX_ADC1_Init+0x108>)
 8000890:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000894:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000896:	4b36      	ldr	r3, [pc, #216]	@ (8000970 <MX_ADC1_Init+0x108>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089c:	4b34      	ldr	r3, [pc, #208]	@ (8000970 <MX_ADC1_Init+0x108>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008a2:	4b33      	ldr	r3, [pc, #204]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008a8:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ae:	4b30      	ldr	r3, [pc, #192]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008b0:	2204      	movs	r2, #4
 80008b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008bc:	2200      	movs	r2, #0
 80008be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80008c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80008ce:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008d0:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80008d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008d6:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008de:	4b24      	ldr	r3, [pc, #144]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e6:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008ec:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f4:	481e      	ldr	r0, [pc, #120]	@ (8000970 <MX_ADC1_Init+0x108>)
 80008f6:	f001 f9ab 	bl	8001c50 <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000900:	f000 fc14 	bl	800112c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	4818      	ldr	r0, [pc, #96]	@ (8000970 <MX_ADC1_Init+0x108>)
 8000910:	f002 fc78 	bl	8003204 <HAL_ADCEx_MultiModeConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800091a:	f000 fc07 	bl	800112c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <MX_ADC1_Init+0x10c>)
 8000920:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000922:	2306      	movs	r3, #6
 8000924:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000926:	2302      	movs	r3, #2
 8000928:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800092a:	237f      	movs	r3, #127	@ 0x7f
 800092c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092e:	2304      	movs	r3, #4
 8000930:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	@ (8000970 <MX_ADC1_Init+0x108>)
 800093c:	f001 fea0 	bl	8002680 <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000946:	f000 fbf1 	bl	800112c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_ADC1_Init+0x110>)
 800094c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800094e:	230c      	movs	r3, #12
 8000950:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	@ (8000970 <MX_ADC1_Init+0x108>)
 8000958:	f001 fe92 	bl	8002680 <HAL_ADC_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000962:	f000 fbe3 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	@ 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000030 	.word	0x20000030
 8000974:	04300002 	.word	0x04300002
 8000978:	08600004 	.word	0x08600004

0800097c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000980:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 8000982:	4a22      	ldr	r2, [pc, #136]	@ (8000a0c <MX_LPUART1_UART_Init+0x90>)
 8000984:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000986:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b8:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009be:	4812      	ldr	r0, [pc, #72]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009c0:	f006 f8f2 	bl	8006ba8 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 fbaf 	bl	800112c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	480d      	ldr	r0, [pc, #52]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009d2:	f007 fabe 	bl	8007f52 <HAL_UARTEx_SetTxFifoThreshold>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80009dc:	f000 fba6 	bl	800112c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009e4:	f007 faf3 	bl	8007fce <HAL_UARTEx_SetRxFifoThreshold>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80009ee:	f000 fb9d 	bl	800112c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_LPUART1_UART_Init+0x8c>)
 80009f4:	f007 fa74 	bl	8007ee0 <HAL_UARTEx_DisableFifoMode>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80009fe:	f000 fb95 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000fc 	.word	0x200000fc
 8000a0c:	40008000 	.word	0x40008000

08000a10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09c      	sub	sp, #112	@ 0x70
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a30:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2234      	movs	r2, #52	@ 0x34
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f007 fb82 	bl	8008154 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a50:	4b45      	ldr	r3, [pc, #276]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a52:	4a46      	ldr	r2, [pc, #280]	@ (8000b6c <MX_TIM1_Init+0x15c>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000a56:	4b44      	ldr	r3, [pc, #272]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a58:	22a9      	movs	r2, #169	@ 0xa9
 8000a5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b42      	ldr	r3, [pc, #264]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32675;
 8000a62:	4b41      	ldr	r3, [pc, #260]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a64:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000a68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a70:	4b3d      	ldr	r3, [pc, #244]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b3c      	ldr	r3, [pc, #240]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a7c:	483a      	ldr	r0, [pc, #232]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a7e:	f004 faf9 	bl	8005074 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 fb50 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a90:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a92:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a96:	4619      	mov	r1, r3
 8000a98:	4833      	ldr	r0, [pc, #204]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000a9a:	f005 f937 	bl	8005d0c <HAL_TIM_ConfigClockSource>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000aa4:	f000 fb42 	bl	800112c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aa8:	482f      	ldr	r0, [pc, #188]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000aaa:	f004 fc23 	bl	80052f4 <HAL_TIM_PWM_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ab4:	f000 fb3a 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4827      	ldr	r0, [pc, #156]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000acc:	f005 fefc 	bl	80068c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000ad6:	f000 fb29 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ada:	2360      	movs	r3, #96	@ 0x60
 8000adc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000afa:	2200      	movs	r2, #0
 8000afc:	4619      	mov	r1, r3
 8000afe:	481a      	ldr	r0, [pc, #104]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000b00:	f004 fff0 	bl	8005ae4 <HAL_TIM_PWM_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b0a:	f000 fb0f 	bl	800112c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4807      	ldr	r0, [pc, #28]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000b4c:	f005 ff52 	bl	80069f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000b56:	f000 fae9 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b5a:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <MX_TIM1_Init+0x158>)
 8000b5c:	f000 fcc4 	bl	80014e8 <HAL_TIM_MspPostInit>

}
 8000b60:	bf00      	nop
 8000b62:	3770      	adds	r7, #112	@ 0x70
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000190 	.word	0x20000190
 8000b6c:	40012c00 	.word	0x40012c00

08000b70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000b90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000b98:	22a9      	movs	r2, #169	@ 0xa9
 8000b9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000ba4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ba8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000baa:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bb6:	4814      	ldr	r0, [pc, #80]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000bb8:	f004 fa5c 	bl	8005074 <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bc2:	f000 fab3 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480d      	ldr	r0, [pc, #52]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000bd4:	f005 f89a 	bl	8005d0c <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bde:	f000 faa5 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000be2:	2320      	movs	r3, #32
 8000be4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	@ (8000c08 <MX_TIM2_Init+0x98>)
 8000bf0:	f005 fe6a 	bl	80068c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bfa:	f000 fa97 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001dc 	.word	0x200001dc

08000c0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca4 <MX_TIM3_Init+0x98>)
 8000c2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c32:	22a9      	movs	r2, #169	@ 0xa9
 8000c34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c50:	4813      	ldr	r0, [pc, #76]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c52:	f004 fa0f 	bl	8005074 <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c5c:	f000 fa66 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c6e:	f005 f84d 	bl	8005d0c <HAL_TIM_ConfigClockSource>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c78:	f000 fa58 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c7c:	2320      	movs	r3, #32
 8000c7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_TIM3_Init+0x94>)
 8000c8a:	f005 fe1d 	bl	80068c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c94:	f000 fa4a 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000228 	.word	0x20000228
 8000ca4:	40000400 	.word	0x40000400

08000ca8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	@ 0x38
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cda:	4b2d      	ldr	r3, [pc, #180]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8000d94 <MX_TIM4_Init+0xec>)
 8000cde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000ce2:	22a9      	movs	r2, #169	@ 0xa9
 8000ce4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32675;
 8000cec:	4b28      	ldr	r3, [pc, #160]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000cee:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 8000cf2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b25      	ldr	r3, [pc, #148]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d00:	4823      	ldr	r0, [pc, #140]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000d02:	f004 f9b7 	bl	8005074 <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d0c:	f000 fa0e 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	481c      	ldr	r0, [pc, #112]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000d1e:	f004 fff5 	bl	8005d0c <HAL_TIM_ConfigClockSource>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d28:	f000 fa00 	bl	800112c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d2c:	4818      	ldr	r0, [pc, #96]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000d2e:	f004 fae1 	bl	80052f4 <HAL_TIM_PWM_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d38:	f000 f9f8 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000d4c:	f005 fdbc 	bl	80068c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d56:	f000 f9e9 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5a:	2360      	movs	r3, #96	@ 0x60
 8000d5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000d5e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4619      	mov	r1, r3
 8000d72:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000d74:	f004 feb6 	bl	8005ae4 <HAL_TIM_PWM_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000d7e:	f000 f9d5 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d82:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <MX_TIM4_Init+0xe8>)
 8000d84:	f000 fbb0 	bl	80014e8 <HAL_TIM_MspPostInit>

}
 8000d88:	bf00      	nop
 8000d8a:	3738      	adds	r7, #56	@ 0x38
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000274 	.word	0x20000274
 8000d94:	40000800 	.word	0x40000800

08000d98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	@ 0x30
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	2224      	movs	r2, #36	@ 0x24
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f007 f9d4 	bl	8008154 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	463b      	mov	r3, r7
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000db6:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000db8:	4a21      	ldr	r2, [pc, #132]	@ (8000e40 <MX_TIM5_Init+0xa8>)
 8000dba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000dca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000de4:	2301      	movs	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000df4:	2301      	movs	r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000e08:	f004 fbe8 	bl	80055dc <HAL_TIM_Encoder_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000e12:	f000 f98b 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <MX_TIM5_Init+0xa4>)
 8000e24:	f005 fd50 	bl	80068c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000e2e:	f000 f97d 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3730      	adds	r7, #48	@ 0x30
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200002c0 	.word	0x200002c0
 8000e40:	40000c00 	.word	0x40000c00

08000e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e4a:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <MX_DMA_Init+0x50>)
 8000e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e4e:	4a11      	ldr	r2, [pc, #68]	@ (8000e94 <MX_DMA_Init+0x50>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <MX_DMA_Init+0x50>)
 8000e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_DMA_Init+0x50>)
 8000e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e66:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <MX_DMA_Init+0x50>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e6e:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_DMA_Init+0x50>)
 8000e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	200b      	movs	r0, #11
 8000e80:	f002 fba3 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e84:	200b      	movs	r0, #11
 8000e86:	f002 fbba 	bl	80035fe <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b39      	ldr	r3, [pc, #228]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	4a38      	ldr	r2, [pc, #224]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eba:	4b36      	ldr	r3, [pc, #216]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec6:	4b33      	ldr	r3, [pc, #204]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	4a32      	ldr	r2, [pc, #200]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ecc:	f043 0320 	orr.w	r3, r3, #32
 8000ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed2:	4b30      	ldr	r3, [pc, #192]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	f003 0320 	and.w	r3, r3, #32
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b2d      	ldr	r3, [pc, #180]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eea:	4b2a      	ldr	r3, [pc, #168]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b27      	ldr	r3, [pc, #156]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a26      	ldr	r2, [pc, #152]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <MX_GPIO_Init+0xfc>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2130      	movs	r1, #48	@ 0x30
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f16:	f003 f841 	bl	8003f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	481e      	ldr	r0, [pc, #120]	@ (8000f98 <MX_GPIO_Init+0x100>)
 8000f20:	f003 f83c 	bl	8003f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4818      	ldr	r0, [pc, #96]	@ (8000f9c <MX_GPIO_Init+0x104>)
 8000f3c:	f002 feac 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000f40:	2330      	movs	r3, #48	@ 0x30
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5a:	f002 fe9d 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4808      	ldr	r0, [pc, #32]	@ (8000f98 <MX_GPIO_Init+0x100>)
 8000f76:	f002 fe8f 	bl	8003c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2028      	movs	r0, #40	@ 0x28
 8000f80:	f002 fb23 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f84:	2028      	movs	r0, #40	@ 0x28
 8000f86:	f002 fb3a 	bl	80035fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	@ 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	48000800 	.word	0x48000800

08000fa0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a29      	ldr	r2, [pc, #164]	@ (8001050 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d148      	bne.n	8001042 <HAL_TIM_PeriodElapsedCallback+0xa2>
  {
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8000fb0:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fbe:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000fc0:	edc3 7a00 	vstr	s15, [r3]
	  //spd =  QEIReadRaw * 1000 / 250 * 8;
	  if(QEIReadRaw > 32678)
 8000fc4:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000fc6:	edd3 7a00 	vldr	s15, [r3]
 8000fca:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800105c <HAL_TIM_PeriodElapsedCallback+0xbc>
 8000fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd6:	dd18      	ble.n	800100a <HAL_TIM_PeriodElapsedCallback+0x6a>
	  {
		  pos -= (65536-QEIReadRaw);
 8000fd8:	4b21      	ldr	r3, [pc, #132]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	ee07 3a90 	vmov	s15, r3
 8000fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001064 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8000fee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffa:	ee17 2a90 	vmov	r2, s15
 8000ffe:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001000:	601a      	str	r2, [r3, #0]
		  z = 1;
 8001002:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001004:	2201      	movs	r2, #1
 8001006:	801a      	strh	r2, [r3, #0]
 8001008:	e013      	b.n	8001032 <HAL_TIM_PeriodElapsedCallback+0x92>
	  }
	  else
	  {
		  pos += QEIReadRaw;
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001016:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001018:	edd3 7a00 	vldr	s15, [r3]
 800101c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001024:	ee17 2a90 	vmov	r2, s15
 8001028:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800102a:	601a      	str	r2, [r3, #0]
		  z = 2;
 800102c:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800102e:	2202      	movs	r2, #2
 8001030:	801a      	strh	r2, [r3, #0]
	  }
	  QEIReadOld = QEIReadRaw;
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001038:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COUNTER(&htim5, 0);
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	@ 0x24
//	  if (a == 0)
//	  {
//	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//	  }
	  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200001dc 	.word	0x200001dc
 8001054:	200002c0 	.word	0x200002c0
 8001058:	20000328 	.word	0x20000328
 800105c:	46ff4c00 	.word	0x46ff4c00
 8001060:	20000318 	.word	0x20000318
 8001064:	47800000 	.word	0x47800000
 8001068:	20000314 	.word	0x20000314
 800106c:	2000032c 	.word	0x2000032c

08001070 <sendUartWithHeader>:





void sendUartWithHeader(UART_HandleTypeDef *huart, uint8_t *data, uint8_t dataLength) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b098      	sub	sp, #96	@ 0x60
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4613      	mov	r3, r2
 800107c:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer[MAX_DATA_SIZE + 3]; // Buffer for header + data
    uint8_t bufferIndex = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

    // Add start byte
    txBuffer[bufferIndex++] = START_BYTE;
 8001084:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	f887 205f 	strb.w	r2, [r7, #95]	@ 0x5f
 800108e:	3360      	adds	r3, #96	@ 0x60
 8001090:	443b      	add	r3, r7
 8001092:	2245      	movs	r2, #69	@ 0x45
 8001094:	f803 2c4c 	strb.w	r2, [r3, #-76]

    // Add data length
    txBuffer[bufferIndex++] = dataLength;
 8001098:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	f887 205f 	strb.w	r2, [r7, #95]	@ 0x5f
 80010a2:	3360      	adds	r3, #96	@ 0x60
 80010a4:	443b      	add	r3, r7
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	f803 2c4c 	strb.w	r2, [r3, #-76]

    // Add data
    for (uint8_t i = 0; i < dataLength; i++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80010b2:	e012      	b.n	80010da <sendUartWithHeader+0x6a>
        txBuffer[bufferIndex++] = data[i];
 80010b4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	441a      	add	r2, r3
 80010bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80010c0:	1c59      	adds	r1, r3, #1
 80010c2:	f887 105f 	strb.w	r1, [r7, #95]	@ 0x5f
 80010c6:	7812      	ldrb	r2, [r2, #0]
 80010c8:	3360      	adds	r3, #96	@ 0x60
 80010ca:	443b      	add	r3, r7
 80010cc:	f803 2c4c 	strb.w	r2, [r3, #-76]
    for (uint8_t i = 0; i < dataLength; i++) {
 80010d0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80010d4:	3301      	adds	r3, #1
 80010d6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80010da:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3e7      	bcc.n	80010b4 <sendUartWithHeader+0x44>
    }

    // Send the buffer over UART
    HAL_UART_Transmit(huart, txBuffer, bufferIndex,10);
 80010e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f107 0114 	add.w	r1, r7, #20
 80010ee:	230a      	movs	r3, #10
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f005 fda9 	bl	8006c48 <HAL_UART_Transmit>
    for (int i = 0;i<= sizeof(txBuffer)/sizeof(txBuffer[0]);i++){
 80010f6:	2300      	movs	r3, #0
 80010f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80010fa:	e00c      	b.n	8001116 <sendUartWithHeader+0xa6>
    	Buffer[i] = txBuffer[i];
 80010fc:	f107 0214 	add.w	r2, r7, #20
 8001100:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	4a07      	ldr	r2, [pc, #28]	@ (8001128 <sendUartWithHeader+0xb8>)
 800110a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800110c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0;i<= sizeof(txBuffer)/sizeof(txBuffer[0]);i++){
 8001110:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001112:	3301      	adds	r3, #1
 8001114:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001116:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001118:	2b43      	cmp	r3, #67	@ 0x43
 800111a:	d9ef      	bls.n	80010fc <sendUartWithHeader+0x8c>
    }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3760      	adds	r7, #96	@ 0x60
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200004f4 	.word	0x200004f4

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <Error_Handler+0x8>

08001138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <HAL_MspInit+0x44>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001142:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <HAL_MspInit+0x44>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6613      	str	r3, [r2, #96]	@ 0x60
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <HAL_MspInit+0x44>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_MspInit+0x44>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	4a08      	ldr	r2, [pc, #32]	@ (800117c <HAL_MspInit+0x44>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001160:	6593      	str	r3, [r2, #88]	@ 0x58
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_MspInit+0x44>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800116e:	f002 fff5 	bl	800415c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000

08001180 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b09e      	sub	sp, #120	@ 0x78
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2254      	movs	r2, #84	@ 0x54
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f006 ffd7 	bl	8008154 <memset>
  if(hadc->Instance==ADC1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011ae:	d167      	bne.n	8001280 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011b6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011ba:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 fd09 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011cc:	f7ff ffae 	bl	800112c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001288 <HAL_ADC_MspInit+0x108>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001288 <HAL_ADC_MspInit+0x108>)
 80011d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <HAL_ADC_MspInit+0x108>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <HAL_ADC_MspInit+0x108>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ec:	4a26      	ldr	r2, [pc, #152]	@ (8001288 <HAL_ADC_MspInit+0x108>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f4:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <HAL_ADC_MspInit+0x108>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001200:	2303      	movs	r3, #3
 8001202:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001204:	2303      	movs	r3, #3
 8001206:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001216:	f002 fd3f 	bl	8003c98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800121a:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <HAL_ADC_MspInit+0x10c>)
 800121c:	4a1c      	ldr	r2, [pc, #112]	@ (8001290 <HAL_ADC_MspInit+0x110>)
 800121e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001220:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <HAL_ADC_MspInit+0x10c>)
 8001222:	2205      	movs	r2, #5
 8001224:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001226:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_ADC_MspInit+0x10c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122c:	4b17      	ldr	r3, [pc, #92]	@ (800128c <HAL_ADC_MspInit+0x10c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001232:	4b16      	ldr	r3, [pc, #88]	@ (800128c <HAL_ADC_MspInit+0x10c>)
 8001234:	2280      	movs	r2, #128	@ 0x80
 8001236:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001238:	4b14      	ldr	r3, [pc, #80]	@ (800128c <HAL_ADC_MspInit+0x10c>)
 800123a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800123e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_ADC_MspInit+0x10c>)
 8001242:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001246:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001248:	4b10      	ldr	r3, [pc, #64]	@ (800128c <HAL_ADC_MspInit+0x10c>)
 800124a:	2220      	movs	r2, #32
 800124c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <HAL_ADC_MspInit+0x10c>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001254:	480d      	ldr	r0, [pc, #52]	@ (800128c <HAL_ADC_MspInit+0x10c>)
 8001256:	f002 f9ed 	bl	8003634 <HAL_DMA_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001260:	f7ff ff64 	bl	800112c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a09      	ldr	r2, [pc, #36]	@ (800128c <HAL_ADC_MspInit+0x10c>)
 8001268:	655a      	str	r2, [r3, #84]	@ 0x54
 800126a:	4a08      	ldr	r2, [pc, #32]	@ (800128c <HAL_ADC_MspInit+0x10c>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2012      	movs	r0, #18
 8001276:	f002 f9a8 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800127a:	2012      	movs	r0, #18
 800127c:	f002 f9bf 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	3778      	adds	r7, #120	@ 0x78
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021000 	.word	0x40021000
 800128c:	2000009c 	.word	0x2000009c
 8001290:	40020008 	.word	0x40020008

08001294 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b09e      	sub	sp, #120	@ 0x78
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	2254      	movs	r2, #84	@ 0x54
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f006 ff4d 	bl	8008154 <memset>
  if(huart->Instance==LPUART1)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a23      	ldr	r2, [pc, #140]	@ (800134c <HAL_UART_MspInit+0xb8>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d13e      	bne.n	8001342 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80012c4:	2320      	movs	r3, #32
 80012c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fc81 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012dc:	f7ff ff26 	bl	800112c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80012e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <HAL_UART_MspInit+0xbc>)
 80012e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001350 <HAL_UART_MspInit+0xbc>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_UART_MspInit+0xbc>)
 80012ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_UART_MspInit+0xbc>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fc:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <HAL_UART_MspInit+0xbc>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <HAL_UART_MspInit+0xbc>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001310:	230c      	movs	r3, #12
 8001312:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001320:	230c      	movs	r3, #12
 8001322:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001328:	4619      	mov	r1, r3
 800132a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132e:	f002 fcb3 	bl	8003c98 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	205b      	movs	r0, #91	@ 0x5b
 8001338:	f002 f947 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800133c:	205b      	movs	r0, #91	@ 0x5b
 800133e:	f002 f95e 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3778      	adds	r7, #120	@ 0x78
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40008000 	.word	0x40008000
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a2c      	ldr	r2, [pc, #176]	@ (8001414 <HAL_TIM_Base_MspInit+0xc0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10c      	bne.n	8001380 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001366:	4b2c      	ldr	r3, [pc, #176]	@ (8001418 <HAL_TIM_Base_MspInit+0xc4>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136a:	4a2b      	ldr	r2, [pc, #172]	@ (8001418 <HAL_TIM_Base_MspInit+0xc4>)
 800136c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001370:	6613      	str	r3, [r2, #96]	@ 0x60
 8001372:	4b29      	ldr	r3, [pc, #164]	@ (8001418 <HAL_TIM_Base_MspInit+0xc4>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800137e:	e044      	b.n	800140a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001388:	d114      	bne.n	80013b4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <HAL_TIM_Base_MspInit+0xc4>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138e:	4a22      	ldr	r2, [pc, #136]	@ (8001418 <HAL_TIM_Base_MspInit+0xc4>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6593      	str	r3, [r2, #88]	@ 0x58
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <HAL_TIM_Base_MspInit+0xc4>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	201c      	movs	r0, #28
 80013a8:	f002 f90f 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013ac:	201c      	movs	r0, #28
 80013ae:	f002 f926 	bl	80035fe <HAL_NVIC_EnableIRQ>
}
 80013b2:	e02a      	b.n	800140a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a18      	ldr	r2, [pc, #96]	@ (800141c <HAL_TIM_Base_MspInit+0xc8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d114      	bne.n	80013e8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013be:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <HAL_TIM_Base_MspInit+0xc4>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c2:	4a15      	ldr	r2, [pc, #84]	@ (8001418 <HAL_TIM_Base_MspInit+0xc4>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ca:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <HAL_TIM_Base_MspInit+0xc4>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	201d      	movs	r0, #29
 80013dc:	f002 f8f5 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013e0:	201d      	movs	r0, #29
 80013e2:	f002 f90c 	bl	80035fe <HAL_NVIC_EnableIRQ>
}
 80013e6:	e010      	b.n	800140a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <HAL_TIM_Base_MspInit+0xcc>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10b      	bne.n	800140a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_TIM_Base_MspInit+0xc4>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f6:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <HAL_TIM_Base_MspInit+0xc4>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_TIM_Base_MspInit+0xc4>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40012c00 	.word	0x40012c00
 8001418:	40021000 	.word	0x40021000
 800141c:	40000400 	.word	0x40000400
 8001420:	40000800 	.word	0x40000800

08001424 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a25      	ldr	r2, [pc, #148]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d144      	bne.n	80014d0 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001446:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144a:	4a24      	ldr	r2, [pc, #144]	@ (80014dc <HAL_TIM_Encoder_MspInit+0xb8>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6593      	str	r3, [r2, #88]	@ 0x58
 8001452:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	4a1e      	ldr	r2, [pc, #120]	@ (80014dc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <HAL_TIM_Encoder_MspInit+0xb8>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	4a18      	ldr	r2, [pc, #96]	@ (80014dc <HAL_TIM_Encoder_MspInit+0xb8>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001482:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PB2     ------> TIM5_CH1
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800148e:	2304      	movs	r3, #4
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800149e:	2302      	movs	r3, #2
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	480d      	ldr	r0, [pc, #52]	@ (80014e0 <HAL_TIM_Encoder_MspInit+0xbc>)
 80014aa:	f002 fbf5 	bl	8003c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80014c0:	2301      	movs	r3, #1
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xc0>)
 80014cc:	f002 fbe4 	bl	8003c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40000c00 	.word	0x40000c00
 80014dc:	40021000 	.word	0x40021000
 80014e0:	48000400 	.word	0x48000400
 80014e4:	48000800 	.word	0x48000800

080014e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a23      	ldr	r2, [pc, #140]	@ (8001594 <HAL_TIM_MspPostInit+0xac>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d11c      	bne.n	8001544 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <HAL_TIM_MspPostInit+0xb0>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	4a22      	ldr	r2, [pc, #136]	@ (8001598 <HAL_TIM_MspPostInit+0xb0>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001516:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <HAL_TIM_MspPostInit+0xb0>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001532:	2302      	movs	r3, #2
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4817      	ldr	r0, [pc, #92]	@ (800159c <HAL_TIM_MspPostInit+0xb4>)
 800153e:	f002 fbab 	bl	8003c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001542:	e022      	b.n	800158a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <HAL_TIM_MspPostInit+0xb8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d11d      	bne.n	800158a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_TIM_MspPostInit+0xb0>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	4a11      	ldr	r2, [pc, #68]	@ (8001598 <HAL_TIM_MspPostInit+0xb0>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_TIM_MspPostInit+0xb0>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001566:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001578:	230a      	movs	r3, #10
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001586:	f002 fb87 	bl	8003c98 <HAL_GPIO_Init>
}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	@ 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40012c00 	.word	0x40012c00
 8001598:	40021000 	.word	0x40021000
 800159c:	48000800 	.word	0x48000800
 80015a0:	40000800 	.word	0x40000800

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <NMI_Handler+0x4>

080015ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <MemManage_Handler+0x4>

080015bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <UsageFault_Handler+0x4>

080015cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fa:	f000 f8cb 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001608:	4802      	ldr	r0, [pc, #8]	@ (8001614 <DMA1_Channel1_IRQHandler+0x10>)
 800160a:	f002 f9f6 	bl	80039fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000009c 	.word	0x2000009c

08001618 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800161c:	4802      	ldr	r0, [pc, #8]	@ (8001628 <ADC1_2_IRQHandler+0x10>)
 800161e:	f000 fda7 	bl	8002170 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000030 	.word	0x20000030

0800162c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <TIM2_IRQHandler+0x10>)
 8001632:	f004 f907 	bl	8005844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200001dc 	.word	0x200001dc

08001640 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001644:	4802      	ldr	r0, [pc, #8]	@ (8001650 <TIM3_IRQHandler+0x10>)
 8001646:	f004 f8fd 	bl	8005844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000228 	.word	0x20000228

08001654 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001658:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800165c:	f002 fcb6 	bl	8003fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <LPUART1_IRQHandler+0x10>)
 800166a:	f005 fb7b 	bl	8006d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200000fc 	.word	0x200000fc

08001678 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	@ (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800169c:	480d      	ldr	r0, [pc, #52]	@ (80016d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800169e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a0:	f7ff ffea 	bl	8001678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a4:	480c      	ldr	r0, [pc, #48]	@ (80016d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016a6:	490d      	ldr	r1, [pc, #52]	@ (80016dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a8:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <LoopForever+0xe>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016bc:	4c0a      	ldr	r4, [pc, #40]	@ (80016e8 <LoopForever+0x16>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ca:	f006 fd4b 	bl	8008164 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ce:	f7fe ff1b 	bl	8000508 <main>

080016d2 <LoopForever>:

LoopForever:
    b LoopForever
 80016d2:	e7fe      	b.n	80016d2 <LoopForever>
  ldr   r0, =_estack
 80016d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80016e0:	08008214 	.word	0x08008214
  ldr r2, =_sbss
 80016e4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80016e8:	20000520 	.word	0x20000520

080016ec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC3_IRQHandler>

080016ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f001 ff5b 	bl	80035b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016fe:	2000      	movs	r0, #0
 8001700:	f000 f80e 	bl	8001720 <HAL_InitTick>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	71fb      	strb	r3, [r7, #7]
 800170e:	e001      	b.n	8001714 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001710:	f7ff fd12 	bl	8001138 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001714:	79fb      	ldrb	r3, [r7, #7]

}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <HAL_InitTick+0x68>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d022      	beq.n	800177a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_InitTick+0x6c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <HAL_InitTick+0x68>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001740:	fbb1 f3f3 	udiv	r3, r1, r3
 8001744:	fbb2 f3f3 	udiv	r3, r2, r3
 8001748:	4618      	mov	r0, r3
 800174a:	f001 ff66 	bl	800361a <HAL_SYSTICK_Config>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10f      	bne.n	8001774 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b0f      	cmp	r3, #15
 8001758:	d809      	bhi.n	800176e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175a:	2200      	movs	r2, #0
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	f04f 30ff 	mov.w	r0, #4294967295
 8001762:	f001 ff32 	bl	80035ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <HAL_InitTick+0x70>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e007      	b.n	800177e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	e004      	b.n	800177e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e001      	b.n	800177e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000010 	.word	0x20000010
 800178c:	20000008 	.word	0x20000008
 8001790:	2000000c 	.word	0x2000000c

08001794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <HAL_IncTick+0x1c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_IncTick+0x20>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a03      	ldr	r2, [pc, #12]	@ (80017b0 <HAL_IncTick+0x1c>)
 80017a4:	6013      	str	r3, [r2, #0]
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	2000051c 	.word	0x2000051c
 80017b4:	20000010 	.word	0x20000010

080017b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTick;
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <HAL_GetTick+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	2000051c 	.word	0x2000051c

080017d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	609a      	str	r2, [r3, #8]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	609a      	str	r2, [r3, #8]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3360      	adds	r3, #96	@ 0x60
 800184a:	461a      	mov	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <LL_ADC_SetOffset+0x44>)
 800185a:	4013      	ands	r3, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	4313      	orrs	r3, r2
 8001868:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	03fff000 	.word	0x03fff000

08001880 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3360      	adds	r3, #96	@ 0x60
 800188e:	461a      	mov	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3360      	adds	r3, #96	@ 0x60
 80018bc:	461a      	mov	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018d6:	bf00      	nop
 80018d8:	371c      	adds	r7, #28
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b087      	sub	sp, #28
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3360      	adds	r3, #96	@ 0x60
 80018f2:	461a      	mov	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	431a      	orrs	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800190c:	bf00      	nop
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3360      	adds	r3, #96	@ 0x60
 8001928:	461a      	mov	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001942:	bf00      	nop
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	615a      	str	r2, [r3, #20]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800199a:	b480      	push	{r7}
 800199c:	b087      	sub	sp, #28
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3330      	adds	r3, #48	@ 0x30
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	4413      	add	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	211f      	movs	r1, #31
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	401a      	ands	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	0e9b      	lsrs	r3, r3, #26
 80019d2:	f003 011f 	and.w	r1, r3, #31
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	431a      	orrs	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019e6:	bf00      	nop
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fe:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3314      	adds	r3, #20
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	0e5b      	lsrs	r3, r3, #25
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	4413      	add	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	0d1b      	lsrs	r3, r3, #20
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	2107      	movs	r1, #7
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	0d1b      	lsrs	r3, r3, #20
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0318 	and.w	r3, r3, #24
 8001a92:	4908      	ldr	r1, [pc, #32]	@ (8001ab4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a94:	40d9      	lsrs	r1, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	400b      	ands	r3, r1
 8001a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	0007ffff 	.word	0x0007ffff

08001ab8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 031f 	and.w	r3, r3, #31
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6093      	str	r3, [r2, #8]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b28:	d101      	bne.n	8001b2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b78:	d101      	bne.n	8001b7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <LL_ADC_IsEnabled+0x18>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <LL_ADC_IsEnabled+0x1a>
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bee:	f043 0204 	orr.w	r2, r3, #4
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d101      	bne.n	8001c1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d101      	bne.n	8001c40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b089      	sub	sp, #36	@ 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e1a9      	b.n	8001fbe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fa81 	bl	8001180 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff3f 	bl	8001b14 <LL_ADC_IsDeepPowerDownEnabled>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff25 	bl	8001af0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff5a 	bl	8001b64 <LL_ADC_IsInternalRegulatorEnabled>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d115      	bne.n	8001ce2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff3e 	bl	8001b3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cc0:	4b9c      	ldr	r3, [pc, #624]	@ (8001f34 <HAL_ADC_Init+0x2e4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	099b      	lsrs	r3, r3, #6
 8001cc6:	4a9c      	ldr	r2, [pc, #624]	@ (8001f38 <HAL_ADC_Init+0x2e8>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	099b      	lsrs	r3, r3, #6
 8001cce:	3301      	adds	r3, #1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cd4:	e002      	b.n	8001cdc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f9      	bne.n	8001cd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff3c 	bl	8001b64 <LL_ADC_IsInternalRegulatorEnabled>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10d      	bne.n	8001d0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf6:	f043 0210 	orr.w	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d02:	f043 0201 	orr.w	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff75 	bl	8001c02 <LL_ADC_REG_IsConversionOngoing>
 8001d18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 8142 	bne.w	8001fac <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 813e 	bne.w	8001fac <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d34:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d38:	f043 0202 	orr.w	r2, r3, #2
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff35 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d141      	bne.n	8001dd4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d58:	d004      	beq.n	8001d64 <HAL_ADC_Init+0x114>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a77      	ldr	r2, [pc, #476]	@ (8001f3c <HAL_ADC_Init+0x2ec>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d10f      	bne.n	8001d84 <HAL_ADC_Init+0x134>
 8001d64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001d68:	f7ff ff24 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	4873      	ldr	r0, [pc, #460]	@ (8001f3c <HAL_ADC_Init+0x2ec>)
 8001d70:	f7ff ff20 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4323      	orrs	r3, r4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	e012      	b.n	8001daa <HAL_ADC_Init+0x15a>
 8001d84:	486e      	ldr	r0, [pc, #440]	@ (8001f40 <HAL_ADC_Init+0x2f0>)
 8001d86:	f7ff ff15 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	486d      	ldr	r0, [pc, #436]	@ (8001f44 <HAL_ADC_Init+0x2f4>)
 8001d8e:	f7ff ff11 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d92:	4603      	mov	r3, r0
 8001d94:	431c      	orrs	r4, r3
 8001d96:	486c      	ldr	r0, [pc, #432]	@ (8001f48 <HAL_ADC_Init+0x2f8>)
 8001d98:	f7ff ff0c 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4323      	orrs	r3, r4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d012      	beq.n	8001dd4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001db6:	d004      	beq.n	8001dc2 <HAL_ADC_Init+0x172>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a5f      	ldr	r2, [pc, #380]	@ (8001f3c <HAL_ADC_Init+0x2ec>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0x176>
 8001dc2:	4a62      	ldr	r2, [pc, #392]	@ (8001f4c <HAL_ADC_Init+0x2fc>)
 8001dc4:	e000      	b.n	8001dc8 <HAL_ADC_Init+0x178>
 8001dc6:	4a62      	ldr	r2, [pc, #392]	@ (8001f50 <HAL_ADC_Init+0x300>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f7ff fcfe 	bl	80017d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7f5b      	ldrb	r3, [r3, #29]
 8001dd8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dde:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001de4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001dea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001df2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d106      	bne.n	8001e10 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e06:	3b01      	subs	r3, #1
 8001e08:	045b      	lsls	r3, r3, #17
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	4b48      	ldr	r3, [pc, #288]	@ (8001f54 <HAL_ADC_Init+0x304>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	69b9      	ldr	r1, [r7, #24]
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fee4 	bl	8001c28 <LL_ADC_INJ_IsConversionOngoing>
 8001e60:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d17f      	bne.n	8001f68 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d17c      	bne.n	8001f68 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e72:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e7a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e8a:	f023 0302 	bic.w	r3, r3, #2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d017      	beq.n	8001ed0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001eae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001eb8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ebc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6911      	ldr	r1, [r2, #16]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001ece:	e013      	b.n	8001ef8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ede:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ef0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ef4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d12a      	bne.n	8001f58 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f18:	4311      	orrs	r1, r2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f24:	430a      	orrs	r2, r1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	611a      	str	r2, [r3, #16]
 8001f32:	e019      	b.n	8001f68 <HAL_ADC_Init+0x318>
 8001f34:	20000008 	.word	0x20000008
 8001f38:	053e2d63 	.word	0x053e2d63
 8001f3c:	50000100 	.word	0x50000100
 8001f40:	50000400 	.word	0x50000400
 8001f44:	50000500 	.word	0x50000500
 8001f48:	50000600 	.word	0x50000600
 8001f4c:	50000300 	.word	0x50000300
 8001f50:	50000700 	.word	0x50000700
 8001f54:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d10c      	bne.n	8001f8a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	f023 010f 	bic.w	r1, r3, #15
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	1e5a      	subs	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f88:	e007      	b.n	8001f9a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 020f 	bic.w	r2, r2, #15
 8001f98:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001faa:	e007      	b.n	8001fbc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb0:	f043 0210 	orr.w	r2, r3, #16
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	@ 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd90      	pop	{r4, r7, pc}
 8001fc6:	bf00      	nop

08001fc8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fdc:	d004      	beq.n	8001fe8 <HAL_ADC_Start_DMA+0x20>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a5a      	ldr	r2, [pc, #360]	@ (800214c <HAL_ADC_Start_DMA+0x184>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_Start_DMA+0x24>
 8001fe8:	4b59      	ldr	r3, [pc, #356]	@ (8002150 <HAL_ADC_Start_DMA+0x188>)
 8001fea:	e000      	b.n	8001fee <HAL_ADC_Start_DMA+0x26>
 8001fec:	4b59      	ldr	r3, [pc, #356]	@ (8002154 <HAL_ADC_Start_DMA+0x18c>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd62 	bl	8001ab8 <LL_ADC_GetMultimode>
 8001ff4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fe01 	bl	8001c02 <LL_ADC_REG_IsConversionOngoing>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 809b 	bne.w	800213e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_ADC_Start_DMA+0x4e>
 8002012:	2302      	movs	r3, #2
 8002014:	e096      	b.n	8002144 <HAL_ADC_Start_DMA+0x17c>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a4d      	ldr	r2, [pc, #308]	@ (8002158 <HAL_ADC_Start_DMA+0x190>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d008      	beq.n	800203a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b05      	cmp	r3, #5
 8002032:	d002      	beq.n	800203a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b09      	cmp	r3, #9
 8002038:	d17a      	bne.n	8002130 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 ff60 	bl	8002f00 <ADC_Enable>
 8002040:	4603      	mov	r3, r0
 8002042:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002044:	7dfb      	ldrb	r3, [r7, #23]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d16d      	bne.n	8002126 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a3a      	ldr	r2, [pc, #232]	@ (800214c <HAL_ADC_Start_DMA+0x184>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d009      	beq.n	800207c <HAL_ADC_Start_DMA+0xb4>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a3b      	ldr	r2, [pc, #236]	@ (800215c <HAL_ADC_Start_DMA+0x194>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d002      	beq.n	8002078 <HAL_ADC_Start_DMA+0xb0>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	e003      	b.n	8002080 <HAL_ADC_Start_DMA+0xb8>
 8002078:	4b39      	ldr	r3, [pc, #228]	@ (8002160 <HAL_ADC_Start_DMA+0x198>)
 800207a:	e001      	b.n	8002080 <HAL_ADC_Start_DMA+0xb8>
 800207c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	4293      	cmp	r3, r2
 8002086:	d002      	beq.n	800208e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d105      	bne.n	800209a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002092:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020aa:	f023 0206 	bic.w	r2, r3, #6
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80020b2:	e002      	b.n	80020ba <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020be:	4a29      	ldr	r2, [pc, #164]	@ (8002164 <HAL_ADC_Start_DMA+0x19c>)
 80020c0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c6:	4a28      	ldr	r2, [pc, #160]	@ (8002168 <HAL_ADC_Start_DMA+0x1a0>)
 80020c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ce:	4a27      	ldr	r2, [pc, #156]	@ (800216c <HAL_ADC_Start_DMA+0x1a4>)
 80020d0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	221c      	movs	r2, #28
 80020d8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0210 	orr.w	r2, r2, #16
 80020f0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3340      	adds	r3, #64	@ 0x40
 800210c:	4619      	mov	r1, r3
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f001 fb37 	bl	8003784 <HAL_DMA_Start_IT>
 8002116:	4603      	mov	r3, r0
 8002118:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fd5b 	bl	8001bda <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002124:	e00d      	b.n	8002142 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800212e:	e008      	b.n	8002142 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800213c:	e001      	b.n	8002142 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800213e:	2302      	movs	r3, #2
 8002140:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002142:	7dfb      	ldrb	r3, [r7, #23]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	50000100 	.word	0x50000100
 8002150:	50000300 	.word	0x50000300
 8002154:	50000700 	.word	0x50000700
 8002158:	50000600 	.word	0x50000600
 800215c:	50000500 	.word	0x50000500
 8002160:	50000400 	.word	0x50000400
 8002164:	0800302d 	.word	0x0800302d
 8002168:	08003105 	.word	0x08003105
 800216c:	08003121 	.word	0x08003121

08002170 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002194:	d004      	beq.n	80021a0 <HAL_ADC_IRQHandler+0x30>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a8e      	ldr	r2, [pc, #568]	@ (80023d4 <HAL_ADC_IRQHandler+0x264>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_IRQHandler+0x34>
 80021a0:	4b8d      	ldr	r3, [pc, #564]	@ (80023d8 <HAL_ADC_IRQHandler+0x268>)
 80021a2:	e000      	b.n	80021a6 <HAL_ADC_IRQHandler+0x36>
 80021a4:	4b8d      	ldr	r3, [pc, #564]	@ (80023dc <HAL_ADC_IRQHandler+0x26c>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fc86 	bl	8001ab8 <LL_ADC_GetMultimode>
 80021ac:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d017      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x78>
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f001 f808 	bl	80031f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2202      	movs	r2, #2
 80021e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d004      	beq.n	80021fc <HAL_ADC_IRQHandler+0x8c>
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8094 	beq.w	8002330 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 808e 	beq.w	8002330 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002224:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fb9f 	bl	8001974 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d072      	beq.n	8002322 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a64      	ldr	r2, [pc, #400]	@ (80023d4 <HAL_ADC_IRQHandler+0x264>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d009      	beq.n	800225a <HAL_ADC_IRQHandler+0xea>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a65      	ldr	r2, [pc, #404]	@ (80023e0 <HAL_ADC_IRQHandler+0x270>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d002      	beq.n	8002256 <HAL_ADC_IRQHandler+0xe6>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	e003      	b.n	800225e <HAL_ADC_IRQHandler+0xee>
 8002256:	4b63      	ldr	r3, [pc, #396]	@ (80023e4 <HAL_ADC_IRQHandler+0x274>)
 8002258:	e001      	b.n	800225e <HAL_ADC_IRQHandler+0xee>
 800225a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	4293      	cmp	r3, r2
 8002264:	d008      	beq.n	8002278 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b05      	cmp	r3, #5
 8002270:	d002      	beq.n	8002278 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b09      	cmp	r3, #9
 8002276:	d104      	bne.n	8002282 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	623b      	str	r3, [r7, #32]
 8002280:	e014      	b.n	80022ac <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a53      	ldr	r2, [pc, #332]	@ (80023d4 <HAL_ADC_IRQHandler+0x264>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d009      	beq.n	80022a0 <HAL_ADC_IRQHandler+0x130>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a53      	ldr	r2, [pc, #332]	@ (80023e0 <HAL_ADC_IRQHandler+0x270>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d002      	beq.n	800229c <HAL_ADC_IRQHandler+0x12c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	e003      	b.n	80022a4 <HAL_ADC_IRQHandler+0x134>
 800229c:	4b51      	ldr	r3, [pc, #324]	@ (80023e4 <HAL_ADC_IRQHandler+0x274>)
 800229e:	e001      	b.n	80022a4 <HAL_ADC_IRQHandler+0x134>
 80022a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022a4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d135      	bne.n	8002322 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d12e      	bne.n	8002322 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fc9a 	bl	8001c02 <LL_ADC_REG_IsConversionOngoing>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d11a      	bne.n	800230a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 020c 	bic.w	r2, r2, #12
 80022e2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d112      	bne.n	8002322 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002308:	e00b      	b.n	8002322 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230e:	f043 0210 	orr.w	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f984 	bl	8002630 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	220c      	movs	r2, #12
 800232e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <HAL_ADC_IRQHandler+0x1d4>
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 80b3 	beq.w	80024b6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80ad 	beq.w	80024b6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fb3a 	bl	80019f2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800237e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff faf5 	bl	8001974 <LL_ADC_REG_IsTriggerSourceSWStart>
 800238a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a10      	ldr	r2, [pc, #64]	@ (80023d4 <HAL_ADC_IRQHandler+0x264>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d009      	beq.n	80023aa <HAL_ADC_IRQHandler+0x23a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a11      	ldr	r2, [pc, #68]	@ (80023e0 <HAL_ADC_IRQHandler+0x270>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d002      	beq.n	80023a6 <HAL_ADC_IRQHandler+0x236>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	e003      	b.n	80023ae <HAL_ADC_IRQHandler+0x23e>
 80023a6:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <HAL_ADC_IRQHandler+0x274>)
 80023a8:	e001      	b.n	80023ae <HAL_ADC_IRQHandler+0x23e>
 80023aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d008      	beq.n	80023c8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d002      	beq.n	80023c8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b07      	cmp	r3, #7
 80023c6:	d10f      	bne.n	80023e8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	e01f      	b.n	8002412 <HAL_ADC_IRQHandler+0x2a2>
 80023d2:	bf00      	nop
 80023d4:	50000100 	.word	0x50000100
 80023d8:	50000300 	.word	0x50000300
 80023dc:	50000700 	.word	0x50000700
 80023e0:	50000500 	.word	0x50000500
 80023e4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a8b      	ldr	r2, [pc, #556]	@ (800261c <HAL_ADC_IRQHandler+0x4ac>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d009      	beq.n	8002406 <HAL_ADC_IRQHandler+0x296>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a8a      	ldr	r2, [pc, #552]	@ (8002620 <HAL_ADC_IRQHandler+0x4b0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d002      	beq.n	8002402 <HAL_ADC_IRQHandler+0x292>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	e003      	b.n	800240a <HAL_ADC_IRQHandler+0x29a>
 8002402:	4b88      	ldr	r3, [pc, #544]	@ (8002624 <HAL_ADC_IRQHandler+0x4b4>)
 8002404:	e001      	b.n	800240a <HAL_ADC_IRQHandler+0x29a>
 8002406:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800240a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d047      	beq.n	80024a8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <HAL_ADC_IRQHandler+0x2c2>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d03f      	beq.n	80024a8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800242e:	2b00      	cmp	r3, #0
 8002430:	d13a      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243c:	2b40      	cmp	r3, #64	@ 0x40
 800243e:	d133      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d12e      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fbea 	bl	8001c28 <LL_ADC_INJ_IsConversionOngoing>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d11a      	bne.n	8002490 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002468:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d112      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800248e:	e00b      	b.n	80024a8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002494:	f043 0210 	orr.w	r2, r3, #16
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fe79 	bl	80031a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2260      	movs	r2, #96	@ 0x60
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d011      	beq.n	80024e4 <HAL_ADC_IRQHandler+0x374>
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00c      	beq.n	80024e4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8be 	bl	8002658 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2280      	movs	r2, #128	@ 0x80
 80024e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d012      	beq.n	8002514 <HAL_ADC_IRQHandler+0x3a4>
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00d      	beq.n	8002514 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fe5f 	bl	80031c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002512:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800251a:	2b00      	cmp	r3, #0
 800251c:	d012      	beq.n	8002544 <HAL_ADC_IRQHandler+0x3d4>
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00d      	beq.n	8002544 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fe51 	bl	80031dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002542:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	d043      	beq.n	80025d6 <HAL_ADC_IRQHandler+0x466>
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d03e      	beq.n	80025d6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002560:	2301      	movs	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
 8002564:	e021      	b.n	80025aa <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d015      	beq.n	8002598 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002574:	d004      	beq.n	8002580 <HAL_ADC_IRQHandler+0x410>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a28      	ldr	r2, [pc, #160]	@ (800261c <HAL_ADC_IRQHandler+0x4ac>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_ADC_IRQHandler+0x414>
 8002580:	4b29      	ldr	r3, [pc, #164]	@ (8002628 <HAL_ADC_IRQHandler+0x4b8>)
 8002582:	e000      	b.n	8002586 <HAL_ADC_IRQHandler+0x416>
 8002584:	4b29      	ldr	r3, [pc, #164]	@ (800262c <HAL_ADC_IRQHandler+0x4bc>)
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff faa4 	bl	8001ad4 <LL_ADC_GetMultiDMATransfer>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002592:	2301      	movs	r3, #1
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
 8002596:	e008      	b.n	80025aa <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80025a6:	2301      	movs	r3, #1
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d10e      	bne.n	80025ce <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c0:	f043 0202 	orr.w	r2, r3, #2
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f84f 	bl	800266c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2210      	movs	r2, #16
 80025d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d018      	beq.n	8002612 <HAL_ADC_IRQHandler+0x4a2>
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d013      	beq.n	8002612 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fa:	f043 0208 	orr.w	r2, r3, #8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800260a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fdd1 	bl	80031b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002612:	bf00      	nop
 8002614:	3728      	adds	r7, #40	@ 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	50000100 	.word	0x50000100
 8002620:	50000500 	.word	0x50000500
 8002624:	50000400 	.word	0x50000400
 8002628:	50000300 	.word	0x50000300
 800262c:	50000700 	.word	0x50000700

08002630 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b0b6      	sub	sp, #216	@ 0xd8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x24>
 800269e:	2302      	movs	r3, #2
 80026a0:	f000 bc13 	b.w	8002eca <HAL_ADC_ConfigChannel+0x84a>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff faa6 	bl	8001c02 <LL_ADC_REG_IsConversionOngoing>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f040 83f3 	bne.w	8002ea4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f7ff f965 	bl	800199a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fa94 	bl	8001c02 <LL_ADC_REG_IsConversionOngoing>
 80026da:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff faa0 	bl	8001c28 <LL_ADC_INJ_IsConversionOngoing>
 80026e8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f040 81d9 	bne.w	8002aa8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 81d4 	bne.w	8002aa8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002708:	d10f      	bne.n	800272a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	4619      	mov	r1, r3
 8002716:	f7ff f97f 	bl	8001a18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f913 	bl	800194e <LL_ADC_SetSamplingTimeCommonConfig>
 8002728:	e00e      	b.n	8002748 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	461a      	mov	r2, r3
 8002738:	f7ff f96e 	bl	8001a18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f903 	bl	800194e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	08db      	lsrs	r3, r3, #3
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d022      	beq.n	80027b0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6919      	ldr	r1, [r3, #16]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800277a:	f7ff f85d 	bl	8001838 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6919      	ldr	r1, [r3, #16]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	461a      	mov	r2, r3
 800278c:	f7ff f8a9 	bl	80018e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x126>
 80027a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027a4:	e000      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x128>
 80027a6:	2300      	movs	r3, #0
 80027a8:	461a      	mov	r2, r3
 80027aa:	f7ff f8b5 	bl	8001918 <LL_ADC_SetOffsetSaturation>
 80027ae:	e17b      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f862 	bl	8001880 <LL_ADC_GetOffsetChannel>
 80027bc:	4603      	mov	r3, r0
 80027be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10a      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x15c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff f857 	bl	8001880 <LL_ADC_GetOffsetChannel>
 80027d2:	4603      	mov	r3, r0
 80027d4:	0e9b      	lsrs	r3, r3, #26
 80027d6:	f003 021f 	and.w	r2, r3, #31
 80027da:	e01e      	b.n	800281a <HAL_ADC_ConfigChannel+0x19a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff f84c 	bl	8001880 <LL_ADC_GetOffsetChannel>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e004      	b.n	8002818 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800280e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x1b2>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0e9b      	lsrs	r3, r3, #26
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	e018      	b.n	8002864 <HAL_ADC_ConfigChannel+0x1e4>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800284a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800284e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002856:	2320      	movs	r3, #32
 8002858:	e004      	b.n	8002864 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800285a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002864:	429a      	cmp	r2, r3
 8002866:	d106      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2200      	movs	r2, #0
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff f81b 	bl	80018ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe ffff 	bl	8001880 <LL_ADC_GetOffsetChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x222>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fff4 	bl	8001880 <LL_ADC_GetOffsetChannel>
 8002898:	4603      	mov	r3, r0
 800289a:	0e9b      	lsrs	r3, r3, #26
 800289c:	f003 021f 	and.w	r2, r3, #31
 80028a0:	e01e      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x260>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2101      	movs	r1, #1
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe ffe9 	bl	8001880 <LL_ADC_GetOffsetChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80028c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80028c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80028d0:	2320      	movs	r3, #32
 80028d2:	e004      	b.n	80028de <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80028d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x278>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	e018      	b.n	800292a <HAL_ADC_ConfigChannel+0x2aa>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800290c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002910:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002914:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e004      	b.n	800292a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800292a:	429a      	cmp	r2, r3
 800292c:	d106      	bne.n	800293c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	2101      	movs	r1, #1
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe ffb8 	bl	80018ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2102      	movs	r1, #2
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe ff9c 	bl	8001880 <LL_ADC_GetOffsetChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10a      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x2e8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2102      	movs	r1, #2
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe ff91 	bl	8001880 <LL_ADC_GetOffsetChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	f003 021f 	and.w	r2, r3, #31
 8002966:	e01e      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x326>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2102      	movs	r1, #2
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe ff86 	bl	8001880 <LL_ADC_GetOffsetChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002986:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800298a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800298e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002996:	2320      	movs	r3, #32
 8002998:	e004      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800299a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <HAL_ADC_ConfigChannel+0x33e>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	e016      	b.n	80029ec <HAL_ADC_ConfigChannel+0x36c>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80029d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80029d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80029de:	2320      	movs	r3, #32
 80029e0:	e004      	b.n	80029ec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80029e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d106      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2200      	movs	r2, #0
 80029f6:	2102      	movs	r1, #2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe ff57 	bl	80018ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2103      	movs	r1, #3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe ff3b 	bl	8001880 <LL_ADC_GetOffsetChannel>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x3aa>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2103      	movs	r1, #3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe ff30 	bl	8001880 <LL_ADC_GetOffsetChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	0e9b      	lsrs	r3, r3, #26
 8002a24:	f003 021f 	and.w	r2, r3, #31
 8002a28:	e017      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x3da>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2103      	movs	r1, #3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe ff25 	bl	8001880 <LL_ADC_GetOffsetChannel>
 8002a36:	4603      	mov	r3, r0
 8002a38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a44:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e003      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d105      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x3f2>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	0e9b      	lsrs	r3, r3, #26
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	e011      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x416>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a82:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	e003      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d106      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2103      	movs	r1, #3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe ff02 	bl	80018ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff f881 	bl	8001bb4 <LL_ADC_IsEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 813d 	bne.w	8002d34 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f7fe ffd2 	bl	8001a70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4aa2      	ldr	r2, [pc, #648]	@ (8002d5c <HAL_ADC_ConfigChannel+0x6dc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	f040 812e 	bne.w	8002d34 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x480>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	3301      	adds	r3, #1
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2b09      	cmp	r3, #9
 8002af6:	bf94      	ite	ls
 8002af8:	2301      	movls	r3, #1
 8002afa:	2300      	movhi	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e019      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x4b4>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002b0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b10:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002b12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	e003      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002b1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	2b09      	cmp	r3, #9
 8002b2c:	bf94      	ite	ls
 8002b2e:	2301      	movls	r3, #1
 8002b30:	2300      	movhi	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d079      	beq.n	8002c2c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d107      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x4d4>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0e9b      	lsrs	r3, r3, #26
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	069b      	lsls	r3, r3, #26
 8002b4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b52:	e015      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x500>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b64:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e003      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	069b      	lsls	r3, r3, #26
 8002b7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x520>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0e9b      	lsrs	r3, r3, #26
 8002b92:	3301      	adds	r3, #1
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	2101      	movs	r1, #1
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	e017      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x550>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002bb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002bb8:	2320      	movs	r3, #32
 8002bba:	e003      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	2101      	movs	r1, #1
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	ea42 0103 	orr.w	r1, r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x576>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	3301      	adds	r3, #1
 8002be8:	f003 021f 	and.w	r2, r3, #31
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	051b      	lsls	r3, r3, #20
 8002bf4:	e018      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x5a8>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e003      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	e07e      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d107      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x5c8>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	0e9b      	lsrs	r3, r3, #26
 8002c3e:	3301      	adds	r3, #1
 8002c40:	069b      	lsls	r3, r3, #26
 8002c42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c46:	e015      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x5f4>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c58:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e003      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	069b      	lsls	r3, r3, #26
 8002c70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d109      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x614>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	0e9b      	lsrs	r3, r3, #26
 8002c86:	3301      	adds	r3, #1
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	e017      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x644>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	61fb      	str	r3, [r7, #28]
  return result;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002cac:	2320      	movs	r3, #32
 8002cae:	e003      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	ea42 0103 	orr.w	r1, r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10d      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x670>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0e9b      	lsrs	r3, r3, #26
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3b1e      	subs	r3, #30
 8002ce8:	051b      	lsls	r3, r3, #20
 8002cea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	e01b      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x6a8>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	613b      	str	r3, [r7, #16]
  return result;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e003      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	f003 021f 	and.w	r2, r3, #31
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	3b1e      	subs	r3, #30
 8002d22:	051b      	lsls	r3, r3, #20
 8002d24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d28:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f7fe fe72 	bl	8001a18 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b09      	ldr	r3, [pc, #36]	@ (8002d60 <HAL_ADC_ConfigChannel+0x6e0>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80be 	beq.w	8002ebe <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d4a:	d004      	beq.n	8002d56 <HAL_ADC_ConfigChannel+0x6d6>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <HAL_ADC_ConfigChannel+0x6e4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10a      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x6ec>
 8002d56:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <HAL_ADC_ConfigChannel+0x6e8>)
 8002d58:	e009      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x6ee>
 8002d5a:	bf00      	nop
 8002d5c:	407f0000 	.word	0x407f0000
 8002d60:	80080000 	.word	0x80080000
 8002d64:	50000100 	.word	0x50000100
 8002d68:	50000300 	.word	0x50000300
 8002d6c:	4b59      	ldr	r3, [pc, #356]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x854>)
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe fd54 	bl	800181c <LL_ADC_GetCommonPathInternalCh>
 8002d74:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a56      	ldr	r2, [pc, #344]	@ (8002ed8 <HAL_ADC_ConfigChannel+0x858>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <HAL_ADC_ConfigChannel+0x70c>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a55      	ldr	r2, [pc, #340]	@ (8002edc <HAL_ADC_ConfigChannel+0x85c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d13a      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d134      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002da0:	d005      	beq.n	8002dae <HAL_ADC_ConfigChannel+0x72e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x860>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	f040 8085 	bne.w	8002eb8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002db6:	d004      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x742>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a49      	ldr	r2, [pc, #292]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x864>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x746>
 8002dc2:	4a49      	ldr	r2, [pc, #292]	@ (8002ee8 <HAL_ADC_ConfigChannel+0x868>)
 8002dc4:	e000      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x748>
 8002dc6:	4a43      	ldr	r2, [pc, #268]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x854>)
 8002dc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f7fe fd0f 	bl	80017f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dd8:	4b44      	ldr	r3, [pc, #272]	@ (8002eec <HAL_ADC_ConfigChannel+0x86c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	4a44      	ldr	r2, [pc, #272]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x870>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002df2:	e002      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f9      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e00:	e05a      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x874>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d125      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d11f      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a31      	ldr	r2, [pc, #196]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x864>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d104      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x7ac>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a34      	ldr	r2, [pc, #208]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x878>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d047      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e34:	d004      	beq.n	8002e40 <HAL_ADC_ConfigChannel+0x7c0>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x864>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x7c4>
 8002e40:	4a29      	ldr	r2, [pc, #164]	@ (8002ee8 <HAL_ADC_ConfigChannel+0x868>)
 8002e42:	e000      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x7c6>
 8002e44:	4a23      	ldr	r2, [pc, #140]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x854>)
 8002e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f7fe fcd0 	bl	80017f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e56:	e031      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a27      	ldr	r2, [pc, #156]	@ (8002efc <HAL_ADC_ConfigChannel+0x87c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d12d      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d127      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x864>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d022      	beq.n	8002ebe <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e80:	d004      	beq.n	8002e8c <HAL_ADC_ConfigChannel+0x80c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a17      	ldr	r2, [pc, #92]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x864>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x810>
 8002e8c:	4a16      	ldr	r2, [pc, #88]	@ (8002ee8 <HAL_ADC_ConfigChannel+0x868>)
 8002e8e:	e000      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x812>
 8002e90:	4a10      	ldr	r2, [pc, #64]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x854>)
 8002e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	f7fe fcaa 	bl	80017f6 <LL_ADC_SetCommonPathInternalCh>
 8002ea2:	e00c      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002eb6:	e002      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ebc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ec6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	37d8      	adds	r7, #216	@ 0xd8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	50000700 	.word	0x50000700
 8002ed8:	c3210000 	.word	0xc3210000
 8002edc:	90c00010 	.word	0x90c00010
 8002ee0:	50000600 	.word	0x50000600
 8002ee4:	50000100 	.word	0x50000100
 8002ee8:	50000300 	.word	0x50000300
 8002eec:	20000008 	.word	0x20000008
 8002ef0:	053e2d63 	.word	0x053e2d63
 8002ef4:	c7520000 	.word	0xc7520000
 8002ef8:	50000500 	.word	0x50000500
 8002efc:	cb840000 	.word	0xcb840000

08002f00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe fe4f 	bl	8001bb4 <LL_ADC_IsEnabled>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d176      	bne.n	800300a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	4b3c      	ldr	r3, [pc, #240]	@ (8003014 <ADC_Enable+0x114>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e062      	b.n	800300c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fe1e 	bl	8001b8c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f58:	d004      	beq.n	8002f64 <ADC_Enable+0x64>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8003018 <ADC_Enable+0x118>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <ADC_Enable+0x68>
 8002f64:	4b2d      	ldr	r3, [pc, #180]	@ (800301c <ADC_Enable+0x11c>)
 8002f66:	e000      	b.n	8002f6a <ADC_Enable+0x6a>
 8002f68:	4b2d      	ldr	r3, [pc, #180]	@ (8003020 <ADC_Enable+0x120>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fc56 	bl	800181c <LL_ADC_GetCommonPathInternalCh>
 8002f70:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d013      	beq.n	8002fa2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <ADC_Enable+0x124>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	4a29      	ldr	r2, [pc, #164]	@ (8003028 <ADC_Enable+0x128>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f94:	e002      	b.n	8002f9c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f9      	bne.n	8002f96 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fa2:	f7fe fc09 	bl	80017b8 <HAL_GetTick>
 8002fa6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fa8:	e028      	b.n	8002ffc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fe00 	bl	8001bb4 <LL_ADC_IsEnabled>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d104      	bne.n	8002fc4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe fde4 	bl	8001b8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fc4:	f7fe fbf8 	bl	80017b8 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d914      	bls.n	8002ffc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d00d      	beq.n	8002ffc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe4:	f043 0210 	orr.w	r2, r3, #16
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff0:	f043 0201 	orr.w	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e007      	b.n	800300c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b01      	cmp	r3, #1
 8003008:	d1cf      	bne.n	8002faa <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	8000003f 	.word	0x8000003f
 8003018:	50000100 	.word	0x50000100
 800301c:	50000300 	.word	0x50000300
 8003020:	50000700 	.word	0x50000700
 8003024:	20000008 	.word	0x20000008
 8003028:	053e2d63 	.word	0x053e2d63

0800302c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003042:	2b00      	cmp	r3, #0
 8003044:	d14b      	bne.n	80030de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d021      	beq.n	80030a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fc85 	bl	8001974 <LL_ADC_REG_IsTriggerSourceSWStart>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d032      	beq.n	80030d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d12b      	bne.n	80030d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003082:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d11f      	bne.n	80030d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030a2:	e018      	b.n	80030d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d111      	bne.n	80030d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ce:	f043 0201 	orr.w	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f7ff faaa 	bl	8002630 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030dc:	e00e      	b.n	80030fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7ff fabe 	bl	800266c <HAL_ADC_ErrorCallback>
}
 80030f0:	e004      	b.n	80030fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
}
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7ff fa96 	bl	8002644 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003132:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff fa90 	bl	800266c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <LL_ADC_IsEnabled>:
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <LL_ADC_IsEnabled+0x18>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <LL_ADC_IsEnabled+0x1a>
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <LL_ADC_REG_IsConversionOngoing>:
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d101      	bne.n	8003192 <LL_ADC_REG_IsConversionOngoing+0x18>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003204:	b590      	push	{r4, r7, lr}
 8003206:	b0a1      	sub	sp, #132	@ 0x84
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800321e:	2302      	movs	r3, #2
 8003220:	e0e7      	b.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800322a:	2300      	movs	r3, #0
 800322c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800322e:	2300      	movs	r3, #0
 8003230:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800323a:	d102      	bne.n	8003242 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800323c:	4b6f      	ldr	r3, [pc, #444]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	e009      	b.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6e      	ldr	r2, [pc, #440]	@ (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d102      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800324c:	4b6d      	ldr	r3, [pc, #436]	@ (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	e001      	b.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10b      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0be      	b.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ff7f 	bl	800317a <LL_ADC_REG_IsConversionOngoing>
 800327c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ff79 	bl	800317a <LL_ADC_REG_IsConversionOngoing>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 80a0 	bne.w	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 809c 	bne.w	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032a0:	d004      	beq.n	80032ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a55      	ldr	r2, [pc, #340]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d101      	bne.n	80032b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032ac:	4b56      	ldr	r3, [pc, #344]	@ (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80032ae:	e000      	b.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032b0:	4b56      	ldr	r3, [pc, #344]	@ (800340c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80032b2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d04b      	beq.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032ce:	035b      	lsls	r3, r3, #13
 80032d0:	430b      	orrs	r3, r1
 80032d2:	431a      	orrs	r2, r3
 80032d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032e0:	d004      	beq.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a45      	ldr	r2, [pc, #276]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10f      	bne.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80032ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80032f0:	f7ff ff30 	bl	8003154 <LL_ADC_IsEnabled>
 80032f4:	4604      	mov	r4, r0
 80032f6:	4841      	ldr	r0, [pc, #260]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032f8:	f7ff ff2c 	bl	8003154 <LL_ADC_IsEnabled>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4323      	orrs	r3, r4
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e012      	b.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800330c:	483c      	ldr	r0, [pc, #240]	@ (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800330e:	f7ff ff21 	bl	8003154 <LL_ADC_IsEnabled>
 8003312:	4604      	mov	r4, r0
 8003314:	483b      	ldr	r0, [pc, #236]	@ (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003316:	f7ff ff1d 	bl	8003154 <LL_ADC_IsEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	431c      	orrs	r4, r3
 800331e:	483c      	ldr	r0, [pc, #240]	@ (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003320:	f7ff ff18 	bl	8003154 <LL_ADC_IsEnabled>
 8003324:	4603      	mov	r3, r0
 8003326:	4323      	orrs	r3, r4
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d056      	beq.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800333e:	f023 030f 	bic.w	r3, r3, #15
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	6811      	ldr	r1, [r2, #0]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	6892      	ldr	r2, [r2, #8]
 800334a:	430a      	orrs	r2, r1
 800334c:	431a      	orrs	r2, r3
 800334e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003350:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003352:	e047      	b.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800335c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800335e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003368:	d004      	beq.n	8003374 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a23      	ldr	r2, [pc, #140]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d10f      	bne.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003374:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003378:	f7ff feec 	bl	8003154 <LL_ADC_IsEnabled>
 800337c:	4604      	mov	r4, r0
 800337e:	481f      	ldr	r0, [pc, #124]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003380:	f7ff fee8 	bl	8003154 <LL_ADC_IsEnabled>
 8003384:	4603      	mov	r3, r0
 8003386:	4323      	orrs	r3, r4
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e012      	b.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003394:	481a      	ldr	r0, [pc, #104]	@ (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003396:	f7ff fedd 	bl	8003154 <LL_ADC_IsEnabled>
 800339a:	4604      	mov	r4, r0
 800339c:	4819      	ldr	r0, [pc, #100]	@ (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800339e:	f7ff fed9 	bl	8003154 <LL_ADC_IsEnabled>
 80033a2:	4603      	mov	r3, r0
 80033a4:	431c      	orrs	r4, r3
 80033a6:	481a      	ldr	r0, [pc, #104]	@ (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033a8:	f7ff fed4 	bl	8003154 <LL_ADC_IsEnabled>
 80033ac:	4603      	mov	r3, r0
 80033ae:	4323      	orrs	r3, r4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d012      	beq.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033c6:	f023 030f 	bic.w	r3, r3, #15
 80033ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80033cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033ce:	e009      	b.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80033e2:	e000      	b.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80033ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3784      	adds	r7, #132	@ 0x84
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd90      	pop	{r4, r7, pc}
 80033fa:	bf00      	nop
 80033fc:	50000100 	.word	0x50000100
 8003400:	50000400 	.word	0x50000400
 8003404:	50000500 	.word	0x50000500
 8003408:	50000300 	.word	0x50000300
 800340c:	50000700 	.word	0x50000700
 8003410:	50000600 	.word	0x50000600

08003414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003424:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <__NVIC_SetPriorityGrouping+0x44>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003430:	4013      	ands	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800343c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003446:	4a04      	ldr	r2, [pc, #16]	@ (8003458 <__NVIC_SetPriorityGrouping+0x44>)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	60d3      	str	r3, [r2, #12]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003460:	4b04      	ldr	r3, [pc, #16]	@ (8003474 <__NVIC_GetPriorityGrouping+0x18>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	f003 0307 	and.w	r3, r3, #7
}
 800346a:	4618      	mov	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	2b00      	cmp	r3, #0
 8003488:	db0b      	blt.n	80034a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	f003 021f 	and.w	r2, r3, #31
 8003490:	4907      	ldr	r1, [pc, #28]	@ (80034b0 <__NVIC_EnableIRQ+0x38>)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2001      	movs	r0, #1
 800349a:	fa00 f202 	lsl.w	r2, r0, r2
 800349e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000e100 	.word	0xe000e100

080034b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	6039      	str	r1, [r7, #0]
 80034be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	db0a      	blt.n	80034de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	490c      	ldr	r1, [pc, #48]	@ (8003500 <__NVIC_SetPriority+0x4c>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	0112      	lsls	r2, r2, #4
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	440b      	add	r3, r1
 80034d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034dc:	e00a      	b.n	80034f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4908      	ldr	r1, [pc, #32]	@ (8003504 <__NVIC_SetPriority+0x50>)
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	3b04      	subs	r3, #4
 80034ec:	0112      	lsls	r2, r2, #4
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	440b      	add	r3, r1
 80034f2:	761a      	strb	r2, [r3, #24]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000e100 	.word	0xe000e100
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	@ 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f1c3 0307 	rsb	r3, r3, #7
 8003522:	2b04      	cmp	r3, #4
 8003524:	bf28      	it	cs
 8003526:	2304      	movcs	r3, #4
 8003528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3304      	adds	r3, #4
 800352e:	2b06      	cmp	r3, #6
 8003530:	d902      	bls.n	8003538 <NVIC_EncodePriority+0x30>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3b03      	subs	r3, #3
 8003536:	e000      	b.n	800353a <NVIC_EncodePriority+0x32>
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	f04f 32ff 	mov.w	r2, #4294967295
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	401a      	ands	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003550:	f04f 31ff 	mov.w	r1, #4294967295
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	43d9      	mvns	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	4313      	orrs	r3, r2
         );
}
 8003562:	4618      	mov	r0, r3
 8003564:	3724      	adds	r7, #36	@ 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003580:	d301      	bcc.n	8003586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003582:	2301      	movs	r3, #1
 8003584:	e00f      	b.n	80035a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003586:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <SysTick_Config+0x40>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358e:	210f      	movs	r1, #15
 8003590:	f04f 30ff 	mov.w	r0, #4294967295
 8003594:	f7ff ff8e 	bl	80034b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <SysTick_Config+0x40>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359e:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <SysTick_Config+0x40>)
 80035a0:	2207      	movs	r2, #7
 80035a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	e000e010 	.word	0xe000e010

080035b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ff29 	bl	8003414 <__NVIC_SetPriorityGrouping>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035d8:	f7ff ff40 	bl	800345c <__NVIC_GetPriorityGrouping>
 80035dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	6978      	ldr	r0, [r7, #20]
 80035e4:	f7ff ff90 	bl	8003508 <NVIC_EncodePriority>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff5f 	bl	80034b4 <__NVIC_SetPriority>
}
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff33 	bl	8003478 <__NVIC_EnableIRQ>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ffa4 	bl	8003570 <SysTick_Config>
 8003628:	4603      	mov	r3, r0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e08d      	b.n	8003762 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	4b47      	ldr	r3, [pc, #284]	@ (800376c <HAL_DMA_Init+0x138>)
 800364e:	429a      	cmp	r2, r3
 8003650:	d80f      	bhi.n	8003672 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	4b45      	ldr	r3, [pc, #276]	@ (8003770 <HAL_DMA_Init+0x13c>)
 800365a:	4413      	add	r3, r2
 800365c:	4a45      	ldr	r2, [pc, #276]	@ (8003774 <HAL_DMA_Init+0x140>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	009a      	lsls	r2, r3, #2
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a42      	ldr	r2, [pc, #264]	@ (8003778 <HAL_DMA_Init+0x144>)
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003670:	e00e      	b.n	8003690 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	4b40      	ldr	r3, [pc, #256]	@ (800377c <HAL_DMA_Init+0x148>)
 800367a:	4413      	add	r3, r2
 800367c:	4a3d      	ldr	r2, [pc, #244]	@ (8003774 <HAL_DMA_Init+0x140>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	009a      	lsls	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a3c      	ldr	r2, [pc, #240]	@ (8003780 <HAL_DMA_Init+0x14c>)
 800368e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80036a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fa76 	bl	8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036f0:	d102      	bne.n	80036f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800370c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d010      	beq.n	8003738 <HAL_DMA_Init+0x104>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b04      	cmp	r3, #4
 800371c:	d80c      	bhi.n	8003738 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fa96 	bl	8003c50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	e008      	b.n	800374a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40020407 	.word	0x40020407
 8003770:	bffdfff8 	.word	0xbffdfff8
 8003774:	cccccccd 	.word	0xcccccccd
 8003778:	40020000 	.word	0x40020000
 800377c:	bffdfbf8 	.word	0xbffdfbf8
 8003780:	40020400 	.word	0x40020400

08003784 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_DMA_Start_IT+0x20>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e066      	b.n	8003872 <HAL_DMA_Start_IT+0xee>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d155      	bne.n	8003864 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f9bb 	bl	8003b58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 020e 	orr.w	r2, r2, #14
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e00f      	b.n	800381c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0204 	bic.w	r2, r2, #4
 800380a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 020a 	orr.w	r2, r2, #10
 800381a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003834:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003838:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003850:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e005      	b.n	8003870 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800386c:	2302      	movs	r3, #2
 800386e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003870:	7dfb      	ldrb	r3, [r7, #23]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d005      	beq.n	800389e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2204      	movs	r2, #4
 8003896:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
 800389c:	e037      	b.n	800390e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 020e 	bic.w	r2, r2, #14
 80038ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	f003 021f 	and.w	r2, r3, #31
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	2101      	movs	r1, #1
 80038dc:	fa01 f202 	lsl.w	r2, r1, r2
 80038e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00c      	beq.n	800390e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003902:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800390c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d00d      	beq.n	8003960 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2204      	movs	r2, #4
 8003948:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e047      	b.n	80039f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 020e 	bic.w	r2, r2, #14
 800396e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800398e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003994:	f003 021f 	and.w	r2, r3, #31
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	2101      	movs	r1, #1
 800399e:	fa01 f202 	lsl.w	r2, r1, r2
 80039a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00c      	beq.n	80039d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
    }
  }
  return status;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d026      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x7a>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d021      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d107      	bne.n	8003a4e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0204 	bic.w	r2, r2, #4
 8003a4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a52:	f003 021f 	and.w	r2, r3, #31
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d071      	beq.n	8003b4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a72:	e06c      	b.n	8003b4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d02e      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d029      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 020a 	bic.w	r2, r2, #10
 8003aae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abc:	f003 021f 	and.w	r2, r3, #31
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d038      	beq.n	8003b4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ae4:	e033      	b.n	8003b4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	2208      	movs	r2, #8
 8003af0:	409a      	lsls	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d02a      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d025      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 020e 	bic.w	r2, r2, #14
 8003b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b18:	f003 021f 	and.w	r2, r3, #31
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	2101      	movs	r1, #1
 8003b22:	fa01 f202 	lsl.w	r2, r1, r2
 8003b26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b4e:	bf00      	nop
 8003b50:	bf00      	nop
}
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b80:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b86:	f003 021f 	and.w	r2, r3, #31
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f202 	lsl.w	r2, r1, r2
 8003b94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d108      	bne.n	8003bb8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bb6:	e007      	b.n	8003bc8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	60da      	str	r2, [r3, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b16      	ldr	r3, [pc, #88]	@ (8003c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d802      	bhi.n	8003bee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003be8:	4b15      	ldr	r3, [pc, #84]	@ (8003c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e001      	b.n	8003bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003bee:	4b15      	ldr	r3, [pc, #84]	@ (8003c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bf0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	3b08      	subs	r3, #8
 8003bfe:	4a12      	ldr	r2, [pc, #72]	@ (8003c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	2201      	movs	r2, #1
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40020407 	.word	0x40020407
 8003c40:	40020800 	.word	0x40020800
 8003c44:	40020820 	.word	0x40020820
 8003c48:	cccccccd 	.word	0xcccccccd
 8003c4c:	40020880 	.word	0x40020880

08003c50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a08      	ldr	r2, [pc, #32]	@ (8003c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c72:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	1000823f 	.word	0x1000823f
 8003c94:	40020940 	.word	0x40020940

08003c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ca6:	e15a      	b.n	8003f5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	2101      	movs	r1, #1
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 814c 	beq.w	8003f58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d005      	beq.n	8003cd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d130      	bne.n	8003d3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4013      	ands	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d0e:	2201      	movs	r2, #1
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	f003 0201 	and.w	r2, r3, #1
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d017      	beq.n	8003d76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	2203      	movs	r2, #3
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d123      	bne.n	8003dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	08da      	lsrs	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3208      	adds	r2, #8
 8003d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	220f      	movs	r2, #15
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4013      	ands	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	08da      	lsrs	r2, r3, #3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3208      	adds	r2, #8
 8003dc4:	6939      	ldr	r1, [r7, #16]
 8003dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0203 	and.w	r2, r3, #3
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80a6 	beq.w	8003f58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0c:	4b5b      	ldr	r3, [pc, #364]	@ (8003f7c <HAL_GPIO_Init+0x2e4>)
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e10:	4a5a      	ldr	r2, [pc, #360]	@ (8003f7c <HAL_GPIO_Init+0x2e4>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e18:	4b58      	ldr	r3, [pc, #352]	@ (8003f7c <HAL_GPIO_Init+0x2e4>)
 8003e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e24:	4a56      	ldr	r2, [pc, #344]	@ (8003f80 <HAL_GPIO_Init+0x2e8>)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e4e:	d01f      	beq.n	8003e90 <HAL_GPIO_Init+0x1f8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a4c      	ldr	r2, [pc, #304]	@ (8003f84 <HAL_GPIO_Init+0x2ec>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d019      	beq.n	8003e8c <HAL_GPIO_Init+0x1f4>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a4b      	ldr	r2, [pc, #300]	@ (8003f88 <HAL_GPIO_Init+0x2f0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <HAL_GPIO_Init+0x1f0>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a4a      	ldr	r2, [pc, #296]	@ (8003f8c <HAL_GPIO_Init+0x2f4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00d      	beq.n	8003e84 <HAL_GPIO_Init+0x1ec>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a49      	ldr	r2, [pc, #292]	@ (8003f90 <HAL_GPIO_Init+0x2f8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d007      	beq.n	8003e80 <HAL_GPIO_Init+0x1e8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a48      	ldr	r2, [pc, #288]	@ (8003f94 <HAL_GPIO_Init+0x2fc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d101      	bne.n	8003e7c <HAL_GPIO_Init+0x1e4>
 8003e78:	2305      	movs	r3, #5
 8003e7a:	e00a      	b.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e7c:	2306      	movs	r3, #6
 8003e7e:	e008      	b.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e006      	b.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e84:	2303      	movs	r3, #3
 8003e86:	e004      	b.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e002      	b.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e90:	2300      	movs	r3, #0
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	f002 0203 	and.w	r2, r2, #3
 8003e98:	0092      	lsls	r2, r2, #2
 8003e9a:	4093      	lsls	r3, r2
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ea2:	4937      	ldr	r1, [pc, #220]	@ (8003f80 <HAL_GPIO_Init+0x2e8>)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eb0:	4b39      	ldr	r3, [pc, #228]	@ (8003f98 <HAL_GPIO_Init+0x300>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ed4:	4a30      	ldr	r2, [pc, #192]	@ (8003f98 <HAL_GPIO_Init+0x300>)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eda:	4b2f      	ldr	r3, [pc, #188]	@ (8003f98 <HAL_GPIO_Init+0x300>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003efe:	4a26      	ldr	r2, [pc, #152]	@ (8003f98 <HAL_GPIO_Init+0x300>)
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f04:	4b24      	ldr	r3, [pc, #144]	@ (8003f98 <HAL_GPIO_Init+0x300>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4013      	ands	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f28:	4a1b      	ldr	r2, [pc, #108]	@ (8003f98 <HAL_GPIO_Init+0x300>)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003f98 <HAL_GPIO_Init+0x300>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	43db      	mvns	r3, r3
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f52:	4a11      	ldr	r2, [pc, #68]	@ (8003f98 <HAL_GPIO_Init+0x300>)
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	fa22 f303 	lsr.w	r3, r2, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f47f ae9d 	bne.w	8003ca8 <HAL_GPIO_Init+0x10>
  }
}
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40010000 	.word	0x40010000
 8003f84:	48000400 	.word	0x48000400
 8003f88:	48000800 	.word	0x48000800
 8003f8c:	48000c00 	.word	0x48000c00
 8003f90:	48001000 	.word	0x48001000
 8003f94:	48001400 	.word	0x48001400
 8003f98:	40010400 	.word	0x40010400

08003f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	807b      	strh	r3, [r7, #2]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fac:	787b      	ldrb	r3, [r7, #1]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fb2:	887a      	ldrh	r2, [r7, #2]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fb8:	e002      	b.n	8003fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fd6:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d006      	beq.n	8003ff0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fe2:	4a05      	ldr	r2, [pc, #20]	@ (8003ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f806 	bl	8003ffc <HAL_GPIO_EXTI_Callback>
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40010400 	.word	0x40010400

08003ffc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d141      	bne.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004022:	4b4b      	ldr	r3, [pc, #300]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402e:	d131      	bne.n	8004094 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004030:	4b47      	ldr	r3, [pc, #284]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004036:	4a46      	ldr	r2, [pc, #280]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800403c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004040:	4b43      	ldr	r3, [pc, #268]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004048:	4a41      	ldr	r2, [pc, #260]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800404e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004050:	4b40      	ldr	r3, [pc, #256]	@ (8004154 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2232      	movs	r2, #50	@ 0x32
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	4a3f      	ldr	r2, [pc, #252]	@ (8004158 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	0c9b      	lsrs	r3, r3, #18
 8004062:	3301      	adds	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004066:	e002      	b.n	800406e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3b01      	subs	r3, #1
 800406c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800406e:	4b38      	ldr	r3, [pc, #224]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800407a:	d102      	bne.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f2      	bne.n	8004068 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004082:	4b33      	ldr	r3, [pc, #204]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800408a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800408e:	d158      	bne.n	8004142 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e057      	b.n	8004144 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004094:	4b2e      	ldr	r3, [pc, #184]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800409a:	4a2d      	ldr	r2, [pc, #180]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040a4:	e04d      	b.n	8004142 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ac:	d141      	bne.n	8004132 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ae:	4b28      	ldr	r3, [pc, #160]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ba:	d131      	bne.n	8004120 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040bc:	4b24      	ldr	r3, [pc, #144]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040c2:	4a23      	ldr	r2, [pc, #140]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040cc:	4b20      	ldr	r3, [pc, #128]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004154 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2232      	movs	r2, #50	@ 0x32
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004158 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	0c9b      	lsrs	r3, r3, #18
 80040ee:	3301      	adds	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040f2:	e002      	b.n	80040fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040fa:	4b15      	ldr	r3, [pc, #84]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004106:	d102      	bne.n	800410e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f2      	bne.n	80040f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800410e:	4b10      	ldr	r3, [pc, #64]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800411a:	d112      	bne.n	8004142 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e011      	b.n	8004144 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004120:	4b0b      	ldr	r3, [pc, #44]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004126:	4a0a      	ldr	r2, [pc, #40]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004130:	e007      	b.n	8004142 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004132:	4b07      	ldr	r3, [pc, #28]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800413a:	4a05      	ldr	r2, [pc, #20]	@ (8004150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004140:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40007000 	.word	0x40007000
 8004154:	20000008 	.word	0x20000008
 8004158:	431bde83 	.word	0x431bde83

0800415c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004160:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a04      	ldr	r2, [pc, #16]	@ (8004178 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004166:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800416a:	6093      	str	r3, [r2, #8]
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40007000 	.word	0x40007000

0800417c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e2fe      	b.n	800478c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d075      	beq.n	8004286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800419a:	4b97      	ldr	r3, [pc, #604]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a4:	4b94      	ldr	r3, [pc, #592]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	d102      	bne.n	80041ba <HAL_RCC_OscConfig+0x3e>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d002      	beq.n	80041c0 <HAL_RCC_OscConfig+0x44>
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d10b      	bne.n	80041d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c0:	4b8d      	ldr	r3, [pc, #564]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d05b      	beq.n	8004284 <HAL_RCC_OscConfig+0x108>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d157      	bne.n	8004284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e2d9      	b.n	800478c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e0:	d106      	bne.n	80041f0 <HAL_RCC_OscConfig+0x74>
 80041e2:	4b85      	ldr	r3, [pc, #532]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a84      	ldr	r2, [pc, #528]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 80041e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	e01d      	b.n	800422c <HAL_RCC_OscConfig+0xb0>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041f8:	d10c      	bne.n	8004214 <HAL_RCC_OscConfig+0x98>
 80041fa:	4b7f      	ldr	r3, [pc, #508]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a7e      	ldr	r2, [pc, #504]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	4b7c      	ldr	r3, [pc, #496]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a7b      	ldr	r2, [pc, #492]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 800420c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	e00b      	b.n	800422c <HAL_RCC_OscConfig+0xb0>
 8004214:	4b78      	ldr	r3, [pc, #480]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a77      	ldr	r2, [pc, #476]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 800421a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	4b75      	ldr	r3, [pc, #468]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a74      	ldr	r2, [pc, #464]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800422a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d013      	beq.n	800425c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fd fac0 	bl	80017b8 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800423c:	f7fd fabc 	bl	80017b8 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b64      	cmp	r3, #100	@ 0x64
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e29e      	b.n	800478c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800424e:	4b6a      	ldr	r3, [pc, #424]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0xc0>
 800425a:	e014      	b.n	8004286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fd faac 	bl	80017b8 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004264:	f7fd faa8 	bl	80017b8 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b64      	cmp	r3, #100	@ 0x64
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e28a      	b.n	800478c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004276:	4b60      	ldr	r3, [pc, #384]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0xe8>
 8004282:	e000      	b.n	8004286 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d075      	beq.n	800437e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004292:	4b59      	ldr	r3, [pc, #356]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800429c:	4b56      	ldr	r3, [pc, #344]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b0c      	cmp	r3, #12
 80042aa:	d102      	bne.n	80042b2 <HAL_RCC_OscConfig+0x136>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d002      	beq.n	80042b8 <HAL_RCC_OscConfig+0x13c>
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d11f      	bne.n	80042f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b8:	4b4f      	ldr	r3, [pc, #316]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_RCC_OscConfig+0x154>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e25d      	b.n	800478c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d0:	4b49      	ldr	r3, [pc, #292]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	4946      	ldr	r1, [pc, #280]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042e4:	4b45      	ldr	r3, [pc, #276]	@ (80043fc <HAL_RCC_OscConfig+0x280>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fd fa19 	bl	8001720 <HAL_InitTick>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d043      	beq.n	800437c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e249      	b.n	800478c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d023      	beq.n	8004348 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004300:	4b3d      	ldr	r3, [pc, #244]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a3c      	ldr	r2, [pc, #240]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800430a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fd fa54 	bl	80017b8 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004314:	f7fd fa50 	bl	80017b8 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e232      	b.n	800478c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004326:	4b34      	ldr	r3, [pc, #208]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004332:	4b31      	ldr	r3, [pc, #196]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	061b      	lsls	r3, r3, #24
 8004340:	492d      	ldr	r1, [pc, #180]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004342:	4313      	orrs	r3, r2
 8004344:	604b      	str	r3, [r1, #4]
 8004346:	e01a      	b.n	800437e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004348:	4b2b      	ldr	r3, [pc, #172]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2a      	ldr	r2, [pc, #168]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 800434e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fd fa30 	bl	80017b8 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435c:	f7fd fa2c 	bl	80017b8 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e20e      	b.n	800478c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800436e:	4b22      	ldr	r3, [pc, #136]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x1e0>
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800437c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d041      	beq.n	800440e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01c      	beq.n	80043cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004392:	4b19      	ldr	r3, [pc, #100]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 8004394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004398:	4a17      	ldr	r2, [pc, #92]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a2:	f7fd fa09 	bl	80017b8 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043aa:	f7fd fa05 	bl	80017b8 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e1e7      	b.n	800478c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043bc:	4b0e      	ldr	r3, [pc, #56]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 80043be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0ef      	beq.n	80043aa <HAL_RCC_OscConfig+0x22e>
 80043ca:	e020      	b.n	800440e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043cc:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 80043ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d2:	4a09      	ldr	r2, [pc, #36]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fd f9ec 	bl	80017b8 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043e2:	e00d      	b.n	8004400 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e4:	f7fd f9e8 	bl	80017b8 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d906      	bls.n	8004400 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e1ca      	b.n	800478c <HAL_RCC_OscConfig+0x610>
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
 80043fc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004400:	4b8c      	ldr	r3, [pc, #560]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 8004402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1ea      	bne.n	80043e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80a6 	beq.w	8004568 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800441c:	2300      	movs	r3, #0
 800441e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004420:	4b84      	ldr	r3, [pc, #528]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 8004422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_OscConfig+0x2b4>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x2b6>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	4b7f      	ldr	r3, [pc, #508]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443a:	4a7e      	ldr	r2, [pc, #504]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 800443c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004440:	6593      	str	r3, [r2, #88]	@ 0x58
 8004442:	4b7c      	ldr	r3, [pc, #496]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800444e:	2301      	movs	r3, #1
 8004450:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004452:	4b79      	ldr	r3, [pc, #484]	@ (8004638 <HAL_RCC_OscConfig+0x4bc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d118      	bne.n	8004490 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800445e:	4b76      	ldr	r3, [pc, #472]	@ (8004638 <HAL_RCC_OscConfig+0x4bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a75      	ldr	r2, [pc, #468]	@ (8004638 <HAL_RCC_OscConfig+0x4bc>)
 8004464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446a:	f7fd f9a5 	bl	80017b8 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004472:	f7fd f9a1 	bl	80017b8 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e183      	b.n	800478c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004484:	4b6c      	ldr	r3, [pc, #432]	@ (8004638 <HAL_RCC_OscConfig+0x4bc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d108      	bne.n	80044aa <HAL_RCC_OscConfig+0x32e>
 8004498:	4b66      	ldr	r3, [pc, #408]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449e:	4a65      	ldr	r2, [pc, #404]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044a8:	e024      	b.n	80044f4 <HAL_RCC_OscConfig+0x378>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d110      	bne.n	80044d4 <HAL_RCC_OscConfig+0x358>
 80044b2:	4b60      	ldr	r3, [pc, #384]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b8:	4a5e      	ldr	r2, [pc, #376]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80044ba:	f043 0304 	orr.w	r3, r3, #4
 80044be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044d2:	e00f      	b.n	80044f4 <HAL_RCC_OscConfig+0x378>
 80044d4:	4b57      	ldr	r3, [pc, #348]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044da:	4a56      	ldr	r2, [pc, #344]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044e4:	4b53      	ldr	r3, [pc, #332]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ea:	4a52      	ldr	r2, [pc, #328]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80044ec:	f023 0304 	bic.w	r3, r3, #4
 80044f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d016      	beq.n	800452a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fc:	f7fd f95c 	bl	80017b8 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004502:	e00a      	b.n	800451a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004504:	f7fd f958 	bl	80017b8 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e138      	b.n	800478c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451a:	4b46      	ldr	r3, [pc, #280]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ed      	beq.n	8004504 <HAL_RCC_OscConfig+0x388>
 8004528:	e015      	b.n	8004556 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452a:	f7fd f945 	bl	80017b8 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004530:	e00a      	b.n	8004548 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004532:	f7fd f941 	bl	80017b8 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e121      	b.n	800478c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004548:	4b3a      	ldr	r3, [pc, #232]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1ed      	bne.n	8004532 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004556:	7ffb      	ldrb	r3, [r7, #31]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d105      	bne.n	8004568 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455c:	4b35      	ldr	r3, [pc, #212]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 800455e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004560:	4a34      	ldr	r2, [pc, #208]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 8004562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004566:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d03c      	beq.n	80045ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01c      	beq.n	80045b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800457c:	4b2d      	ldr	r3, [pc, #180]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 800457e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004582:	4a2c      	ldr	r2, [pc, #176]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fd f914 	bl	80017b8 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004594:	f7fd f910 	bl	80017b8 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0f2      	b.n	800478c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045a6:	4b23      	ldr	r3, [pc, #140]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80045a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ef      	beq.n	8004594 <HAL_RCC_OscConfig+0x418>
 80045b4:	e01b      	b.n	80045ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80045b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c6:	f7fd f8f7 	bl	80017b8 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ce:	f7fd f8f3 	bl	80017b8 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e0d5      	b.n	800478c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045e0:	4b14      	ldr	r3, [pc, #80]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80045e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1ef      	bne.n	80045ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80c9 	beq.w	800478a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 030c 	and.w	r3, r3, #12
 8004600:	2b0c      	cmp	r3, #12
 8004602:	f000 8083 	beq.w	800470c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d15e      	bne.n	80046cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460e:	4b09      	ldr	r3, [pc, #36]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a08      	ldr	r2, [pc, #32]	@ (8004634 <HAL_RCC_OscConfig+0x4b8>)
 8004614:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fd f8cd 	bl	80017b8 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004620:	e00c      	b.n	800463c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004622:	f7fd f8c9 	bl	80017b8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d905      	bls.n	800463c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e0ab      	b.n	800478c <HAL_RCC_OscConfig+0x610>
 8004634:	40021000 	.word	0x40021000
 8004638:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800463c:	4b55      	ldr	r3, [pc, #340]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1ec      	bne.n	8004622 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004648:	4b52      	ldr	r3, [pc, #328]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	4b52      	ldr	r3, [pc, #328]	@ (8004798 <HAL_RCC_OscConfig+0x61c>)
 800464e:	4013      	ands	r3, r2
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6a11      	ldr	r1, [r2, #32]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004658:	3a01      	subs	r2, #1
 800465a:	0112      	lsls	r2, r2, #4
 800465c:	4311      	orrs	r1, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004662:	0212      	lsls	r2, r2, #8
 8004664:	4311      	orrs	r1, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800466a:	0852      	lsrs	r2, r2, #1
 800466c:	3a01      	subs	r2, #1
 800466e:	0552      	lsls	r2, r2, #21
 8004670:	4311      	orrs	r1, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004676:	0852      	lsrs	r2, r2, #1
 8004678:	3a01      	subs	r2, #1
 800467a:	0652      	lsls	r2, r2, #25
 800467c:	4311      	orrs	r1, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004682:	06d2      	lsls	r2, r2, #27
 8004684:	430a      	orrs	r2, r1
 8004686:	4943      	ldr	r1, [pc, #268]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 8004688:	4313      	orrs	r3, r2
 800468a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800468c:	4b41      	ldr	r3, [pc, #260]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a40      	ldr	r2, [pc, #256]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 8004692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004696:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004698:	4b3e      	ldr	r3, [pc, #248]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4a3d      	ldr	r2, [pc, #244]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 800469e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd f888 	bl	80017b8 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fd f884 	bl	80017b8 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e066      	b.n	800478c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046be:	4b35      	ldr	r3, [pc, #212]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x530>
 80046ca:	e05e      	b.n	800478a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046cc:	4b31      	ldr	r3, [pc, #196]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a30      	ldr	r2, [pc, #192]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 80046d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fd f86e 	bl	80017b8 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fd f86a 	bl	80017b8 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e04c      	b.n	800478c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f2:	4b28      	ldr	r3, [pc, #160]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046fe:	4b25      	ldr	r3, [pc, #148]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	4924      	ldr	r1, [pc, #144]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 8004704:	4b25      	ldr	r3, [pc, #148]	@ (800479c <HAL_RCC_OscConfig+0x620>)
 8004706:	4013      	ands	r3, r2
 8004708:	60cb      	str	r3, [r1, #12]
 800470a:	e03e      	b.n	800478a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e039      	b.n	800478c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004718:	4b1e      	ldr	r3, [pc, #120]	@ (8004794 <HAL_RCC_OscConfig+0x618>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f003 0203 	and.w	r2, r3, #3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	429a      	cmp	r2, r3
 800472a:	d12c      	bne.n	8004786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	3b01      	subs	r3, #1
 8004738:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d123      	bne.n	8004786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004748:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d11b      	bne.n	8004786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800475a:	429a      	cmp	r2, r3
 800475c:	d113      	bne.n	8004786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	3b01      	subs	r3, #1
 800476c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d109      	bne.n	8004786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	3b01      	subs	r3, #1
 8004780:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d001      	beq.n	800478a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40021000 	.word	0x40021000
 8004798:	019f800c 	.word	0x019f800c
 800479c:	feeefffc 	.word	0xfeeefffc

080047a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e11e      	b.n	80049f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b91      	ldr	r3, [pc, #580]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d910      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b8e      	ldr	r3, [pc, #568]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 020f 	bic.w	r2, r3, #15
 80047ce:	498c      	ldr	r1, [pc, #560]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b8a      	ldr	r3, [pc, #552]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e106      	b.n	80049f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d073      	beq.n	80048dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d129      	bne.n	8004850 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047fc:	4b81      	ldr	r3, [pc, #516]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0f4      	b.n	80049f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800480c:	f000 f99e 	bl	8004b4c <RCC_GetSysClockFreqFromPLLSource>
 8004810:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4a7c      	ldr	r2, [pc, #496]	@ (8004a08 <HAL_RCC_ClockConfig+0x268>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d93f      	bls.n	800489a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800481a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800482e:	2b00      	cmp	r3, #0
 8004830:	d033      	beq.n	800489a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004836:	2b00      	cmp	r3, #0
 8004838:	d12f      	bne.n	800489a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800483a:	4b72      	ldr	r3, [pc, #456]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004842:	4a70      	ldr	r2, [pc, #448]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 8004844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004848:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800484a:	2380      	movs	r3, #128	@ 0x80
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e024      	b.n	800489a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d107      	bne.n	8004868 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004858:	4b6a      	ldr	r3, [pc, #424]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0c6      	b.n	80049f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004868:	4b66      	ldr	r3, [pc, #408]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0be      	b.n	80049f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004878:	f000 f8ce 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800487c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4a61      	ldr	r2, [pc, #388]	@ (8004a08 <HAL_RCC_ClockConfig+0x268>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d909      	bls.n	800489a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004886:	4b5f      	ldr	r3, [pc, #380]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800488e:	4a5d      	ldr	r2, [pc, #372]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 8004890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004894:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004896:	2380      	movs	r3, #128	@ 0x80
 8004898:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800489a:	4b5a      	ldr	r3, [pc, #360]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f023 0203 	bic.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4957      	ldr	r1, [pc, #348]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ac:	f7fc ff84 	bl	80017b8 <HAL_GetTick>
 80048b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b4:	f7fc ff80 	bl	80017b8 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e095      	b.n	80049f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ca:	4b4e      	ldr	r3, [pc, #312]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 020c 	and.w	r2, r3, #12
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	429a      	cmp	r2, r3
 80048da:	d1eb      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d023      	beq.n	8004930 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f4:	4b43      	ldr	r3, [pc, #268]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a42      	ldr	r2, [pc, #264]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 80048fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800490c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004914:	4a3b      	ldr	r2, [pc, #236]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 8004916:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800491a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800491c:	4b39      	ldr	r3, [pc, #228]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4936      	ldr	r1, [pc, #216]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
 800492e:	e008      	b.n	8004942 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	2b80      	cmp	r3, #128	@ 0x80
 8004934:	d105      	bne.n	8004942 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004936:	4b33      	ldr	r3, [pc, #204]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	4a32      	ldr	r2, [pc, #200]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 800493c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004940:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004942:	4b2f      	ldr	r3, [pc, #188]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d21d      	bcs.n	800498c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004950:	4b2b      	ldr	r3, [pc, #172]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f023 020f 	bic.w	r2, r3, #15
 8004958:	4929      	ldr	r1, [pc, #164]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004960:	f7fc ff2a 	bl	80017b8 <HAL_GetTick>
 8004964:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	e00a      	b.n	800497e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004968:	f7fc ff26 	bl	80017b8 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e03b      	b.n	80049f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b20      	ldr	r3, [pc, #128]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d1ed      	bne.n	8004968 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004998:	4b1a      	ldr	r3, [pc, #104]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4917      	ldr	r1, [pc, #92]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b6:	4b13      	ldr	r3, [pc, #76]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	490f      	ldr	r1, [pc, #60]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049ca:	f000 f825 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a04 <HAL_RCC_ClockConfig+0x264>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	490c      	ldr	r1, [pc, #48]	@ (8004a0c <HAL_RCC_ClockConfig+0x26c>)
 80049dc:	5ccb      	ldrb	r3, [r1, r3]
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	fa22 f303 	lsr.w	r3, r2, r3
 80049e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004a10 <HAL_RCC_ClockConfig+0x270>)
 80049e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004a14 <HAL_RCC_ClockConfig+0x274>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fc fe96 	bl	8001720 <HAL_InitTick>
 80049f4:	4603      	mov	r3, r0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40022000 	.word	0x40022000
 8004a04:	40021000 	.word	0x40021000
 8004a08:	04c4b400 	.word	0x04c4b400
 8004a0c:	080081c4 	.word	0x080081c4
 8004a10:	20000008 	.word	0x20000008
 8004a14:	2000000c 	.word	0x2000000c

08004a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d102      	bne.n	8004a30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	e047      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a30:	4b27      	ldr	r3, [pc, #156]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 030c 	and.w	r3, r3, #12
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d102      	bne.n	8004a42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a3c:	4b26      	ldr	r3, [pc, #152]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	e03e      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a42:	4b23      	ldr	r3, [pc, #140]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b0c      	cmp	r3, #12
 8004a4c:	d136      	bne.n	8004abc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a4e:	4b20      	ldr	r3, [pc, #128]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	3301      	adds	r3, #1
 8004a64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d10c      	bne.n	8004a86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	4a16      	ldr	r2, [pc, #88]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a76:	68d2      	ldr	r2, [r2, #12]
 8004a78:	0a12      	lsrs	r2, r2, #8
 8004a7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a7e:	fb02 f303 	mul.w	r3, r2, r3
 8004a82:	617b      	str	r3, [r7, #20]
      break;
 8004a84:	e00c      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a86:	4a13      	ldr	r2, [pc, #76]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8e:	4a10      	ldr	r2, [pc, #64]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a90:	68d2      	ldr	r2, [r2, #12]
 8004a92:	0a12      	lsrs	r2, r2, #8
 8004a94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a98:	fb02 f303 	mul.w	r3, r2, r3
 8004a9c:	617b      	str	r3, [r7, #20]
      break;
 8004a9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	0e5b      	lsrs	r3, r3, #25
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	e001      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ac0:	693b      	ldr	r3, [r7, #16]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	00f42400 	.word	0x00f42400
 8004ad8:	016e3600 	.word	0x016e3600

08004adc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae0:	4b03      	ldr	r3, [pc, #12]	@ (8004af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000008 	.word	0x20000008

08004af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004af8:	f7ff fff0 	bl	8004adc <HAL_RCC_GetHCLKFreq>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b06      	ldr	r3, [pc, #24]	@ (8004b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	0a1b      	lsrs	r3, r3, #8
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	4904      	ldr	r1, [pc, #16]	@ (8004b1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b0a:	5ccb      	ldrb	r3, [r1, r3]
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	080081d4 	.word	0x080081d4

08004b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b24:	f7ff ffda 	bl	8004adc <HAL_RCC_GetHCLKFreq>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	4b06      	ldr	r3, [pc, #24]	@ (8004b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	0adb      	lsrs	r3, r3, #11
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	4904      	ldr	r1, [pc, #16]	@ (8004b48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b36:	5ccb      	ldrb	r3, [r1, r3]
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40021000 	.word	0x40021000
 8004b48:	080081d4 	.word	0x080081d4

08004b4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b52:	4b1e      	ldr	r3, [pc, #120]	@ (8004bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	3301      	adds	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d10c      	bne.n	8004b8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b70:	4a17      	ldr	r2, [pc, #92]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	4a14      	ldr	r2, [pc, #80]	@ (8004bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b7a:	68d2      	ldr	r2, [r2, #12]
 8004b7c:	0a12      	lsrs	r2, r2, #8
 8004b7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b82:	fb02 f303 	mul.w	r3, r2, r3
 8004b86:	617b      	str	r3, [r7, #20]
    break;
 8004b88:	e00c      	b.n	8004ba4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b8a:	4a12      	ldr	r2, [pc, #72]	@ (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a0e      	ldr	r2, [pc, #56]	@ (8004bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b94:	68d2      	ldr	r2, [r2, #12]
 8004b96:	0a12      	lsrs	r2, r2, #8
 8004b98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ba0:	617b      	str	r3, [r7, #20]
    break;
 8004ba2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ba4:	4b09      	ldr	r3, [pc, #36]	@ (8004bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	0e5b      	lsrs	r3, r3, #25
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bbe:	687b      	ldr	r3, [r7, #4]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	016e3600 	.word	0x016e3600
 8004bd4:	00f42400 	.word	0x00f42400

08004bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004be0:	2300      	movs	r3, #0
 8004be2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004be4:	2300      	movs	r3, #0
 8004be6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8098 	beq.w	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfa:	4b43      	ldr	r3, [pc, #268]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10d      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	4b40      	ldr	r3, [pc, #256]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c12:	4b3d      	ldr	r3, [pc, #244]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c22:	4b3a      	ldr	r3, [pc, #232]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a39      	ldr	r2, [pc, #228]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c2e:	f7fc fdc3 	bl	80017b8 <HAL_GetTick>
 8004c32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c34:	e009      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c36:	f7fc fdbf 	bl	80017b8 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d902      	bls.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	74fb      	strb	r3, [r7, #19]
        break;
 8004c48:	e005      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c4a:	4b30      	ldr	r3, [pc, #192]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0ef      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c56:	7cfb      	ldrb	r3, [r7, #19]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d159      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01e      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d019      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c78:	4b23      	ldr	r3, [pc, #140]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c84:	4b20      	ldr	r3, [pc, #128]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c94:	4b1c      	ldr	r3, [pc, #112]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ca4:	4a18      	ldr	r2, [pc, #96]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d016      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb6:	f7fc fd7f 	bl	80017b8 <HAL_GetTick>
 8004cba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cbc:	e00b      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cbe:	f7fc fd7b 	bl	80017b8 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d902      	bls.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	74fb      	strb	r3, [r7, #19]
            break;
 8004cd4:	e006      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0ec      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10b      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cea:	4b07      	ldr	r3, [pc, #28]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf8:	4903      	ldr	r1, [pc, #12]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d00:	e008      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d02:	7cfb      	ldrb	r3, [r7, #19]
 8004d04:	74bb      	strb	r3, [r7, #18]
 8004d06:	e005      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d10:	7cfb      	ldrb	r3, [r7, #19]
 8004d12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d14:	7c7b      	ldrb	r3, [r7, #17]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d105      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1a:	4ba7      	ldr	r3, [pc, #668]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1e:	4aa6      	ldr	r2, [pc, #664]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d32:	4ba1      	ldr	r3, [pc, #644]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d38:	f023 0203 	bic.w	r2, r3, #3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	499d      	ldr	r1, [pc, #628]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d54:	4b98      	ldr	r3, [pc, #608]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5a:	f023 020c 	bic.w	r2, r3, #12
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	4995      	ldr	r1, [pc, #596]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d76:	4b90      	ldr	r3, [pc, #576]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	498c      	ldr	r1, [pc, #560]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d98:	4b87      	ldr	r3, [pc, #540]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	4984      	ldr	r1, [pc, #528]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dba:	4b7f      	ldr	r3, [pc, #508]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	497b      	ldr	r1, [pc, #492]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ddc:	4b76      	ldr	r3, [pc, #472]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	4973      	ldr	r1, [pc, #460]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dfe:	4b6e      	ldr	r3, [pc, #440]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e04:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	496a      	ldr	r1, [pc, #424]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e20:	4b65      	ldr	r3, [pc, #404]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	4962      	ldr	r1, [pc, #392]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e42:	4b5d      	ldr	r3, [pc, #372]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	4959      	ldr	r1, [pc, #356]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e64:	4b54      	ldr	r3, [pc, #336]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e6a:	f023 0203 	bic.w	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e72:	4951      	ldr	r1, [pc, #324]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e86:	4b4c      	ldr	r3, [pc, #304]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e94:	4948      	ldr	r1, [pc, #288]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d015      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea8:	4b43      	ldr	r3, [pc, #268]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	4940      	ldr	r1, [pc, #256]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec6:	d105      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a3a      	ldr	r2, [pc, #232]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ed2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d015      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ee0:	4b35      	ldr	r3, [pc, #212]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eee:	4932      	ldr	r1, [pc, #200]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004efe:	d105      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f00:	4b2d      	ldr	r3, [pc, #180]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d015      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f18:	4b27      	ldr	r3, [pc, #156]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f26:	4924      	ldr	r1, [pc, #144]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f36:	d105      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f38:	4b1f      	ldr	r3, [pc, #124]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d015      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f50:	4b19      	ldr	r3, [pc, #100]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5e:	4916      	ldr	r1, [pc, #88]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f6e:	d105      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f70:	4b11      	ldr	r3, [pc, #68]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4a10      	ldr	r2, [pc, #64]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d019      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f88:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	4908      	ldr	r1, [pc, #32]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fa6:	d109      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa8:	4b03      	ldr	r3, [pc, #12]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4a02      	ldr	r2, [pc, #8]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fb2:	60d3      	str	r3, [r2, #12]
 8004fb4:	e002      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d015      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fc8:	4b29      	ldr	r3, [pc, #164]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd6:	4926      	ldr	r1, [pc, #152]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fe6:	d105      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fe8:	4b21      	ldr	r3, [pc, #132]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4a20      	ldr	r2, [pc, #128]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d015      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005000:	4b1b      	ldr	r3, [pc, #108]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005006:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800500e:	4918      	ldr	r1, [pc, #96]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800501a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501e:	d105      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005020:	4b13      	ldr	r3, [pc, #76]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4a12      	ldr	r2, [pc, #72]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800502a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d015      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005038:	4b0d      	ldr	r3, [pc, #52]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800503a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800503e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005046:	490a      	ldr	r1, [pc, #40]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005052:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005056:	d105      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005058:	4b05      	ldr	r3, [pc, #20]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4a04      	ldr	r2, [pc, #16]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800505e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005062:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005064:	7cbb      	ldrb	r3, [r7, #18]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000

08005074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e049      	b.n	800511a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fc f95a 	bl	8001354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f000 ff68 	bl	8005f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	d001      	beq.n	800513c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e04c      	b.n	80051d6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a26      	ldr	r2, [pc, #152]	@ (80051e4 <HAL_TIM_Base_Start+0xc0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d022      	beq.n	8005194 <HAL_TIM_Base_Start+0x70>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005156:	d01d      	beq.n	8005194 <HAL_TIM_Base_Start+0x70>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a22      	ldr	r2, [pc, #136]	@ (80051e8 <HAL_TIM_Base_Start+0xc4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d018      	beq.n	8005194 <HAL_TIM_Base_Start+0x70>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a21      	ldr	r2, [pc, #132]	@ (80051ec <HAL_TIM_Base_Start+0xc8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d013      	beq.n	8005194 <HAL_TIM_Base_Start+0x70>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1f      	ldr	r2, [pc, #124]	@ (80051f0 <HAL_TIM_Base_Start+0xcc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00e      	beq.n	8005194 <HAL_TIM_Base_Start+0x70>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1e      	ldr	r2, [pc, #120]	@ (80051f4 <HAL_TIM_Base_Start+0xd0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_TIM_Base_Start+0x70>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1c      	ldr	r2, [pc, #112]	@ (80051f8 <HAL_TIM_Base_Start+0xd4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_TIM_Base_Start+0x70>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1b      	ldr	r2, [pc, #108]	@ (80051fc <HAL_TIM_Base_Start+0xd8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d115      	bne.n	80051c0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	4b19      	ldr	r3, [pc, #100]	@ (8005200 <HAL_TIM_Base_Start+0xdc>)
 800519c:	4013      	ands	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b06      	cmp	r3, #6
 80051a4:	d015      	beq.n	80051d2 <HAL_TIM_Base_Start+0xae>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ac:	d011      	beq.n	80051d2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051be:	e008      	b.n	80051d2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e000      	b.n	80051d4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40013400 	.word	0x40013400
 80051f8:	40014000 	.word	0x40014000
 80051fc:	40015000 	.word	0x40015000
 8005200:	00010007 	.word	0x00010007

08005204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d001      	beq.n	800521c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e054      	b.n	80052c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a26      	ldr	r2, [pc, #152]	@ (80052d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d022      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005246:	d01d      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a22      	ldr	r2, [pc, #136]	@ (80052d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a21      	ldr	r2, [pc, #132]	@ (80052dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1f      	ldr	r2, [pc, #124]	@ (80052e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1e      	ldr	r2, [pc, #120]	@ (80052e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1c      	ldr	r2, [pc, #112]	@ (80052e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1b      	ldr	r2, [pc, #108]	@ (80052ec <HAL_TIM_Base_Start_IT+0xe8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d115      	bne.n	80052b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	4b19      	ldr	r3, [pc, #100]	@ (80052f0 <HAL_TIM_Base_Start_IT+0xec>)
 800528c:	4013      	ands	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b06      	cmp	r3, #6
 8005294:	d015      	beq.n	80052c2 <HAL_TIM_Base_Start_IT+0xbe>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800529c:	d011      	beq.n	80052c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ae:	e008      	b.n	80052c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	e000      	b.n	80052c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800
 80052e0:	40000c00 	.word	0x40000c00
 80052e4:	40013400 	.word	0x40013400
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40015000 	.word	0x40015000
 80052f0:	00010007 	.word	0x00010007

080052f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e049      	b.n	800539a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f841 	bl	80053a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	4610      	mov	r0, r2
 8005334:	f000 fe28 	bl	8005f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d109      	bne.n	80053dc <HAL_TIM_PWM_Start+0x24>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e03c      	b.n	8005456 <HAL_TIM_PWM_Start+0x9e>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d109      	bne.n	80053f6 <HAL_TIM_PWM_Start+0x3e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	bf14      	ite	ne
 80053ee:	2301      	movne	r3, #1
 80053f0:	2300      	moveq	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e02f      	b.n	8005456 <HAL_TIM_PWM_Start+0x9e>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d109      	bne.n	8005410 <HAL_TIM_PWM_Start+0x58>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e022      	b.n	8005456 <HAL_TIM_PWM_Start+0x9e>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b0c      	cmp	r3, #12
 8005414:	d109      	bne.n	800542a <HAL_TIM_PWM_Start+0x72>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b01      	cmp	r3, #1
 8005420:	bf14      	ite	ne
 8005422:	2301      	movne	r3, #1
 8005424:	2300      	moveq	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	e015      	b.n	8005456 <HAL_TIM_PWM_Start+0x9e>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b10      	cmp	r3, #16
 800542e:	d109      	bne.n	8005444 <HAL_TIM_PWM_Start+0x8c>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	bf14      	ite	ne
 800543c:	2301      	movne	r3, #1
 800543e:	2300      	moveq	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	e008      	b.n	8005456 <HAL_TIM_PWM_Start+0x9e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e0a6      	b.n	80055ac <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d104      	bne.n	800546e <HAL_TIM_PWM_Start+0xb6>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800546c:	e023      	b.n	80054b6 <HAL_TIM_PWM_Start+0xfe>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b04      	cmp	r3, #4
 8005472:	d104      	bne.n	800547e <HAL_TIM_PWM_Start+0xc6>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800547c:	e01b      	b.n	80054b6 <HAL_TIM_PWM_Start+0xfe>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b08      	cmp	r3, #8
 8005482:	d104      	bne.n	800548e <HAL_TIM_PWM_Start+0xd6>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800548c:	e013      	b.n	80054b6 <HAL_TIM_PWM_Start+0xfe>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b0c      	cmp	r3, #12
 8005492:	d104      	bne.n	800549e <HAL_TIM_PWM_Start+0xe6>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800549c:	e00b      	b.n	80054b6 <HAL_TIM_PWM_Start+0xfe>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start+0xf6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ac:	e003      	b.n	80054b6 <HAL_TIM_PWM_Start+0xfe>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2201      	movs	r2, #1
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 f9dc 	bl	800687c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a3a      	ldr	r2, [pc, #232]	@ (80055b4 <HAL_TIM_PWM_Start+0x1fc>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d018      	beq.n	8005500 <HAL_TIM_PWM_Start+0x148>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a39      	ldr	r2, [pc, #228]	@ (80055b8 <HAL_TIM_PWM_Start+0x200>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <HAL_TIM_PWM_Start+0x148>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a37      	ldr	r2, [pc, #220]	@ (80055bc <HAL_TIM_PWM_Start+0x204>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00e      	beq.n	8005500 <HAL_TIM_PWM_Start+0x148>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a36      	ldr	r2, [pc, #216]	@ (80055c0 <HAL_TIM_PWM_Start+0x208>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d009      	beq.n	8005500 <HAL_TIM_PWM_Start+0x148>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a34      	ldr	r2, [pc, #208]	@ (80055c4 <HAL_TIM_PWM_Start+0x20c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_TIM_PWM_Start+0x148>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a33      	ldr	r2, [pc, #204]	@ (80055c8 <HAL_TIM_PWM_Start+0x210>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_TIM_PWM_Start+0x14c>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_TIM_PWM_Start+0x14e>
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005518:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a25      	ldr	r2, [pc, #148]	@ (80055b4 <HAL_TIM_PWM_Start+0x1fc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d022      	beq.n	800556a <HAL_TIM_PWM_Start+0x1b2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552c:	d01d      	beq.n	800556a <HAL_TIM_PWM_Start+0x1b2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a26      	ldr	r2, [pc, #152]	@ (80055cc <HAL_TIM_PWM_Start+0x214>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d018      	beq.n	800556a <HAL_TIM_PWM_Start+0x1b2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a24      	ldr	r2, [pc, #144]	@ (80055d0 <HAL_TIM_PWM_Start+0x218>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <HAL_TIM_PWM_Start+0x1b2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a23      	ldr	r2, [pc, #140]	@ (80055d4 <HAL_TIM_PWM_Start+0x21c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00e      	beq.n	800556a <HAL_TIM_PWM_Start+0x1b2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a19      	ldr	r2, [pc, #100]	@ (80055b8 <HAL_TIM_PWM_Start+0x200>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d009      	beq.n	800556a <HAL_TIM_PWM_Start+0x1b2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a18      	ldr	r2, [pc, #96]	@ (80055bc <HAL_TIM_PWM_Start+0x204>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_TIM_PWM_Start+0x1b2>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a18      	ldr	r2, [pc, #96]	@ (80055c8 <HAL_TIM_PWM_Start+0x210>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d115      	bne.n	8005596 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	4b19      	ldr	r3, [pc, #100]	@ (80055d8 <HAL_TIM_PWM_Start+0x220>)
 8005572:	4013      	ands	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b06      	cmp	r3, #6
 800557a:	d015      	beq.n	80055a8 <HAL_TIM_PWM_Start+0x1f0>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005582:	d011      	beq.n	80055a8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005594:	e008      	b.n	80055a8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0201 	orr.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	e000      	b.n	80055aa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40012c00 	.word	0x40012c00
 80055b8:	40013400 	.word	0x40013400
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800
 80055c8:	40015000 	.word	0x40015000
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800
 80055d4:	40000c00 	.word	0x40000c00
 80055d8:	00010007 	.word	0x00010007

080055dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e097      	b.n	8005720 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d106      	bne.n	800560a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7fb ff0d 	bl	8001424 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005620:	f023 0307 	bic.w	r3, r3, #7
 8005624:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3304      	adds	r3, #4
 800562e:	4619      	mov	r1, r3
 8005630:	4610      	mov	r0, r2
 8005632:	f000 fca9 	bl	8005f88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	4313      	orrs	r3, r2
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800567c:	f023 030c 	bic.w	r3, r3, #12
 8005680:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005688:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800568c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	021b      	lsls	r3, r3, #8
 8005698:	4313      	orrs	r3, r2
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	011a      	lsls	r2, r3, #4
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	031b      	lsls	r3, r3, #12
 80056ac:	4313      	orrs	r3, r2
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80056ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80056c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	4313      	orrs	r3, r2
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005738:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005740:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005748:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005750:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d110      	bne.n	800577a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d102      	bne.n	8005764 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800575e:	7b7b      	ldrb	r3, [r7, #13]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d001      	beq.n	8005768 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e069      	b.n	800583c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005778:	e031      	b.n	80057de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b04      	cmp	r3, #4
 800577e:	d110      	bne.n	80057a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005780:	7bbb      	ldrb	r3, [r7, #14]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d102      	bne.n	800578c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005786:	7b3b      	ldrb	r3, [r7, #12]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d001      	beq.n	8005790 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e055      	b.n	800583c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057a0:	e01d      	b.n	80057de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d108      	bne.n	80057ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057a8:	7bbb      	ldrb	r3, [r7, #14]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d105      	bne.n	80057ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ae:	7b7b      	ldrb	r3, [r7, #13]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d102      	bne.n	80057ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057b4:	7b3b      	ldrb	r3, [r7, #12]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d001      	beq.n	80057be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e03e      	b.n	800583c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2202      	movs	r2, #2
 80057c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_TIM_Encoder_Start+0xc4>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d008      	beq.n	80057fc <HAL_TIM_Encoder_Start+0xd4>
 80057ea:	e00f      	b.n	800580c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2201      	movs	r2, #1
 80057f2:	2100      	movs	r1, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 f841 	bl	800687c <TIM_CCxChannelCmd>
      break;
 80057fa:	e016      	b.n	800582a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2201      	movs	r2, #1
 8005802:	2104      	movs	r1, #4
 8005804:	4618      	mov	r0, r3
 8005806:	f001 f839 	bl	800687c <TIM_CCxChannelCmd>
      break;
 800580a:	e00e      	b.n	800582a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2201      	movs	r2, #1
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f001 f831 	bl	800687c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2201      	movs	r2, #1
 8005820:	2104      	movs	r1, #4
 8005822:	4618      	mov	r0, r3
 8005824:	f001 f82a 	bl	800687c <TIM_CCxChannelCmd>
      break;
 8005828:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0201 	orr.w	r2, r2, #1
 8005838:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d020      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01b      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0202 	mvn.w	r2, #2
 8005878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fb5c 	bl	8005f4c <HAL_TIM_IC_CaptureCallback>
 8005894:	e005      	b.n	80058a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fb4e 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb5f 	bl	8005f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d020      	beq.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01b      	beq.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0204 	mvn.w	r2, #4
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fb36 	bl	8005f4c <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fb28 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fb39 	bl	8005f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d020      	beq.n	8005940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01b      	beq.n	8005940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0208 	mvn.w	r2, #8
 8005910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2204      	movs	r2, #4
 8005916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fb10 	bl	8005f4c <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fb02 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fb13 	bl	8005f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b00      	cmp	r3, #0
 8005948:	d020      	beq.n	800598c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01b      	beq.n	800598c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0210 	mvn.w	r2, #16
 800595c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2208      	movs	r2, #8
 8005962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 faea 	bl	8005f4c <HAL_TIM_IC_CaptureCallback>
 8005978:	e005      	b.n	8005986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fadc 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 faed 	bl	8005f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00c      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0201 	mvn.w	r2, #1
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fb faf8 	bl	8000fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00c      	beq.n	80059de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 f8a9 	bl	8006b30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00c      	beq.n	8005a02 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 f8a1 	bl	8006b44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00c      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d007      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 faa7 	bl	8005f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00c      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f06f 0220 	mvn.w	r2, #32
 8005a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 f869 	bl	8006b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00c      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d007      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 f875 	bl	8006b58 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00c      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 f86d 	bl	8006b6c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00c      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 f865 	bl	8006b80 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00c      	beq.n	8005ada <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 f85d 	bl	8006b94 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e0ff      	b.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b14      	cmp	r3, #20
 8005b0e:	f200 80f0 	bhi.w	8005cf2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b12:	a201      	add	r2, pc, #4	@ (adr r2, 8005b18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b18:	08005b6d 	.word	0x08005b6d
 8005b1c:	08005cf3 	.word	0x08005cf3
 8005b20:	08005cf3 	.word	0x08005cf3
 8005b24:	08005cf3 	.word	0x08005cf3
 8005b28:	08005bad 	.word	0x08005bad
 8005b2c:	08005cf3 	.word	0x08005cf3
 8005b30:	08005cf3 	.word	0x08005cf3
 8005b34:	08005cf3 	.word	0x08005cf3
 8005b38:	08005bef 	.word	0x08005bef
 8005b3c:	08005cf3 	.word	0x08005cf3
 8005b40:	08005cf3 	.word	0x08005cf3
 8005b44:	08005cf3 	.word	0x08005cf3
 8005b48:	08005c2f 	.word	0x08005c2f
 8005b4c:	08005cf3 	.word	0x08005cf3
 8005b50:	08005cf3 	.word	0x08005cf3
 8005b54:	08005cf3 	.word	0x08005cf3
 8005b58:	08005c71 	.word	0x08005c71
 8005b5c:	08005cf3 	.word	0x08005cf3
 8005b60:	08005cf3 	.word	0x08005cf3
 8005b64:	08005cf3 	.word	0x08005cf3
 8005b68:	08005cb1 	.word	0x08005cb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fabc 	bl	80060f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0208 	orr.w	r2, r2, #8
 8005b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0204 	bic.w	r2, r2, #4
 8005b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6999      	ldr	r1, [r3, #24]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	619a      	str	r2, [r3, #24]
      break;
 8005baa:	e0a5      	b.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fb36 	bl	8006224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699a      	ldr	r2, [r3, #24]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6999      	ldr	r1, [r3, #24]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	021a      	lsls	r2, r3, #8
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	619a      	str	r2, [r3, #24]
      break;
 8005bec:	e084      	b.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fba9 	bl	800634c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0208 	orr.w	r2, r2, #8
 8005c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0204 	bic.w	r2, r2, #4
 8005c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69d9      	ldr	r1, [r3, #28]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	61da      	str	r2, [r3, #28]
      break;
 8005c2c:	e064      	b.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fc1b 	bl	8006470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69d9      	ldr	r1, [r3, #28]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	021a      	lsls	r2, r3, #8
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	61da      	str	r2, [r3, #28]
      break;
 8005c6e:	e043      	b.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fc8e 	bl	8006598 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0208 	orr.w	r2, r2, #8
 8005c8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0204 	bic.w	r2, r2, #4
 8005c9a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005cae:	e023      	b.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fcd8 	bl	800666c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	021a      	lsls	r2, r3, #8
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005cf0:	e002      	b.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop

08005d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_TIM_ConfigClockSource+0x1c>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e0f6      	b.n	8005f16 <HAL_TIM_ConfigClockSource+0x20a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005d46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a6f      	ldr	r2, [pc, #444]	@ (8005f20 <HAL_TIM_ConfigClockSource+0x214>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	f000 80c1 	beq.w	8005eea <HAL_TIM_ConfigClockSource+0x1de>
 8005d68:	4a6d      	ldr	r2, [pc, #436]	@ (8005f20 <HAL_TIM_ConfigClockSource+0x214>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	f200 80c6 	bhi.w	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005d70:	4a6c      	ldr	r2, [pc, #432]	@ (8005f24 <HAL_TIM_ConfigClockSource+0x218>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	f000 80b9 	beq.w	8005eea <HAL_TIM_ConfigClockSource+0x1de>
 8005d78:	4a6a      	ldr	r2, [pc, #424]	@ (8005f24 <HAL_TIM_ConfigClockSource+0x218>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	f200 80be 	bhi.w	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005d80:	4a69      	ldr	r2, [pc, #420]	@ (8005f28 <HAL_TIM_ConfigClockSource+0x21c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	f000 80b1 	beq.w	8005eea <HAL_TIM_ConfigClockSource+0x1de>
 8005d88:	4a67      	ldr	r2, [pc, #412]	@ (8005f28 <HAL_TIM_ConfigClockSource+0x21c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	f200 80b6 	bhi.w	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005d90:	4a66      	ldr	r2, [pc, #408]	@ (8005f2c <HAL_TIM_ConfigClockSource+0x220>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	f000 80a9 	beq.w	8005eea <HAL_TIM_ConfigClockSource+0x1de>
 8005d98:	4a64      	ldr	r2, [pc, #400]	@ (8005f2c <HAL_TIM_ConfigClockSource+0x220>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	f200 80ae 	bhi.w	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005da0:	4a63      	ldr	r2, [pc, #396]	@ (8005f30 <HAL_TIM_ConfigClockSource+0x224>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	f000 80a1 	beq.w	8005eea <HAL_TIM_ConfigClockSource+0x1de>
 8005da8:	4a61      	ldr	r2, [pc, #388]	@ (8005f30 <HAL_TIM_ConfigClockSource+0x224>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	f200 80a6 	bhi.w	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005db0:	4a60      	ldr	r2, [pc, #384]	@ (8005f34 <HAL_TIM_ConfigClockSource+0x228>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	f000 8099 	beq.w	8005eea <HAL_TIM_ConfigClockSource+0x1de>
 8005db8:	4a5e      	ldr	r2, [pc, #376]	@ (8005f34 <HAL_TIM_ConfigClockSource+0x228>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	f200 809e 	bhi.w	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005dc0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005dc4:	f000 8091 	beq.w	8005eea <HAL_TIM_ConfigClockSource+0x1de>
 8005dc8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005dcc:	f200 8096 	bhi.w	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005dd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dd4:	f000 8089 	beq.w	8005eea <HAL_TIM_ConfigClockSource+0x1de>
 8005dd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ddc:	f200 808e 	bhi.w	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005de4:	d03e      	beq.n	8005e64 <HAL_TIM_ConfigClockSource+0x158>
 8005de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dea:	f200 8087 	bhi.w	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005df2:	f000 8086 	beq.w	8005f02 <HAL_TIM_ConfigClockSource+0x1f6>
 8005df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dfa:	d87f      	bhi.n	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005dfc:	2b70      	cmp	r3, #112	@ 0x70
 8005dfe:	d01a      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x12a>
 8005e00:	2b70      	cmp	r3, #112	@ 0x70
 8005e02:	d87b      	bhi.n	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005e04:	2b60      	cmp	r3, #96	@ 0x60
 8005e06:	d050      	beq.n	8005eaa <HAL_TIM_ConfigClockSource+0x19e>
 8005e08:	2b60      	cmp	r3, #96	@ 0x60
 8005e0a:	d877      	bhi.n	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005e0c:	2b50      	cmp	r3, #80	@ 0x50
 8005e0e:	d03c      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0x17e>
 8005e10:	2b50      	cmp	r3, #80	@ 0x50
 8005e12:	d873      	bhi.n	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005e14:	2b40      	cmp	r3, #64	@ 0x40
 8005e16:	d058      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x1be>
 8005e18:	2b40      	cmp	r3, #64	@ 0x40
 8005e1a:	d86f      	bhi.n	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005e1c:	2b30      	cmp	r3, #48	@ 0x30
 8005e1e:	d064      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x1de>
 8005e20:	2b30      	cmp	r3, #48	@ 0x30
 8005e22:	d86b      	bhi.n	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d060      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x1de>
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	d867      	bhi.n	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d05c      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x1de>
 8005e30:	2b10      	cmp	r3, #16
 8005e32:	d05a      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x1de>
 8005e34:	e062      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e46:	f000 fcf9 	bl	800683c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	609a      	str	r2, [r3, #8]
      break;
 8005e62:	e04f      	b.n	8005f04 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e74:	f000 fce2 	bl	800683c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e86:	609a      	str	r2, [r3, #8]
      break;
 8005e88:	e03c      	b.n	8005f04 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e96:	461a      	mov	r2, r3
 8005e98:	f000 fc54 	bl	8006744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2150      	movs	r1, #80	@ 0x50
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 fcad 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 8005ea8:	e02c      	b.n	8005f04 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f000 fc73 	bl	80067a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2160      	movs	r1, #96	@ 0x60
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fc9d 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 8005ec8:	e01c      	b.n	8005f04 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f000 fc34 	bl	8006744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2140      	movs	r1, #64	@ 0x40
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fc8d 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 8005ee8:	e00c      	b.n	8005f04 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f000 fc84 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 8005efa:	e003      	b.n	8005f04 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	73fb      	strb	r3, [r7, #15]
      break;
 8005f00:	e000      	b.n	8005f04 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005f02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	00100070 	.word	0x00100070
 8005f24:	00100060 	.word	0x00100060
 8005f28:	00100050 	.word	0x00100050
 8005f2c:	00100040 	.word	0x00100040
 8005f30:	00100030 	.word	0x00100030
 8005f34:	00100020 	.word	0x00100020

08005f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a4c      	ldr	r2, [pc, #304]	@ (80060cc <TIM_Base_SetConfig+0x144>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d017      	beq.n	8005fd0 <TIM_Base_SetConfig+0x48>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa6:	d013      	beq.n	8005fd0 <TIM_Base_SetConfig+0x48>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a49      	ldr	r2, [pc, #292]	@ (80060d0 <TIM_Base_SetConfig+0x148>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00f      	beq.n	8005fd0 <TIM_Base_SetConfig+0x48>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a48      	ldr	r2, [pc, #288]	@ (80060d4 <TIM_Base_SetConfig+0x14c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00b      	beq.n	8005fd0 <TIM_Base_SetConfig+0x48>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a47      	ldr	r2, [pc, #284]	@ (80060d8 <TIM_Base_SetConfig+0x150>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d007      	beq.n	8005fd0 <TIM_Base_SetConfig+0x48>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a46      	ldr	r2, [pc, #280]	@ (80060dc <TIM_Base_SetConfig+0x154>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d003      	beq.n	8005fd0 <TIM_Base_SetConfig+0x48>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a45      	ldr	r2, [pc, #276]	@ (80060e0 <TIM_Base_SetConfig+0x158>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d108      	bne.n	8005fe2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a39      	ldr	r2, [pc, #228]	@ (80060cc <TIM_Base_SetConfig+0x144>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d023      	beq.n	8006032 <TIM_Base_SetConfig+0xaa>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff0:	d01f      	beq.n	8006032 <TIM_Base_SetConfig+0xaa>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a36      	ldr	r2, [pc, #216]	@ (80060d0 <TIM_Base_SetConfig+0x148>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d01b      	beq.n	8006032 <TIM_Base_SetConfig+0xaa>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a35      	ldr	r2, [pc, #212]	@ (80060d4 <TIM_Base_SetConfig+0x14c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d017      	beq.n	8006032 <TIM_Base_SetConfig+0xaa>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a34      	ldr	r2, [pc, #208]	@ (80060d8 <TIM_Base_SetConfig+0x150>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d013      	beq.n	8006032 <TIM_Base_SetConfig+0xaa>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a33      	ldr	r2, [pc, #204]	@ (80060dc <TIM_Base_SetConfig+0x154>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00f      	beq.n	8006032 <TIM_Base_SetConfig+0xaa>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a33      	ldr	r2, [pc, #204]	@ (80060e4 <TIM_Base_SetConfig+0x15c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00b      	beq.n	8006032 <TIM_Base_SetConfig+0xaa>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a32      	ldr	r2, [pc, #200]	@ (80060e8 <TIM_Base_SetConfig+0x160>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d007      	beq.n	8006032 <TIM_Base_SetConfig+0xaa>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a31      	ldr	r2, [pc, #196]	@ (80060ec <TIM_Base_SetConfig+0x164>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d003      	beq.n	8006032 <TIM_Base_SetConfig+0xaa>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2c      	ldr	r2, [pc, #176]	@ (80060e0 <TIM_Base_SetConfig+0x158>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d108      	bne.n	8006044 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a18      	ldr	r2, [pc, #96]	@ (80060cc <TIM_Base_SetConfig+0x144>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d013      	beq.n	8006098 <TIM_Base_SetConfig+0x110>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a1a      	ldr	r2, [pc, #104]	@ (80060dc <TIM_Base_SetConfig+0x154>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00f      	beq.n	8006098 <TIM_Base_SetConfig+0x110>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a1a      	ldr	r2, [pc, #104]	@ (80060e4 <TIM_Base_SetConfig+0x15c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00b      	beq.n	8006098 <TIM_Base_SetConfig+0x110>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a19      	ldr	r2, [pc, #100]	@ (80060e8 <TIM_Base_SetConfig+0x160>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d007      	beq.n	8006098 <TIM_Base_SetConfig+0x110>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a18      	ldr	r2, [pc, #96]	@ (80060ec <TIM_Base_SetConfig+0x164>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_Base_SetConfig+0x110>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a13      	ldr	r2, [pc, #76]	@ (80060e0 <TIM_Base_SetConfig+0x158>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d103      	bne.n	80060a0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d105      	bne.n	80060be <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f023 0201 	bic.w	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	611a      	str	r2, [r3, #16]
  }
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40000400 	.word	0x40000400
 80060d4:	40000800 	.word	0x40000800
 80060d8:	40000c00 	.word	0x40000c00
 80060dc:	40013400 	.word	0x40013400
 80060e0:	40015000 	.word	0x40015000
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800

080060f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f023 0201 	bic.w	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800611e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0303 	bic.w	r3, r3, #3
 800612a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f023 0302 	bic.w	r3, r3, #2
 800613c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4313      	orrs	r3, r2
 8006146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a30      	ldr	r2, [pc, #192]	@ (800620c <TIM_OC1_SetConfig+0x11c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <TIM_OC1_SetConfig+0x88>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a2f      	ldr	r2, [pc, #188]	@ (8006210 <TIM_OC1_SetConfig+0x120>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00f      	beq.n	8006178 <TIM_OC1_SetConfig+0x88>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a2e      	ldr	r2, [pc, #184]	@ (8006214 <TIM_OC1_SetConfig+0x124>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00b      	beq.n	8006178 <TIM_OC1_SetConfig+0x88>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a2d      	ldr	r2, [pc, #180]	@ (8006218 <TIM_OC1_SetConfig+0x128>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d007      	beq.n	8006178 <TIM_OC1_SetConfig+0x88>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a2c      	ldr	r2, [pc, #176]	@ (800621c <TIM_OC1_SetConfig+0x12c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_OC1_SetConfig+0x88>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a2b      	ldr	r2, [pc, #172]	@ (8006220 <TIM_OC1_SetConfig+0x130>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d10c      	bne.n	8006192 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 0308 	bic.w	r3, r3, #8
 800617e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f023 0304 	bic.w	r3, r3, #4
 8006190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a1d      	ldr	r2, [pc, #116]	@ (800620c <TIM_OC1_SetConfig+0x11c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d013      	beq.n	80061c2 <TIM_OC1_SetConfig+0xd2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a1c      	ldr	r2, [pc, #112]	@ (8006210 <TIM_OC1_SetConfig+0x120>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00f      	beq.n	80061c2 <TIM_OC1_SetConfig+0xd2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006214 <TIM_OC1_SetConfig+0x124>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00b      	beq.n	80061c2 <TIM_OC1_SetConfig+0xd2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006218 <TIM_OC1_SetConfig+0x128>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d007      	beq.n	80061c2 <TIM_OC1_SetConfig+0xd2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a19      	ldr	r2, [pc, #100]	@ (800621c <TIM_OC1_SetConfig+0x12c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_OC1_SetConfig+0xd2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a18      	ldr	r2, [pc, #96]	@ (8006220 <TIM_OC1_SetConfig+0x130>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d111      	bne.n	80061e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	621a      	str	r2, [r3, #32]
}
 8006200:	bf00      	nop
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40012c00 	.word	0x40012c00
 8006210:	40013400 	.word	0x40013400
 8006214:	40014000 	.word	0x40014000
 8006218:	40014400 	.word	0x40014400
 800621c:	40014800 	.word	0x40014800
 8006220:	40015000 	.word	0x40015000

08006224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	f023 0210 	bic.w	r2, r3, #16
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800625e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f023 0320 	bic.w	r3, r3, #32
 8006272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a2c      	ldr	r2, [pc, #176]	@ (8006334 <TIM_OC2_SetConfig+0x110>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d007      	beq.n	8006298 <TIM_OC2_SetConfig+0x74>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a2b      	ldr	r2, [pc, #172]	@ (8006338 <TIM_OC2_SetConfig+0x114>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <TIM_OC2_SetConfig+0x74>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a2a      	ldr	r2, [pc, #168]	@ (800633c <TIM_OC2_SetConfig+0x118>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d10d      	bne.n	80062b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800629e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006334 <TIM_OC2_SetConfig+0x110>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d013      	beq.n	80062e4 <TIM_OC2_SetConfig+0xc0>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a1e      	ldr	r2, [pc, #120]	@ (8006338 <TIM_OC2_SetConfig+0x114>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00f      	beq.n	80062e4 <TIM_OC2_SetConfig+0xc0>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006340 <TIM_OC2_SetConfig+0x11c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00b      	beq.n	80062e4 <TIM_OC2_SetConfig+0xc0>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006344 <TIM_OC2_SetConfig+0x120>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d007      	beq.n	80062e4 <TIM_OC2_SetConfig+0xc0>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006348 <TIM_OC2_SetConfig+0x124>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_OC2_SetConfig+0xc0>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a17      	ldr	r2, [pc, #92]	@ (800633c <TIM_OC2_SetConfig+0x118>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d113      	bne.n	800630c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	621a      	str	r2, [r3, #32]
}
 8006326:	bf00      	nop
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	40012c00 	.word	0x40012c00
 8006338:	40013400 	.word	0x40013400
 800633c:	40015000 	.word	0x40015000
 8006340:	40014000 	.word	0x40014000
 8006344:	40014400 	.word	0x40014400
 8006348:	40014800 	.word	0x40014800

0800634c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800637a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800637e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006458 <TIM_OC3_SetConfig+0x10c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d007      	beq.n	80063be <TIM_OC3_SetConfig+0x72>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a2a      	ldr	r2, [pc, #168]	@ (800645c <TIM_OC3_SetConfig+0x110>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_OC3_SetConfig+0x72>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a29      	ldr	r2, [pc, #164]	@ (8006460 <TIM_OC3_SetConfig+0x114>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d10d      	bne.n	80063da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006458 <TIM_OC3_SetConfig+0x10c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d013      	beq.n	800640a <TIM_OC3_SetConfig+0xbe>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1d      	ldr	r2, [pc, #116]	@ (800645c <TIM_OC3_SetConfig+0x110>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00f      	beq.n	800640a <TIM_OC3_SetConfig+0xbe>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006464 <TIM_OC3_SetConfig+0x118>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00b      	beq.n	800640a <TIM_OC3_SetConfig+0xbe>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006468 <TIM_OC3_SetConfig+0x11c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d007      	beq.n	800640a <TIM_OC3_SetConfig+0xbe>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a1b      	ldr	r2, [pc, #108]	@ (800646c <TIM_OC3_SetConfig+0x120>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d003      	beq.n	800640a <TIM_OC3_SetConfig+0xbe>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a16      	ldr	r2, [pc, #88]	@ (8006460 <TIM_OC3_SetConfig+0x114>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d113      	bne.n	8006432 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	011b      	lsls	r3, r3, #4
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	621a      	str	r2, [r3, #32]
}
 800644c:	bf00      	nop
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40013400 	.word	0x40013400
 8006460:	40015000 	.word	0x40015000
 8006464:	40014000 	.word	0x40014000
 8006468:	40014400 	.word	0x40014400
 800646c:	40014800 	.word	0x40014800

08006470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800649e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	031b      	lsls	r3, r3, #12
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006580 <TIM_OC4_SetConfig+0x110>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d007      	beq.n	80064e4 <TIM_OC4_SetConfig+0x74>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a2b      	ldr	r2, [pc, #172]	@ (8006584 <TIM_OC4_SetConfig+0x114>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d003      	beq.n	80064e4 <TIM_OC4_SetConfig+0x74>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a2a      	ldr	r2, [pc, #168]	@ (8006588 <TIM_OC4_SetConfig+0x118>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d10d      	bne.n	8006500 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	031b      	lsls	r3, r3, #12
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a1f      	ldr	r2, [pc, #124]	@ (8006580 <TIM_OC4_SetConfig+0x110>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d013      	beq.n	8006530 <TIM_OC4_SetConfig+0xc0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a1e      	ldr	r2, [pc, #120]	@ (8006584 <TIM_OC4_SetConfig+0x114>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00f      	beq.n	8006530 <TIM_OC4_SetConfig+0xc0>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a1e      	ldr	r2, [pc, #120]	@ (800658c <TIM_OC4_SetConfig+0x11c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00b      	beq.n	8006530 <TIM_OC4_SetConfig+0xc0>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a1d      	ldr	r2, [pc, #116]	@ (8006590 <TIM_OC4_SetConfig+0x120>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d007      	beq.n	8006530 <TIM_OC4_SetConfig+0xc0>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a1c      	ldr	r2, [pc, #112]	@ (8006594 <TIM_OC4_SetConfig+0x124>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_OC4_SetConfig+0xc0>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a17      	ldr	r2, [pc, #92]	@ (8006588 <TIM_OC4_SetConfig+0x118>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d113      	bne.n	8006558 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006536:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800653e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	019b      	lsls	r3, r3, #6
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	019b      	lsls	r3, r3, #6
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40012c00 	.word	0x40012c00
 8006584:	40013400 	.word	0x40013400
 8006588:	40015000 	.word	0x40015000
 800658c:	40014000 	.word	0x40014000
 8006590:	40014400 	.word	0x40014400
 8006594:	40014800 	.word	0x40014800

08006598 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80065dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a19      	ldr	r2, [pc, #100]	@ (8006654 <TIM_OC5_SetConfig+0xbc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d013      	beq.n	800661a <TIM_OC5_SetConfig+0x82>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a18      	ldr	r2, [pc, #96]	@ (8006658 <TIM_OC5_SetConfig+0xc0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00f      	beq.n	800661a <TIM_OC5_SetConfig+0x82>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a17      	ldr	r2, [pc, #92]	@ (800665c <TIM_OC5_SetConfig+0xc4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00b      	beq.n	800661a <TIM_OC5_SetConfig+0x82>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a16      	ldr	r2, [pc, #88]	@ (8006660 <TIM_OC5_SetConfig+0xc8>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d007      	beq.n	800661a <TIM_OC5_SetConfig+0x82>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a15      	ldr	r2, [pc, #84]	@ (8006664 <TIM_OC5_SetConfig+0xcc>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d003      	beq.n	800661a <TIM_OC5_SetConfig+0x82>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a14      	ldr	r2, [pc, #80]	@ (8006668 <TIM_OC5_SetConfig+0xd0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d109      	bne.n	800662e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006620:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	621a      	str	r2, [r3, #32]
}
 8006648:	bf00      	nop
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	40012c00 	.word	0x40012c00
 8006658:	40013400 	.word	0x40013400
 800665c:	40014000 	.word	0x40014000
 8006660:	40014400 	.word	0x40014400
 8006664:	40014800 	.word	0x40014800
 8006668:	40015000 	.word	0x40015000

0800666c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800669a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800669e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	051b      	lsls	r3, r3, #20
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4313      	orrs	r3, r2
 80066be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a1a      	ldr	r2, [pc, #104]	@ (800672c <TIM_OC6_SetConfig+0xc0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d013      	beq.n	80066f0 <TIM_OC6_SetConfig+0x84>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a19      	ldr	r2, [pc, #100]	@ (8006730 <TIM_OC6_SetConfig+0xc4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00f      	beq.n	80066f0 <TIM_OC6_SetConfig+0x84>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a18      	ldr	r2, [pc, #96]	@ (8006734 <TIM_OC6_SetConfig+0xc8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00b      	beq.n	80066f0 <TIM_OC6_SetConfig+0x84>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a17      	ldr	r2, [pc, #92]	@ (8006738 <TIM_OC6_SetConfig+0xcc>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d007      	beq.n	80066f0 <TIM_OC6_SetConfig+0x84>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a16      	ldr	r2, [pc, #88]	@ (800673c <TIM_OC6_SetConfig+0xd0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_OC6_SetConfig+0x84>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a15      	ldr	r2, [pc, #84]	@ (8006740 <TIM_OC6_SetConfig+0xd4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d109      	bne.n	8006704 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	029b      	lsls	r3, r3, #10
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	621a      	str	r2, [r3, #32]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40012c00 	.word	0x40012c00
 8006730:	40013400 	.word	0x40013400
 8006734:	40014000 	.word	0x40014000
 8006738:	40014400 	.word	0x40014400
 800673c:	40014800 	.word	0x40014800
 8006740:	40015000 	.word	0x40015000

08006744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	f023 0201 	bic.w	r2, r3, #1
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800676e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f023 030a 	bic.w	r3, r3, #10
 8006780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	621a      	str	r2, [r3, #32]
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b087      	sub	sp, #28
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f023 0210 	bic.w	r2, r3, #16
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	031b      	lsls	r3, r3, #12
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	f043 0307 	orr.w	r3, r3, #7
 8006828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	609a      	str	r2, [r3, #8]
}
 8006830:	bf00      	nop
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	021a      	lsls	r2, r3, #8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	431a      	orrs	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4313      	orrs	r3, r2
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	609a      	str	r2, [r3, #8]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f003 031f 	and.w	r3, r3, #31
 800688e:	2201      	movs	r2, #1
 8006890:	fa02 f303 	lsl.w	r3, r2, r3
 8006894:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a1a      	ldr	r2, [r3, #32]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	43db      	mvns	r3, r3
 800689e:	401a      	ands	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1a      	ldr	r2, [r3, #32]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f003 031f 	and.w	r3, r3, #31
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	fa01 f303 	lsl.w	r3, r1, r3
 80068b4:	431a      	orrs	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	621a      	str	r2, [r3, #32]
}
 80068ba:	bf00      	nop
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068dc:	2302      	movs	r3, #2
 80068de:	e074      	b.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a34      	ldr	r2, [pc, #208]	@ (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d009      	beq.n	800691e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a33      	ldr	r2, [pc, #204]	@ (80069dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d004      	beq.n	800691e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a31      	ldr	r2, [pc, #196]	@ (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d108      	bne.n	8006930 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006924:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800693a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a21      	ldr	r2, [pc, #132]	@ (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d022      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006960:	d01d      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1f      	ldr	r2, [pc, #124]	@ (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d018      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a1d      	ldr	r2, [pc, #116]	@ (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d013      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a1c      	ldr	r2, [pc, #112]	@ (80069ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d00e      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a15      	ldr	r2, [pc, #84]	@ (80069dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d009      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a18      	ldr	r2, [pc, #96]	@ (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d004      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a11      	ldr	r2, [pc, #68]	@ (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d10c      	bne.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	40012c00 	.word	0x40012c00
 80069dc:	40013400 	.word	0x40013400
 80069e0:	40015000 	.word	0x40015000
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40014000 	.word	0x40014000

080069f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e078      	b.n	8006b02 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	041b      	lsls	r3, r3, #16
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006b10 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b14 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a19      	ldr	r2, [pc, #100]	@ (8006b18 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d11c      	bne.n	8006af0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac0:	051b      	lsls	r3, r3, #20
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40013400 	.word	0x40013400
 8006b18:	40015000 	.word	0x40015000

08006b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e042      	b.n	8006c40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fa fb61 	bl	8001294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2224      	movs	r2, #36	@ 0x24
 8006bd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0201 	bic.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fef6 	bl	80079e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fbf7 	bl	80073ec <UART_SetConfig>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e01b      	b.n	8006c40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0201 	orr.w	r2, r2, #1
 8006c36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 ff75 	bl	8007b28 <UART_CheckIdleState>
 8006c3e:	4603      	mov	r3, r0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	@ 0x28
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	4613      	mov	r3, r2
 8006c56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d17b      	bne.n	8006d5a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <HAL_UART_Transmit+0x26>
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e074      	b.n	8006d5c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2221      	movs	r2, #33	@ 0x21
 8006c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c82:	f7fa fd99 	bl	80017b8 <HAL_GetTick>
 8006c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	88fa      	ldrh	r2, [r7, #6]
 8006c8c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	88fa      	ldrh	r2, [r7, #6]
 8006c94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca0:	d108      	bne.n	8006cb4 <HAL_UART_Transmit+0x6c>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d104      	bne.n	8006cb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	61bb      	str	r3, [r7, #24]
 8006cb2:	e003      	b.n	8006cbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cbc:	e030      	b.n	8006d20 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2180      	movs	r1, #128	@ 0x80
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 ffd7 	bl	8007c7c <UART_WaitOnFlagUntilTimeout>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e03d      	b.n	8006d5c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10b      	bne.n	8006cfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cf4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	3302      	adds	r3, #2
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	e007      	b.n	8006d0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	781a      	ldrb	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1c8      	bne.n	8006cbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2200      	movs	r2, #0
 8006d34:	2140      	movs	r1, #64	@ 0x40
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 ffa0 	bl	8007c7c <UART_WaitOnFlagUntilTimeout>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e006      	b.n	8006d5c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e000      	b.n	8006d5c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d5a:	2302      	movs	r3, #2
  }
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3720      	adds	r7, #32
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b0ba      	sub	sp, #232	@ 0xe8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006d8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006d92:	4013      	ands	r3, r2
 8006d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d11b      	bne.n	8006dd8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d015      	beq.n	8006dd8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d105      	bne.n	8006dc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d009      	beq.n	8006dd8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 82e3 	beq.w	8007394 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	4798      	blx	r3
      }
      return;
 8006dd6:	e2dd      	b.n	8007394 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006dd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8123 	beq.w	8007028 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006de2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006de6:	4b8d      	ldr	r3, [pc, #564]	@ (800701c <HAL_UART_IRQHandler+0x2b8>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006dee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006df2:	4b8b      	ldr	r3, [pc, #556]	@ (8007020 <HAL_UART_IRQHandler+0x2bc>)
 8006df4:	4013      	ands	r3, r2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 8116 	beq.w	8007028 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d011      	beq.n	8006e2c <HAL_UART_IRQHandler+0xc8>
 8006e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e22:	f043 0201 	orr.w	r2, r3, #1
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d011      	beq.n	8006e5c <HAL_UART_IRQHandler+0xf8>
 8006e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e52:	f043 0204 	orr.w	r2, r3, #4
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d011      	beq.n	8006e8c <HAL_UART_IRQHandler+0x128>
 8006e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2204      	movs	r2, #4
 8006e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e82:	f043 0202 	orr.w	r2, r3, #2
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e90:	f003 0308 	and.w	r3, r3, #8
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d017      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e9c:	f003 0320 	and.w	r3, r3, #32
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d105      	bne.n	8006eb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ea4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006ea8:	4b5c      	ldr	r3, [pc, #368]	@ (800701c <HAL_UART_IRQHandler+0x2b8>)
 8006eaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2208      	movs	r2, #8
 8006eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ebe:	f043 0208 	orr.w	r2, r3, #8
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ecc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d012      	beq.n	8006efa <HAL_UART_IRQHandler+0x196>
 8006ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00c      	beq.n	8006efa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ef0:	f043 0220 	orr.w	r2, r3, #32
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 8249 	beq.w	8007398 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d013      	beq.n	8006f3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d105      	bne.n	8006f2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d007      	beq.n	8006f3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f4e:	2b40      	cmp	r3, #64	@ 0x40
 8006f50:	d005      	beq.n	8006f5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d054      	beq.n	8007008 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fef9 	bl	8007d56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f6e:	2b40      	cmp	r3, #64	@ 0x40
 8006f70:	d146      	bne.n	8007000 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3308      	adds	r3, #8
 8006f78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1d9      	bne.n	8006f72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d017      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fce:	4a15      	ldr	r2, [pc, #84]	@ (8007024 <HAL_UART_IRQHandler+0x2c0>)
 8006fd0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fc fca7 	bl	800392c <HAL_DMA_Abort_IT>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d019      	beq.n	8007018 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff6:	e00f      	b.n	8007018 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f9e1 	bl	80073c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffe:	e00b      	b.n	8007018 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f9dd 	bl	80073c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007006:	e007      	b.n	8007018 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f9d9 	bl	80073c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007016:	e1bf      	b.n	8007398 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007018:	bf00      	nop
    return;
 800701a:	e1bd      	b.n	8007398 <HAL_UART_IRQHandler+0x634>
 800701c:	10000001 	.word	0x10000001
 8007020:	04000120 	.word	0x04000120
 8007024:	08007e23 	.word	0x08007e23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800702c:	2b01      	cmp	r3, #1
 800702e:	f040 8153 	bne.w	80072d8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007036:	f003 0310 	and.w	r3, r3, #16
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 814c 	beq.w	80072d8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007044:	f003 0310 	and.w	r3, r3, #16
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 8145 	beq.w	80072d8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2210      	movs	r2, #16
 8007054:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007060:	2b40      	cmp	r3, #64	@ 0x40
 8007062:	f040 80bb 	bne.w	80071dc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007074:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 818f 	beq.w	800739c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007084:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007088:	429a      	cmp	r2, r3
 800708a:	f080 8187 	bcs.w	800739c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007094:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f040 8087 	bne.w	80071ba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80070c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	461a      	mov	r2, r3
 80070d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80070e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1da      	bne.n	80070ac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3308      	adds	r3, #8
 80070fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007106:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007108:	f023 0301 	bic.w	r3, r3, #1
 800710c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3308      	adds	r3, #8
 8007116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800711a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800711e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007122:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800712c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e1      	bne.n	80070f6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3308      	adds	r3, #8
 8007152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007156:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007158:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800715c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e3      	bne.n	8007132 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007188:	f023 0310 	bic.w	r3, r3, #16
 800718c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800719a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800719c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1e4      	bne.n	8007178 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fc fb60 	bl	800387a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2202      	movs	r2, #2
 80071be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f8fd 	bl	80073d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071da:	e0df      	b.n	800739c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 80d1 	beq.w	80073a0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80071fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 80cc 	beq.w	80073a0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800721c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800722a:	647b      	str	r3, [r7, #68]	@ 0x44
 800722c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e4      	bne.n	8007208 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3308      	adds	r3, #8
 8007244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	623b      	str	r3, [r7, #32]
   return(result);
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007266:	633a      	str	r2, [r7, #48]	@ 0x30
 8007268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800726c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800726e:	e841 2300 	strex	r3, r2, [r1]
 8007272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e1      	bne.n	800723e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	60fb      	str	r3, [r7, #12]
   return(result);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0310 	bic.w	r3, r3, #16
 80072a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	69b9      	ldr	r1, [r7, #24]
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	617b      	str	r3, [r7, #20]
   return(result);
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e4      	bne.n	800728e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f87f 	bl	80073d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072d6:	e063      	b.n	80073a0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00e      	beq.n	8007302 <HAL_UART_IRQHandler+0x59e>
 80072e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d008      	beq.n	8007302 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80072f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fdd2 	bl	8007ea4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007300:	e051      	b.n	80073a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800730a:	2b00      	cmp	r3, #0
 800730c:	d014      	beq.n	8007338 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800730e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007316:	2b00      	cmp	r3, #0
 8007318:	d105      	bne.n	8007326 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800731a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800731e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d008      	beq.n	8007338 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800732a:	2b00      	cmp	r3, #0
 800732c:	d03a      	beq.n	80073a4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
    }
    return;
 8007336:	e035      	b.n	80073a4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d009      	beq.n	8007358 <HAL_UART_IRQHandler+0x5f4>
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fd7c 	bl	8007e4e <UART_EndTransmit_IT>
    return;
 8007356:	e026      	b.n	80073a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800735c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d009      	beq.n	8007378 <HAL_UART_IRQHandler+0x614>
 8007364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007368:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fdab 	bl	8007ecc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007376:	e016      	b.n	80073a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800737c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d010      	beq.n	80073a6 <HAL_UART_IRQHandler+0x642>
 8007384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007388:	2b00      	cmp	r3, #0
 800738a:	da0c      	bge.n	80073a6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fd93 	bl	8007eb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007392:	e008      	b.n	80073a6 <HAL_UART_IRQHandler+0x642>
      return;
 8007394:	bf00      	nop
 8007396:	e006      	b.n	80073a6 <HAL_UART_IRQHandler+0x642>
    return;
 8007398:	bf00      	nop
 800739a:	e004      	b.n	80073a6 <HAL_UART_IRQHandler+0x642>
      return;
 800739c:	bf00      	nop
 800739e:	e002      	b.n	80073a6 <HAL_UART_IRQHandler+0x642>
      return;
 80073a0:	bf00      	nop
 80073a2:	e000      	b.n	80073a6 <HAL_UART_IRQHandler+0x642>
    return;
 80073a4:	bf00      	nop
  }
}
 80073a6:	37e8      	adds	r7, #232	@ 0xe8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073f0:	b08c      	sub	sp, #48	@ 0x30
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	431a      	orrs	r2, r3
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	431a      	orrs	r2, r3
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	4313      	orrs	r3, r2
 8007412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4baa      	ldr	r3, [pc, #680]	@ (80076c4 <UART_SetConfig+0x2d8>)
 800741c:	4013      	ands	r3, r2
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	6812      	ldr	r2, [r2, #0]
 8007422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007424:	430b      	orrs	r3, r1
 8007426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a9f      	ldr	r2, [pc, #636]	@ (80076c8 <UART_SetConfig+0x2dc>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d004      	beq.n	8007458 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007454:	4313      	orrs	r3, r2
 8007456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007462:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800746c:	430b      	orrs	r3, r1
 800746e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	f023 010f 	bic.w	r1, r3, #15
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	430a      	orrs	r2, r1
 8007484:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a90      	ldr	r2, [pc, #576]	@ (80076cc <UART_SetConfig+0x2e0>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d125      	bne.n	80074dc <UART_SetConfig+0xf0>
 8007490:	4b8f      	ldr	r3, [pc, #572]	@ (80076d0 <UART_SetConfig+0x2e4>)
 8007492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b03      	cmp	r3, #3
 800749c:	d81a      	bhi.n	80074d4 <UART_SetConfig+0xe8>
 800749e:	a201      	add	r2, pc, #4	@ (adr r2, 80074a4 <UART_SetConfig+0xb8>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074b5 	.word	0x080074b5
 80074a8:	080074c5 	.word	0x080074c5
 80074ac:	080074bd 	.word	0x080074bd
 80074b0:	080074cd 	.word	0x080074cd
 80074b4:	2301      	movs	r3, #1
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ba:	e116      	b.n	80076ea <UART_SetConfig+0x2fe>
 80074bc:	2302      	movs	r3, #2
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c2:	e112      	b.n	80076ea <UART_SetConfig+0x2fe>
 80074c4:	2304      	movs	r3, #4
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ca:	e10e      	b.n	80076ea <UART_SetConfig+0x2fe>
 80074cc:	2308      	movs	r3, #8
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d2:	e10a      	b.n	80076ea <UART_SetConfig+0x2fe>
 80074d4:	2310      	movs	r3, #16
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074da:	e106      	b.n	80076ea <UART_SetConfig+0x2fe>
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a7c      	ldr	r2, [pc, #496]	@ (80076d4 <UART_SetConfig+0x2e8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d138      	bne.n	8007558 <UART_SetConfig+0x16c>
 80074e6:	4b7a      	ldr	r3, [pc, #488]	@ (80076d0 <UART_SetConfig+0x2e4>)
 80074e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ec:	f003 030c 	and.w	r3, r3, #12
 80074f0:	2b0c      	cmp	r3, #12
 80074f2:	d82d      	bhi.n	8007550 <UART_SetConfig+0x164>
 80074f4:	a201      	add	r2, pc, #4	@ (adr r2, 80074fc <UART_SetConfig+0x110>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	08007531 	.word	0x08007531
 8007500:	08007551 	.word	0x08007551
 8007504:	08007551 	.word	0x08007551
 8007508:	08007551 	.word	0x08007551
 800750c:	08007541 	.word	0x08007541
 8007510:	08007551 	.word	0x08007551
 8007514:	08007551 	.word	0x08007551
 8007518:	08007551 	.word	0x08007551
 800751c:	08007539 	.word	0x08007539
 8007520:	08007551 	.word	0x08007551
 8007524:	08007551 	.word	0x08007551
 8007528:	08007551 	.word	0x08007551
 800752c:	08007549 	.word	0x08007549
 8007530:	2300      	movs	r3, #0
 8007532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007536:	e0d8      	b.n	80076ea <UART_SetConfig+0x2fe>
 8007538:	2302      	movs	r3, #2
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753e:	e0d4      	b.n	80076ea <UART_SetConfig+0x2fe>
 8007540:	2304      	movs	r3, #4
 8007542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007546:	e0d0      	b.n	80076ea <UART_SetConfig+0x2fe>
 8007548:	2308      	movs	r3, #8
 800754a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754e:	e0cc      	b.n	80076ea <UART_SetConfig+0x2fe>
 8007550:	2310      	movs	r3, #16
 8007552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007556:	e0c8      	b.n	80076ea <UART_SetConfig+0x2fe>
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a5e      	ldr	r2, [pc, #376]	@ (80076d8 <UART_SetConfig+0x2ec>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d125      	bne.n	80075ae <UART_SetConfig+0x1c2>
 8007562:	4b5b      	ldr	r3, [pc, #364]	@ (80076d0 <UART_SetConfig+0x2e4>)
 8007564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007568:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800756c:	2b30      	cmp	r3, #48	@ 0x30
 800756e:	d016      	beq.n	800759e <UART_SetConfig+0x1b2>
 8007570:	2b30      	cmp	r3, #48	@ 0x30
 8007572:	d818      	bhi.n	80075a6 <UART_SetConfig+0x1ba>
 8007574:	2b20      	cmp	r3, #32
 8007576:	d00a      	beq.n	800758e <UART_SetConfig+0x1a2>
 8007578:	2b20      	cmp	r3, #32
 800757a:	d814      	bhi.n	80075a6 <UART_SetConfig+0x1ba>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <UART_SetConfig+0x19a>
 8007580:	2b10      	cmp	r3, #16
 8007582:	d008      	beq.n	8007596 <UART_SetConfig+0x1aa>
 8007584:	e00f      	b.n	80075a6 <UART_SetConfig+0x1ba>
 8007586:	2300      	movs	r3, #0
 8007588:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758c:	e0ad      	b.n	80076ea <UART_SetConfig+0x2fe>
 800758e:	2302      	movs	r3, #2
 8007590:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007594:	e0a9      	b.n	80076ea <UART_SetConfig+0x2fe>
 8007596:	2304      	movs	r3, #4
 8007598:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800759c:	e0a5      	b.n	80076ea <UART_SetConfig+0x2fe>
 800759e:	2308      	movs	r3, #8
 80075a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075a4:	e0a1      	b.n	80076ea <UART_SetConfig+0x2fe>
 80075a6:	2310      	movs	r3, #16
 80075a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ac:	e09d      	b.n	80076ea <UART_SetConfig+0x2fe>
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a4a      	ldr	r2, [pc, #296]	@ (80076dc <UART_SetConfig+0x2f0>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d125      	bne.n	8007604 <UART_SetConfig+0x218>
 80075b8:	4b45      	ldr	r3, [pc, #276]	@ (80076d0 <UART_SetConfig+0x2e4>)
 80075ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80075c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80075c4:	d016      	beq.n	80075f4 <UART_SetConfig+0x208>
 80075c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80075c8:	d818      	bhi.n	80075fc <UART_SetConfig+0x210>
 80075ca:	2b80      	cmp	r3, #128	@ 0x80
 80075cc:	d00a      	beq.n	80075e4 <UART_SetConfig+0x1f8>
 80075ce:	2b80      	cmp	r3, #128	@ 0x80
 80075d0:	d814      	bhi.n	80075fc <UART_SetConfig+0x210>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <UART_SetConfig+0x1f0>
 80075d6:	2b40      	cmp	r3, #64	@ 0x40
 80075d8:	d008      	beq.n	80075ec <UART_SetConfig+0x200>
 80075da:	e00f      	b.n	80075fc <UART_SetConfig+0x210>
 80075dc:	2300      	movs	r3, #0
 80075de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e2:	e082      	b.n	80076ea <UART_SetConfig+0x2fe>
 80075e4:	2302      	movs	r3, #2
 80075e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ea:	e07e      	b.n	80076ea <UART_SetConfig+0x2fe>
 80075ec:	2304      	movs	r3, #4
 80075ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f2:	e07a      	b.n	80076ea <UART_SetConfig+0x2fe>
 80075f4:	2308      	movs	r3, #8
 80075f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075fa:	e076      	b.n	80076ea <UART_SetConfig+0x2fe>
 80075fc:	2310      	movs	r3, #16
 80075fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007602:	e072      	b.n	80076ea <UART_SetConfig+0x2fe>
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a35      	ldr	r2, [pc, #212]	@ (80076e0 <UART_SetConfig+0x2f4>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d12a      	bne.n	8007664 <UART_SetConfig+0x278>
 800760e:	4b30      	ldr	r3, [pc, #192]	@ (80076d0 <UART_SetConfig+0x2e4>)
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007614:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800761c:	d01a      	beq.n	8007654 <UART_SetConfig+0x268>
 800761e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007622:	d81b      	bhi.n	800765c <UART_SetConfig+0x270>
 8007624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007628:	d00c      	beq.n	8007644 <UART_SetConfig+0x258>
 800762a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800762e:	d815      	bhi.n	800765c <UART_SetConfig+0x270>
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <UART_SetConfig+0x250>
 8007634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007638:	d008      	beq.n	800764c <UART_SetConfig+0x260>
 800763a:	e00f      	b.n	800765c <UART_SetConfig+0x270>
 800763c:	2300      	movs	r3, #0
 800763e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007642:	e052      	b.n	80076ea <UART_SetConfig+0x2fe>
 8007644:	2302      	movs	r3, #2
 8007646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764a:	e04e      	b.n	80076ea <UART_SetConfig+0x2fe>
 800764c:	2304      	movs	r3, #4
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007652:	e04a      	b.n	80076ea <UART_SetConfig+0x2fe>
 8007654:	2308      	movs	r3, #8
 8007656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765a:	e046      	b.n	80076ea <UART_SetConfig+0x2fe>
 800765c:	2310      	movs	r3, #16
 800765e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007662:	e042      	b.n	80076ea <UART_SetConfig+0x2fe>
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a17      	ldr	r2, [pc, #92]	@ (80076c8 <UART_SetConfig+0x2dc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d13a      	bne.n	80076e4 <UART_SetConfig+0x2f8>
 800766e:	4b18      	ldr	r3, [pc, #96]	@ (80076d0 <UART_SetConfig+0x2e4>)
 8007670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007674:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007678:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800767c:	d01a      	beq.n	80076b4 <UART_SetConfig+0x2c8>
 800767e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007682:	d81b      	bhi.n	80076bc <UART_SetConfig+0x2d0>
 8007684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007688:	d00c      	beq.n	80076a4 <UART_SetConfig+0x2b8>
 800768a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800768e:	d815      	bhi.n	80076bc <UART_SetConfig+0x2d0>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <UART_SetConfig+0x2b0>
 8007694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007698:	d008      	beq.n	80076ac <UART_SetConfig+0x2c0>
 800769a:	e00f      	b.n	80076bc <UART_SetConfig+0x2d0>
 800769c:	2300      	movs	r3, #0
 800769e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076a2:	e022      	b.n	80076ea <UART_SetConfig+0x2fe>
 80076a4:	2302      	movs	r3, #2
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076aa:	e01e      	b.n	80076ea <UART_SetConfig+0x2fe>
 80076ac:	2304      	movs	r3, #4
 80076ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b2:	e01a      	b.n	80076ea <UART_SetConfig+0x2fe>
 80076b4:	2308      	movs	r3, #8
 80076b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ba:	e016      	b.n	80076ea <UART_SetConfig+0x2fe>
 80076bc:	2310      	movs	r3, #16
 80076be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076c2:	e012      	b.n	80076ea <UART_SetConfig+0x2fe>
 80076c4:	cfff69f3 	.word	0xcfff69f3
 80076c8:	40008000 	.word	0x40008000
 80076cc:	40013800 	.word	0x40013800
 80076d0:	40021000 	.word	0x40021000
 80076d4:	40004400 	.word	0x40004400
 80076d8:	40004800 	.word	0x40004800
 80076dc:	40004c00 	.word	0x40004c00
 80076e0:	40005000 	.word	0x40005000
 80076e4:	2310      	movs	r3, #16
 80076e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4aae      	ldr	r2, [pc, #696]	@ (80079a8 <UART_SetConfig+0x5bc>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	f040 8097 	bne.w	8007824 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d823      	bhi.n	8007746 <UART_SetConfig+0x35a>
 80076fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007704 <UART_SetConfig+0x318>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007729 	.word	0x08007729
 8007708:	08007747 	.word	0x08007747
 800770c:	08007731 	.word	0x08007731
 8007710:	08007747 	.word	0x08007747
 8007714:	08007737 	.word	0x08007737
 8007718:	08007747 	.word	0x08007747
 800771c:	08007747 	.word	0x08007747
 8007720:	08007747 	.word	0x08007747
 8007724:	0800773f 	.word	0x0800773f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007728:	f7fd f9e4 	bl	8004af4 <HAL_RCC_GetPCLK1Freq>
 800772c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800772e:	e010      	b.n	8007752 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007730:	4b9e      	ldr	r3, [pc, #632]	@ (80079ac <UART_SetConfig+0x5c0>)
 8007732:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007734:	e00d      	b.n	8007752 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007736:	f7fd f96f 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800773a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800773c:	e009      	b.n	8007752 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007742:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007744:	e005      	b.n	8007752 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007750:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8130 	beq.w	80079ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775e:	4a94      	ldr	r2, [pc, #592]	@ (80079b0 <UART_SetConfig+0x5c4>)
 8007760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007764:	461a      	mov	r2, r3
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	fbb3 f3f2 	udiv	r3, r3, r2
 800776c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	4613      	mov	r3, r2
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	4413      	add	r3, r2
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	429a      	cmp	r2, r3
 800777c:	d305      	bcc.n	800778a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	429a      	cmp	r2, r3
 8007788:	d903      	bls.n	8007792 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007790:	e113      	b.n	80079ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007794:	2200      	movs	r2, #0
 8007796:	60bb      	str	r3, [r7, #8]
 8007798:	60fa      	str	r2, [r7, #12]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779e:	4a84      	ldr	r2, [pc, #528]	@ (80079b0 <UART_SetConfig+0x5c4>)
 80077a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2200      	movs	r2, #0
 80077a8:	603b      	str	r3, [r7, #0]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077b4:	f7f8 fd30 	bl	8000218 <__aeabi_uldivmod>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4610      	mov	r0, r2
 80077be:	4619      	mov	r1, r3
 80077c0:	f04f 0200 	mov.w	r2, #0
 80077c4:	f04f 0300 	mov.w	r3, #0
 80077c8:	020b      	lsls	r3, r1, #8
 80077ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077ce:	0202      	lsls	r2, r0, #8
 80077d0:	6979      	ldr	r1, [r7, #20]
 80077d2:	6849      	ldr	r1, [r1, #4]
 80077d4:	0849      	lsrs	r1, r1, #1
 80077d6:	2000      	movs	r0, #0
 80077d8:	460c      	mov	r4, r1
 80077da:	4605      	mov	r5, r0
 80077dc:	eb12 0804 	adds.w	r8, r2, r4
 80077e0:	eb43 0905 	adc.w	r9, r3, r5
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	469a      	mov	sl, r3
 80077ec:	4693      	mov	fp, r2
 80077ee:	4652      	mov	r2, sl
 80077f0:	465b      	mov	r3, fp
 80077f2:	4640      	mov	r0, r8
 80077f4:	4649      	mov	r1, r9
 80077f6:	f7f8 fd0f 	bl	8000218 <__aeabi_uldivmod>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4613      	mov	r3, r2
 8007800:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007808:	d308      	bcc.n	800781c <UART_SetConfig+0x430>
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007810:	d204      	bcs.n	800781c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6a3a      	ldr	r2, [r7, #32]
 8007818:	60da      	str	r2, [r3, #12]
 800781a:	e0ce      	b.n	80079ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007822:	e0ca      	b.n	80079ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800782c:	d166      	bne.n	80078fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800782e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007832:	2b08      	cmp	r3, #8
 8007834:	d827      	bhi.n	8007886 <UART_SetConfig+0x49a>
 8007836:	a201      	add	r2, pc, #4	@ (adr r2, 800783c <UART_SetConfig+0x450>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007861 	.word	0x08007861
 8007840:	08007869 	.word	0x08007869
 8007844:	08007871 	.word	0x08007871
 8007848:	08007887 	.word	0x08007887
 800784c:	08007877 	.word	0x08007877
 8007850:	08007887 	.word	0x08007887
 8007854:	08007887 	.word	0x08007887
 8007858:	08007887 	.word	0x08007887
 800785c:	0800787f 	.word	0x0800787f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007860:	f7fd f948 	bl	8004af4 <HAL_RCC_GetPCLK1Freq>
 8007864:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007866:	e014      	b.n	8007892 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007868:	f7fd f95a 	bl	8004b20 <HAL_RCC_GetPCLK2Freq>
 800786c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800786e:	e010      	b.n	8007892 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007870:	4b4e      	ldr	r3, [pc, #312]	@ (80079ac <UART_SetConfig+0x5c0>)
 8007872:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007874:	e00d      	b.n	8007892 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007876:	f7fd f8cf 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800787a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800787c:	e009      	b.n	8007892 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800787e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007884:	e005      	b.n	8007892 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8090 	beq.w	80079ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789e:	4a44      	ldr	r2, [pc, #272]	@ (80079b0 <UART_SetConfig+0x5c4>)
 80078a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078a4:	461a      	mov	r2, r3
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80078ac:	005a      	lsls	r2, r3, #1
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	085b      	lsrs	r3, r3, #1
 80078b4:	441a      	add	r2, r3
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80078be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	2b0f      	cmp	r3, #15
 80078c4:	d916      	bls.n	80078f4 <UART_SetConfig+0x508>
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078cc:	d212      	bcs.n	80078f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	f023 030f 	bic.w	r3, r3, #15
 80078d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	085b      	lsrs	r3, r3, #1
 80078dc:	b29b      	uxth	r3, r3
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	8bfb      	ldrh	r3, [r7, #30]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	8bfa      	ldrh	r2, [r7, #30]
 80078f0:	60da      	str	r2, [r3, #12]
 80078f2:	e062      	b.n	80079ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078fa:	e05e      	b.n	80079ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007900:	2b08      	cmp	r3, #8
 8007902:	d828      	bhi.n	8007956 <UART_SetConfig+0x56a>
 8007904:	a201      	add	r2, pc, #4	@ (adr r2, 800790c <UART_SetConfig+0x520>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	08007931 	.word	0x08007931
 8007910:	08007939 	.word	0x08007939
 8007914:	08007941 	.word	0x08007941
 8007918:	08007957 	.word	0x08007957
 800791c:	08007947 	.word	0x08007947
 8007920:	08007957 	.word	0x08007957
 8007924:	08007957 	.word	0x08007957
 8007928:	08007957 	.word	0x08007957
 800792c:	0800794f 	.word	0x0800794f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007930:	f7fd f8e0 	bl	8004af4 <HAL_RCC_GetPCLK1Freq>
 8007934:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007936:	e014      	b.n	8007962 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007938:	f7fd f8f2 	bl	8004b20 <HAL_RCC_GetPCLK2Freq>
 800793c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800793e:	e010      	b.n	8007962 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007940:	4b1a      	ldr	r3, [pc, #104]	@ (80079ac <UART_SetConfig+0x5c0>)
 8007942:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007944:	e00d      	b.n	8007962 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007946:	f7fd f867 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800794a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800794c:	e009      	b.n	8007962 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800794e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007954:	e005      	b.n	8007962 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007960:	bf00      	nop
    }

    if (pclk != 0U)
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	2b00      	cmp	r3, #0
 8007966:	d028      	beq.n	80079ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796c:	4a10      	ldr	r2, [pc, #64]	@ (80079b0 <UART_SetConfig+0x5c4>)
 800796e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007972:	461a      	mov	r2, r3
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	fbb3 f2f2 	udiv	r2, r3, r2
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	085b      	lsrs	r3, r3, #1
 8007980:	441a      	add	r2, r3
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	fbb2 f3f3 	udiv	r3, r2, r3
 800798a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	2b0f      	cmp	r3, #15
 8007990:	d910      	bls.n	80079b4 <UART_SetConfig+0x5c8>
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007998:	d20c      	bcs.n	80079b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	b29a      	uxth	r2, r3
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60da      	str	r2, [r3, #12]
 80079a4:	e009      	b.n	80079ba <UART_SetConfig+0x5ce>
 80079a6:	bf00      	nop
 80079a8:	40008000 	.word	0x40008000
 80079ac:	00f42400 	.word	0x00f42400
 80079b0:	080081dc 	.word	0x080081dc
      }
      else
      {
        ret = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2201      	movs	r2, #1
 80079be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2200      	movs	r2, #0
 80079ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2200      	movs	r2, #0
 80079d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80079d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3730      	adds	r7, #48	@ 0x30
 80079de:	46bd      	mov	sp, r7
 80079e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080079e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f0:	f003 0308 	and.w	r3, r3, #8
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00a      	beq.n	8007a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01a      	beq.n	8007afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ae2:	d10a      	bne.n	8007afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	605a      	str	r2, [r3, #4]
  }
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b098      	sub	sp, #96	@ 0x60
 8007b2c:	af02      	add	r7, sp, #8
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b38:	f7f9 fe3e 	bl	80017b8 <HAL_GetTick>
 8007b3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	d12f      	bne.n	8007bac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b54:	2200      	movs	r2, #0
 8007b56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f88e 	bl	8007c7c <UART_WaitOnFlagUntilTimeout>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d022      	beq.n	8007bac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e6      	bne.n	8007b66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e063      	b.n	8007c74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0304 	and.w	r3, r3, #4
 8007bb6:	2b04      	cmp	r3, #4
 8007bb8:	d149      	bne.n	8007c4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f857 	bl	8007c7c <UART_WaitOnFlagUntilTimeout>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d03c      	beq.n	8007c4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	623b      	str	r3, [r7, #32]
   return(result);
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e6      	bne.n	8007bd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f023 0301 	bic.w	r3, r3, #1
 8007c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3308      	adds	r3, #8
 8007c24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c26:	61fa      	str	r2, [r7, #28]
 8007c28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	69b9      	ldr	r1, [r7, #24]
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	617b      	str	r3, [r7, #20]
   return(result);
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e5      	bne.n	8007c06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e012      	b.n	8007c74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3758      	adds	r7, #88	@ 0x58
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	603b      	str	r3, [r7, #0]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c8c:	e04f      	b.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c94:	d04b      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c96:	f7f9 fd8f 	bl	80017b8 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d302      	bcc.n	8007cac <UART_WaitOnFlagUntilTimeout+0x30>
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e04e      	b.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0304 	and.w	r3, r3, #4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d037      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2b80      	cmp	r3, #128	@ 0x80
 8007cc2:	d034      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b40      	cmp	r3, #64	@ 0x40
 8007cc8:	d031      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d110      	bne.n	8007cfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2208      	movs	r2, #8
 8007cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 f838 	bl	8007d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2208      	movs	r2, #8
 8007cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e029      	b.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d08:	d111      	bne.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f81e 	bl	8007d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e00f      	b.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69da      	ldr	r2, [r3, #28]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	4013      	ands	r3, r2
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	bf0c      	ite	eq
 8007d3e:	2301      	moveq	r3, #1
 8007d40:	2300      	movne	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d0a0      	beq.n	8007c8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b095      	sub	sp, #84	@ 0x54
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e6      	bne.n	8007d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007da6:	f023 0301 	bic.w	r3, r3, #1
 8007daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3308      	adds	r3, #8
 8007db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007db4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e3      	bne.n	8007d90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d118      	bne.n	8007e02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f023 0310 	bic.w	r3, r3, #16
 8007de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dee:	61bb      	str	r3, [r7, #24]
 8007df0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6979      	ldr	r1, [r7, #20]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e6      	bne.n	8007dd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007e16:	bf00      	nop
 8007e18:	3754      	adds	r7, #84	@ 0x54
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7ff fabd 	bl	80073c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b088      	sub	sp, #32
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e6a:	61fb      	str	r3, [r7, #28]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	461a      	mov	r2, r3
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	61bb      	str	r3, [r7, #24]
 8007e76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e78:	6979      	ldr	r1, [r7, #20]
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	e841 2300 	strex	r3, r2, [r1]
 8007e80:	613b      	str	r3, [r7, #16]
   return(result);
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1e6      	bne.n	8007e56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff fa88 	bl	80073ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e9c:	bf00      	nop
 8007e9e:	3720      	adds	r7, #32
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d101      	bne.n	8007ef6 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e027      	b.n	8007f46 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2224      	movs	r2, #36	@ 0x24
 8007f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0201 	bic.w	r2, r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d101      	bne.n	8007f6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f66:	2302      	movs	r3, #2
 8007f68:	e02d      	b.n	8007fc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2224      	movs	r2, #36	@ 0x24
 8007f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f022 0201 	bic.w	r2, r2, #1
 8007f90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f850 	bl	800804c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d101      	bne.n	8007fe6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	e02d      	b.n	8008042 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2224      	movs	r2, #36	@ 0x24
 8007ff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0201 	bic.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f812 	bl	800804c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008058:	2b00      	cmp	r3, #0
 800805a:	d108      	bne.n	800806e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800806c:	e031      	b.n	80080d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800806e:	2308      	movs	r3, #8
 8008070:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008072:	2308      	movs	r3, #8
 8008074:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	0e5b      	lsrs	r3, r3, #25
 800807e:	b2db      	uxtb	r3, r3
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	0f5b      	lsrs	r3, r3, #29
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f003 0307 	and.w	r3, r3, #7
 8008094:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	7b3a      	ldrb	r2, [r7, #12]
 800809a:	4911      	ldr	r1, [pc, #68]	@ (80080e0 <UARTEx_SetNbDataToProcess+0x94>)
 800809c:	5c8a      	ldrb	r2, [r1, r2]
 800809e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080a2:	7b3a      	ldrb	r2, [r7, #12]
 80080a4:	490f      	ldr	r1, [pc, #60]	@ (80080e4 <UARTEx_SetNbDataToProcess+0x98>)
 80080a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	7b7a      	ldrb	r2, [r7, #13]
 80080b8:	4909      	ldr	r1, [pc, #36]	@ (80080e0 <UARTEx_SetNbDataToProcess+0x94>)
 80080ba:	5c8a      	ldrb	r2, [r1, r2]
 80080bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080c0:	7b7a      	ldrb	r2, [r7, #13]
 80080c2:	4908      	ldr	r1, [pc, #32]	@ (80080e4 <UARTEx_SetNbDataToProcess+0x98>)
 80080c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080d2:	bf00      	nop
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	080081f4 	.word	0x080081f4
 80080e4:	080081fc 	.word	0x080081fc

080080e8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	ed93 7a06 	vldr	s14, [r3, #24]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80080fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	edd3 7a08 	vldr	s15, [r3, #32]
 8008108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	edd3 7a06 	vldr	s15, [r3, #24]
 8008118:	eeb1 7a67 	vneg.f32	s14, s15
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008122:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a1a      	ldr	r2, [r3, #32]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d006      	beq.n	800814c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	330c      	adds	r3, #12
 8008142:	220c      	movs	r2, #12
 8008144:	2100      	movs	r1, #0
 8008146:	4618      	mov	r0, r3
 8008148:	f000 f804 	bl	8008154 <memset>
  }

}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <memset>:
 8008154:	4402      	add	r2, r0
 8008156:	4603      	mov	r3, r0
 8008158:	4293      	cmp	r3, r2
 800815a:	d100      	bne.n	800815e <memset+0xa>
 800815c:	4770      	bx	lr
 800815e:	f803 1b01 	strb.w	r1, [r3], #1
 8008162:	e7f9      	b.n	8008158 <memset+0x4>

08008164 <__libc_init_array>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	4d0d      	ldr	r5, [pc, #52]	@ (800819c <__libc_init_array+0x38>)
 8008168:	4c0d      	ldr	r4, [pc, #52]	@ (80081a0 <__libc_init_array+0x3c>)
 800816a:	1b64      	subs	r4, r4, r5
 800816c:	10a4      	asrs	r4, r4, #2
 800816e:	2600      	movs	r6, #0
 8008170:	42a6      	cmp	r6, r4
 8008172:	d109      	bne.n	8008188 <__libc_init_array+0x24>
 8008174:	4d0b      	ldr	r5, [pc, #44]	@ (80081a4 <__libc_init_array+0x40>)
 8008176:	4c0c      	ldr	r4, [pc, #48]	@ (80081a8 <__libc_init_array+0x44>)
 8008178:	f000 f818 	bl	80081ac <_init>
 800817c:	1b64      	subs	r4, r4, r5
 800817e:	10a4      	asrs	r4, r4, #2
 8008180:	2600      	movs	r6, #0
 8008182:	42a6      	cmp	r6, r4
 8008184:	d105      	bne.n	8008192 <__libc_init_array+0x2e>
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	f855 3b04 	ldr.w	r3, [r5], #4
 800818c:	4798      	blx	r3
 800818e:	3601      	adds	r6, #1
 8008190:	e7ee      	b.n	8008170 <__libc_init_array+0xc>
 8008192:	f855 3b04 	ldr.w	r3, [r5], #4
 8008196:	4798      	blx	r3
 8008198:	3601      	adds	r6, #1
 800819a:	e7f2      	b.n	8008182 <__libc_init_array+0x1e>
 800819c:	0800820c 	.word	0x0800820c
 80081a0:	0800820c 	.word	0x0800820c
 80081a4:	0800820c 	.word	0x0800820c
 80081a8:	08008210 	.word	0x08008210

080081ac <_init>:
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ae:	bf00      	nop
 80081b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b2:	bc08      	pop	{r3}
 80081b4:	469e      	mov	lr, r3
 80081b6:	4770      	bx	lr

080081b8 <_fini>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	bf00      	nop
 80081bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081be:	bc08      	pop	{r3}
 80081c0:	469e      	mov	lr, r3
 80081c2:	4770      	bx	lr
